/**
 * @file shims
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */

/// ///////////
// Polyfills

if (typeof window !== 'undefined') {
  (function () {
    'use strict';
    // Console-polyfill. MIT license.
    // https://github.com/paulmillr/console-polyfill
    // Make it safe to do console.log() always.

    window.console = window.console || {};
    var con = window.console;
    var prop, method;
    var empty = {};
    var dummy = function () {};
    var properties = 'memory'.split(',');
    var methods = (
      'assert,clear,count,debug,dir,dirxml,error,exception,group,' +
      'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' +
      'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn'
    ).split(',');

    while ((prop = properties.pop())) { if (!con[prop]) { con[prop] = empty; } }
    while ((method = methods.pop())) { if (!con[method]) { con[method] = dummy; } }
  })();
}

if (typeof window.HTMLCanvasElement !== 'undefined' && !window.HTMLCanvasElement.prototype.toBlob) {
  // http://code.google.com/p/chromium/issues/detail?id=67587#57
  Object.defineProperty(window.HTMLCanvasElement.prototype, 'toBlob', {

    value: function (callback, type, quality) {
      var bin = window.atob(this.toDataURL(type, quality).split(',')[ 1 ]);
      var len = bin.length;
      var len32 = len >> 2;
      var a8 = new Uint8Array(len);
      var a32 = new Uint32Array(a8.buffer, 0, len32);

      for (var i = 0, j = 0; i < len32; i++) {
        a32[i] = (
          bin.charCodeAt(j++) |
          bin.charCodeAt(j++) << 8 |
          bin.charCodeAt(j++) << 16 |
          bin.charCodeAt(j++) << 24
        );
      }

      var tailLength = len & 3;

      while (tailLength--) {
        a8[ j ] = bin.charCodeAt(j++);
      }

      callback(new window.Blob([ a8 ], { 'type': type || 'image/png' }));
    }

  });
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt
Math.cbrt = Math.cbrt || function (x) {
  var y = Math.pow(Math.abs(x), 1 / 3);
  return x < 0 ? -y : y
};

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
if (!Math.sign) {
  Math.sign = function (x) {
    // If x is NaN, the result is NaN.
    // If x is -0, the result is -0.
    // If x is +0, the result is +0.
    // If x is negative and not -0, the result is -1.
    // If x is positive and not +0, the result is +1.
    x = +x; // convert to a number
    if (x === 0 || isNaN(x)) {
      return Number(x)
    }
    return x > 0 ? 1 : -1
  };
}

if (!Number.isInteger) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
  Number.isInteger = function isInteger (nVal) {
    return typeof nVal === 'number' && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal
  };
}

if (!Number.isNaN) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
  Number.isNaN = function isNaN (value) {
    return value !== value  // eslint-disable-line no-self-compare
  };
}

if (!Object.assign) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
  Object.defineProperty(Object, 'assign', {

    enumerable: false,
    configurable: true,
    writable: true,

    value: function (target/*, firstSource */) {
      'use strict';
      var arguments$1 = arguments;

      if (target === undefined || target === null) { throw new TypeError('Cannot convert first argument to object') }

      var to = Object(target);

      var hasPendingException = false;
      var pendingException;

      for (var i = 1; i < arguments.length; i++) {
        var nextSource = arguments$1[i];
        if (nextSource === undefined || nextSource === null) { continue }

        var keysArray = Object.keys(Object(nextSource));
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
          var nextKey = keysArray[nextIndex];
          try {
            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
            if (desc !== undefined && desc.enumerable) { to[nextKey] = nextSource[nextKey]; }
          } catch (e) {
            if (!hasPendingException) {
              hasPendingException = true;
              pendingException = e;
            }
          }
        }

        if (hasPendingException) { throw pendingException }
      }

      return to
    }

  });
}

if (!String.prototype.startsWith) {
  /*! https://mths.be/startswith v0.2.0 by @mathias */

  (function () {
    'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
    var defineProperty = (function () {
            // IE 8 only supports `Object.defineProperty` on DOM elements
      var result;
      try {
        var object = {};
        var $defineProperty = Object.defineProperty;
        result = $defineProperty(object, object, object) && $defineProperty;
      } catch (error) {}  // eslint-disable-line no-empty
      return result
    }());
    var toString = {}.toString;
    var startsWith = function (search) {
      if (this === null) {
        throw TypeError()
      }
      var string = String(this);
      if (search && toString.call(search) === '[object RegExp]') {
        throw TypeError()
      }
      var stringLength = string.length;
      var searchString = String(search);
      var searchLength = searchString.length;
      var position = arguments.length > 1 ? arguments[1] : undefined;
      // `ToInteger`
      var pos = position ? Number(position) : 0;
      if (Number.isNaN(pos)) {
        pos = 0;
      }
      var start = Math.min(Math.max(pos, 0), stringLength);
      // Avoid the `indexOf` call if no match is possible
      if (searchLength + start > stringLength) {
        return false
      }
      var index = -1;
      while (++index < searchLength) {
        if (string.charCodeAt(start + index) !== searchString.charCodeAt(index)) {
          return false
        }
      }
      return true
    };
    if (defineProperty) {
      defineProperty(String.prototype, 'startsWith', {
        'value': startsWith,
        'configurable': true,
        'writable': true
      });
    } else {
      // eslint-disable-next-line no-extend-native
      String.prototype.startsWith = startsWith;
    }
  }());
}

if (!String.prototype.endsWith) {
  // eslint-disable-next-line no-extend-native
  String.prototype.endsWith = function (searchString, position) {
    var subjectString = this.toString();
    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
      position = subjectString.length;
    }
    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position
  };
}

if (!String.prototype.includes) {
  // eslint-disable-next-line no-extend-native
  String.prototype.includes = function (search, start) {
    'use strict';
    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + search.length > this.length) {
      return false
    } else {
      return this.indexOf(search, start) !== -1
    }
  };
}

if (!Array.prototype.includes) {
  // eslint-disable-next-line no-extend-native
  Array.prototype.includes = function (searchElement /*, fromIndex */) {
    'use strict';
    if (this == null) {
      throw new TypeError('Array.prototype.includes called on null or undefined')
    }

    var O = Object(this);
    var len = parseInt(O.length, 10) || 0;
    if (len === 0) {
      return false
    }
    var n = parseInt(arguments[1], 10) || 0;
    var k;
    if (n >= 0) {
      k = n;
    } else {
      k = len + n;
      if (k < 0) { k = 0; }
    }
    var currentElement;
    while (k < len) {
      currentElement = O[k];
      if (searchElement === currentElement ||
          (Number.isNaN(searchElement) && Number.isNaN(currentElement))
      ) {
        return true
      }
      k++;
    }
    return false
  };
}

// Production steps of ECMA-262, Edition 6, 22.1.2.1
// Reference: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from
if (!Array.from) {
  Array.from = (function () {
    var toStr = Object.prototype.toString;
    var isCallable = function (fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]'
    };
    var toInteger = function (value) {
      var number = Number(value);
      if (isNaN(number)) { return 0 }
      if (number === 0 || !isFinite(number)) { return number }
      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number))
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function (value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger)
    };

    // The length property of the from method is 1.
    return function from (arrayLike/*, mapFn, thisArg */) {
            // 1. Let C be the this value.
      var C = this;

      // 2. Let items be ToObject(arrayLike).
      var items = Object(arrayLike);

      // 3. ReturnIfAbrupt(items).
      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined')
      }

      // 4. If mapfn is undefined, then let mapping be false.
      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;
      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function')
        }

        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 2) {
          T = arguments[2];
        }
      }

      // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).
      var len = toLength(items.length);

      // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).
      var A = isCallable(C) ? Object(new C(len)) : new Array(len);

      // 16. Let k be 0.
      var k = 0;
      // 17. Repeat, while k < len… (also steps a - h)
      var kValue;
      while (k < len) {
        kValue = items[k];
        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }
        k += 1;
      }
      // 18. Let putStatus be Put(A, "length", len, true).
      A.length = len;
      // 20. Return A.
      return A
    }
  }());
}

if (typeof window !== 'undefined') {
  (function () {
    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
    // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

    // requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel

    // MIT license

    var lastTime = 0;
    var vendors = [ 'ms', 'moz', 'webkit', 'o' ];

    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
      window.requestAnimationFrame = (
        window[ vendors[ x ] + 'RequestAnimationFrame' ]
      );

      window.cancelAnimationFrame = (
        window[ vendors[ x ] + 'CancelAnimationFrame' ] ||
        window[ vendors[ x ] + 'CancelRequestAnimationFrame' ]
      );
    }

    if (!window.requestAnimationFrame) {
      window.requestAnimationFrame = function (callback/*, element */) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));

        var id = window.setTimeout(function () {
          var time = currTime + timeToCall;
          callback(time);
        }, timeToCall);

        lastTime = currTime + timeToCall;

        return id
      };
    }

    if (!window.cancelAnimationFrame) {
      window.cancelAnimationFrame = function (id) {
        clearTimeout(id);
      };
    }
  }());
}

if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
    // Missing in IE9-11.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

  // eslint-disable-next-line no-extend-native
  Object.defineProperty(Function.prototype, 'name', {

    get: function () {
      return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[ 1 ]
    }

  });
}

if (typeof window !== 'undefined') {
  if (window.performance === undefined) {
    /* global self */
    self.performance = {};
  }

  if (window.performance.now === undefined) {
    (function () {
      var start = Date.now();

      window.performance.now = function () {
        return Date.now() - start
      };
    })();
  }
}

// https://github.com/taylorhakes/promise-polyfill
// MIT License
// Copyright (c) 2014 Taylor Hakes
// Copyright (c) 2014 Forbes Lindesay


// Store setTimeout reference so promise-polyfill will be unaffected by
// other code modifying setTimeout (like sinon.useFakeTimers())
var setTimeoutFunc = setTimeout;

function noop() {
}

// Use polyfill for setImmediate for performance gains
var asap = (typeof setImmediate === 'function' && setImmediate) ||
  function (fn) {
    setTimeoutFunc(fn, 0);
  };

var onUnhandledRejection = function onUnhandledRejection(err) {
  if (typeof console !== 'undefined' && console) {
    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
  }
};

// Polyfill for Function.prototype.bind
function bind(fn, thisArg) {
  return function () {
    fn.apply(thisArg, arguments);
  };
}

function Promise$1(fn) {
  if (typeof this !== 'object') { throw new TypeError('Promises must be constructed via new'); }
  if (typeof fn !== 'function') { throw new TypeError('not a function'); }
  this._state = 0;
  this._handled = false;
  this._value = undefined;
  this._deferreds = [];

  doResolve(fn, this);
}

function handle(self, deferred) {
  while (self._state === 3) {
    self = self._value;
  }
  if (self._state === 0) {
    self._deferreds.push(deferred);
    return;
  }
  self._handled = true;
  asap(function () {
    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
      return;
    }
    var ret;
    try {
      ret = cb(self._value);
    } catch (e) {
      reject(deferred.promise, e);
      return;
    }
    resolve(deferred.promise, ret);
  });
}

function resolve(self, newValue) {
  try {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self) { throw new TypeError('A promise cannot be resolved with itself.'); }
    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = newValue.then;
      if (newValue instanceof Promise$1) {
        self._state = 3;
        self._value = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(bind(then, newValue), self);
        return;
      }
    }
    self._state = 1;
    self._value = newValue;
    finale(self);
  } catch (e) {
    reject(self, e);
  }
}

function reject(self, newValue) {
  self._state = 2;
  self._value = newValue;
  finale(self);
}

function finale(self) {
  if (self._state === 2 && self._deferreds.length === 0) {
    asap(function() {
      if (!self._handled) {
        onUnhandledRejection(self._value);
      }
    });
  }

  for (var i = 0, len = self._deferreds.length; i < len; i++) {
    handle(self, self._deferreds[i]);
  }
  self._deferreds = null;
}

function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, self) {
  var done = false;
  try {
    fn(function (value) {
      if (done) { return; }
      done = true;
      resolve(self, value);
    }, function (reason) {
      if (done) { return; }
      done = true;
      reject(self, reason);
    });
  } catch (ex) {
    if (done) { return; }
    done = true;
    reject(self, ex);
  }
}

Promise$1.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};

Promise$1.prototype.then = function (onFulfilled, onRejected) {
  var prom = new (this.constructor)(noop);

  handle(this, new Handler(onFulfilled, onRejected, prom));
  return prom;
};

Promise$1.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise$1(function (resolve, reject) {
    if (args.length === 0) { return resolve([]); }
    var remaining = args.length;

    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then;
          if (typeof then === 'function') {
            then.call(val, function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex);
      }
    }

    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise$1.resolve = function (value) {
  if (value && typeof value === 'object' && value.constructor === Promise$1) {
    return value;
  }

  return new Promise$1(function (resolve) {
    resolve(value);
  });
};

Promise$1.reject = function (value) {
  return new Promise$1(function (resolve, reject) {
    reject(value);
  });
};

Promise$1.race = function (values) {
  return new Promise$1(function (resolve, reject) {
    for (var i = 0, len = values.length; i < len; i++) {
      values[i].then(resolve, reject);
    }
  });
};

/**
 * Set the immediate function to execute callbacks
 * @param fn {function} Function to execute
 * @private
 */
Promise$1._setImmediateFn = function _setImmediateFn(fn) {
  asap = fn;
};

Promise$1._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
  onUnhandledRejection = fn;
};

// Polyfills

if ( Number.EPSILON === undefined ) {

	Number.EPSILON = Math.pow( 2, - 52 );

}

if ( Number.isInteger === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

	Number.isInteger = function ( value ) {

		return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

	};

}

//

if ( Math.sign === undefined ) {

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

	Math.sign = function ( x ) {

		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

	};

}

if ( Function.prototype.name === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

	Object.defineProperty( Function.prototype, 'name', {

		get: function () {

			return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

		}

	} );

}

if ( Object.assign === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

	( function () {

		Object.assign = function ( target ) {

			'use strict';
			var arguments$1 = arguments;


			if ( target === undefined || target === null ) {

				throw new TypeError( 'Cannot convert undefined or null to object' );

			}

			var output = Object( target );

			for ( var index = 1; index < arguments.length; index ++ ) {

				var source = arguments$1[ index ];

				if ( source !== undefined && source !== null ) {

					for ( var nextKey in source ) {

						if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

							output[ nextKey ] = source[ nextKey ];

						}

					}

				}

			}

			return output;

		};

	} )();

}

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

function EventDispatcher() {}

Object.assign( EventDispatcher.prototype, {

	addEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) { this._listeners = {}; }

		var listeners = this._listeners;

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	},

	hasEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) { return false; }

		var listeners = this._listeners;

		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

	},

	removeEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) { return; }

		var listeners = this._listeners;
		var listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {

			var index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) {

				listenerArray.splice( index, 1 );

			}

		}

	},

	dispatchEvent: function ( event ) {
		var this$1 = this;


		if ( this._listeners === undefined ) { return; }

		var listeners = this._listeners;
		var listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {

			event.target = this;

			var array = listenerArray.slice( 0 );

			for ( var i = 0, l = array.length; i < l; i ++ ) {

				array[ i ].call( this$1, event );

			}

		}

	}

} );

var REVISION = '86';
var CullFaceNone = 0;
var CullFaceBack = 1;
var CullFaceFront = 2;
var FrontFaceDirectionCW = 0;
var PCFShadowMap = 1;
var PCFSoftShadowMap = 2;
var FrontSide = 0;
var BackSide = 1;
var DoubleSide = 2;
var FlatShading = 1;
var SmoothShading = 2;
var NoColors = 0;
var FaceColors = 1;
var VertexColors = 2;
var NoBlending = 0;
var NormalBlending = 1;
var AdditiveBlending = 2;
var SubtractiveBlending = 3;
var MultiplyBlending = 4;
var CustomBlending = 5;
var AddEquation = 100;
var SubtractEquation = 101;
var ReverseSubtractEquation = 102;
var MinEquation = 103;
var MaxEquation = 104;
var ZeroFactor = 200;
var OneFactor = 201;
var SrcColorFactor = 202;
var OneMinusSrcColorFactor = 203;
var SrcAlphaFactor = 204;
var OneMinusSrcAlphaFactor = 205;
var DstAlphaFactor = 206;
var OneMinusDstAlphaFactor = 207;
var DstColorFactor = 208;
var OneMinusDstColorFactor = 209;
var SrcAlphaSaturateFactor = 210;
var NeverDepth = 0;
var AlwaysDepth = 1;
var LessDepth = 2;
var LessEqualDepth = 3;
var EqualDepth = 4;
var GreaterEqualDepth = 5;
var GreaterDepth = 6;
var NotEqualDepth = 7;
var MultiplyOperation = 0;
var MixOperation = 1;
var AddOperation = 2;
var NoToneMapping = 0;
var LinearToneMapping = 1;
var ReinhardToneMapping = 2;
var Uncharted2ToneMapping = 3;
var CineonToneMapping = 4;
var UVMapping = 300;
var CubeReflectionMapping = 301;
var CubeRefractionMapping = 302;
var EquirectangularReflectionMapping = 303;
var EquirectangularRefractionMapping = 304;
var SphericalReflectionMapping = 305;
var CubeUVReflectionMapping = 306;
var CubeUVRefractionMapping = 307;
var RepeatWrapping = 1000;
var ClampToEdgeWrapping = 1001;
var MirroredRepeatWrapping = 1002;
var NearestFilter = 1003;
var NearestMipMapNearestFilter = 1004;
var NearestMipMapLinearFilter = 1005;
var LinearFilter = 1006;
var LinearMipMapNearestFilter = 1007;
var LinearMipMapLinearFilter = 1008;
var UnsignedByteType = 1009;
var ByteType = 1010;
var ShortType = 1011;
var UnsignedShortType = 1012;
var IntType = 1013;
var UnsignedIntType = 1014;
var FloatType = 1015;
var HalfFloatType = 1016;
var UnsignedShort4444Type = 1017;
var UnsignedShort5551Type = 1018;
var UnsignedShort565Type = 1019;
var UnsignedInt248Type = 1020;
var AlphaFormat = 1021;
var RGBFormat = 1022;
var RGBAFormat = 1023;
var LuminanceFormat = 1024;
var LuminanceAlphaFormat = 1025;
var DepthFormat = 1026;
var DepthStencilFormat = 1027;
var RGB_S3TC_DXT1_Format = 2001;
var RGBA_S3TC_DXT1_Format = 2002;
var RGBA_S3TC_DXT3_Format = 2003;
var RGBA_S3TC_DXT5_Format = 2004;
var RGB_PVRTC_4BPPV1_Format = 2100;
var RGB_PVRTC_2BPPV1_Format = 2101;
var RGBA_PVRTC_4BPPV1_Format = 2102;
var RGBA_PVRTC_2BPPV1_Format = 2103;
var RGB_ETC1_Format = 2151;
var LoopOnce = 2200;
var LoopRepeat = 2201;
var LoopPingPong = 2202;
var InterpolateDiscrete = 2300;
var InterpolateLinear = 2301;
var InterpolateSmooth = 2302;
var ZeroCurvatureEnding = 2400;
var ZeroSlopeEnding = 2401;
var WrapAroundEnding = 2402;
var TrianglesDrawMode = 0;
var TriangleStripDrawMode = 1;
var TriangleFanDrawMode = 2;
var LinearEncoding = 3000;
var sRGBEncoding = 3001;
var GammaEncoding = 3007;
var RGBEEncoding = 3002;
var RGBM7Encoding = 3004;
var RGBM16Encoding = 3005;
var RGBDEncoding = 3006;
var BasicDepthPacking = 3200;
var RGBADepthPacking = 3201;

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

var _Math = {

	DEG2RAD: Math.PI / 180,
	RAD2DEG: 180 / Math.PI,

	generateUUID: function () {

		// http://www.broofa.com/Tools/Math.uuid.htm

		var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
		var uuid = new Array( 36 );
		var rnd = 0, r;

		return function generateUUID() {

			for ( var i = 0; i < 36; i ++ ) {

				if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

					uuid[ i ] = '-';

				} else if ( i === 14 ) {

					uuid[ i ] = '4';

				} else {

					if ( rnd <= 0x02 ) { rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0; }
					r = rnd & 0xf;
					rnd = rnd >> 4;
					uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

				}

			}

			return uuid.join( '' );

		};

	}(),

	clamp: function ( value, min, max ) {

		return Math.max( min, Math.min( max, value ) );

	},

	// compute euclidian modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation

	euclideanModulo: function ( n, m ) {

		return ( ( n % m ) + m ) % m;

	},

	// Linear mapping from range <a1, a2> to range <b1, b2>

	mapLinear: function ( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	},

	// https://en.wikipedia.org/wiki/Linear_interpolation

	lerp: function ( x, y, t ) {

		return ( 1 - t ) * x + t * y;

	},

	// http://en.wikipedia.org/wiki/Smoothstep

	smoothstep: function ( x, min, max ) {

		if ( x <= min ) { return 0; }
		if ( x >= max ) { return 1; }

		x = ( x - min ) / ( max - min );

		return x * x * ( 3 - 2 * x );

	},

	smootherstep: function ( x, min, max ) {

		if ( x <= min ) { return 0; }
		if ( x >= max ) { return 1; }

		x = ( x - min ) / ( max - min );

		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

	},

	// Random integer from <low, high> interval

	randInt: function ( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	},

	// Random float from <low, high> interval

	randFloat: function ( low, high ) {

		return low + Math.random() * ( high - low );

	},

	// Random float from <-range/2, range/2> interval

	randFloatSpread: function ( range ) {

		return range * ( 0.5 - Math.random() );

	},

	degToRad: function ( degrees ) {

		return degrees * _Math.DEG2RAD;

	},

	radToDeg: function ( radians ) {

		return radians * _Math.RAD2DEG;

	},

	isPowerOfTwo: function ( value ) {

		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	},

	nearestPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

	},

	nextPowerOfTwo: function ( value ) {

		value --;
		value |= value >> 1;
		value |= value >> 2;
		value |= value >> 4;
		value |= value >> 8;
		value |= value >> 16;
		value ++;

		return value;

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

function Vector2( x, y ) {

	this.x = x || 0;
	this.y = y || 0;

}

Object.defineProperties( Vector2.prototype, {

	"width" : {

		get: function () {

			return this.x;

		},

		set: function ( value ) {

			this.x = value;

		}

	},

	"height" : {

		get: function () {

			return this.y;

		},

		set: function ( value ) {

			this.y = value;

		}

	}

} );

Object.assign( Vector2.prototype, {

	isVector2: true,

	set: function ( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	},

	multiply: function ( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector2();
		var max = new Vector2();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal );
			max.set( maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	},

	lengthManhattan: function() {

		return Math.abs( this.x ) + Math.abs( this.y );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	angle: function () {

		// computes the angle in radians with respect to the positive x-axis

		var angle = Math.atan2( this.y, this.x );

		if ( angle < 0 ) { angle += 2 * Math.PI; }

		return angle;

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	},

	distanceToManhattan: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) { offset = 0; }

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) { array = []; }
		if ( offset === undefined ) { offset = 0; }

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	},

	rotateAround: function ( center, angle ) {

		var c = Math.cos( angle ), s = Math.sin( angle );

		var x = this.x - center.x;
		var y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

var textureId = 0;

function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	Object.defineProperty( this, 'id', { value: textureId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';

	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
	this.mipmaps = [];

	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
	this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

	this.format = format !== undefined ? format : RGBAFormat;
	this.type = type !== undefined ? type : UnsignedByteType;

	this.offset = new Vector2( 0, 0 );
	this.repeat = new Vector2( 1, 1 );

	this.generateMipmaps = true;
	this.premultiplyAlpha = false;
	this.flipY = true;
	this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

	// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
	//
	// Also changing the encoding after already used by a Material will not automatically make the Material
	// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
	this.encoding = encoding !== undefined ? encoding : LinearEncoding;

	this.version = 0;
	this.onUpdate = null;

}

Texture.DEFAULT_IMAGE = undefined;
Texture.DEFAULT_MAPPING = UVMapping;

Object.defineProperty( Texture.prototype, "needsUpdate", {

	set: function ( value ) {

		if ( value === true ) { this.version ++; }

	}

} );

Object.assign( Texture.prototype, EventDispatcher.prototype, {

	constructor: Texture,

	isTexture: true,

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.name = source.name;

		this.image = source.image;
		this.mipmaps = source.mipmaps.slice( 0 );

		this.mapping = source.mapping;

		this.wrapS = source.wrapS;
		this.wrapT = source.wrapT;

		this.magFilter = source.magFilter;
		this.minFilter = source.minFilter;

		this.anisotropy = source.anisotropy;

		this.format = source.format;
		this.type = source.type;

		this.offset.copy( source.offset );
		this.repeat.copy( source.repeat );

		this.generateMipmaps = source.generateMipmaps;
		this.premultiplyAlpha = source.premultiplyAlpha;
		this.flipY = source.flipY;
		this.unpackAlignment = source.unpackAlignment;
		this.encoding = source.encoding;

		return this;

	},

	toJSON: function ( meta ) {

		if ( meta.textures[ this.uuid ] !== undefined ) {

			return meta.textures[ this.uuid ];

		}

		function getDataURL( image ) {

			var canvas;

			if ( image.toDataURL !== undefined ) {

				canvas = image;

			} else {

				canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = image.width;
				canvas.height = image.height;

				canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

			}

			if ( canvas.width > 2048 || canvas.height > 2048 ) {

				return canvas.toDataURL( 'image/jpeg', 0.6 );

			} else {

				return canvas.toDataURL( 'image/png' );

			}

		}

		var output = {
			metadata: {
				version: 4.5,
				type: 'Texture',
				generator: 'Texture.toJSON'
			},

			uuid: this.uuid,
			name: this.name,

			mapping: this.mapping,

			repeat: [ this.repeat.x, this.repeat.y ],
			offset: [ this.offset.x, this.offset.y ],
			wrap: [ this.wrapS, this.wrapT ],

			minFilter: this.minFilter,
			magFilter: this.magFilter,
			anisotropy: this.anisotropy,

			flipY: this.flipY
		};

		if ( this.image !== undefined ) {

			// TODO: Move to THREE.Image

			var image = this.image;

			if ( image.uuid === undefined ) {

				image.uuid = _Math.generateUUID(); // UGH

			}

			if ( meta.images[ image.uuid ] === undefined ) {

				meta.images[ image.uuid ] = {
					uuid: image.uuid,
					url: getDataURL( image )
				};

			}

			output.image = image.uuid;

		}

		meta.textures[ this.uuid ] = output;

		return output;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	},

	transformUv: function ( uv ) {

		if ( this.mapping !== UVMapping ) { return; }

		uv.multiply( this.repeat );
		uv.add( this.offset );

		if ( uv.x < 0 || uv.x > 1 ) {

			switch ( this.wrapS ) {

				case RepeatWrapping:

					uv.x = uv.x - Math.floor( uv.x );
					break;

				case ClampToEdgeWrapping:

					uv.x = uv.x < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

						uv.x = Math.ceil( uv.x ) - uv.x;

					} else {

						uv.x = uv.x - Math.floor( uv.x );

					}
					break;

			}

		}

		if ( uv.y < 0 || uv.y > 1 ) {

			switch ( this.wrapT ) {

				case RepeatWrapping:

					uv.y = uv.y - Math.floor( uv.y );
					break;

				case ClampToEdgeWrapping:

					uv.y = uv.y < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

						uv.y = Math.ceil( uv.y ) - uv.y;

					} else {

						uv.y = uv.y - Math.floor( uv.y );

					}
					break;

			}

		}

		if ( this.flipY ) {

			uv.y = 1 - uv.y;

		}

	}

} );

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector4( x, y, z, w ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;
	this.w = ( w !== undefined ) ? w : 1;

}

Object.assign( Vector4.prototype, {

	isVector4: true,

	set: function ( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;
		this.w = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setW: function ( w ) {

		this.w = w;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			case 3: this.w = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			case 3: return this.w;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z, this.w );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = ( v.w !== undefined ) ? v.w : 1;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		this.w += v.w * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;
		this.w -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		this.w *= scalar;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z, w = this.w;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	setAxisAngleFromQuaternion: function ( q ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos( q.w );

		var s = Math.sqrt( 1 - q.w * q.w );

		if ( s < 0.0001 ) {

			 this.x = 1;
			 this.y = 0;
			 this.z = 0;

		} else {

			 this.x = q.x / s;
			 this.y = q.y / s;
			 this.z = q.z / s;

		}

		return this;

	},

	setAxisAngleFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var angle, x, y, z,		// variables for result
			epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
		     ( Math.abs( m13 - m31 ) < epsilon ) &&
		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

				// this singularity is identity matrix so angle = 0

				this.set( 1, 0, 0, 0 );

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			var xx = ( m11 + 1 ) / 2;
			var yy = ( m22 + 1 ) / 2;
			var zz = ( m33 + 1 ) / 2;
			var xy = ( m12 + m21 ) / 4;
			var xz = ( m13 + m31 ) / 4;
			var yz = ( m23 + m32 ) / 4;

			if ( ( xx > yy ) && ( xx > zz ) ) {

				// m11 is the largest diagonal term

				if ( xx < epsilon ) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt( xx );
					y = xy / x;
					z = xz / x;

				}

			} else if ( yy > zz ) {

				// m22 is the largest diagonal term

				if ( yy < epsilon ) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt( yy );
					x = xy / y;
					z = yz / y;

				}

			} else {

				// m33 is the largest diagonal term so base result on this

				if ( zz < epsilon ) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt( zz );
					x = xz / z;
					y = yz / z;

				}

			}

			this.set( x, y, z, angle );

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
		                   ( m13 - m31 ) * ( m13 - m31 ) +
		                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

		if ( Math.abs( s ) < 0.001 ) { s = 1; }

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = ( m32 - m23 ) / s;
		this.y = ( m13 - m31 ) / s;
		this.z = ( m21 - m12 ) / s;
		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

		return this;

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );
		this.w = Math.min( this.w, v.w );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );
		this.w = Math.max( this.w, v.w );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

		return this;

	},

	clampScalar: function () {

		var min, max;

		return function clampScalar( minVal, maxVal ) {

			if ( min === undefined ) {

				min = new Vector4();
				max = new Vector4();

			}

			min.set( minVal, minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );
		this.w = Math.floor( this.w );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );
		this.w = Math.ceil( this.w );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );
		this.w = Math.round( this.w );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;
		this.w = - this.w;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;
		this.w += ( v.w - this.w ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) { offset = 0; }

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];
		this.w = array[ offset + 3 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) { array = []; }
		if ( offset === undefined ) { offset = 0; }

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;
		array[ offset + 3 ] = this.w;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );
		this.w = attribute.getW( index );

		return this;

	}

} );

/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 * @author Marius Kintel / https://github.com/kintel
 */

/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/
function WebGLRenderTarget( width, height, options ) {

	this.uuid = _Math.generateUUID();

	this.width = width;
	this.height = height;

	this.scissor = new Vector4( 0, 0, width, height );
	this.scissorTest = false;

	this.viewport = new Vector4( 0, 0, width, height );

	options = options || {};

	if ( options.minFilter === undefined ) { options.minFilter = LinearFilter; }

	this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

}

Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {

	isWebGLRenderTarget: true,

	setSize: function ( width, height ) {

		if ( this.width !== width || this.height !== height ) {

			this.width = width;
			this.height = height;

			this.dispose();

		}

		this.viewport.set( 0, 0, width, height );
		this.scissor.set( 0, 0, width, height );

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.width = source.width;
		this.height = source.height;

		this.viewport.copy( source.viewport );

		this.texture = source.texture.clone();

		this.depthBuffer = source.depthBuffer;
		this.stencilBuffer = source.stencilBuffer;
		this.depthTexture = source.depthTexture;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Quaternion( x, y, z, w ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._w = ( w !== undefined ) ? w : 1;

}

Object.assign( Quaternion, {

	slerp: function ( qa, qb, qm, t ) {

		return qm.copy( qa ).slerp( qb, t );

	},

	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		var x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ],

			x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			var s = 1 - t,

				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				var sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			var tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

} );

Object.defineProperties( Quaternion.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this.onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this.onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this.onChangeCallback();

		}

	},

	w: {

		get: function () {

			return this._w;

		},

		set: function ( value ) {

			this._w = value;
			this.onChangeCallback();

		}

	}

} );

Object.assign( Quaternion.prototype, {

	set: function ( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this.onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._w );

	},

	copy: function ( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this.onChangeCallback();

		return this;

	},

	setFromEuler: function ( euler, update ) {

		if ( ! ( euler && euler.isEuler ) ) {

			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

		}

		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		var cos = Math.cos;
		var sin = Math.sin;

		var c1 = cos( x / 2 );
		var c2 = cos( y / 2 );
		var c3 = cos( z / 2 );

		var s1 = sin( x / 2 );
		var s2 = sin( y / 2 );
		var s3 = sin( z / 2 );

		if ( order === 'XYZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'YXZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'ZXY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'ZYX' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'YZX' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'XZY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		}

		if ( update !== false ) { this.onChangeCallback(); }

		return this;

	},

	setFromAxisAngle: function ( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		var halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33,
			s;

		if ( trace > 0 ) {

			s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this.onChangeCallback();

		return this;

	},

	setFromUnitVectors: function () {

		// assumes direction vectors vFrom and vTo are normalized

		var v1 = new Vector3();
		var r;

		var EPS = 0.000001;

		return function setFromUnitVectors( vFrom, vTo ) {

			if ( v1 === undefined ) { v1 = new Vector3(); }

			r = vFrom.dot( vTo ) + 1;

			if ( r < EPS ) {

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					v1.set( - vFrom.y, vFrom.x, 0 );

				} else {

					v1.set( 0, - vFrom.z, vFrom.y );

				}

			} else {

				v1.crossVectors( vFrom, vTo );

			}

			this._x = v1.x;
			this._y = v1.y;
			this._z = v1.z;
			this._w = r;

			return this.normalize();

		};

	}(),

	inverse: function () {

		return this.conjugate().normalize();

	},

	conjugate: function () {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this.onChangeCallback();

		return this;

	},

	dot: function ( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	},

	lengthSq: function () {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	},

	length: function () {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	},

	normalize: function () {

		var l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this.onChangeCallback();

		return this;

	},

	multiply: function ( q, p ) {

		if ( p !== undefined ) {

			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
			return this.multiplyQuaternions( q, p );

		}

		return this.multiplyQuaternions( this, q );

	},

	premultiply: function ( q ) {

		return this.multiplyQuaternions( q, this );

	},

	multiplyQuaternions: function ( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this.onChangeCallback();

		return this;

	},

	slerp: function ( qb, t ) {

		if ( t === 0 ) { return this; }
		if ( t === 1 ) { return this.copy( qb ); }

		var x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

		if ( Math.abs( sinHalfTheta ) < 0.001 ) {

			this._w = 0.5 * ( w + this._w );
			this._x = 0.5 * ( x + this._x );
			this._y = 0.5 * ( y + this._y );
			this._z = 0.5 * ( z + this._z );

			return this;

		}

		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this.onChangeCallback();

		return this;

	},

	equals: function ( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) { offset = 0; }

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) { array = []; }
		if ( offset === undefined ) { offset = 0; }

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector3( x, y, z ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;

}

Object.assign( Vector3.prototype, {

	isVector3: true,

	set: function ( x, y, z ) {

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	},

	multiply: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
			return this.multiplyVectors( v, w );

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	},

	multiplyVectors: function ( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	},

	applyEuler: function () {

		var quaternion = new Quaternion();

		return function applyEuler( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			return this.applyQuaternion( quaternion.setFromEuler( euler ) );

		};

	}(),

	applyAxisAngle: function () {

		var quaternion = new Quaternion();

		return function applyAxisAngle( axis, angle ) {

			return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

		};

	}(),

	applyMatrix3: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	},

	applyQuaternion: function ( q ) {

		var x = this.x, y = this.y, z = this.z;
		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		var ix =  qw * x + qy * z - qz * y;
		var iy =  qw * y + qz * x - qx * z;
		var iz =  qw * z + qx * y - qy * x;
		var iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	},

	project: function () {

		var matrix = new Matrix4();

		return function project( camera ) {

			matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
			return this.applyMatrix4( matrix );

		};

	}(),

	unproject: function () {

		var matrix = new Matrix4();

		return function unproject( camera ) {

			matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
			return this.applyMatrix4( matrix );

		};

	}(),

	transformDirection: function ( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector3();
		var max = new Vector3();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	},

	// TODO lengthSquared?

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	cross: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
			return this.crossVectors( v, w );

		}

		var x = this.x, y = this.y, z = this.z;

		this.x = y * v.z - z * v.y;
		this.y = z * v.x - x * v.z;
		this.z = x * v.y - y * v.x;

		return this;

	},

	crossVectors: function ( a, b ) {

		var ax = a.x, ay = a.y, az = a.z;
		var bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	},

	projectOnVector: function ( vector ) {

		var scalar = vector.dot( this ) / vector.lengthSq();

		return this.copy( vector ).multiplyScalar( scalar );

	},

	projectOnPlane: function () {

		var v1 = new Vector3();

		return function projectOnPlane( planeNormal ) {

			v1.copy( this ).projectOnVector( planeNormal );

			return this.sub( v1 );

		};

	}(),

	reflect: function () {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		var v1 = new Vector3();

		return function reflect( normal ) {

			return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		};

	}(),

	angleTo: function ( v ) {

		var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

		// clamp, to handle numerical problems

		return Math.acos( _Math.clamp( theta, - 1, 1 ) );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	},

	distanceToManhattan: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	},

	setFromSpherical: function ( s ) {

		var sinPhiRadius = Math.sin( s.phi ) * s.radius;

		this.x = sinPhiRadius * Math.sin( s.theta );
		this.y = Math.cos( s.phi ) * s.radius;
		this.z = sinPhiRadius * Math.cos( s.theta );

		return this;

	},

	setFromCylindrical: function ( c ) {

		this.x = c.radius * Math.sin( c.theta );
		this.y = c.y;
		this.z = c.radius * Math.cos( c.theta );

		return this;

	},

	setFromMatrixPosition: function ( m ) {

		var e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	},

	setFromMatrixScale: function ( m ) {

		var sx = this.setFromMatrixColumn( m, 0 ).length();
		var sy = this.setFromMatrixColumn( m, 1 ).length();
		var sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	},

	setFromMatrixColumn: function ( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) { offset = 0; }

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) { array = []; }
		if ( offset === undefined ) { offset = 0; }

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Matrix4() {

	this.elements = [

		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix4.prototype, {

	isMatrix4: true,

	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new Matrix4().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	},

	copyPosition: function ( m ) {

		var te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	},

	extractBasis: function ( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	},

	makeBasis: function ( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0,       0,       0,       1
		);

		return this;

	},

	extractRotation: function () {

		var v1 = new Vector3();

		return function extractRotation( m ) {

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
			var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
			var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;

			return this;

		};

	}(),

	makeRotationFromEuler: function ( euler ) {

		if ( ! ( euler && euler.isEuler ) ) {

			console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

		}

		var te = this.elements;

		var x = euler.x, y = euler.y, z = euler.z;
		var a = Math.cos( x ), b = Math.sin( x );
		var c = Math.cos( y ), d = Math.sin( y );
		var e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	makeRotationFromQuaternion: function ( q ) {

		var te = this.elements;

		var x = q._x, y = q._y, z = q._z, w = q._w;
		var x2 = x + x, y2 = y + y, z2 = z + z;
		var xx = x * x2, xy = x * y2, xz = x * z2;
		var yy = y * y2, yz = y * z2, zz = z * z2;
		var wx = w * x2, wy = w * y2, wz = w * z2;

		te[ 0 ] = 1 - ( yy + zz );
		te[ 4 ] = xy - wz;
		te[ 8 ] = xz + wy;

		te[ 1 ] = xy + wz;
		te[ 5 ] = 1 - ( xx + zz );
		te[ 9 ] = yz - wx;

		te[ 2 ] = xz - wy;
		te[ 6 ] = yz + wx;
		te[ 10 ] = 1 - ( xx + yy );

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	lookAt: function () {

		var x = new Vector3();
		var y = new Vector3();
		var z = new Vector3();

		return function lookAt( eye, target, up ) {

			var te = this.elements;

			z.subVectors( eye, target );

			if ( z.lengthSq() === 0 ) {

				// eye and target are in the same position

				z.z = 1;

			}

			z.normalize();
			x.crossVectors( up, z );

			if ( x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					z.x += 0.0001;

				} else {

					z.z += 0.0001;

				}

				z.normalize();
				x.crossVectors( up, z );

			}

			x.normalize();
			y.crossVectors( z, x );

			te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
			te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
			te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

			return this;

		};

	}(),

	multiply: function ( m, n ) {

		if ( n !== undefined ) {

			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
			return this.multiplyMatrices( m, n );

		}

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	},

	applyToBufferAttribute: function () {

		var v1 = new Vector3();

		return function applyToBufferAttribute( attribute ) {
			var this$1 = this;


			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				v1.x = attribute.getX( i );
				v1.y = attribute.getY( i );
				v1.z = attribute.getZ( i );

				v1.applyMatrix4( this$1 );

				attribute.setXYZ( i, v1.x, v1.y, v1.z );

			}

			return attribute;

		};

	}(),

	determinant: function () {

		var te = this.elements;

		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	},

	transpose: function () {

		var te = this.elements;
		var tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	},

	setPosition: function ( v ) {

		var te = this.elements;

		te[ 12 ] = v.x;
		te[ 13 ] = v.y;
		te[ 14 ] = v.z;

		return this;

	},

	getInverse: function ( m, throwOnDegenerate ) {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		var te = this.elements,
			me = m.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) {

			var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	},

	scale: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	},

	getMaxScaleOnAxis: function () {

		var te = this.elements;

		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	},

	makeTranslation: function ( x, y, z ) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationX: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0,  0, 0,
			0, c, - s, 0,
			0, s,  c, 0,
			0, 0,  0, 1

		);

		return this;

	},

	makeRotationY: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	},

	makeRotationZ: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s,  c, 0, 0,
			0,  0, 1, 0,
			0,  0, 0, 1

		);

		return this;

	},

	makeRotationAxis: function ( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var t = 1 - c;
		var x = axis.x, y = axis.y, z = axis.z;
		var tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		 return this;

	},

	makeScale: function ( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeShear: function ( x, y, z ) {

		this.set(

			1, y, z, 0,
			x, 1, z, 0,
			x, y, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	compose: function ( position, quaternion, scale ) {

		this.makeRotationFromQuaternion( quaternion );
		this.scale( scale );
		this.setPosition( position );

		return this;

	},

	decompose: function () {

		var vector = new Vector3();
		var matrix = new Matrix4();

		return function decompose( position, quaternion, scale ) {

			var te = this.elements;

			var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if ( det < 0 ) { sx = - sx; }

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			matrix.copy( this );

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			matrix.elements[ 0 ] *= invSX;
			matrix.elements[ 1 ] *= invSX;
			matrix.elements[ 2 ] *= invSX;

			matrix.elements[ 4 ] *= invSY;
			matrix.elements[ 5 ] *= invSY;
			matrix.elements[ 6 ] *= invSY;

			matrix.elements[ 8 ] *= invSZ;
			matrix.elements[ 9 ] *= invSZ;
			matrix.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( matrix );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		};

	}(),

	makePerspective: function ( left, right, top, bottom, near, far ) {

		if ( far === undefined ) {

			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

		}

		var te = this.elements;
		var x = 2 * near / ( right - left );
		var y = 2 * near / ( top - bottom );

		var a = ( right + left ) / ( right - left );
		var b = ( top + bottom ) / ( top - bottom );
		var c = - ( far + near ) / ( far - near );
		var d = - 2 * far * near / ( far - near );

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	},

	makeOrthographic: function ( left, right, top, bottom, near, far ) {

		var te = this.elements;
		var w = 1.0 / ( right - left );
		var h = 1.0 / ( top - bottom );
		var p = 1.0 / ( far - near );

		var x = ( right + left ) * w;
		var y = ( top + bottom ) * h;
		var z = ( far + near ) * p;

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) { return false; }

		}

		return true;

	},

	fromArray: function ( array, offset ) {
		var this$1 = this;


		if ( offset === undefined ) { offset = 0; }

		for ( var i = 0; i < 16; i ++ ) {

			this$1.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) { array = []; }
		if ( offset === undefined ) { offset = 0; }

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.image = { data: data, width: width, height: height };

	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

	this.generateMipmaps = false;
	this.flipY = false;
	this.unpackAlignment = 1;

}

DataTexture.prototype = Object.create( Texture.prototype );
DataTexture.prototype.constructor = DataTexture;

DataTexture.prototype.isDataTexture = true;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	images = images !== undefined ? images : [];
	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.flipY = false;

}

CubeTexture.prototype = Object.create( Texture.prototype );
CubeTexture.prototype.constructor = CubeTexture;

CubeTexture.prototype.isCubeTexture = true;

Object.defineProperty( CubeTexture.prototype, 'images', {

	get: function () {

		return this.image;

	},

	set: function ( value ) {

		this.image = value;

	}

} );

/**
 * @author tschw
 *
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [renderer] )
 *
 * 		uploads a uniform value(s)
 *  	the 'renderer' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (renderer factorizations):
 *
 * .upload( gl, seq, values, renderer )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (renderer factorizations):
 *
 * .setValue( gl, name, value )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .set( gl, obj, prop )
 *
 * 		sets uniform from object and property with same name than uniform
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */

var emptyTexture = new Texture();
var emptyCubeTexture = new CubeTexture();

// --- Base for inner nodes (including the root) ---

function UniformContainer() {

	this.seq = [];
	this.map = {};

}

// --- Utilities ---

// Array Caches (provide typed arrays for temporary by size)

var arrayCacheF32 = [];
var arrayCacheI32 = [];

// Float32Array caches used for uploading Matrix uniforms

var mat4array = new Float32Array( 16 );
var mat3array = new Float32Array( 9 );

// Flattening for arrays of vectors and matrices

function flatten( array, nBlocks, blockSize ) {

	var firstElem = array[ 0 ];

	if ( firstElem <= 0 || firstElem > 0 ) { return array; }
	// unoptimized: ! isNaN( firstElem )
	// see http://jacksondunstan.com/articles/983

	var n = nBlocks * blockSize,
		r = arrayCacheF32[ n ];

	if ( r === undefined ) {

		r = new Float32Array( n );
		arrayCacheF32[ n ] = r;

	}

	if ( nBlocks !== 0 ) {

		firstElem.toArray( r, 0 );

		for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

			offset += blockSize;
			array[ i ].toArray( r, offset );

		}

	}

	return r;

}

// Texture unit allocation

function allocTexUnits( renderer, n ) {

	var r = arrayCacheI32[ n ];

	if ( r === undefined ) {

		r = new Int32Array( n );
		arrayCacheI32[ n ] = r;

	}

	for ( var i = 0; i !== n; ++ i )
		{ r[ i ] = renderer.allocTextureUnit(); }

	return r;

}

// --- Setters ---

// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.

// Single scalar

function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }
function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }

// Single float vector (from flat array or THREE.VectorN)

function setValue2fv( gl, v ) {

	if ( v.x === undefined ) { gl.uniform2fv( this.addr, v ); }
	else { gl.uniform2f( this.addr, v.x, v.y ); }

}

function setValue3fv( gl, v ) {

	if ( v.x !== undefined )
		{ gl.uniform3f( this.addr, v.x, v.y, v.z ); }
	else if ( v.r !== undefined )
		{ gl.uniform3f( this.addr, v.r, v.g, v.b ); }
	else
		{ gl.uniform3fv( this.addr, v ); }

}

function setValue4fv( gl, v ) {

	if ( v.x === undefined ) { gl.uniform4fv( this.addr, v ); }
	else { gl.uniform4f( this.addr, v.x, v.y, v.z, v.w ); }

}

// Single matrix (from flat array or MatrixN)

function setValue2fm( gl, v ) {

	gl.uniformMatrix2fv( this.addr, false, v.elements || v );

}

function setValue3fm( gl, v ) {

	if ( v.elements === undefined ) {

		gl.uniformMatrix3fv( this.addr, false, v );

	} else {

		mat3array.set( v.elements );
		gl.uniformMatrix3fv( this.addr, false, mat3array );

	}

}

function setValue4fm( gl, v ) {

	if ( v.elements === undefined ) {

		gl.uniformMatrix4fv( this.addr, false, v );

	} else {

		mat4array.set( v.elements );
		gl.uniformMatrix4fv( this.addr, false, mat4array );

	}

}

// Single texture (2D / Cube)

function setValueT1( gl, v, renderer ) {

	var unit = renderer.allocTextureUnit();
	gl.uniform1i( this.addr, unit );
	renderer.setTexture2D( v || emptyTexture, unit );

}

function setValueT6( gl, v, renderer ) {

	var unit = renderer.allocTextureUnit();
	gl.uniform1i( this.addr, unit );
	renderer.setTextureCube( v || emptyCubeTexture, unit );

}

// Integer / Boolean vectors or arrays thereof (always flat arrays)

function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }
function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }
function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }

// Helper to pick the right setter for the singular case

function getSingularSetter( type ) {

	switch ( type ) {

		case 0x1406: return setValue1f; // FLOAT
		case 0x8b50: return setValue2fv; // _VEC2
		case 0x8b51: return setValue3fv; // _VEC3
		case 0x8b52: return setValue4fv; // _VEC4

		case 0x8b5a: return setValue2fm; // _MAT2
		case 0x8b5b: return setValue3fm; // _MAT3
		case 0x8b5c: return setValue4fm; // _MAT4

		case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
		case 0x8b60: return setValueT6; // SAMPLER_CUBE

		case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	}

}

// Array of scalars

function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }
function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }

// Array of vectors (flat or from THREE classes)

function setValueV2a( gl, v ) {

	gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

}

function setValueV3a( gl, v ) {

	gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

}

function setValueV4a( gl, v ) {

	gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

}

// Array of matrices (flat or from THREE clases)

function setValueM2a( gl, v ) {

	gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

}

function setValueM3a( gl, v ) {

	gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

}

function setValueM4a( gl, v ) {

	gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

}

// Array of textures (2D / Cube)

function setValueT1a( gl, v, renderer ) {

	var n = v.length,
		units = allocTexUnits( renderer, n );

	gl.uniform1iv( this.addr, units );

	for ( var i = 0; i !== n; ++ i ) {

		renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

	}

}

function setValueT6a( gl, v, renderer ) {

	var n = v.length,
		units = allocTexUnits( renderer, n );

	gl.uniform1iv( this.addr, units );

	for ( var i = 0; i !== n; ++ i ) {

		renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

	}

}

// Helper to pick the right setter for a pure (bottom-level) array

function getPureArraySetter( type ) {

	switch ( type ) {

		case 0x1406: return setValue1fv; // FLOAT
		case 0x8b50: return setValueV2a; // _VEC2
		case 0x8b51: return setValueV3a; // _VEC3
		case 0x8b52: return setValueV4a; // _VEC4

		case 0x8b5a: return setValueM2a; // _MAT2
		case 0x8b5b: return setValueM3a; // _MAT3
		case 0x8b5c: return setValueM4a; // _MAT4

		case 0x8b5e: return setValueT1a; // SAMPLER_2D
		case 0x8b60: return setValueT6a; // SAMPLER_CUBE

		case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	}

}

// --- Uniform Classes ---

function SingleUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.setValue = getSingularSetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

function PureArrayUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.size = activeInfo.size;
	this.setValue = getPureArraySetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

function StructuredUniform( id ) {

	this.id = id;

	UniformContainer.call( this ); // mix-in

}

StructuredUniform.prototype.setValue = function ( gl, value ) {

	// Note: Don't need an extra 'renderer' parameter, since samplers
	// are not allowed in structured uniforms.

	var seq = this.seq;

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ];
		u.setValue( gl, value[ u.id ] );

	}

};

// --- Top-level ---

// Parser - builds up the property tree from the path strings

var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.

function addUniform( container, uniformObject ) {

	container.seq.push( uniformObject );
	container.map[ uniformObject.id ] = uniformObject;

}

function parseUniform( activeInfo, addr, container ) {

	var path = activeInfo.name,
		pathLength = path.length;

	// reset RegExp object, because of the early exit of a previous run
	RePathPart.lastIndex = 0;

	for ( ; ; ) {

		var match = RePathPart.exec( path ),
			matchEnd = RePathPart.lastIndex,

			id = match[ 1 ],
			idIsIndex = match[ 2 ] === ']',
			subscript = match[ 3 ];

		if ( idIsIndex ) { id = id | 0; } // convert to integer

		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

			// bare name or "pure" bottom-level array "[0]" suffix

			addUniform( container, subscript === undefined ?
					new SingleUniform( id, activeInfo, addr ) :
					new PureArrayUniform( id, activeInfo, addr ) );

			break;

		} else {

			// step into inner node / create it in case it doesn't exist

			var map = container.map, next = map[ id ];

			if ( next === undefined ) {

				next = new StructuredUniform( id );
				addUniform( container, next );

			}

			container = next;

		}

	}

}

// Root Container

function WebGLUniforms( gl, program, renderer ) {
	var this$1 = this;


	UniformContainer.call( this );

	this.renderer = renderer;

	var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

	for ( var i = 0; i < n; ++ i ) {

		var info = gl.getActiveUniform( program, i ),
			path = info.name,
			addr = gl.getUniformLocation( program, path );

		parseUniform( info, addr, this$1 );

	}

}

WebGLUniforms.prototype.setValue = function ( gl, name, value ) {

	var u = this.map[ name ];

	if ( u !== undefined ) { u.setValue( gl, value, this.renderer ); }

};

WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

	var v = object[ name ];

	if ( v !== undefined ) { this.setValue( gl, name, v ); }

};


// Static interface

WebGLUniforms.upload = function ( gl, seq, values, renderer ) {

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ],
			v = values[ u.id ];

		if ( v.needsUpdate !== false ) {

			// note: always updating when .needsUpdate is undefined
			u.setValue( gl, v.value, renderer );

		}

	}

};

WebGLUniforms.seqWithValue = function ( seq, values ) {

	var r = [];

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ];
		if ( u.id in values ) { r.push( u ); }

	}

	return r;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

function Color( r, g, b ) {

	if ( g === undefined && b === undefined ) {

		// r is THREE.Color, hex or string
		return this.set( r );

	}

	return this.setRGB( r, g, b );

}

Object.assign( Color.prototype, {

	isColor: true,

	r: 1, g: 1, b: 1,

	set: function ( value ) {

		if ( value && value.isColor ) {

			this.copy( value );

		} else if ( typeof value === 'number' ) {

			this.setHex( value );

		} else if ( typeof value === 'string' ) {

			this.setStyle( value );

		}

		return this;

	},

	setScalar: function ( scalar ) {

		this.r = scalar;
		this.g = scalar;
		this.b = scalar;

		return this;

	},

	setHex: function ( hex ) {

		hex = Math.floor( hex );

		this.r = ( hex >> 16 & 255 ) / 255;
		this.g = ( hex >> 8 & 255 ) / 255;
		this.b = ( hex & 255 ) / 255;

		return this;

	},

	setRGB: function ( r, g, b ) {

		this.r = r;
		this.g = g;
		this.b = b;

		return this;

	},

	setHSL: function () {

		function hue2rgb( p, q, t ) {

			if ( t < 0 ) { t += 1; }
			if ( t > 1 ) { t -= 1; }
			if ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }
			if ( t < 1 / 2 ) { return q; }
			if ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }
			return p;

		}

		return function setHSL( h, s, l ) {

			// h,s,l ranges are in 0.0 - 1.0
			h = _Math.euclideanModulo( h, 1 );
			s = _Math.clamp( s, 0, 1 );
			l = _Math.clamp( l, 0, 1 );

			if ( s === 0 ) {

				this.r = this.g = this.b = l;

			} else {

				var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
				var q = ( 2 * l ) - p;

				this.r = hue2rgb( q, p, h + 1 / 3 );
				this.g = hue2rgb( q, p, h );
				this.b = hue2rgb( q, p, h - 1 / 3 );

			}

			return this;

		};

	}(),

	setStyle: function ( style ) {

		function handleAlpha( string ) {

			if ( string === undefined ) { return; }

			if ( parseFloat( string ) < 1 ) {

				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

			}

		}


		var m;

		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

			// rgb / hsl

			var color;
			var name = m[ 1 ];
			var components = m[ 2 ];

			switch ( name ) {

				case 'rgb':
				case 'rgba':

					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// rgb(255,0,0) rgba(255,0,0,0.5)
						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

						handleAlpha( color[ 5 ] );

						return this;

					}

					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

						handleAlpha( color[ 5 ] );

						return this;

					}

					break;

				case 'hsl':
				case 'hsla':

					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
						var h = parseFloat( color[ 1 ] ) / 360;
						var s = parseInt( color[ 2 ], 10 ) / 100;
						var l = parseInt( color[ 3 ], 10 ) / 100;

						handleAlpha( color[ 5 ] );

						return this.setHSL( h, s, l );

					}

					break;

			}

		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

			// hex color

			var hex = m[ 1 ];
			var size = hex.length;

			if ( size === 3 ) {

				// #ff0
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

				return this;

			} else if ( size === 6 ) {

				// #ff0000
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

				return this;

			}

		}

		if ( style && style.length > 0 ) {

			// color keywords
			var hex = ColorKeywords[ style ];

			if ( hex !== undefined ) {

				// red
				this.setHex( hex );

			} else {

				// unknown color
				console.warn( 'THREE.Color: Unknown color ' + style );

			}

		}

		return this;

	},

	clone: function () {

		return new this.constructor( this.r, this.g, this.b );

	},

	copy: function ( color ) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	},

	copyGammaToLinear: function ( color, gammaFactor ) {

		if ( gammaFactor === undefined ) { gammaFactor = 2.0; }

		this.r = Math.pow( color.r, gammaFactor );
		this.g = Math.pow( color.g, gammaFactor );
		this.b = Math.pow( color.b, gammaFactor );

		return this;

	},

	copyLinearToGamma: function ( color, gammaFactor ) {

		if ( gammaFactor === undefined ) { gammaFactor = 2.0; }

		var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

		this.r = Math.pow( color.r, safeInverse );
		this.g = Math.pow( color.g, safeInverse );
		this.b = Math.pow( color.b, safeInverse );

		return this;

	},

	convertGammaToLinear: function () {

		var r = this.r, g = this.g, b = this.b;

		this.r = r * r;
		this.g = g * g;
		this.b = b * b;

		return this;

	},

	convertLinearToGamma: function () {

		this.r = Math.sqrt( this.r );
		this.g = Math.sqrt( this.g );
		this.b = Math.sqrt( this.b );

		return this;

	},

	getHex: function () {

		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

	},

	getHexString: function () {

		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

	},

	getHSL: function ( optionalTarget ) {

		// h,s,l ranges are in 0.0 - 1.0

		var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

		var r = this.r, g = this.g, b = this.b;

		var max = Math.max( r, g, b );
		var min = Math.min( r, g, b );

		var hue, saturation;
		var lightness = ( min + max ) / 2.0;

		if ( min === max ) {

			hue = 0;
			saturation = 0;

		} else {

			var delta = max - min;

			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

			switch ( max ) {

				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
				case g: hue = ( b - r ) / delta + 2; break;
				case b: hue = ( r - g ) / delta + 4; break;

			}

			hue /= 6;

		}

		hsl.h = hue;
		hsl.s = saturation;
		hsl.l = lightness;

		return hsl;

	},

	getStyle: function () {

		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

	},

	offsetHSL: function ( h, s, l ) {

		var hsl = this.getHSL();

		hsl.h += h; hsl.s += s; hsl.l += l;

		this.setHSL( hsl.h, hsl.s, hsl.l );

		return this;

	},

	add: function ( color ) {

		this.r += color.r;
		this.g += color.g;
		this.b += color.b;

		return this;

	},

	addColors: function ( color1, color2 ) {

		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;

		return this;

	},

	addScalar: function ( s ) {

		this.r += s;
		this.g += s;
		this.b += s;

		return this;

	},

	sub: function( color ) {

		this.r = Math.max( 0, this.r - color.r );
		this.g = Math.max( 0, this.g - color.g );
		this.b = Math.max( 0, this.b - color.b );

		return this;

	},

	multiply: function ( color ) {

		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.r *= s;
		this.g *= s;
		this.b *= s;

		return this;

	},

	lerp: function ( color, alpha ) {

		this.r += ( color.r - this.r ) * alpha;
		this.g += ( color.g - this.g ) * alpha;
		this.b += ( color.b - this.b ) * alpha;

		return this;

	},

	equals: function ( c ) {

		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) { offset = 0; }

		this.r = array[ offset ];
		this.g = array[ offset + 1 ];
		this.b = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) { array = []; }
		if ( offset === undefined ) { offset = 0; }

		array[ offset ] = this.r;
		array[ offset + 1 ] = this.g;
		array[ offset + 2 ] = this.b;

		return array;

	},

	toJSON: function () {

		return this.getHex();

	}

} );

/**
 * Uniforms library for shared webgl shaders
 */

var UniformsLib = {

	common: {

		diffuse: { value: new Color( 0xeeeeee ) },
		opacity: { value: 1.0 },

		map: { value: null },
		offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },

		specularMap: { value: null },
		alphaMap: { value: null },

		envMap: { value: null },
		flipEnvMap: { value: - 1 },
		reflectivity: { value: 1.0 },
		refractionRatio: { value: 0.98 }

	},

	aomap: {

		aoMap: { value: null },
		aoMapIntensity: { value: 1 }

	},

	lightmap: {

		lightMap: { value: null },
		lightMapIntensity: { value: 1 }

	},

	emissivemap: {

		emissiveMap: { value: null }

	},

	bumpmap: {

		bumpMap: { value: null },
		bumpScale: { value: 1 }

	},

	normalmap: {

		normalMap: { value: null },
		normalScale: { value: new Vector2( 1, 1 ) }

	},

	displacementmap: {

		displacementMap: { value: null },
		displacementScale: { value: 1 },
		displacementBias: { value: 0 }

	},

	roughnessmap: {

		roughnessMap: { value: null }

	},

	metalnessmap: {

		metalnessMap: { value: null }

	},

	gradientmap: {

		gradientMap: { value: null }

	},

	fog: {

		fogDensity: { value: 0.00025 },
		fogNear: { value: 1 },
		fogFar: { value: 2000 },
		fogColor: { value: new Color( 0xffffff ) }

	},

	lights: {

		ambientLightColor: { value: [] },

		directionalLights: { value: [], properties: {
			direction: {},
			color: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		directionalShadowMap: { value: [] },
		directionalShadowMatrix: { value: [] },

		spotLights: { value: [], properties: {
			color: {},
			position: {},
			direction: {},
			distance: {},
			coneCos: {},
			penumbraCos: {},
			decay: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		spotShadowMap: { value: [] },
		spotShadowMatrix: { value: [] },

		pointLights: { value: [], properties: {
			color: {},
			position: {},
			decay: {},
			distance: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		pointShadowMap: { value: [] },
		pointShadowMatrix: { value: [] },

		hemisphereLights: { value: [], properties: {
			direction: {},
			skyColor: {},
			groundColor: {}
		} },

		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
		rectAreaLights: { value: [], properties: {
			color: {},
			position: {},
			width: {},
			height: {}
		} }

	},

	points: {

		diffuse: { value: new Color( 0xeeeeee ) },
		opacity: { value: 1.0 },
		size: { value: 1.0 },
		scale: { value: 1.0 },
		map: { value: null },
		offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }

	}

};

/**
 * Uniform Utilities
 */

var UniformsUtils = {

	merge: function ( uniforms ) {
		var this$1 = this;


		var merged = {};

		for ( var u = 0; u < uniforms.length; u ++ ) {

			var tmp = this$1.clone( uniforms[ u ] );

			for ( var p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	},

	clone: function ( uniforms_src ) {

		var uniforms_dst = {};

		for ( var u in uniforms_src ) {

			uniforms_dst[ u ] = {};

			for ( var p in uniforms_src[ u ] ) {

				var parameter_src = uniforms_src[ u ][ p ];

				if ( parameter_src && ( parameter_src.isColor ||
					parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
					parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
					parameter_src.isTexture ) ) {

					uniforms_dst[ u ][ p ] = parameter_src.clone();

				} else if ( Array.isArray( parameter_src ) ) {

					uniforms_dst[ u ][ p ] = parameter_src.slice();

				} else {

					uniforms_dst[ u ][ p ] = parameter_src;

				}

			}

		}

		return uniforms_dst;

	}

};

var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

var begin_vertex = "\nvec3 transformed = vec3( position );\n";

var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transpose( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transpose( const in mat3 v ) {\n\tmat3 tmp;\n\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n\treturn tmp;\n}\n";

var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";

var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";

var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = asin( flipNormal * reflectVec.y ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";

var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";

var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";

var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";

var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

var logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";

var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

var map_particle_fragment = "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";

var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";

var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

var normal_flip = "#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n";

var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";

var dithering_fragment = "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";

var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";

var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";

var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";

var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

var tonemapping_pars_fragment = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";

var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";

var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

var distanceRGBA_frag = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";

var distanceRGBA_vert = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n";

var equirect_frag = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";

var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";

var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";

var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var shadow_frag = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0 - getShadowMask() ) );\n}\n";

var shadow_vert = "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

var ShaderChunk = {
	alphamap_fragment: alphamap_fragment,
	alphamap_pars_fragment: alphamap_pars_fragment,
	alphatest_fragment: alphatest_fragment,
	aomap_fragment: aomap_fragment,
	aomap_pars_fragment: aomap_pars_fragment,
	begin_vertex: begin_vertex,
	beginnormal_vertex: beginnormal_vertex,
	bsdfs: bsdfs,
	bumpmap_pars_fragment: bumpmap_pars_fragment,
	clipping_planes_fragment: clipping_planes_fragment,
	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
	clipping_planes_vertex: clipping_planes_vertex,
	color_fragment: color_fragment,
	color_pars_fragment: color_pars_fragment,
	color_pars_vertex: color_pars_vertex,
	color_vertex: color_vertex,
	common: common,
	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
	defaultnormal_vertex: defaultnormal_vertex,
	displacementmap_pars_vertex: displacementmap_pars_vertex,
	displacementmap_vertex: displacementmap_vertex,
	emissivemap_fragment: emissivemap_fragment,
	emissivemap_pars_fragment: emissivemap_pars_fragment,
	encodings_fragment: encodings_fragment,
	encodings_pars_fragment: encodings_pars_fragment,
	envmap_fragment: envmap_fragment,
	envmap_pars_fragment: envmap_pars_fragment,
	envmap_pars_vertex: envmap_pars_vertex,
	envmap_vertex: envmap_vertex,
	fog_vertex: fog_vertex,
	fog_pars_vertex: fog_pars_vertex,
	fog_fragment: fog_fragment,
	fog_pars_fragment: fog_pars_fragment,
	gradientmap_pars_fragment: gradientmap_pars_fragment,
	lightmap_fragment: lightmap_fragment,
	lightmap_pars_fragment: lightmap_pars_fragment,
	lights_lambert_vertex: lights_lambert_vertex,
	lights_pars: lights_pars,
	lights_phong_fragment: lights_phong_fragment,
	lights_phong_pars_fragment: lights_phong_pars_fragment,
	lights_physical_fragment: lights_physical_fragment,
	lights_physical_pars_fragment: lights_physical_pars_fragment,
	lights_template: lights_template,
	logdepthbuf_fragment: logdepthbuf_fragment,
	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
	logdepthbuf_vertex: logdepthbuf_vertex,
	map_fragment: map_fragment,
	map_pars_fragment: map_pars_fragment,
	map_particle_fragment: map_particle_fragment,
	map_particle_pars_fragment: map_particle_pars_fragment,
	metalnessmap_fragment: metalnessmap_fragment,
	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
	morphnormal_vertex: morphnormal_vertex,
	morphtarget_pars_vertex: morphtarget_pars_vertex,
	morphtarget_vertex: morphtarget_vertex,
	normal_flip: normal_flip,
	normal_fragment: normal_fragment,
	normalmap_pars_fragment: normalmap_pars_fragment,
	packing: packing,
	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
	project_vertex: project_vertex,
	dithering_fragment: dithering_fragment,
	dithering_pars_fragment: dithering_pars_fragment,
	roughnessmap_fragment: roughnessmap_fragment,
	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
	shadowmap_pars_fragment: shadowmap_pars_fragment,
	shadowmap_pars_vertex: shadowmap_pars_vertex,
	shadowmap_vertex: shadowmap_vertex,
	shadowmask_pars_fragment: shadowmask_pars_fragment,
	skinbase_vertex: skinbase_vertex,
	skinning_pars_vertex: skinning_pars_vertex,
	skinning_vertex: skinning_vertex,
	skinnormal_vertex: skinnormal_vertex,
	specularmap_fragment: specularmap_fragment,
	specularmap_pars_fragment: specularmap_pars_fragment,
	tonemapping_fragment: tonemapping_fragment,
	tonemapping_pars_fragment: tonemapping_pars_fragment,
	uv_pars_fragment: uv_pars_fragment,
	uv_pars_vertex: uv_pars_vertex,
	uv_vertex: uv_vertex,
	uv2_pars_fragment: uv2_pars_fragment,
	uv2_pars_vertex: uv2_pars_vertex,
	uv2_vertex: uv2_vertex,
	worldpos_vertex: worldpos_vertex,

	cube_frag: cube_frag,
	cube_vert: cube_vert,
	depth_frag: depth_frag,
	depth_vert: depth_vert,
	distanceRGBA_frag: distanceRGBA_frag,
	distanceRGBA_vert: distanceRGBA_vert,
	equirect_frag: equirect_frag,
	equirect_vert: equirect_vert,
	linedashed_frag: linedashed_frag,
	linedashed_vert: linedashed_vert,
	meshbasic_frag: meshbasic_frag,
	meshbasic_vert: meshbasic_vert,
	meshlambert_frag: meshlambert_frag,
	meshlambert_vert: meshlambert_vert,
	meshphong_frag: meshphong_frag,
	meshphong_vert: meshphong_vert,
	meshphysical_frag: meshphysical_frag,
	meshphysical_vert: meshphysical_vert,
	normal_frag: normal_frag,
	normal_vert: normal_vert,
	points_frag: points_frag,
	points_vert: points_vert,
	shadow_frag: shadow_frag,
	shadow_vert: shadow_vert
};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */

var ShaderLib = {

	basic: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.meshbasic_vert,
		fragmentShader: ShaderChunk.meshbasic_frag

	},

	lambert: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) }
			}
		] ),

		vertexShader: ShaderChunk.meshlambert_vert,
		fragmentShader: ShaderChunk.meshlambert_frag

	},

	phong: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.gradientmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				specular: { value: new Color( 0x111111 ) },
				shininess: { value: 30 }
			}
		] ),

		vertexShader: ShaderChunk.meshphong_vert,
		fragmentShader: ShaderChunk.meshphong_frag

	},

	standard: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.roughnessmap,
			UniformsLib.metalnessmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				roughness: { value: 0.5 },
				metalness: { value: 0.5 },
				envMapIntensity: { value: 1 } // temporary
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	},

	points: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.points,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.points_vert,
		fragmentShader: ShaderChunk.points_frag

	},

	dashed: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.fog,
			{
				scale: { value: 1 },
				dashSize: { value: 1 },
				totalSize: { value: 2 }
			}
		] ),

		vertexShader: ShaderChunk.linedashed_vert,
		fragmentShader: ShaderChunk.linedashed_frag

	},

	depth: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.displacementmap
		] ),

		vertexShader: ShaderChunk.depth_vert,
		fragmentShader: ShaderChunk.depth_frag

	},

	normal: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			{
				opacity: { value: 1.0 }
			}
		] ),

		vertexShader: ShaderChunk.normal_vert,
		fragmentShader: ShaderChunk.normal_frag

	},

	/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */

	cube: {

		uniforms: {
			tCube: { value: null },
			tFlip: { value: - 1 },
			opacity: { value: 1.0 }
		},

		vertexShader: ShaderChunk.cube_vert,
		fragmentShader: ShaderChunk.cube_frag

	},

	/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */

	equirect: {

		uniforms: {
			tEquirect: { value: null },
			tFlip: { value: - 1 }
		},

		vertexShader: ShaderChunk.equirect_vert,
		fragmentShader: ShaderChunk.equirect_frag

	},

	distanceRGBA: {

		uniforms: {
			lightPos: { value: new Vector3() }
		},

		vertexShader: ShaderChunk.distanceRGBA_vert,
		fragmentShader: ShaderChunk.distanceRGBA_frag

	}

};

ShaderLib.physical = {

	uniforms: UniformsUtils.merge( [
		ShaderLib.standard.uniforms,
		{
			clearCoat: { value: 0 },
			clearCoatRoughness: { value: 0 }
		}
	] ),

	vertexShader: ShaderChunk.meshphysical_vert,
	fragmentShader: ShaderChunk.meshphysical_frag

};

/**
 * @author bhouston / http://clara.io
 */

function Box2( min, max ) {

	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

}

Object.assign( Box2.prototype, {

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromPoints: function ( points ) {
		var this$1 = this;


		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this$1.expandByPoint( points[ i ] );

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new Vector2();

		return function setFromCenterAndSize( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = + Infinity;
		this.max.x = this.max.y = - Infinity;

		return this;

	},

	isEmpty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	getSize: function ( optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	containsPoint: function ( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ? false : true;

	},

	containsBox: function ( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new Vector2();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y )
		);

	},

	intersectsBox: function ( box ) {

		// using 4 splitting planes to rule out intersections

		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new Vector2();

		return function distanceToPoint( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function LensFlarePlugin( renderer, flares ) {

	var gl = renderer.context;
	var state = renderer.state;

	var vertexBuffer, elementBuffer;
	var shader, program, attributes, uniforms;

	var tempTexture, occlusionTexture;

	function init() {

		var vertices = new Float32Array( [
			- 1, - 1,  0, 0,
			 1, - 1,  1, 0,
			 1,  1,  1, 1,
			- 1,  1,  0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		// buffers

		vertexBuffer     = gl.createBuffer();
		elementBuffer    = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		// textures

		tempTexture      = gl.createTexture();
		occlusionTexture = gl.createTexture();

		state.bindTexture( gl.TEXTURE_2D, tempTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		shader = {

			vertexShader: [

				"uniform lowp int renderType;",

				"uniform vec3 screenPosition;",
				"uniform vec2 scale;",
				"uniform float rotation;",

				"uniform sampler2D occlusionMap;",

				"attribute vec2 position;",
				"attribute vec2 uv;",

				"varying vec2 vUV;",
				"varying float vVisibility;",

				"void main() {",

					"vUV = uv;",

					"vec2 pos = position;",

					"if ( renderType == 2 ) {",

						"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
						"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

						"vVisibility =        visibility.r / 9.0;",
						"vVisibility *= 1.0 - visibility.g / 9.0;",
						"vVisibility *=       visibility.b / 9.0;",
						"vVisibility *= 1.0 - visibility.a / 9.0;",

						"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
						"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

					"}",

					"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform lowp int renderType;",

				"uniform sampler2D map;",
				"uniform float opacity;",
				"uniform vec3 color;",

				"varying vec2 vUV;",
				"varying float vVisibility;",

				"void main() {",

					// pink square

					"if ( renderType == 0 ) {",

						"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

					// restore

					"} else if ( renderType == 1 ) {",

						"gl_FragColor = texture2D( map, vUV );",

					// flare

					"} else {",

						"vec4 texture = texture2D( map, vUV );",
						"texture.a *= opacity * vVisibility;",
						"gl_FragColor = texture;",
						"gl_FragColor.rgb *= color;",

					"}",

				"}"

			].join( "\n" )

		};

		program = createProgram( shader );

		attributes = {
			vertex: gl.getAttribLocation ( program, "position" ),
			uv:     gl.getAttribLocation ( program, "uv" )
		};

		uniforms = {
			renderType:     gl.getUniformLocation( program, "renderType" ),
			map:            gl.getUniformLocation( program, "map" ),
			occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
			opacity:        gl.getUniformLocation( program, "opacity" ),
			color:          gl.getUniformLocation( program, "color" ),
			scale:          gl.getUniformLocation( program, "scale" ),
			rotation:       gl.getUniformLocation( program, "rotation" ),
			screenPosition: gl.getUniformLocation( program, "screenPosition" )
		};

	}

	/*
	 * Render lens flares
	 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
	 *         reads these back and calculates occlusion.
	 */

	this.render = function ( scene, camera, viewport ) {

		if ( flares.length === 0 ) { return; }

		var tempPosition = new Vector3();

		var invAspect = viewport.w / viewport.z,
			halfViewportWidth = viewport.z * 0.5,
			halfViewportHeight = viewport.w * 0.5;

		var size = 16 / viewport.w,
			scale = new Vector2( size * invAspect, size );

		var screenPosition = new Vector3( 1, 1, 0 ),
			screenPositionPixels = new Vector2( 1, 1 );

		var validArea = new Box2();

		validArea.min.set( viewport.x, viewport.y );
		validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

		if ( program === undefined ) {

			init();

		}

		gl.useProgram( program );

		state.initAttributes();
		state.enableAttribute( attributes.vertex );
		state.enableAttribute( attributes.uv );
		state.disableUnusedAttributes();

		// loop through all lens flares to update their occlusion and positions
		// setup gl and common used attribs/uniforms

		gl.uniform1i( uniforms.occlusionMap, 0 );
		gl.uniform1i( uniforms.map, 1 );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		state.disable( gl.CULL_FACE );
		state.buffers.depth.setMask( false );

		for ( var i = 0, l = flares.length; i < l; i ++ ) {

			size = 16 / viewport.w;
			scale.set( size * invAspect, size );

			// calc object screen position

			var flare = flares[ i ];

			tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

			tempPosition.applyMatrix4( camera.matrixWorldInverse );
			tempPosition.applyMatrix4( camera.projectionMatrix );

			// setup arrays for gl programs

			screenPosition.copy( tempPosition );

			// horizontal and vertical coordinate of the lower left corner of the pixels to copy

			screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
			screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

			// screen cull

			if ( validArea.containsPoint( screenPositionPixels ) === true ) {

				// save current RGB to temp texture

				state.activeTexture( gl.TEXTURE0 );
				state.bindTexture( gl.TEXTURE_2D, null );
				state.activeTexture( gl.TEXTURE1 );
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


				// render pink quad

				gl.uniform1i( uniforms.renderType, 0 );
				gl.uniform2f( uniforms.scale, scale.x, scale.y );
				gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

				state.disable( gl.BLEND );
				state.enable( gl.DEPTH_TEST );

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// copy result to occlusionMap

				state.activeTexture( gl.TEXTURE0 );
				state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


				// restore graphics

				gl.uniform1i( uniforms.renderType, 1 );
				state.disable( gl.DEPTH_TEST );

				state.activeTexture( gl.TEXTURE1 );
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// update object positions

				flare.positionScreen.copy( screenPosition );

				if ( flare.customUpdateCallback ) {

					flare.customUpdateCallback( flare );

				} else {

					flare.updateLensFlares();

				}

				// render flares

				gl.uniform1i( uniforms.renderType, 2 );
				state.enable( gl.BLEND );

				for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

					var sprite = flare.lensFlares[ j ];

					if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

						screenPosition.x = sprite.x;
						screenPosition.y = sprite.y;
						screenPosition.z = sprite.z;

						size = sprite.size * sprite.scale / viewport.w;

						scale.x = size * invAspect;
						scale.y = size;

						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
						gl.uniform2f( uniforms.scale, scale.x, scale.y );
						gl.uniform1f( uniforms.rotation, sprite.rotation );

						gl.uniform1f( uniforms.opacity, sprite.opacity );
						gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

						state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
						renderer.setTexture2D( sprite.texture, 1 );

						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

					}

				}

			}

		}

		// restore gl

		state.enable( gl.CULL_FACE );
		state.enable( gl.DEPTH_TEST );
		state.buffers.depth.setMask( true );

		renderer.resetGLState();

	};

	function createProgram( shader ) {

		var program = gl.createProgram();

		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
		var vertexShader = gl.createShader( gl.VERTEX_SHADER );

		var prefix = "precision " + renderer.getPrecision() + " float;\n";

		gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
		gl.shaderSource( vertexShader, prefix + shader.vertexShader );

		gl.compileShader( fragmentShader );
		gl.compileShader( vertexShader );

		gl.attachShader( program, fragmentShader );
		gl.attachShader( program, vertexShader );

		gl.linkProgram( program );

		return program;

	}

}

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function SpritePlugin( renderer, sprites ) {

	var gl = renderer.context;
	var state = renderer.state;

	var vertexBuffer, elementBuffer;
	var program, attributes, uniforms;

	var texture;

	// decompose matrixWorld

	var spritePosition = new Vector3();
	var spriteRotation = new Quaternion();
	var spriteScale = new Vector3();

	function init() {

		var vertices = new Float32Array( [
			- 0.5, - 0.5,  0, 0,
			  0.5, - 0.5,  1, 0,
			  0.5,   0.5,  1, 1,
			- 0.5,   0.5,  0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		vertexBuffer  = gl.createBuffer();
		elementBuffer = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		program = createProgram();

		attributes = {
			position:			gl.getAttribLocation ( program, 'position' ),
			uv:					gl.getAttribLocation ( program, 'uv' )
		};

		uniforms = {
			uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
			uvScale:			gl.getUniformLocation( program, 'uvScale' ),

			rotation:			gl.getUniformLocation( program, 'rotation' ),
			scale:				gl.getUniformLocation( program, 'scale' ),

			color:				gl.getUniformLocation( program, 'color' ),
			map:				gl.getUniformLocation( program, 'map' ),
			opacity:			gl.getUniformLocation( program, 'opacity' ),

			modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
			projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

			fogType:			gl.getUniformLocation( program, 'fogType' ),
			fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
			fogNear:			gl.getUniformLocation( program, 'fogNear' ),
			fogFar:				gl.getUniformLocation( program, 'fogFar' ),
			fogColor:			gl.getUniformLocation( program, 'fogColor' ),

			alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
		};

		var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		canvas.width = 8;
		canvas.height = 8;

		var context = canvas.getContext( '2d' );
		context.fillStyle = 'white';
		context.fillRect( 0, 0, 8, 8 );

		texture = new Texture( canvas );
		texture.needsUpdate = true;

	}

	this.render = function ( scene, camera ) {

		if ( sprites.length === 0 ) { return; }

		// setup gl

		if ( program === undefined ) {

			init();

		}

		gl.useProgram( program );

		state.initAttributes();
		state.enableAttribute( attributes.position );
		state.enableAttribute( attributes.uv );
		state.disableUnusedAttributes();

		state.disable( gl.CULL_FACE );
		state.enable( gl.BLEND );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

		state.activeTexture( gl.TEXTURE0 );
		gl.uniform1i( uniforms.map, 0 );

		var oldFogType = 0;
		var sceneFogType = 0;
		var fog = scene.fog;

		if ( fog ) {

			gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

			if ( fog.isFog ) {

				gl.uniform1f( uniforms.fogNear, fog.near );
				gl.uniform1f( uniforms.fogFar, fog.far );

				gl.uniform1i( uniforms.fogType, 1 );
				oldFogType = 1;
				sceneFogType = 1;

			} else if ( fog.isFogExp2 ) {

				gl.uniform1f( uniforms.fogDensity, fog.density );

				gl.uniform1i( uniforms.fogType, 2 );
				oldFogType = 2;
				sceneFogType = 2;

			}

		} else {

			gl.uniform1i( uniforms.fogType, 0 );
			oldFogType = 0;
			sceneFogType = 0;

		}


		// update positions and sort

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];

			sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
			sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

		}

		sprites.sort( painterSortStable );

		// render all sprites

		var scale = [];

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];
			var material = sprite.material;

			if ( material.visible === false ) { continue; }

			sprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );

			gl.uniform1f( uniforms.alphaTest, material.alphaTest );
			gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

			sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

			scale[ 0 ] = spriteScale.x;
			scale[ 1 ] = spriteScale.y;

			var fogType = 0;

			if ( scene.fog && material.fog ) {

				fogType = sceneFogType;

			}

			if ( oldFogType !== fogType ) {

				gl.uniform1i( uniforms.fogType, fogType );
				oldFogType = fogType;

			}

			if ( material.map !== null ) {

				gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
				gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

			} else {

				gl.uniform2f( uniforms.uvOffset, 0, 0 );
				gl.uniform2f( uniforms.uvScale, 1, 1 );

			}

			gl.uniform1f( uniforms.opacity, material.opacity );
			gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

			gl.uniform1f( uniforms.rotation, material.rotation );
			gl.uniform2fv( uniforms.scale, scale );

			state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
			state.buffers.depth.setTest( material.depthTest );
			state.buffers.depth.setMask( material.depthWrite );

			if ( material.map ) {

				renderer.setTexture2D( material.map, 0 );

			} else {

				renderer.setTexture2D( texture, 0 );

			}

			gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			sprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );

		}

		// restore gl

		state.enable( gl.CULL_FACE );

		renderer.resetGLState();

	};

	function createProgram() {

		var program = gl.createProgram();

		var vertexShader = gl.createShader( gl.VERTEX_SHADER );
		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

		gl.shaderSource( vertexShader, [

			'precision ' + renderer.getPrecision() + ' float;',

			'#define SHADER_NAME ' + 'SpriteMaterial',

			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform float rotation;',
			'uniform vec2 scale;',
			'uniform vec2 uvOffset;',
			'uniform vec2 uvScale;',

			'attribute vec2 position;',
			'attribute vec2 uv;',

			'varying vec2 vUV;',

			'void main() {',

				'vUV = uvOffset + uv * uvScale;',

				'vec2 alignedPosition = position * scale;',

				'vec2 rotatedPosition;',
				'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
				'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

				'vec4 finalPosition;',

				'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
				'finalPosition.xy += rotatedPosition;',
				'finalPosition = projectionMatrix * finalPosition;',

				'gl_Position = finalPosition;',

			'}'

		].join( '\n' ) );

		gl.shaderSource( fragmentShader, [

			'precision ' + renderer.getPrecision() + ' float;',

			'#define SHADER_NAME ' + 'SpriteMaterial',

			'uniform vec3 color;',
			'uniform sampler2D map;',
			'uniform float opacity;',

			'uniform int fogType;',
			'uniform vec3 fogColor;',
			'uniform float fogDensity;',
			'uniform float fogNear;',
			'uniform float fogFar;',
			'uniform float alphaTest;',

			'varying vec2 vUV;',

			'void main() {',

				'vec4 texture = texture2D( map, vUV );',

				'if ( texture.a < alphaTest ) discard;',

				'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

				'if ( fogType > 0 ) {',

					'float depth = gl_FragCoord.z / gl_FragCoord.w;',
					'float fogFactor = 0.0;',

					'if ( fogType == 1 ) {',

						'fogFactor = smoothstep( fogNear, fogFar, depth );',

					'} else {',

						'const float LOG2 = 1.442695;',
						'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
						'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

					'}',

					'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

				'}',

			'}'

		].join( '\n' ) );

		gl.compileShader( vertexShader );
		gl.compileShader( fragmentShader );

		gl.attachShader( program, vertexShader );
		gl.attachShader( program, fragmentShader );

		gl.linkProgram( program );

		return program;

	}

	function painterSortStable( a, b ) {

		if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return b.id - a.id;

		}

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

var materialId = 0;

function Material() {

	Object.defineProperty( this, 'id', { value: materialId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Material';

	this.fog = true;
	this.lights = true;

	this.blending = NormalBlending;
	this.side = FrontSide;
	this.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading
	this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

	this.opacity = 1;
	this.transparent = false;

	this.blendSrc = SrcAlphaFactor;
	this.blendDst = OneMinusSrcAlphaFactor;
	this.blendEquation = AddEquation;
	this.blendSrcAlpha = null;
	this.blendDstAlpha = null;
	this.blendEquationAlpha = null;

	this.depthFunc = LessEqualDepth;
	this.depthTest = true;
	this.depthWrite = true;

	this.clippingPlanes = null;
	this.clipIntersection = false;
	this.clipShadows = false;

	this.colorWrite = true;

	this.precision = null; // override the renderer's default precision for this material

	this.polygonOffset = false;
	this.polygonOffsetFactor = 0;
	this.polygonOffsetUnits = 0;

	this.dithering = false;

	this.alphaTest = 0;
	this.premultipliedAlpha = false;

	this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

	this.visible = true;

	this.needsUpdate = true;

}

Object.assign( Material.prototype, EventDispatcher.prototype, {

	isMaterial: true,

	onBeforeCompile: function () {},

	setValues: function ( values ) {
		var this$1 = this;


		if ( values === undefined ) { return; }

		for ( var key in values ) {

			var newValue = values[ key ];

			if ( newValue === undefined ) {

				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
				continue;

			}

			var currentValue = this$1[ key ];

			if ( currentValue === undefined ) {

				console.warn( "THREE." + this$1.type + ": '" + key + "' is not a property of this material." );
				continue;

			}

			if ( currentValue && currentValue.isColor ) {

				currentValue.set( newValue );

			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

				currentValue.copy( newValue );

			} else if ( key === 'overdraw' ) {

				// ensure overdraw is backwards-compatible with legacy boolean type
				this$1[ key ] = Number( newValue );

			} else {

				this$1[ key ] = newValue;

			}

		}

	},

	toJSON: function ( meta ) {

		var isRoot = meta === undefined;

		if ( isRoot ) {

			meta = {
				textures: {},
				images: {}
			};

		}

		var data = {
			metadata: {
				version: 4.5,
				type: 'Material',
				generator: 'Material.toJSON'
			}
		};

		// standard Material serialization
		data.uuid = this.uuid;
		data.type = this.type;

		if ( this.name !== '' ) { data.name = this.name; }

		if ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }

		if ( this.roughness !== undefined ) { data.roughness = this.roughness; }
		if ( this.metalness !== undefined ) { data.metalness = this.metalness; }

		if ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }
		if ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }
		if ( this.shininess !== undefined ) { data.shininess = this.shininess; }
		if ( this.clearCoat !== undefined ) { data.clearCoat = this.clearCoat; }
		if ( this.clearCoatRoughness !== undefined ) { data.clearCoatRoughness = this.clearCoatRoughness; }

		if ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }
		if ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }
		if ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }
		if ( this.bumpMap && this.bumpMap.isTexture ) {

			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
			data.bumpScale = this.bumpScale;

		}
		if ( this.normalMap && this.normalMap.isTexture ) {

			data.normalMap = this.normalMap.toJSON( meta ).uuid;
			data.normalScale = this.normalScale.toArray();

		}
		if ( this.displacementMap && this.displacementMap.isTexture ) {

			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
			data.displacementScale = this.displacementScale;
			data.displacementBias = this.displacementBias;

		}
		if ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }
		if ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }

		if ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }
		if ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }

		if ( this.envMap && this.envMap.isTexture ) {

			data.envMap = this.envMap.toJSON( meta ).uuid;
			data.reflectivity = this.reflectivity; // Scale behind envMap

		}

		if ( this.gradientMap && this.gradientMap.isTexture ) {

			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

		}

		if ( this.size !== undefined ) { data.size = this.size; }
		if ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }

		if ( this.blending !== NormalBlending ) { data.blending = this.blending; }
		if ( this.shading !== SmoothShading ) { data.shading = this.shading; }
		if ( this.side !== FrontSide ) { data.side = this.side; }
		if ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }

		if ( this.opacity < 1 ) { data.opacity = this.opacity; }
		if ( this.transparent === true ) { data.transparent = this.transparent; }

		data.depthFunc = this.depthFunc;
		data.depthTest = this.depthTest;
		data.depthWrite = this.depthWrite;

		if ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }
		if ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }
		if ( this.wireframe === true ) { data.wireframe = this.wireframe; }
		if ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }
		if ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }
		if ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }

		data.skinning = this.skinning;
		data.morphTargets = this.morphTargets;

		data.dithering = this.dithering;

		// TODO: Copied from Object3D.toJSON

		function extractFromCache( cache ) {

			var values = [];

			for ( var key in cache ) {

				var data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}

			return values;

		}

		if ( isRoot ) {

			var textures = extractFromCache( meta.textures );
			var images = extractFromCache( meta.images );

			if ( textures.length > 0 ) { data.textures = textures; }
			if ( images.length > 0 ) { data.images = images; }

		}

		return data;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.name = source.name;

		this.fog = source.fog;
		this.lights = source.lights;

		this.blending = source.blending;
		this.side = source.side;
		this.shading = source.shading;
		this.vertexColors = source.vertexColors;

		this.opacity = source.opacity;
		this.transparent = source.transparent;

		this.blendSrc = source.blendSrc;
		this.blendDst = source.blendDst;
		this.blendEquation = source.blendEquation;
		this.blendSrcAlpha = source.blendSrcAlpha;
		this.blendDstAlpha = source.blendDstAlpha;
		this.blendEquationAlpha = source.blendEquationAlpha;

		this.depthFunc = source.depthFunc;
		this.depthTest = source.depthTest;
		this.depthWrite = source.depthWrite;

		this.colorWrite = source.colorWrite;

		this.precision = source.precision;

		this.polygonOffset = source.polygonOffset;
		this.polygonOffsetFactor = source.polygonOffsetFactor;
		this.polygonOffsetUnits = source.polygonOffsetUnits;

		this.dithering = source.dithering;

		this.alphaTest = source.alphaTest;

		this.premultipliedAlpha = source.premultipliedAlpha;

		this.overdraw = source.overdraw;

		this.visible = source.visible;
		this.clipShadows = source.clipShadows;
		this.clipIntersection = source.clipIntersection;

		var srcPlanes = source.clippingPlanes,
			dstPlanes = null;

		if ( srcPlanes !== null ) {

			var n = srcPlanes.length;
			dstPlanes = new Array( n );

			for ( var i = 0; i !== n; ++ i )
				{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }

		}

		this.clippingPlanes = dstPlanes;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function ShaderMaterial( parameters ) {

	Material.call( this );

	this.type = 'ShaderMaterial';

	this.defines = {};
	this.uniforms = {};

	this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
	this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

	this.linewidth = 1;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false; // set to use scene fog
	this.lights = false; // set to use scene lights
	this.clipping = false; // set to use user-defined clipping planes

	this.skinning = false; // set to use skinning attribute streams
	this.morphTargets = false; // set to use morph targets
	this.morphNormals = false; // set to use morph normals

	this.extensions = {
		derivatives: false, // set to use derivatives
		fragDepth: false, // set to use fragment depth values
		drawBuffers: false, // set to use draw buffers
		shaderTextureLOD: false // set to use shader texture LOD
	};

	// When rendered geometry doesn't include these attributes but the material does,
	// use these default values in WebGL. This avoids errors when buffer data is missing.
	this.defaultAttributeValues = {
		'color': [ 1, 1, 1 ],
		'uv': [ 0, 0 ],
		'uv2': [ 0, 0 ]
	};

	this.index0AttributeName = undefined;

	if ( parameters !== undefined ) {

		if ( parameters.attributes !== undefined ) {

			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

		}

		this.setValues( parameters );

	}

}

ShaderMaterial.prototype = Object.create( Material.prototype );
ShaderMaterial.prototype.constructor = ShaderMaterial;

ShaderMaterial.prototype.isShaderMaterial = true;

ShaderMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.fragmentShader = source.fragmentShader;
	this.vertexShader = source.vertexShader;

	this.uniforms = UniformsUtils.clone( source.uniforms );

	this.defines = source.defines;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	this.lights = source.lights;
	this.clipping = source.clipping;

	this.skinning = source.skinning;

	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	this.extensions = source.extensions;

	return this;

};

ShaderMaterial.prototype.toJSON = function ( meta ) {

	var data = Material.prototype.toJSON.call( this, meta );

	data.uniforms = this.uniforms;
	data.vertexShader = this.vertexShader;
	data.fragmentShader = this.fragmentShader;

	return data;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / https://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

function MeshDepthMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshDepthMaterial';

	this.depthPacking = BasicDepthPacking;

	this.skinning = false;
	this.morphTargets = false;

	this.map = null;

	this.alphaMap = null;

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

MeshDepthMaterial.prototype = Object.create( Material.prototype );
MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

MeshDepthMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.depthPacking = source.depthPacking;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	this.map = source.map;

	this.alphaMap = source.alphaMap;

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	return this;

};

/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Box3( min, max ) {

	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

}

Object.assign( Box3.prototype, {

	isBox3: true,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromArray: function ( array ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = array.length; i < l; i += 3 ) {

			var x = array[ i ];
			var y = array[ i + 1 ];
			var z = array[ i + 2 ];

			if ( x < minX ) { minX = x; }
			if ( y < minY ) { minY = y; }
			if ( z < minZ ) { minZ = z; }

			if ( x > maxX ) { maxX = x; }
			if ( y > maxY ) { maxY = y; }
			if ( z > maxZ ) { maxZ = z; }

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromBufferAttribute: function ( attribute ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

			var x = attribute.getX( i );
			var y = attribute.getY( i );
			var z = attribute.getZ( i );

			if ( x < minX ) { minX = x; }
			if ( y < minY ) { minY = y; }
			if ( z < minZ ) { minZ = z; }

			if ( x > maxX ) { maxX = x; }
			if ( y > maxY ) { maxY = y; }
			if ( z > maxZ ) { maxZ = z; }

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromPoints: function ( points ) {
		var this$1 = this;


		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this$1.expandByPoint( points[ i ] );

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new Vector3();

		return function setFromCenterAndSize( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	setFromObject: function ( object ) {

		this.makeEmpty();

		return this.expandByObject( object );

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = this.min.z = + Infinity;
		this.max.x = this.max.y = this.max.z = - Infinity;

		return this;

	},

	isEmpty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	getSize: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	expandByObject: function () {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and children's, world transforms

		var v1 = new Vector3();

		return function expandByObject( object ) {

			var scope = this;

			object.updateMatrixWorld( true );

			object.traverse( function ( node ) {

				var i, l;

				var geometry = node.geometry;

				if ( geometry !== undefined ) {

					if ( geometry.isGeometry ) {

						var vertices = geometry.vertices;

						for ( i = 0, l = vertices.length; i < l; i ++ ) {

							v1.copy( vertices[ i ] );
							v1.applyMatrix4( node.matrixWorld );

							scope.expandByPoint( v1 );

						}

					} else if ( geometry.isBufferGeometry ) {

						var attribute = geometry.attributes.position;

						if ( attribute !== undefined ) {

							for ( i = 0, l = attribute.count; i < l; i ++ ) {

								v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );

								scope.expandByPoint( v1 );

							}

						}

					}

				}

			} );

			return this;

		};

	}(),

	containsPoint: function ( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ||
			point.z < this.min.z || point.z > this.max.z ? false : true;

	},

	containsBox: function ( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y &&
			this.min.z <= box.min.z && box.max.z <= this.max.z;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new Vector3();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	},

	intersectsBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.
		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ||
			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

	},

	intersectsSphere: ( function () {

		var closestPoint = new Vector3();

		return function intersectsSphere( sphere ) {

			// Find the point on the AABB closest to the sphere center.
			this.clampPoint( sphere.center, closestPoint );

			// If that point is inside the sphere, the AABB and sphere intersect.
			return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

		};

	} )(),

	intersectsPlane: function ( plane ) {

		// We compute the minimum and maximum dot product values. If those values
		// are on the same side (back or front) of the plane, then there is no intersection.

		var min, max;

		if ( plane.normal.x > 0 ) {

			min = plane.normal.x * this.min.x;
			max = plane.normal.x * this.max.x;

		} else {

			min = plane.normal.x * this.max.x;
			max = plane.normal.x * this.min.x;

		}

		if ( plane.normal.y > 0 ) {

			min += plane.normal.y * this.min.y;
			max += plane.normal.y * this.max.y;

		} else {

			min += plane.normal.y * this.max.y;
			max += plane.normal.y * this.min.y;

		}

		if ( plane.normal.z > 0 ) {

			min += plane.normal.z * this.min.z;
			max += plane.normal.z * this.max.z;

		} else {

			min += plane.normal.z * this.max.z;
			max += plane.normal.z * this.min.z;

		}

		return ( min <= plane.constant && max >= plane.constant );

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new Vector3();

		return function distanceToPoint( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	getBoundingSphere: function () {

		var v1 = new Vector3();

		return function getBoundingSphere( optionalTarget ) {

			var result = optionalTarget || new Sphere();

			this.getCenter( result.center );

			result.radius = this.getSize( v1 ).length() * 0.5;

			return result;

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
		if( this.isEmpty() ) { this.makeEmpty(); }

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	applyMatrix4: function () {

		var points = [
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3()
		];

		return function applyMatrix4( matrix ) {

			// transform of empty box is an empty box.
			if( this.isEmpty() ) { return this; }

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

			this.setFromPoints( points );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Sphere( center, radius ) {

	this.center = ( center !== undefined ) ? center : new Vector3();
	this.radius = ( radius !== undefined ) ? radius : 0;

}

Object.assign( Sphere.prototype, {

	set: function ( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;

	},

	setFromPoints: function () {

		var box = new Box3();

		return function setFromPoints( points, optionalCenter ) {

			var center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				box.setFromPoints( points ).getCenter( center );

			}

			var maxRadiusSq = 0;

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	},

	empty: function () {

		return ( this.radius <= 0 );

	},

	containsPoint: function ( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	},

	distanceToPoint: function ( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	},

	intersectsSphere: function ( sphere ) {

		var radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	},

	intersectsBox: function ( box ) {

		return box.intersectsSphere( this );

	},

	intersectsPlane: function ( plane ) {

		// We use the following equation to compute the signed distance from
		// the center of the sphere to the plane.
		//
		// distance = q * n - d
		//
		// If this distance is greater than the radius of the sphere,
		// then there is no intersection.

		return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

	},

	clampPoint: function ( point, optionalTarget ) {

		var deltaLengthSq = this.center.distanceToSquared( point );

		var result = optionalTarget || new Vector3();

		result.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			result.sub( this.center ).normalize();
			result.multiplyScalar( this.radius ).add( this.center );

		}

		return result;

	},

	getBoundingBox: function ( optionalTarget ) {

		var box = optionalTarget || new Box3();

		box.set( this.center, this.center );
		box.expandByScalar( this.radius );

		return box;

	},

	applyMatrix4: function ( matrix ) {

		this.center.applyMatrix4( matrix );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	},

	translate: function ( offset ) {

		this.center.add( offset );

		return this;

	},

	equals: function ( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 * @author tschw
 */

function Matrix3() {

	this.elements = [

		1, 0, 0,
		0, 1, 0,
		0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix3.prototype, {

	isMatrix3: true,

	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new this.constructor().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

		return this;

	},

	setFromMatrix4: function ( m ) {

		var me = m.elements;

		this.set(

			me[ 0 ], me[ 4 ], me[  8 ],
			me[ 1 ], me[ 5 ], me[  9 ],
			me[ 2 ], me[ 6 ], me[ 10 ]

		);

		return this;

	},

	applyToBufferAttribute: function () {

		var v1 = new Vector3();

		return function applyToBufferAttribute( attribute ) {
			var this$1 = this;


			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				v1.x = attribute.getX( i );
				v1.y = attribute.getY( i );
				v1.z = attribute.getZ( i );

				v1.applyMatrix3( this$1 );

				attribute.setXYZ( i, v1.x, v1.y, v1.z );

			}

			return attribute;

		};

	}(),

	multiply: function ( m ) {

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
		var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
		var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

		var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
		var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
		var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

		return this;

	},

	determinant: function () {

		var te = this.elements;

		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	},

	getInverse: function ( matrix, throwOnDegenerate ) {

		if ( matrix && matrix.isMatrix4 ) {

			console.error( "THREE.Matrix3.getInverse no longer takes a Matrix4 argument." );

		}

		var me = matrix.elements,
			te = this.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

			t11 = n33 * n22 - n32 * n23,
			t12 = n32 * n13 - n33 * n12,
			t13 = n23 * n12 - n22 * n13,

			det = n11 * t11 + n21 * t12 + n31 * t13;

		if ( det === 0 ) {

			var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

		te[ 3 ] = t12 * detInv;
		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

		te[ 6 ] = t13 * detInv;
		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

		return this;

	},

	transpose: function () {

		var tmp, m = this.elements;

		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

		return this;

	},

	getNormalMatrix: function ( matrix4 ) {

		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

	},

	transposeIntoArray: function ( r ) {

		var m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 9; i ++ ) {

			if ( te[ i ] !== me[ i ] ) { return false; }

		}

		return true;

	},

	fromArray: function ( array, offset ) {
		var this$1 = this;


		if ( offset === undefined ) { offset = 0; }

		for ( var i = 0; i < 9; i ++ ) {

			this$1.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) { array = []; }
		if ( offset === undefined ) { offset = 0; }

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];

		array[ offset + 3 ] = te[ 3 ];
		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];

		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];
		array[ offset + 8 ] = te[ 8 ];

		return array;

	}

} );

/**
 * @author bhouston / http://clara.io
 */

function Plane( normal, constant ) {

	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
	this.constant = ( constant !== undefined ) ? constant : 0;

}

Object.assign( Plane.prototype, {

	set: function ( normal, constant ) {

		this.normal.copy( normal );
		this.constant = constant;

		return this;

	},

	setComponents: function ( x, y, z, w ) {

		this.normal.set( x, y, z );
		this.constant = w;

		return this;

	},

	setFromNormalAndCoplanarPoint: function ( normal, point ) {

		this.normal.copy( normal );
		this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

		return this;

	},

	setFromCoplanarPoints: function () {

		var v1 = new Vector3();
		var v2 = new Vector3();

		return function setFromCoplanarPoints( a, b, c ) {

			var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( plane ) {

		this.normal.copy( plane.normal );
		this.constant = plane.constant;

		return this;

	},

	normalize: function () {

		// Note: will lead to a divide by zero if the plane is invalid.

		var inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar( inverseNormalLength );
		this.constant *= inverseNormalLength;

		return this;

	},

	negate: function () {

		this.constant *= - 1;
		this.normal.negate();

		return this;

	},

	distanceToPoint: function ( point ) {

		return this.normal.dot( point ) + this.constant;

	},

	distanceToSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) - sphere.radius;

	},

	projectPoint: function ( point, optionalTarget ) {

		return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

	},

	orthoPoint: function ( point, optionalTarget ) {

		var perpendicularMagnitude = this.distanceToPoint( point );

		var result = optionalTarget || new Vector3();
		return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

	},

	intersectLine: function () {

		var v1 = new Vector3();

		return function intersectLine( line, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			var direction = line.delta( v1 );

			var denominator = this.normal.dot( direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) === 0 ) {

					return result.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return undefined;

			}

			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return undefined;

			}

			return result.copy( direction ).multiplyScalar( t ).add( line.start );

		};

	}(),

	intersectsLine: function ( line ) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		var startSign = this.distanceToPoint( line.start );
		var endSign = this.distanceToPoint( line.end );

		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	},

	intersectsBox: function ( box ) {

		return box.intersectsPlane( this );

	},

	intersectsSphere: function ( sphere ) {

		return sphere.intersectsPlane( this );

	},

	coplanarPoint: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.copy( this.normal ).multiplyScalar( - this.constant );

	},

	applyMatrix4: function () {

		var v1 = new Vector3();
		var m1 = new Matrix3();

		return function applyMatrix4( matrix, optionalNormalMatrix ) {

			var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

			// transform normal based on theory here:
			// http://www.songho.ca/opengl/gl_normaltransform.html
			var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
			var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

			// recalculate constant (like in setFromNormalAndCoplanarPoint)
			this.constant = - referencePoint.dot( normal );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.constant = this.constant - offset.dot( this.normal );

		return this;

	},

	equals: function ( plane ) {

		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://clara.io
 */

function Frustum( p0, p1, p2, p3, p4, p5 ) {

	this.planes = [

		( p0 !== undefined ) ? p0 : new Plane(),
		( p1 !== undefined ) ? p1 : new Plane(),
		( p2 !== undefined ) ? p2 : new Plane(),
		( p3 !== undefined ) ? p3 : new Plane(),
		( p4 !== undefined ) ? p4 : new Plane(),
		( p5 !== undefined ) ? p5 : new Plane()

	];

}

Object.assign( Frustum.prototype, {

	set: function ( p0, p1, p2, p3, p4, p5 ) {

		var planes = this.planes;

		planes[ 0 ].copy( p0 );
		planes[ 1 ].copy( p1 );
		planes[ 2 ].copy( p2 );
		planes[ 3 ].copy( p3 );
		planes[ 4 ].copy( p4 );
		planes[ 5 ].copy( p5 );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( frustum ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			planes[ i ].copy( frustum.planes[ i ] );

		}

		return this;

	},

	setFromMatrix: function ( m ) {

		var planes = this.planes;
		var me = m.elements;
		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

		return this;

	},

	intersectsObject: function () {

		var sphere = new Sphere();

		return function intersectsObject( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				{ geometry.computeBoundingSphere(); }

			sphere.copy( geometry.boundingSphere )
				.applyMatrix4( object.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSprite: function () {

		var sphere = new Sphere();

		return function intersectsSprite( sprite ) {

			sphere.center.set( 0, 0, 0 );
			sphere.radius = 0.7071067811865476;
			sphere.applyMatrix4( sprite.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		var planes = this.planes;
		var center = sphere.center;
		var negRadius = - sphere.radius;

		for ( var i = 0; i < 6; i ++ ) {

			var distance = planes[ i ].distanceToPoint( center );

			if ( distance < negRadius ) {

				return false;

			}

		}

		return true;

	},

	intersectsBox: function () {

		var p1 = new Vector3(),
			p2 = new Vector3();

		return function intersectsBox( box ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				var plane = planes[ i ];

				p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
				p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
				p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
				p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				var d1 = plane.distanceToPoint( p1 );
				var d2 = plane.distanceToPoint( p2 );

				// if both outside plane, no intersection

				if ( d1 < 0 && d2 < 0 ) {

					return false;

				}

			}

			return true;

		};

	}(),

	containsPoint: function ( point ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

				return false;

			}

		}

		return true;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {

	var _gl = _renderer.context,
		_state = _renderer.state,
		_frustum = new Frustum(),
		_projScreenMatrix = new Matrix4(),

		_lightShadows = _lights.shadows,

		_shadowMapSize = new Vector2(),
		_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),

		_lookTarget = new Vector3(),
		_lightPositionWorld = new Vector3(),

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants ),

		_materialCache = {};

	var cubeDirections = [
		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
	];

	var cubeUps = [
		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
	];

	var cube2DViewPorts = [
		new Vector4(), new Vector4(), new Vector4(),
		new Vector4(), new Vector4(), new Vector4()
	];

	// init

	var depthMaterialTemplate = new MeshDepthMaterial();
	depthMaterialTemplate.depthPacking = RGBADepthPacking;
	depthMaterialTemplate.clipping = true;

	var distanceShader = ShaderLib[ "distanceRGBA" ];
	var distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );

	for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

		var useMorphing = ( i & _MorphingFlag ) !== 0;
		var useSkinning = ( i & _SkinningFlag ) !== 0;

		var depthMaterial = depthMaterialTemplate.clone();
		depthMaterial.morphTargets = useMorphing;
		depthMaterial.skinning = useSkinning;

		_depthMaterials[ i ] = depthMaterial;

		var distanceMaterial = new ShaderMaterial( {
			defines: {
				'USE_SHADOWMAP': ''
			},
			uniforms: distanceUniforms,
			vertexShader: distanceShader.vertexShader,
			fragmentShader: distanceShader.fragmentShader,
			morphTargets: useMorphing,
			skinning: useSkinning,
			clipping: true
		} );

		_distanceMaterials[ i ] = distanceMaterial;

	}

	//

	var scope = this;

	this.enabled = false;

	this.autoUpdate = true;
	this.needsUpdate = false;

	this.type = PCFShadowMap;

	this.renderReverseSided = true;
	this.renderSingleSided = true;

	this.render = function ( scene, camera ) {

		if ( scope.enabled === false ) { return; }
		if ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }

		if ( _lightShadows.length === 0 ) { return; }

		// Set GL state for depth map.
		_state.disable( _gl.BLEND );
		_state.buffers.color.setClear( 1, 1, 1, 1 );
		_state.buffers.depth.setTest( true );
		_state.setScissorTest( false );

		// render depth map

		var faceCount;

		for ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {

			var light = _lightShadows[ i ];
			var shadow = light.shadow;
			var isPointLight = light && light.isPointLight;

			if ( shadow === undefined ) {

				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
				continue;

			}

			var shadowCamera = shadow.camera;

			_shadowMapSize.copy( shadow.mapSize );
			_shadowMapSize.min( _maxShadowMapSize );

			if ( isPointLight ) {

				var vpWidth = _shadowMapSize.x;
				var vpHeight = _shadowMapSize.y;

				// These viewports map a cube-map onto a 2D texture with the
				// following orientation:
				//
				//  xzXZ
				//   y Y
				//
				// X - Positive x direction
				// x - Negative x direction
				// Y - Positive y direction
				// y - Negative y direction
				// Z - Positive z direction
				// z - Negative z direction

				// positive X
				cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
				// negative X
				cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
				// positive Z
				cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
				// negative Z
				cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
				// positive Y
				cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
				// negative Y
				cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

				_shadowMapSize.x *= 4.0;
				_shadowMapSize.y *= 2.0;

			}

			if ( shadow.map === null ) {

				var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
				shadow.map.texture.name = light.name + ".shadowMap";

				shadowCamera.updateProjectionMatrix();

			}

			if ( shadow.isSpotLightShadow ) {

				shadow.update( light );

			}

			var shadowMap = shadow.map;
			var shadowMatrix = shadow.matrix;

			_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
			shadowCamera.position.copy( _lightPositionWorld );

			if ( isPointLight ) {

				faceCount = 6;

				// for point lights we set the shadow matrix to be a translation-only matrix
				// equal to inverse of the light's position

				shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

			} else {

				faceCount = 1;

				_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
				shadowCamera.lookAt( _lookTarget );
				shadowCamera.updateMatrixWorld();

				// compute shadow matrix

				shadowMatrix.set(
					0.5, 0.0, 0.0, 0.5,
					0.0, 0.5, 0.0, 0.5,
					0.0, 0.0, 0.5, 0.5,
					0.0, 0.0, 0.0, 1.0
				);

				shadowMatrix.multiply( shadowCamera.projectionMatrix );
				shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

			}

			_renderer.setRenderTarget( shadowMap );
			_renderer.clear();

			// render shadow map for each cube face (if omni-directional) or
			// run a single pass if not

			for ( var face = 0; face < faceCount; face ++ ) {

				if ( isPointLight ) {

					_lookTarget.copy( shadowCamera.position );
					_lookTarget.add( cubeDirections[ face ] );
					shadowCamera.up.copy( cubeUps[ face ] );
					shadowCamera.lookAt( _lookTarget );
					shadowCamera.updateMatrixWorld();

					var vpDimensions = cube2DViewPorts[ face ];
					_state.viewport( vpDimensions );

				}

				// update camera matrices and frustum

				_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
				_frustum.setFromMatrix( _projScreenMatrix );

				// set object matrices & frustum culling

				renderObject( scene, camera, shadowCamera, isPointLight );

			}

		}

		// Restore GL state.
		var clearColor = _renderer.getClearColor();
		var clearAlpha = _renderer.getClearAlpha();
		_renderer.setClearColor( clearColor, clearAlpha );

		scope.needsUpdate = false;

	};

	function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

		var geometry = object.geometry;

		var result = null;

		var materialVariants = _depthMaterials;
		var customMaterial = object.customDepthMaterial;

		if ( isPointLight ) {

			materialVariants = _distanceMaterials;
			customMaterial = object.customDistanceMaterial;

		}

		if ( ! customMaterial ) {

			var useMorphing = false;

			if ( material.morphTargets ) {

				if ( geometry && geometry.isBufferGeometry ) {

					useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

				} else if ( geometry && geometry.isGeometry ) {

					useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

				}

			}

			if ( object.isSkinnedMesh && material.skinning === false ) {

				console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

			}

			var useSkinning = object.isSkinnedMesh && material.skinning;

			var variantIndex = 0;

			if ( useMorphing ) { variantIndex |= _MorphingFlag; }
			if ( useSkinning ) { variantIndex |= _SkinningFlag; }

			result = materialVariants[ variantIndex ];

		} else {

			result = customMaterial;

		}

		if ( _renderer.localClippingEnabled &&
				material.clipShadows === true &&
				material.clippingPlanes.length !== 0 ) {

			// in this case we need a unique material instance reflecting the
			// appropriate state

			var keyA = result.uuid, keyB = material.uuid;

			var materialsForVariant = _materialCache[ keyA ];

			if ( materialsForVariant === undefined ) {

				materialsForVariant = {};
				_materialCache[ keyA ] = materialsForVariant;

			}

			var cachedMaterial = materialsForVariant[ keyB ];

			if ( cachedMaterial === undefined ) {

				cachedMaterial = result.clone();
				materialsForVariant[ keyB ] = cachedMaterial;

			}

			result = cachedMaterial;

		}

		result.visible = material.visible;
		result.wireframe = material.wireframe;

		var side = material.side;

		if ( scope.renderSingleSided && side == DoubleSide ) {

			side = FrontSide;

		}

		if ( scope.renderReverseSided ) {

			if ( side === FrontSide ) { side = BackSide; }
			else if ( side === BackSide ) { side = FrontSide; }

		}

		result.side = side;

		result.clipShadows = material.clipShadows;
		result.clippingPlanes = material.clippingPlanes;

		result.wireframeLinewidth = material.wireframeLinewidth;
		result.linewidth = material.linewidth;

		if ( isPointLight && result.uniforms.lightPos !== undefined ) {

			result.uniforms.lightPos.value.copy( lightPositionWorld );

		}

		return result;

	}

	function renderObject( object, camera, shadowCamera, isPointLight ) {

		if ( object.visible === false ) { return; }

		var visible = object.layers.test( camera.layers );

		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

			if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

				var geometry = _objects.update( object );
				var material = object.material;

				if ( Array.isArray( material ) ) {

					var groups = geometry.groups;

					for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

						var group = groups[ k ];
						var groupMaterial = material[ group.materialIndex ];

						if ( groupMaterial && groupMaterial.visible ) {

							var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

						}

					}

				} else if ( material.visible ) {

					var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

				}

			}

		}

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			renderObject( children[ i ], camera, shadowCamera, isPointLight );

		}

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLAttributes( gl ) {

	var buffers = {};

	function createBuffer( attribute, bufferType ) {

		var array = attribute.array;
		var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

		var buffer = gl.createBuffer();

		gl.bindBuffer( bufferType, buffer );
		gl.bufferData( bufferType, array, usage );

		attribute.onUploadCallback();

		var type = gl.FLOAT;

		if ( array instanceof Float32Array ) {

			type = gl.FLOAT;

		} else if ( array instanceof Float64Array ) {

			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

		} else if ( array instanceof Uint16Array ) {

			type = gl.UNSIGNED_SHORT;

		} else if ( array instanceof Int16Array ) {

			type = gl.SHORT;

		} else if ( array instanceof Uint32Array ) {

			type = gl.UNSIGNED_INT;

		} else if ( array instanceof Int32Array ) {

			type = gl.INT;

		} else if ( array instanceof Int8Array ) {

			type = gl.BYTE;

		} else if ( array instanceof Uint8Array ) {

			type = gl.UNSIGNED_BYTE;

		}

		return {
			buffer: buffer,
			type: type,
			bytesPerElement: array.BYTES_PER_ELEMENT,
			version: attribute.version
		};

	}

	function updateBuffer( buffer, attribute, bufferType ) {

		var array = attribute.array;
		var updateRange = attribute.updateRange;

		gl.bindBuffer( bufferType, buffer );

		if ( attribute.dynamic === false ) {

			gl.bufferData( bufferType, array, gl.STATIC_DRAW );

		} else if ( updateRange.count === - 1 ) {

			// Not using update ranges

			gl.bufferSubData( bufferType, 0, array );

		} else if ( updateRange.count === 0 ) {

			console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

		} else {

			gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
				array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

			updateRange.count = -1; // reset range

		}

	}

	//

	function get( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

		return buffers[ attribute.uuid ];

	}

	function remove( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

		var data = buffers[ attribute.uuid ];

		if ( data ) {

			gl.deleteBuffer( data.buffer );

			delete buffers[ attribute.uuid ];

		}

	}

	function update( attribute, bufferType ) {

		if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

		var data = buffers[ attribute.uuid ];

		if ( data === undefined ) {

			buffers[ attribute.uuid ] = createBuffer( attribute, bufferType );

		} else if ( data.version < attribute.version ) {

			updateBuffer( data.buffer, attribute, bufferType );

			data.version = attribute.version;

		}

	}

	return {

		get: get,
		remove: remove,
		update: update

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Euler( x, y, z, order ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._order = order || Euler.DefaultOrder;

}

Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

Euler.DefaultOrder = 'XYZ';

Object.defineProperties( Euler.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this.onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this.onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this.onChangeCallback();

		}

	},

	order: {

		get: function () {

			return this._order;

		},

		set: function ( value ) {

			this._order = value;
			this.onChangeCallback();

		}

	}

} );

Object.assign( Euler.prototype, {

	isEuler: true,

	set: function ( x, y, z, order ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order || this._order;

		this.onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._order );

	},

	copy: function ( euler ) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m, order, update ) {

		var clamp = _Math.clamp;

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements;
		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		order = order || this._order;

		if ( order === 'XYZ' ) {

			this._y = Math.asin( clamp( m13, - 1, 1 ) );

			if ( Math.abs( m13 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m33 );
				this._z = Math.atan2( - m12, m11 );

			} else {

				this._x = Math.atan2( m32, m22 );
				this._z = 0;

			}

		} else if ( order === 'YXZ' ) {

			this._x = Math.asin( - clamp( m23, - 1, 1 ) );

			if ( Math.abs( m23 ) < 0.99999 ) {

				this._y = Math.atan2( m13, m33 );
				this._z = Math.atan2( m21, m22 );

			} else {

				this._y = Math.atan2( - m31, m11 );
				this._z = 0;

			}

		} else if ( order === 'ZXY' ) {

			this._x = Math.asin( clamp( m32, - 1, 1 ) );

			if ( Math.abs( m32 ) < 0.99999 ) {

				this._y = Math.atan2( - m31, m33 );
				this._z = Math.atan2( - m12, m22 );

			} else {

				this._y = 0;
				this._z = Math.atan2( m21, m11 );

			}

		} else if ( order === 'ZYX' ) {

			this._y = Math.asin( - clamp( m31, - 1, 1 ) );

			if ( Math.abs( m31 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m33 );
				this._z = Math.atan2( m21, m11 );

			} else {

				this._x = 0;
				this._z = Math.atan2( - m12, m22 );

			}

		} else if ( order === 'YZX' ) {

			this._z = Math.asin( clamp( m21, - 1, 1 ) );

			if ( Math.abs( m21 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m22 );
				this._y = Math.atan2( - m31, m11 );

			} else {

				this._x = 0;
				this._y = Math.atan2( m13, m33 );

			}

		} else if ( order === 'XZY' ) {

			this._z = Math.asin( - clamp( m12, - 1, 1 ) );

			if ( Math.abs( m12 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m22 );
				this._y = Math.atan2( m13, m11 );

			} else {

				this._x = Math.atan2( - m23, m33 );
				this._y = 0;

			}

		} else {

			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

		}

		this._order = order;

		if ( update !== false ) { this.onChangeCallback(); }

		return this;

	},

	setFromQuaternion: function () {

		var matrix = new Matrix4();

		return function setFromQuaternion( q, order, update ) {

			matrix.makeRotationFromQuaternion( q );

			return this.setFromRotationMatrix( matrix, order, update );

		};

	}(),

	setFromVector3: function ( v, order ) {

		return this.set( v.x, v.y, v.z, order || this._order );

	},

	reorder: function () {

		// WARNING: this discards revolution information -bhouston

		var q = new Quaternion();

		return function reorder( newOrder ) {

			q.setFromEuler( this );

			return this.setFromQuaternion( q, newOrder );

		};

	}(),

	equals: function ( euler ) {

		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	},

	fromArray: function ( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		if ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) { array = []; }
		if ( offset === undefined ) { offset = 0; }

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._order;

		return array;

	},

	toVector3: function ( optionalResult ) {

		if ( optionalResult ) {

			return optionalResult.set( this._x, this._y, this._z );

		} else {

			return new Vector3( this._x, this._y, this._z );

		}

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Layers() {

	this.mask = 1 | 0;

}

Object.assign( Layers.prototype, {

	set: function ( channel ) {

		this.mask = 1 << channel | 0;

	},

	enable: function ( channel ) {

		this.mask |= 1 << channel | 0;

	},

	toggle: function ( channel ) {

		this.mask ^= 1 << channel | 0;

	},

	disable: function ( channel ) {

		this.mask &= ~ ( 1 << channel | 0 );

	},

	test: function ( layers ) {

		return ( this.mask & layers.mask ) !== 0;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author elephantatwork / www.elephantatwork.ch
 */

var object3DId = 0;

function Object3D() {

	Object.defineProperty( this, 'id', { value: object3DId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Object3D';

	this.parent = null;
	this.children = [];

	this.up = Object3D.DefaultUp.clone();

	var position = new Vector3();
	var rotation = new Euler();
	var quaternion = new Quaternion();
	var scale = new Vector3( 1, 1, 1 );

	function onRotationChange() {

		quaternion.setFromEuler( rotation, false );

	}

	function onQuaternionChange() {

		rotation.setFromQuaternion( quaternion, undefined, false );

	}

	rotation.onChange( onRotationChange );
	quaternion.onChange( onQuaternionChange );

	Object.defineProperties( this, {
		position: {
			enumerable: true,
			value: position
		},
		rotation: {
			enumerable: true,
			value: rotation
		},
		quaternion: {
			enumerable: true,
			value: quaternion
		},
		scale: {
			enumerable: true,
			value: scale
		},
		modelViewMatrix: {
			value: new Matrix4()
		},
		normalMatrix: {
			value: new Matrix3()
		}
	} );

	this.matrix = new Matrix4();
	this.matrixWorld = new Matrix4();

	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
	this.matrixWorldNeedsUpdate = false;

	this.layers = new Layers();
	this.visible = true;

	this.castShadow = false;
	this.receiveShadow = false;

	this.frustumCulled = true;
	this.renderOrder = 0;

	this.userData = {};
}

Object3D.DefaultUp = new Vector3( 0, 1, 0 );
Object3D.DefaultMatrixAutoUpdate = true;

Object.assign( Object3D.prototype, EventDispatcher.prototype, {

	isObject3D: true,

	onBeforeRender: function () {},
	onAfterRender: function () {},

	applyMatrix: function ( matrix ) {

		this.matrix.multiplyMatrices( matrix, this.matrix );

		this.matrix.decompose( this.position, this.quaternion, this.scale );

	},

	applyQuaternion: function ( q ) {

		this.quaternion.premultiply( q );

		return this;

	},

	setRotationFromAxisAngle: function ( axis, angle ) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle( axis, angle );

	},

	setRotationFromEuler: function ( euler ) {

		this.quaternion.setFromEuler( euler, true );

	},

	setRotationFromMatrix: function ( m ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix( m );

	},

	setRotationFromQuaternion: function ( q ) {

		// assumes q is normalized

		this.quaternion.copy( q );

	},

	rotateOnAxis: function () {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		var q1 = new Quaternion();

		return function rotateOnAxis( axis, angle ) {

			q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( q1 );

			return this;

		};

	}(),

	rotateX: function () {

		var v1 = new Vector3( 1, 0, 0 );

		return function rotateX( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateY: function () {

		var v1 = new Vector3( 0, 1, 0 );

		return function rotateY( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateZ: function () {

		var v1 = new Vector3( 0, 0, 1 );

		return function rotateZ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	translateOnAxis: function () {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		var v1 = new Vector3();

		return function translateOnAxis( axis, distance ) {

			v1.copy( axis ).applyQuaternion( this.quaternion );

			this.position.add( v1.multiplyScalar( distance ) );

			return this;

		};

	}(),

	translateX: function () {

		var v1 = new Vector3( 1, 0, 0 );

		return function translateX( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateY: function () {

		var v1 = new Vector3( 0, 1, 0 );

		return function translateY( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateZ: function () {

		var v1 = new Vector3( 0, 0, 1 );

		return function translateZ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	localToWorld: function ( vector ) {

		return vector.applyMatrix4( this.matrixWorld );

	},

	worldToLocal: function () {

		var m1 = new Matrix4();

		return function worldToLocal( vector ) {

			return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

		};

	}(),

	lookAt: function () {

		// This method does not support objects with rotated and/or translated parent(s)

		var m1 = new Matrix4();

		return function lookAt( vector ) {

			if ( this.isCamera ) {

				m1.lookAt( this.position, vector, this.up );

			} else {

				m1.lookAt( vector, this.position, this.up );

			}

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}(),

	add: function ( object ) {
		var arguments$1 = arguments;
		var this$1 = this;


		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this$1.add( arguments$1[ i ] );

			}

			return this;

		}

		if ( object === this ) {

			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
			return this;

		}

		if ( ( object && object.isObject3D ) ) {

			if ( object.parent !== null ) {

				object.parent.remove( object );

			}

			object.parent = this;
			object.dispatchEvent( { type: 'added' } );

			this.children.push( object );

		} else {

			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

		}

		return this;

	},

	remove: function ( object ) {
		var arguments$1 = arguments;
		var this$1 = this;


		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this$1.remove( arguments$1[ i ] );

			}

			return this;

		}

		var index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = null;

			object.dispatchEvent( { type: 'removed' } );

			this.children.splice( index, 1 );

		}

		return this;

	},

	getObjectById: function ( id ) {

		return this.getObjectByProperty( 'id', id );

	},

	getObjectByName: function ( name ) {

		return this.getObjectByProperty( 'name', name );

	},

	getObjectByProperty: function ( name, value ) {
		var this$1 = this;


		if ( this[ name ] === value ) { return this; }

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this$1.children[ i ];
			var object = child.getObjectByProperty( name, value );

			if ( object !== undefined ) {

				return object;

			}

		}

		return undefined;

	},

	getWorldPosition: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();

		this.updateMatrixWorld( true );

		return result.setFromMatrixPosition( this.matrixWorld );

	},

	getWorldQuaternion: function () {

		var position = new Vector3();
		var scale = new Vector3();

		return function getWorldQuaternion( optionalTarget ) {

			var result = optionalTarget || new Quaternion();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, result, scale );

			return result;

		};

	}(),

	getWorldRotation: function () {

		var quaternion = new Quaternion();

		return function getWorldRotation( optionalTarget ) {

			var result = optionalTarget || new Euler();

			this.getWorldQuaternion( quaternion );

			return result.setFromQuaternion( quaternion, this.rotation.order, false );

		};

	}(),

	getWorldScale: function () {

		var position = new Vector3();
		var quaternion = new Quaternion();

		return function getWorldScale( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, quaternion, result );

			return result;

		};

	}(),

	getWorldDirection: function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

		};

	}(),

	raycast: function () {},

	traverse: function ( callback ) {

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverse( callback );

		}

	},

	traverseVisible: function ( callback ) {

		if ( this.visible === false ) { return; }

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverseVisible( callback );

		}

	},

	traverseAncestors: function ( callback ) {

		var parent = this.parent;

		if ( parent !== null ) {

			callback( parent );

			parent.traverseAncestors( callback );

		}

	},

	updateMatrix: function () {

		this.matrix.compose( this.position, this.quaternion, this.scale );

		this.matrixWorldNeedsUpdate = true;

	},

	updateMatrixWorld: function ( force ) {

		if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

		if ( this.matrixWorldNeedsUpdate || force ) {

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].updateMatrixWorld( force );

		}

	},

	toJSON: function ( meta ) {
		var this$1 = this;


		// meta is '' when called from JSON.stringify
		var isRootObject = ( meta === undefined || meta === '' );

		var output = {};

		// meta is a hash used to collect geometries, materials.
		// not providing it implies that this is the root object
		// being serialized.
		if ( isRootObject ) {

			// initialize meta obj
			meta = {
				geometries: {},
				materials: {},
				textures: {},
				images: {}
			};

			output.metadata = {
				version: 4.5,
				type: 'Object',
				generator: 'Object3D.toJSON'
			};

		}

		// standard Object3D serialization

		var object = {};

		object.uuid = this.uuid;
		object.type = this.type;

		if ( this.name !== '' ) { object.name = this.name; }
		if ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }
		if ( this.castShadow === true ) { object.castShadow = true; }
		if ( this.receiveShadow === true ) { object.receiveShadow = true; }
		if ( this.visible === false ) { object.visible = false; }

		object.matrix = this.matrix.toArray();

		//

		function serialize( library, element ) {

			if ( library[ element.uuid ] === undefined ) {

				library[ element.uuid ] = element.toJSON( meta );

			}

			return element.uuid;

		}

		if ( this.geometry !== undefined ) {

			object.geometry = serialize( meta.geometries, this.geometry );

		}

		if ( this.material !== undefined ) {

			if ( Array.isArray( this.material ) ) {

				var uuids = [];

				for ( var i = 0, l = this.material.length; i < l; i ++ ) {

					uuids.push( serialize( meta.materials, this$1.material[ i ] ) );

				}

				object.material = uuids;

			} else {

				object.material = serialize( meta.materials, this.material );

			}

		}

		//

		if ( this.children.length > 0 ) {

			object.children = [];

			for ( var i = 0; i < this.children.length; i ++ ) {

				object.children.push( this$1.children[ i ].toJSON( meta ).object );

			}

		}

		if ( isRootObject ) {

			var geometries = extractFromCache( meta.geometries );
			var materials = extractFromCache( meta.materials );
			var textures = extractFromCache( meta.textures );
			var images = extractFromCache( meta.images );

			if ( geometries.length > 0 ) { output.geometries = geometries; }
			if ( materials.length > 0 ) { output.materials = materials; }
			if ( textures.length > 0 ) { output.textures = textures; }
			if ( images.length > 0 ) { output.images = images; }

		}

		output.object = object;

		return output;

		// extract data from the cache hash
		// remove metadata on each item
		// and return as array
		function extractFromCache( cache ) {

			var values = [];
			for ( var key in cache ) {

				var data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}
			return values;

		}

	},

	clone: function ( recursive ) {

		return new this.constructor().copy( this, recursive );

	},

	copy: function ( source, recursive ) {
		var this$1 = this;


		if ( recursive === undefined ) { recursive = true; }

		this.name = source.name;

		this.up.copy( source.up );

		this.position.copy( source.position );
		this.quaternion.copy( source.quaternion );
		this.scale.copy( source.scale );

		this.matrix.copy( source.matrix );
		this.matrixWorld.copy( source.matrixWorld );

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

		this.layers.mask = source.layers.mask;
		this.visible = source.visible;

		this.castShadow = source.castShadow;
		this.receiveShadow = source.receiveShadow;

		this.frustumCulled = source.frustumCulled;
		this.renderOrder = source.renderOrder;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		if ( recursive === true ) {

			for ( var i = 0; i < source.children.length; i ++ ) {

				var child = source.children[ i ];
				this$1.add( child.clone() );

			}

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/

function Camera() {

	Object3D.call( this );

	this.type = 'Camera';

	this.matrixWorldInverse = new Matrix4();
	this.projectionMatrix = new Matrix4();

}

Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Camera,

	isCamera: true,

	copy: function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	},

	getWorldDirection: function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}(),

	updateMatrixWorld: function ( force ) {

		Object3D.prototype.updateMatrixWorld.call( this, force );

		this.matrixWorldInverse.getInverse( this.matrixWorld );

	},

	clone: function () {

		return new this.constructor().copy( this );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author arose / http://github.com/arose
 */

function OrthographicCamera( left, right, top, bottom, near, far ) {

	Camera.call( this );

	this.type = 'OrthographicCamera';

	this.zoom = 1;
	this.view = null;

	this.left = left;
	this.right = right;
	this.top = top;
	this.bottom = bottom;

	this.near = ( near !== undefined ) ? near : 0.1;
	this.far = ( far !== undefined ) ? far : 2000;

	this.updateProjectionMatrix();

}

OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	constructor: OrthographicCamera,

	isOrthographicCamera: true,

	copy: function ( source, recursive ) {

		Camera.prototype.copy.call( this, source, recursive );

		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		return this;

	},

	setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {

		this.view = {
			fullWidth: fullWidth,
			fullHeight: fullHeight,
			offsetX: x,
			offsetY: y,
			width: width,
			height: height
		};

		this.updateProjectionMatrix();

	},

	clearViewOffset: function() {

		this.view = null;
		this.updateProjectionMatrix();

	},

	updateProjectionMatrix: function () {

		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
		var cx = ( this.right + this.left ) / 2;
		var cy = ( this.top + this.bottom ) / 2;

		var left = cx - dx;
		var right = cx + dx;
		var top = cy + dy;
		var bottom = cy - dy;

		if ( this.view !== null ) {

			var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
			var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
			var scaleW = ( this.right - this.left ) / this.view.width;
			var scaleH = ( this.top - this.bottom ) / this.view.height;

			left += scaleW * ( this.view.offsetX / zoomW );
			right = left + scaleW * ( this.view.width / zoomW );
			top -= scaleH * ( this.view.offsetY / zoomH );
			bottom = top - scaleH * ( this.view.height / zoomH );

		}

		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;

		if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }

		return data;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author tschw
 */

function PerspectiveCamera( fov, aspect, near, far ) {

	Camera.call( this );

	this.type = 'PerspectiveCamera';

	this.fov = fov !== undefined ? fov : 50;
	this.zoom = 1;

	this.near = near !== undefined ? near : 0.1;
	this.far = far !== undefined ? far : 2000;
	this.focus = 10;

	this.aspect = aspect !== undefined ? aspect : 1;
	this.view = null;

	this.filmGauge = 35;	// width of the film (default in millimeters)
	this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

	this.updateProjectionMatrix();

}

PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	constructor: PerspectiveCamera,

	isPerspectiveCamera: true,

	copy: function ( source, recursive ) {

		Camera.prototype.copy.call( this, source, recursive );

		this.fov = source.fov;
		this.zoom = source.zoom;

		this.near = source.near;
		this.far = source.far;
		this.focus = source.focus;

		this.aspect = source.aspect;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		this.filmGauge = source.filmGauge;
		this.filmOffset = source.filmOffset;

		return this;

	},

	/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */
	setFocalLength: function ( focalLength ) {

		// see http://www.bobatkins.com/photography/technical/field_of_view.html
		var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

		this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
		this.updateProjectionMatrix();

	},

	/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */
	getFocalLength: function () {

		var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

		return 0.5 * this.getFilmHeight() / vExtentSlope;

	},

	getEffectiveFOV: function () {

		return _Math.RAD2DEG * 2 * Math.atan(
				Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

	},

	getFilmWidth: function () {

		// film not completely covered in portrait format (aspect < 1)
		return this.filmGauge * Math.min( this.aspect, 1 );

	},

	getFilmHeight: function () {

		// film not completely covered in landscape format (aspect > 1)
		return this.filmGauge / Math.max( this.aspect, 1 );

	},

	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   var w = 1920;
	 *   var h = 1080;
	 *   var fullWidth = w * 3;
	 *   var fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */
	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

		this.aspect = fullWidth / fullHeight;

		this.view = {
			fullWidth: fullWidth,
			fullHeight: fullHeight,
			offsetX: x,
			offsetY: y,
			width: width,
			height: height
		};

		this.updateProjectionMatrix();

	},

	clearViewOffset: function () {

		this.view = null;
		this.updateProjectionMatrix();

	},

	updateProjectionMatrix: function () {

		var near = this.near,
			top = near * Math.tan(
					_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
			height = 2 * top,
			width = this.aspect * height,
			left = - 0.5 * width,
			view = this.view;

		if ( view !== null ) {

			var fullWidth = view.fullWidth,
				fullHeight = view.fullHeight;

			left += view.offsetX * width / fullWidth;
			top -= view.offsetY * height / fullHeight;
			width *= view.width / fullWidth;
			height *= view.height / fullHeight;

		}

		var skew = this.filmOffset;
		if ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }

		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.fov = this.fov;
		data.object.zoom = this.zoom;

		data.object.near = this.near;
		data.object.far = this.far;
		data.object.focus = this.focus;

		data.object.aspect = this.aspect;

		if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }

		data.object.filmGauge = this.filmGauge;
		data.object.filmOffset = this.filmOffset;

		return data;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Face3( a, b, c, normal, color, materialIndex ) {

	this.a = a;
	this.b = b;
	this.c = c;

	this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
	this.vertexNormals = Array.isArray( normal ) ? normal : [];

	this.color = ( color && color.isColor ) ? color : new Color();
	this.vertexColors = Array.isArray( color ) ? color : [];

	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

}

Object.assign( Face3.prototype, {

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {
		var this$1 = this;


		this.a = source.a;
		this.b = source.b;
		this.c = source.c;

		this.normal.copy( source.normal );
		this.color.copy( source.color );

		this.materialIndex = source.materialIndex;

		for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

			this$1.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

		}

		for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

			this$1.vertexColors[ i ] = source.vertexColors[ i ].clone();

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://clara.io
 */

var count = 0;
function GeometryIdCount() { return count++; }

function Geometry() {

	Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Geometry';

	this.vertices = [];
	this.colors = [];
	this.faces = [];
	this.faceVertexUvs = [[]];

	this.morphTargets = [];
	this.morphNormals = [];

	this.skinWeights = [];
	this.skinIndices = [];

	this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	// update flags

	this.elementsNeedUpdate = false;
	this.verticesNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.lineDistancesNeedUpdate = false;
	this.groupsNeedUpdate = false;

}

Object.assign( Geometry.prototype, EventDispatcher.prototype, {

	isGeometry: true,

	applyMatrix: function ( matrix ) {
		var this$1 = this;


		var normalMatrix = new Matrix3().getNormalMatrix( matrix );

		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

			var vertex = this$1.vertices[ i ];
			vertex.applyMatrix4( matrix );

		}

		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

			var face = this$1.faces[ i ];
			face.normal.applyMatrix3( normalMatrix ).normalize();

			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

			}

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		this.verticesNeedUpdate = true;
		this.normalsNeedUpdate = true;

		return this;

	},

	rotateX: function () {

		// rotate geometry around world x-axis

		var m1 = new Matrix4();

		return function rotateX( angle ) {

			m1.makeRotationX( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateY: function () {

		// rotate geometry around world y-axis

		var m1 = new Matrix4();

		return function rotateY( angle ) {

			m1.makeRotationY( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateZ: function () {

		// rotate geometry around world z-axis

		var m1 = new Matrix4();

		return function rotateZ( angle ) {

			m1.makeRotationZ( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	translate: function () {

		// translate geometry

		var m1 = new Matrix4();

		return function translate( x, y, z ) {

			m1.makeTranslation( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	scale: function () {

		// scale geometry

		var m1 = new Matrix4();

		return function scale( x, y, z ) {

			m1.makeScale( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	lookAt: function () {

		var obj = new Object3D();

		return function lookAt( vector ) {

			obj.lookAt( vector );

			obj.updateMatrix();

			this.applyMatrix( obj.matrix );

		};

	}(),

	fromBufferGeometry: function ( geometry ) {

		var scope = this;

		var indices = geometry.index !== null ? geometry.index.array : undefined;
		var attributes = geometry.attributes;

		var positions = attributes.position.array;
		var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
		var colors = attributes.color !== undefined ? attributes.color.array : undefined;
		var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
		var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

		if ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }

		var tempNormals = [];
		var tempUVs = [];
		var tempUVs2 = [];

		for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

			scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

			if ( normals !== undefined ) {

				tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

			}

			if ( colors !== undefined ) {

				scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

			}

			if ( uvs !== undefined ) {

				tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

			}

			if ( uvs2 !== undefined ) {

				tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

			}

		}

		function addFace( a, b, c, materialIndex ) {

			var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
			var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

			var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

			scope.faces.push( face );

			if ( uvs !== undefined ) {

				scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

			}

			if ( uvs2 !== undefined ) {

				scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

			}

		}

		var groups = geometry.groups;

		if ( groups.length > 0 ) {

			for ( var i = 0; i < groups.length; i ++ ) {

				var group = groups[ i ];

				var start = group.start;
				var count = group.count;

				for ( var j = start, jl = start + count; j < jl; j += 3 ) {

					if ( indices !== undefined ) {

						addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

					} else {

						addFace( j, j + 1, j + 2, group.materialIndex );

					}

				}

			}

		} else {

			if ( indices !== undefined ) {

				for ( var i = 0; i < indices.length; i += 3 ) {

					addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

				}

			} else {

				for ( var i = 0; i < positions.length / 3; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

		}

		this.computeFaceNormals();

		if ( geometry.boundingBox !== null ) {

			this.boundingBox = geometry.boundingBox.clone();

		}

		if ( geometry.boundingSphere !== null ) {

			this.boundingSphere = geometry.boundingSphere.clone();

		}

		return this;

	},

	center: function () {

		this.computeBoundingBox();

		var offset = this.boundingBox.getCenter().negate();

		this.translate( offset.x, offset.y, offset.z );

		return offset;

	},

	normalize: function () {

		this.computeBoundingSphere();

		var center = this.boundingSphere.center;
		var radius = this.boundingSphere.radius;

		var s = radius === 0 ? 1 : 1.0 / radius;

		var matrix = new Matrix4();
		matrix.set(
			s, 0, 0, - s * center.x,
			0, s, 0, - s * center.y,
			0, 0, s, - s * center.z,
			0, 0, 0, 1
		);

		this.applyMatrix( matrix );

		return this;

	},

	computeFaceNormals: function () {
		var this$1 = this;


		var cb = new Vector3(), ab = new Vector3();

		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

			var face = this$1.faces[ f ];

			var vA = this$1.vertices[ face.a ];
			var vB = this$1.vertices[ face.b ];
			var vC = this$1.vertices[ face.c ];

			cb.subVectors( vC, vB );
			ab.subVectors( vA, vB );
			cb.cross( ab );

			cb.normalize();

			face.normal.copy( cb );

		}

	},

	computeVertexNormals: function ( areaWeighted ) {
		var this$1 = this;


		if ( areaWeighted === undefined ) { areaWeighted = true; }

		var v, vl, f, fl, face, vertices;

		vertices = new Array( this.vertices.length );

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ] = new Vector3();

		}

		if ( areaWeighted ) {

			// vertex normals weighted by triangle areas
			// http://www.iquilezles.org/www/articles/normals/normals.htm

			var vA, vB, vC;
			var cb = new Vector3(), ab = new Vector3();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this$1.faces[ f ];

				vA = this$1.vertices[ face.a ];
				vB = this$1.vertices[ face.b ];
				vC = this$1.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				vertices[ face.a ].add( cb );
				vertices[ face.b ].add( cb );
				vertices[ face.c ].add( cb );

			}

		} else {

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this$1.faces[ f ];

				vertices[ face.a ].add( face.normal );
				vertices[ face.b ].add( face.normal );
				vertices[ face.c ].add( face.normal );

			}

		}

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ].normalize();

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this$1.faces[ f ];

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				vertexNormals[ 0 ].copy( vertices[ face.a ] );
				vertexNormals[ 1 ].copy( vertices[ face.b ] );
				vertexNormals[ 2 ].copy( vertices[ face.c ] );

			} else {

				vertexNormals[ 0 ] = vertices[ face.a ].clone();
				vertexNormals[ 1 ] = vertices[ face.b ].clone();
				vertexNormals[ 2 ] = vertices[ face.c ].clone();

			}

		}

		if ( this.faces.length > 0 ) {

			this.normalsNeedUpdate = true;

		}

	},

	computeFlatVertexNormals: function () {
		var this$1 = this;


		var f, fl, face;

		this.computeFaceNormals();

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this$1.faces[ f ];

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				vertexNormals[ 0 ].copy( face.normal );
				vertexNormals[ 1 ].copy( face.normal );
				vertexNormals[ 2 ].copy( face.normal );

			} else {

				vertexNormals[ 0 ] = face.normal.clone();
				vertexNormals[ 1 ] = face.normal.clone();
				vertexNormals[ 2 ] = face.normal.clone();

			}

		}

		if ( this.faces.length > 0 ) {

			this.normalsNeedUpdate = true;

		}

	},

	computeMorphNormals: function () {
		var this$1 = this;


		var i, il, f, fl, face;

		// save original normals
		// - create temp variables on first access
		//   otherwise just copy (for faster repeated calls)

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this$1.faces[ f ];

			if ( ! face.__originalFaceNormal ) {

				face.__originalFaceNormal = face.normal.clone();

			} else {

				face.__originalFaceNormal.copy( face.normal );

			}

			if ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }

			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

				if ( ! face.__originalVertexNormals[ i ] ) {

					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

				} else {

					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

				}

			}

		}

		// use temp geometry to compute face and vertex normals for each morph

		var tmpGeo = new Geometry();
		tmpGeo.faces = this.faces;

		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

			// create on first access

			if ( ! this$1.morphNormals[ i ] ) {

				this$1.morphNormals[ i ] = {};
				this$1.morphNormals[ i ].faceNormals = [];
				this$1.morphNormals[ i ].vertexNormals = [];

				var dstNormalsFace = this$1.morphNormals[ i ].faceNormals;
				var dstNormalsVertex = this$1.morphNormals[ i ].vertexNormals;

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					faceNormal = new Vector3();
					vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

					dstNormalsFace.push( faceNormal );
					dstNormalsVertex.push( vertexNormals );

				}

			}

			var morphNormals = this$1.morphNormals[ i ];

			// set vertices to morph target

			tmpGeo.vertices = this$1.morphTargets[ i ].vertices;

			// compute morph normals

			tmpGeo.computeFaceNormals();
			tmpGeo.computeVertexNormals();

			// store morph normals

			var faceNormal, vertexNormals;

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this$1.faces[ f ];

				faceNormal = morphNormals.faceNormals[ f ];
				vertexNormals = morphNormals.vertexNormals[ f ];

				faceNormal.copy( face.normal );

				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

			}

		}

		// restore original normals

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this$1.faces[ f ];

			face.normal = face.__originalFaceNormal;
			face.vertexNormals = face.__originalVertexNormals;

		}

	},

	computeLineDistances: function () {
		var this$1 = this;


		var d = 0;
		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			if ( i > 0 ) {

				d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

			}

			this$1.lineDistances[ i ] = d;

		}

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		this.boundingBox.setFromPoints( this.vertices );

	},

	computeBoundingSphere: function () {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new Sphere();

		}

		this.boundingSphere.setFromPoints( this.vertices );

	},

	merge: function ( geometry, matrix, materialIndexOffset ) {

		if ( ! ( geometry && geometry.isGeometry ) ) {

			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
			return;

		}

		var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ],
			colors1 = this.colors,
			colors2 = geometry.colors;

		if ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }

		if ( matrix !== undefined ) {

			normalMatrix = new Matrix3().getNormalMatrix( matrix );

		}

		// vertices

		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

			var vertex = vertices2[ i ];

			var vertexCopy = vertex.clone();

			if ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }

			vertices1.push( vertexCopy );

		}

		// colors

		for ( var i = 0, il = colors2.length; i < il; i ++ ) {

			colors1.push( colors2[ i ].clone() );

		}

		// faces

		for ( i = 0, il = faces2.length; i < il; i ++ ) {

			var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
			faceCopy.normal.copy( face.normal );

			if ( normalMatrix !== undefined ) {

				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

			}

			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

				normal = faceVertexNormals[ j ].clone();

				if ( normalMatrix !== undefined ) {

					normal.applyMatrix3( normalMatrix ).normalize();

				}

				faceCopy.vertexNormals.push( normal );

			}

			faceCopy.color.copy( face.color );

			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

				color = faceVertexColors[ j ];
				faceCopy.vertexColors.push( color.clone() );

			}

			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

			faces1.push( faceCopy );

		}

		// uvs

		for ( i = 0, il = uvs2.length; i < il; i ++ ) {

			var uv = uvs2[ i ], uvCopy = [];

			if ( uv === undefined ) {

				continue;

			}

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( uv[ j ].clone() );

			}

			uvs1.push( uvCopy );

		}

	},

	mergeMesh: function ( mesh ) {

		if ( ! ( mesh && mesh.isMesh ) ) {

			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
			return;

		}

		mesh.matrixAutoUpdate && mesh.updateMatrix();

		this.merge( mesh.geometry, mesh.matrix );

	},

	/*
	 * Checks for duplicate vertices with hashmap.
	 * Duplicated vertices are removed
	 * and faces' vertices are updated.
	 */

	mergeVertices: function () {
		var this$1 = this;


		var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
		var unique = [], changes = [];

		var v, key;
		var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
		var precision = Math.pow( 10, precisionPoints );
		var i, il, face;
		var indices, j, jl;

		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

			v = this$1.vertices[ i ];
			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

			if ( verticesMap[ key ] === undefined ) {

				verticesMap[ key ] = i;
				unique.push( this$1.vertices[ i ] );
				changes[ i ] = unique.length - 1;

			} else {

				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
				changes[ i ] = changes[ verticesMap[ key ] ];

			}

		}


		// if faces are completely degenerate after merging vertices, we
		// have to remove them from the geometry.
		var faceIndicesToRemove = [];

		for ( i = 0, il = this.faces.length; i < il; i ++ ) {

			face = this$1.faces[ i ];

			face.a = changes[ face.a ];
			face.b = changes[ face.b ];
			face.c = changes[ face.c ];

			indices = [ face.a, face.b, face.c ];

			// if any duplicate vertices are found in a Face3
			// we have to remove the face as nothing can be saved
			for ( var n = 0; n < 3; n ++ ) {

				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

					faceIndicesToRemove.push( i );
					break;

				}

			}

		}

		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

			var idx = faceIndicesToRemove[ i ];

			this$1.faces.splice( idx, 1 );

			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

				this$1.faceVertexUvs[ j ].splice( idx, 1 );

			}

		}

		// Use unique set of vertices

		var diff = this.vertices.length - unique.length;
		this.vertices = unique;
		return diff;

	},

	sortFacesByMaterialIndex: function () {

		var faces = this.faces;
		var length = faces.length;

		// tag faces

		for ( var i = 0; i < length; i ++ ) {

			faces[ i ]._id = i;

		}

		// sort faces

		function materialIndexSort( a, b ) {

			return a.materialIndex - b.materialIndex;

		}

		faces.sort( materialIndexSort );

		// sort uvs

		var uvs1 = this.faceVertexUvs[ 0 ];
		var uvs2 = this.faceVertexUvs[ 1 ];

		var newUvs1, newUvs2;

		if ( uvs1 && uvs1.length === length ) { newUvs1 = []; }
		if ( uvs2 && uvs2.length === length ) { newUvs2 = []; }

		for ( var i = 0; i < length; i ++ ) {

			var id = faces[ i ]._id;

			if ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }
			if ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }

		}

		if ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }
		if ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }

	},

	toJSON: function () {
		var this$1 = this;


		var data = {
			metadata: {
				version: 4.5,
				type: 'Geometry',
				generator: 'Geometry.toJSON'
			}
		};

		// standard Geometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) { data.name = this.name; }

		if ( this.parameters !== undefined ) {

			var parameters = this.parameters;

			for ( var key in parameters ) {

				if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }

			}

			return data;

		}

		var vertices = [];

		for ( var i = 0; i < this.vertices.length; i ++ ) {

			var vertex = this$1.vertices[ i ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

		var faces = [];
		var normals = [];
		var normalsHash = {};
		var colors = [];
		var colorsHash = {};
		var uvs = [];
		var uvsHash = {};

		for ( var i = 0; i < this.faces.length; i ++ ) {

			var face = this$1.faces[ i ];

			var hasMaterial = true;
			var hasFaceUv = false; // deprecated
			var hasFaceVertexUv = this$1.faceVertexUvs[ 0 ][ i ] !== undefined;
			var hasFaceNormal = face.normal.length() > 0;
			var hasFaceVertexNormal = face.vertexNormals.length > 0;
			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
			var hasFaceVertexColor = face.vertexColors.length > 0;

			var faceType = 0;

			faceType = setBit( faceType, 0, 0 ); // isQuad
			faceType = setBit( faceType, 1, hasMaterial );
			faceType = setBit( faceType, 2, hasFaceUv );
			faceType = setBit( faceType, 3, hasFaceVertexUv );
			faceType = setBit( faceType, 4, hasFaceNormal );
			faceType = setBit( faceType, 5, hasFaceVertexNormal );
			faceType = setBit( faceType, 6, hasFaceColor );
			faceType = setBit( faceType, 7, hasFaceVertexColor );

			faces.push( faceType );
			faces.push( face.a, face.b, face.c );
			faces.push( face.materialIndex );

			if ( hasFaceVertexUv ) {

				var faceVertexUvs = this$1.faceVertexUvs[ 0 ][ i ];

				faces.push(
					getUvIndex( faceVertexUvs[ 0 ] ),
					getUvIndex( faceVertexUvs[ 1 ] ),
					getUvIndex( faceVertexUvs[ 2 ] )
				);

			}

			if ( hasFaceNormal ) {

				faces.push( getNormalIndex( face.normal ) );

			}

			if ( hasFaceVertexNormal ) {

				var vertexNormals = face.vertexNormals;

				faces.push(
					getNormalIndex( vertexNormals[ 0 ] ),
					getNormalIndex( vertexNormals[ 1 ] ),
					getNormalIndex( vertexNormals[ 2 ] )
				);

			}

			if ( hasFaceColor ) {

				faces.push( getColorIndex( face.color ) );

			}

			if ( hasFaceVertexColor ) {

				var vertexColors = face.vertexColors;

				faces.push(
					getColorIndex( vertexColors[ 0 ] ),
					getColorIndex( vertexColors[ 1 ] ),
					getColorIndex( vertexColors[ 2 ] )
				);

			}

		}

		function setBit( value, position, enabled ) {

			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

		}

		function getNormalIndex( normal ) {

			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

			if ( normalsHash[ hash ] !== undefined ) {

				return normalsHash[ hash ];

			}

			normalsHash[ hash ] = normals.length / 3;
			normals.push( normal.x, normal.y, normal.z );

			return normalsHash[ hash ];

		}

		function getColorIndex( color ) {

			var hash = color.r.toString() + color.g.toString() + color.b.toString();

			if ( colorsHash[ hash ] !== undefined ) {

				return colorsHash[ hash ];

			}

			colorsHash[ hash ] = colors.length;
			colors.push( color.getHex() );

			return colorsHash[ hash ];

		}

		function getUvIndex( uv ) {

			var hash = uv.x.toString() + uv.y.toString();

			if ( uvsHash[ hash ] !== undefined ) {

				return uvsHash[ hash ];

			}

			uvsHash[ hash ] = uvs.length / 2;
			uvs.push( uv.x, uv.y );

			return uvsHash[ hash ];

		}

		data.data = {};

		data.data.vertices = vertices;
		data.data.normals = normals;
		if ( colors.length > 0 ) { data.data.colors = colors; }
		if ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility
		data.data.faces = faces;

		return data;

	},

	clone: function () {

		/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */

		return new Geometry().copy( this );

	},

	copy: function ( source ) {
		var this$1 = this;


		var i, il, j, jl, k, kl;

		// reset

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [[]];
		this.morphTargets = [];
		this.morphNormals = [];
		this.skinWeights = [];
		this.skinIndices = [];
		this.lineDistances = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// name

		this.name = source.name;

		// vertices

		var vertices = source.vertices;

		for ( i = 0, il = vertices.length; i < il; i ++ ) {

			this$1.vertices.push( vertices[ i ].clone() );

		}

		// colors

		var colors = source.colors;

		for ( i = 0, il = colors.length; i < il; i ++ ) {

			this$1.colors.push( colors[ i ].clone() );

		}

		// faces

		var faces = source.faces;

		for ( i = 0, il = faces.length; i < il; i ++ ) {

			this$1.faces.push( faces[ i ].clone() );

		}

		// face vertex uvs

		for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

			var faceVertexUvs = source.faceVertexUvs[ i ];

			if ( this$1.faceVertexUvs[ i ] === undefined ) {

				this$1.faceVertexUvs[ i ] = [];

			}

			for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

				var uvs = faceVertexUvs[ j ], uvsCopy = [];

				for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

					var uv = uvs[ k ];

					uvsCopy.push( uv.clone() );

				}

				this$1.faceVertexUvs[ i ].push( uvsCopy );

			}

		}

		// morph targets

		var morphTargets = source.morphTargets;

		for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

			var morphTarget = {};
			morphTarget.name = morphTargets[ i ].name;

			// vertices

			if ( morphTargets[ i ].vertices !== undefined ) {

				morphTarget.vertices = [];

				for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

					morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

				}

			}

			// normals

			if ( morphTargets[ i ].normals !== undefined ) {

				morphTarget.normals = [];

				for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

					morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

				}

			}

			this$1.morphTargets.push( morphTarget );

		}

		// morph normals

		var morphNormals = source.morphNormals;

		for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

			var morphNormal = {};

			// vertex normals

			if ( morphNormals[ i ].vertexNormals !== undefined ) {

				morphNormal.vertexNormals = [];

				for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

					var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
					var destVertexNormal = {};

					destVertexNormal.a = srcVertexNormal.a.clone();
					destVertexNormal.b = srcVertexNormal.b.clone();
					destVertexNormal.c = srcVertexNormal.c.clone();

					morphNormal.vertexNormals.push( destVertexNormal );

				}

			}

			// face normals

			if ( morphNormals[ i ].faceNormals !== undefined ) {

				morphNormal.faceNormals = [];

				for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

					morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

				}

			}

			this$1.morphNormals.push( morphNormal );

		}

		// skin weights

		var skinWeights = source.skinWeights;

		for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

			this$1.skinWeights.push( skinWeights[ i ].clone() );

		}

		// skin indices

		var skinIndices = source.skinIndices;

		for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

			this$1.skinIndices.push( skinIndices[ i ].clone() );

		}

		// line distances

		var lineDistances = source.lineDistances;

		for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

			this$1.lineDistances.push( lineDistances[ i ] );

		}

		// bounding box

		var boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		var boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// update flags

		this.elementsNeedUpdate = source.elementsNeedUpdate;
		this.verticesNeedUpdate = source.verticesNeedUpdate;
		this.uvsNeedUpdate = source.uvsNeedUpdate;
		this.normalsNeedUpdate = source.normalsNeedUpdate;
		this.colorsNeedUpdate = source.colorsNeedUpdate;
		this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
		this.groupsNeedUpdate = source.groupsNeedUpdate;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function BufferAttribute( array, itemSize, normalized ) {

	if ( Array.isArray( array ) ) {

		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

	}

	this.uuid = _Math.generateUUID();
	this.name = '';

	this.array = array;
	this.itemSize = itemSize;
	this.count = array !== undefined ? array.length / itemSize : 0;
	this.normalized = normalized === true;

	this.dynamic = false;
	this.updateRange = { offset: 0, count: - 1 };

	this.onUploadCallback = function () {};

	this.version = 0;

}

Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

	set: function ( value ) {

		if ( value === true ) { this.version ++; }

	}

} );

Object.assign( BufferAttribute.prototype, {

	isBufferAttribute: true,

	setArray: function ( array ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.count = array !== undefined ? array.length / this.itemSize : 0;
		this.array = array;

	},

	setDynamic: function ( value ) {

		this.dynamic = value;

		return this;

	},

	copy: function ( source ) {

		this.array = new source.array.constructor( source.array );
		this.itemSize = source.itemSize;
		this.count = source.count;
		this.normalized = source.normalized;

		this.dynamic = source.dynamic;

		return this;

	},

	copyAt: function ( index1, attribute, index2 ) {
		var this$1 = this;


		index1 *= this.itemSize;
		index2 *= attribute.itemSize;

		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

			this$1.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	},

	copyArray: function ( array ) {

		this.array.set( array );

		return this;

	},

	copyColorsArray: function ( colors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = colors.length; i < l; i ++ ) {

			var color = colors[ i ];

			if ( color === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
				color = new Color();

			}

			array[ offset ++ ] = color.r;
			array[ offset ++ ] = color.g;
			array[ offset ++ ] = color.b;

		}

		return this;

	},

	copyIndicesArray: function ( indices ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = indices.length; i < l; i ++ ) {

			var index = indices[ i ];

			array[ offset ++ ] = index.a;
			array[ offset ++ ] = index.b;
			array[ offset ++ ] = index.c;

		}

		return this;

	},

	copyVector2sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
				vector = new Vector2();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;

		}

		return this;

	},

	copyVector3sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
				vector = new Vector3();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;

		}

		return this;

	},

	copyVector4sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
				vector = new Vector4();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;
			array[ offset ++ ] = vector.w;

		}

		return this;

	},

	set: function ( value, offset ) {

		if ( offset === undefined ) { offset = 0; }

		this.array.set( value, offset );

		return this;

	},

	getX: function ( index ) {

		return this.array[ index * this.itemSize ];

	},

	setX: function ( index, x ) {

		this.array[ index * this.itemSize ] = x;

		return this;

	},

	getY: function ( index ) {

		return this.array[ index * this.itemSize + 1 ];

	},

	setY: function ( index, y ) {

		this.array[ index * this.itemSize + 1 ] = y;

		return this;

	},

	getZ: function ( index ) {

		return this.array[ index * this.itemSize + 2 ];

	},

	setZ: function ( index, z ) {

		this.array[ index * this.itemSize + 2 ] = z;

		return this;

	},

	getW: function ( index ) {

		return this.array[ index * this.itemSize + 3 ];

	},

	setW: function ( index, w ) {

		this.array[ index * this.itemSize + 3 ] = w;

		return this;

	},

	setXY: function ( index, x, y ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;

		return this;

	},

	setXYZ: function ( index, x, y, z ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;

		return this;

	},

	setXYZW: function ( index, x, y, z, w ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;
		this.array[ index + 3 ] = w;

		return this;

	},

	onUpload: function ( callback ) {

		this.onUploadCallback = callback;

		return this;

	},

	clone: function () {

		return new this.constructor( this.array, this.itemSize ).copy( this );

	}

} );

function Uint16BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Uint16Array( array ), itemSize );

}

Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


function Uint32BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Uint32Array( array ), itemSize );

}

Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


function Float32BufferAttribute( array, itemSize ) {

	BufferAttribute.call( this, new Float32Array( array ), itemSize );

}

Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


/**
 * @author mrdoob / http://mrdoob.com/
 */

function DirectGeometry() {

	this.indices = [];
	this.vertices = [];
	this.normals = [];
	this.colors = [];
	this.uvs = [];
	this.uvs2 = [];

	this.groups = [];

	this.morphTargets = {};

	this.skinWeights = [];
	this.skinIndices = [];

	// this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	// update flags

	this.verticesNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.groupsNeedUpdate = false;

}

Object.assign( DirectGeometry.prototype, {

	computeGroups: function ( geometry ) {

		var group;
		var groups = [];
		var materialIndex = undefined;

		var faces = geometry.faces;

		for ( var i = 0; i < faces.length; i ++ ) {

			var face = faces[ i ];

			// materials

			if ( face.materialIndex !== materialIndex ) {

				materialIndex = face.materialIndex;

				if ( group !== undefined ) {

					group.count = ( i * 3 ) - group.start;
					groups.push( group );

				}

				group = {
					start: i * 3,
					materialIndex: materialIndex
				};

			}

		}

		if ( group !== undefined ) {

			group.count = ( i * 3 ) - group.start;
			groups.push( group );

		}

		this.groups = groups;

	},

	fromGeometry: function ( geometry ) {
		var this$1 = this;


		var faces = geometry.faces;
		var vertices = geometry.vertices;
		var faceVertexUvs = geometry.faceVertexUvs;

		var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
		var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

		// morphs

		var morphTargets = geometry.morphTargets;
		var morphTargetsLength = morphTargets.length;

		var morphTargetsPosition;

		if ( morphTargetsLength > 0 ) {

			morphTargetsPosition = [];

			for ( var i = 0; i < morphTargetsLength; i ++ ) {

				morphTargetsPosition[ i ] = [];

			}

			this.morphTargets.position = morphTargetsPosition;

		}

		var morphNormals = geometry.morphNormals;
		var morphNormalsLength = morphNormals.length;

		var morphTargetsNormal;

		if ( morphNormalsLength > 0 ) {

			morphTargetsNormal = [];

			for ( var i = 0; i < morphNormalsLength; i ++ ) {

				morphTargetsNormal[ i ] = [];

			}

			this.morphTargets.normal = morphTargetsNormal;

		}

		// skins

		var skinIndices = geometry.skinIndices;
		var skinWeights = geometry.skinWeights;

		var hasSkinIndices = skinIndices.length === vertices.length;
		var hasSkinWeights = skinWeights.length === vertices.length;

		//

		for ( var i = 0; i < faces.length; i ++ ) {

			var face = faces[ i ];

			this$1.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				this$1.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

			} else {

				var normal = face.normal;

				this$1.normals.push( normal, normal, normal );

			}

			var vertexColors = face.vertexColors;

			if ( vertexColors.length === 3 ) {

				this$1.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

			} else {

				var color = face.color;

				this$1.colors.push( color, color, color );

			}

			if ( hasFaceVertexUv === true ) {

				var vertexUvs = faceVertexUvs[ 0 ][ i ];

				if ( vertexUvs !== undefined ) {

					this$1.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

				} else {

					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

					this$1.uvs.push( new Vector2(), new Vector2(), new Vector2() );

				}

			}

			if ( hasFaceVertexUv2 === true ) {

				var vertexUvs = faceVertexUvs[ 1 ][ i ];

				if ( vertexUvs !== undefined ) {

					this$1.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

				} else {

					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

					this$1.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

				}

			}

			// morphs

			for ( var j = 0; j < morphTargetsLength; j ++ ) {

				var morphTarget = morphTargets[ j ].vertices;

				morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

			}

			for ( var j = 0; j < morphNormalsLength; j ++ ) {

				var morphNormal = morphNormals[ j ].vertexNormals[ i ];

				morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

			}

			// skins

			if ( hasSkinIndices ) {

				this$1.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

			}

			if ( hasSkinWeights ) {

				this$1.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

			}

		}

		this.computeGroups( geometry );

		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
		this.groupsNeedUpdate = geometry.groupsNeedUpdate;

		return this;

	}

} );

function arrayMax( array ) {

	if ( array.length === 0 ) { return - Infinity; }

	var max = array[ 0 ];

	for ( var i = 1, l = array.length; i < l; ++ i ) {

		if ( array[ i ] > max ) { max = array[ i ]; }

	}

	return max;

}

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function BufferGeometry() {

	Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'BufferGeometry';

	this.index = null;
	this.attributes = {};

	this.morphAttributes = {};

	this.groups = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	this.drawRange = { start: 0, count: Infinity };

}

BufferGeometry.MaxIndex = 65535;

Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {

	isBufferGeometry: true,

	getIndex: function () {

		return this.index;

	},

	setIndex: function ( index ) {

		if ( Array.isArray( index ) ) {

			this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

		} else {

			this.index = index;

		}

	},

	addAttribute: function ( name, attribute ) {

		if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

			this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

			return;

		}

		if ( name === 'index' ) {

			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
			this.setIndex( attribute );

			return;

		}

		this.attributes[ name ] = attribute;

		return this;

	},

	getAttribute: function ( name ) {

		return this.attributes[ name ];

	},

	removeAttribute: function ( name ) {

		delete this.attributes[ name ];

		return this;

	},

	addGroup: function ( start, count, materialIndex ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex !== undefined ? materialIndex : 0

		} );

	},

	clearGroups: function () {

		this.groups = [];

	},

	setDrawRange: function ( start, count ) {

		this.drawRange.start = start;
		this.drawRange.count = count;

	},

	applyMatrix: function ( matrix ) {

		var position = this.attributes.position;

		if ( position !== undefined ) {

			matrix.applyToBufferAttribute( position );
			position.needsUpdate = true;

		}

		var normal = this.attributes.normal;

		if ( normal !== undefined ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			normalMatrix.applyToBufferAttribute( normal );
			normal.needsUpdate = true;

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		return this;

	},

	rotateX: function () {

		// rotate geometry around world x-axis

		var m1 = new Matrix4();

		return function rotateX( angle ) {

			m1.makeRotationX( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateY: function () {

		// rotate geometry around world y-axis

		var m1 = new Matrix4();

		return function rotateY( angle ) {

			m1.makeRotationY( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateZ: function () {

		// rotate geometry around world z-axis

		var m1 = new Matrix4();

		return function rotateZ( angle ) {

			m1.makeRotationZ( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	translate: function () {

		// translate geometry

		var m1 = new Matrix4();

		return function translate( x, y, z ) {

			m1.makeTranslation( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	scale: function () {

		// scale geometry

		var m1 = new Matrix4();

		return function scale( x, y, z ) {

			m1.makeScale( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	lookAt: function () {

		var obj = new Object3D();

		return function lookAt( vector ) {

			obj.lookAt( vector );

			obj.updateMatrix();

			this.applyMatrix( obj.matrix );

		};

	}(),

	center: function () {

		this.computeBoundingBox();

		var offset = this.boundingBox.getCenter().negate();

		this.translate( offset.x, offset.y, offset.z );

		return offset;

	},

	setFromObject: function ( object ) {

		// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

		var geometry = object.geometry;

		if ( object.isPoints || object.isLine ) {

			var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
			var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

			this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
			this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

				var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

				this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

		} else if ( object.isMesh ) {

			if ( geometry && geometry.isGeometry ) {

				this.fromGeometry( geometry );

			}

		}

		return this;

	},

	updateFromObject: function ( object ) {

		var geometry = object.geometry;

		if ( object.isMesh ) {

			var direct = geometry.__directGeometry;

			if ( geometry.elementsNeedUpdate === true ) {

				direct = undefined;
				geometry.elementsNeedUpdate = false;

			}

			if ( direct === undefined ) {

				return this.fromGeometry( geometry );

			}

			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

			geometry.verticesNeedUpdate = false;
			geometry.normalsNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.uvsNeedUpdate = false;
			geometry.groupsNeedUpdate = false;

			geometry = direct;

		}

		var attribute;

		if ( geometry.verticesNeedUpdate === true ) {

			attribute = this.attributes.position;

			if ( attribute !== undefined ) {

				attribute.copyVector3sArray( geometry.vertices );
				attribute.needsUpdate = true;

			}

			geometry.verticesNeedUpdate = false;

		}

		if ( geometry.normalsNeedUpdate === true ) {

			attribute = this.attributes.normal;

			if ( attribute !== undefined ) {

				attribute.copyVector3sArray( geometry.normals );
				attribute.needsUpdate = true;

			}

			geometry.normalsNeedUpdate = false;

		}

		if ( geometry.colorsNeedUpdate === true ) {

			attribute = this.attributes.color;

			if ( attribute !== undefined ) {

				attribute.copyColorsArray( geometry.colors );
				attribute.needsUpdate = true;

			}

			geometry.colorsNeedUpdate = false;

		}

		if ( geometry.uvsNeedUpdate ) {

			attribute = this.attributes.uv;

			if ( attribute !== undefined ) {

				attribute.copyVector2sArray( geometry.uvs );
				attribute.needsUpdate = true;

			}

			geometry.uvsNeedUpdate = false;

		}

		if ( geometry.lineDistancesNeedUpdate ) {

			attribute = this.attributes.lineDistance;

			if ( attribute !== undefined ) {

				attribute.copyArray( geometry.lineDistances );
				attribute.needsUpdate = true;

			}

			geometry.lineDistancesNeedUpdate = false;

		}

		if ( geometry.groupsNeedUpdate ) {

			geometry.computeGroups( object.geometry );
			this.groups = geometry.groups;

			geometry.groupsNeedUpdate = false;

		}

		return this;

	},

	fromGeometry: function ( geometry ) {

		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

		return this.fromDirectGeometry( geometry.__directGeometry );

	},

	fromDirectGeometry: function ( geometry ) {
		var this$1 = this;


		var positions = new Float32Array( geometry.vertices.length * 3 );
		this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

		if ( geometry.normals.length > 0 ) {

			var normals = new Float32Array( geometry.normals.length * 3 );
			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

		}

		if ( geometry.colors.length > 0 ) {

			var colors = new Float32Array( geometry.colors.length * 3 );
			this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

		}

		if ( geometry.uvs.length > 0 ) {

			var uvs = new Float32Array( geometry.uvs.length * 2 );
			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

		}

		if ( geometry.uvs2.length > 0 ) {

			var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
			this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

		}

		if ( geometry.indices.length > 0 ) {

			var TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;
			var indices = new TypeArray( geometry.indices.length * 3 );
			this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

		}

		// groups

		this.groups = geometry.groups;

		// morphs

		for ( var name in geometry.morphTargets ) {

			var array = [];
			var morphTargets = geometry.morphTargets[ name ];

			for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

				var morphTarget = morphTargets[ i ];

				var attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );

				array.push( attribute.copyVector3sArray( morphTarget ) );

			}

			this$1.morphAttributes[ name ] = array;

		}

		// skinning

		if ( geometry.skinIndices.length > 0 ) {

			var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
			this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

		}

		if ( geometry.skinWeights.length > 0 ) {

			var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
			this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

		}

		//

		if ( geometry.boundingSphere !== null ) {

			this.boundingSphere = geometry.boundingSphere.clone();

		}

		if ( geometry.boundingBox !== null ) {

			this.boundingBox = geometry.boundingBox.clone();

		}

		return this;

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		var position = this.attributes.position;

		if ( position !== undefined ) {

			this.boundingBox.setFromBufferAttribute( position );

		} else {

			this.boundingBox.makeEmpty();

		}

		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

			console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

		}

	},

	computeBoundingSphere: function () {

		var box = new Box3();
		var vector = new Vector3();

		return function computeBoundingSphere() {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			var position = this.attributes.position;

			if ( position ) {

				var center = this.boundingSphere.center;

				box.setFromBufferAttribute( position );
				box.getCenter( center );

				// hoping to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

				var maxRadiusSq = 0;

				for ( var i = 0, il = position.count; i < il; i ++ ) {

					vector.x = position.getX( i );
					vector.y = position.getY( i );
					vector.z = position.getZ( i );
					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

				if ( isNaN( this.boundingSphere.radius ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

				}

			}

		};

	}(),

	computeFaceNormals: function () {

		// backwards compatibility

	},

	computeVertexNormals: function () {

		var index = this.index;
		var attributes = this.attributes;
		var groups = this.groups;

		if ( attributes.position ) {

			var positions = attributes.position.array;

			if ( attributes.normal === undefined ) {

				this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

			} else {

				// reset existing normals to zero

				var array = attributes.normal.array;

				for ( var i = 0, il = array.length; i < il; i ++ ) {

					array[ i ] = 0;

				}

			}

			var normals = attributes.normal.array;

			var vA, vB, vC;
			var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
			var cb = new Vector3(), ab = new Vector3();

			// indexed elements

			if ( index ) {

				var indices = index.array;

				if ( groups.length === 0 ) {

					this.addGroup( 0, indices.length );

				}

				for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

					var group = groups[ j ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						vA = indices[ i + 0 ] * 3;
						vB = indices[ i + 1 ] * 3;
						vC = indices[ i + 2 ] * 3;

						pA.fromArray( positions, vA );
						pB.fromArray( positions, vB );
						pC.fromArray( positions, vC );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ vA ] += cb.x;
						normals[ vA + 1 ] += cb.y;
						normals[ vA + 2 ] += cb.z;

						normals[ vB ] += cb.x;
						normals[ vB + 1 ] += cb.y;
						normals[ vB + 2 ] += cb.z;

						normals[ vC ] += cb.x;
						normals[ vC + 1 ] += cb.y;
						normals[ vC + 2 ] += cb.z;

					}

				}

			} else {

				// non-indexed elements (unconnected triangle soup)

				for ( var i = 0, il = positions.length; i < il; i += 9 ) {

					pA.fromArray( positions, i );
					pB.fromArray( positions, i + 3 );
					pC.fromArray( positions, i + 6 );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					normals[ i ] = cb.x;
					normals[ i + 1 ] = cb.y;
					normals[ i + 2 ] = cb.z;

					normals[ i + 3 ] = cb.x;
					normals[ i + 4 ] = cb.y;
					normals[ i + 5 ] = cb.z;

					normals[ i + 6 ] = cb.x;
					normals[ i + 7 ] = cb.y;
					normals[ i + 8 ] = cb.z;

				}

			}

			this.normalizeNormals();

			attributes.normal.needsUpdate = true;

		}

	},

	merge: function ( geometry, offset ) {

		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
			return;

		}

		if ( offset === undefined ) { offset = 0; }

		var attributes = this.attributes;

		for ( var key in attributes ) {

			if ( geometry.attributes[ key ] === undefined ) { continue; }

			var attribute1 = attributes[ key ];
			var attributeArray1 = attribute1.array;

			var attribute2 = geometry.attributes[ key ];
			var attributeArray2 = attribute2.array;

			var attributeSize = attribute2.itemSize;

			for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

				attributeArray1[ j ] = attributeArray2[ i ];

			}

		}

		return this;

	},

	normalizeNormals: function () {

		var normals = this.attributes.normal;

		var x, y, z, n;

		for ( var i = 0, il = normals.count; i < il; i ++ ) {

			x = normals.getX( i );
			y = normals.getY( i );
			z = normals.getZ( i );

			n = 1.0 / Math.sqrt( x * x + y * y + z * z );

			normals.setXYZ( i, x * n, y * n, z * n );

		}

	},

	toNonIndexed: function () {

		if ( this.index === null ) {

			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
			return this;

		}

		var geometry2 = new BufferGeometry();

		var indices = this.index.array;
		var attributes = this.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];

			var array = attribute.array;
			var itemSize = attribute.itemSize;

			var array2 = new array.constructor( indices.length * itemSize );

			var index = 0, index2 = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				index = indices[ i ] * itemSize;

				for ( var j = 0; j < itemSize; j ++ ) {

					array2[ index2 ++ ] = array[ index ++ ];

				}

			}

			geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

		}

		return geometry2;

	},

	toJSON: function () {

		var data = {
			metadata: {
				version: 4.5,
				type: 'BufferGeometry',
				generator: 'BufferGeometry.toJSON'
			}
		};

		// standard BufferGeometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) { data.name = this.name; }

		if ( this.parameters !== undefined ) {

			var parameters = this.parameters;

			for ( var key in parameters ) {

				if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }

			}

			return data;

		}

		data.data = { attributes: {} };

		var index = this.index;

		if ( index !== null ) {

			var array = Array.prototype.slice.call( index.array );

			data.data.index = {
				type: index.array.constructor.name,
				array: array
			};

		}

		var attributes = this.attributes;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];

			var array = Array.prototype.slice.call( attribute.array );

			data.data.attributes[ key ] = {
				itemSize: attribute.itemSize,
				type: attribute.array.constructor.name,
				array: array,
				normalized: attribute.normalized
			};

		}

		var groups = this.groups;

		if ( groups.length > 0 ) {

			data.data.groups = JSON.parse( JSON.stringify( groups ) );

		}

		var boundingSphere = this.boundingSphere;

		if ( boundingSphere !== null ) {

			data.data.boundingSphere = {
				center: boundingSphere.center.toArray(),
				radius: boundingSphere.radius
			};

		}

		return data;

	},

	clone: function () {

		/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */

		return new BufferGeometry().copy( this );

	},

	copy: function ( source ) {
		var this$1 = this;


		var name, i, l;

		// reset

		this.index = null;
		this.attributes = {};
		this.morphAttributes = {};
		this.groups = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// name

		this.name = source.name;

		// index

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		// attributes

		var attributes = source.attributes;

		for ( name in attributes ) {

			var attribute = attributes[ name ];
			this$1.addAttribute( name, attribute.clone() );

		}

		// morph attributes

		var morphAttributes = source.morphAttributes;

		for ( name in morphAttributes ) {

			var array = [];
			var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

			for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

				array.push( morphAttribute[ i ].clone() );

			}

			this$1.morphAttributes[ name ] = array;

		}

		// groups

		var groups = source.groups;

		for ( i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this$1.addGroup( group.start, group.count, group.materialIndex );

		}

		// bounding box

		var boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		var boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// draw range

		this.drawRange.start = source.drawRange.start;
		this.drawRange.count = source.drawRange.count;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// BoxGeometry

function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	Geometry.call( this );

	this.type = 'BoxGeometry';

	this.parameters = {
		width: width,
		height: height,
		depth: depth,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		depthSegments: depthSegments
	};

	this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
	this.mergeVertices();

}

BoxGeometry.prototype = Object.create( Geometry.prototype );
BoxGeometry.prototype.constructor = BoxGeometry;

// BoxBufferGeometry

function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	BufferGeometry.call( this );

	this.type = 'BoxBufferGeometry';

	this.parameters = {
		width: width,
		height: height,
		depth: depth,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		depthSegments: depthSegments
	};

	var scope = this;

	// segments

	widthSegments = Math.floor( widthSegments ) || 1;
	heightSegments = Math.floor( heightSegments ) || 1;
	depthSegments = Math.floor( depthSegments ) || 1;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var numberOfVertices = 0;
	var groupStart = 0;

	// build each side of the box geometry

	buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
	buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
	buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
	buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
	buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
	buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

		var segmentWidth = width / gridX;
		var segmentHeight = height / gridY;

		var widthHalf = width / 2;
		var heightHalf = height / 2;
		var depthHalf = depth / 2;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var vertexCounter = 0;
		var groupCount = 0;

		var ix, iy;

		var vector = new Vector3();

		// generate vertices, normals and uvs

		for ( iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segmentHeight - heightHalf;

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segmentWidth - widthHalf;

				// set values to correct vector component

				vector[ u ] = x * udir;
				vector[ v ] = y * vdir;
				vector[ w ] = depthHalf;

				// now apply vector to vertex buffer

				vertices.push( vector.x, vector.y, vector.z );

				// set values to correct vector component

				vector[ u ] = 0;
				vector[ v ] = 0;
				vector[ w ] = depth > 0 ? 1 : - 1;

				// now apply vector to normal buffer

				normals.push( vector.x, vector.y, vector.z );

				// uvs

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

				// counters

				vertexCounter += 1;

			}

		}

		// indices

		// 1. you need three indices to draw a single face
		// 2. a single segment consists of two faces
		// 3. so we need to generate six (2*3) indices per segment

		for ( iy = 0; iy < gridY; iy ++ ) {

			for ( ix = 0; ix < gridX; ix ++ ) {

				var a = numberOfVertices + ix + gridX1 * iy;
				var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
				var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

				// increase counter

				groupCount += 6;

			}

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, materialIndex );

		// calculate new start value for groups

		groupStart += groupCount;

		// update total number of vertices

		numberOfVertices += vertexCounter;

	}

}

BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// PlaneGeometry

function PlaneGeometry( width, height, widthSegments, heightSegments ) {

	Geometry.call( this );

	this.type = 'PlaneGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
	this.mergeVertices();

}

PlaneGeometry.prototype = Object.create( Geometry.prototype );
PlaneGeometry.prototype.constructor = PlaneGeometry;

// PlaneBufferGeometry

function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

	BufferGeometry.call( this );

	this.type = 'PlaneBufferGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	var width_half = width / 2;
	var height_half = height / 2;

	var gridX = Math.floor( widthSegments ) || 1;
	var gridY = Math.floor( heightSegments ) || 1;

	var gridX1 = gridX + 1;
	var gridY1 = gridY + 1;

	var segment_width = width / gridX;
	var segment_height = height / gridY;

	var ix, iy;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// generate vertices, normals and uvs

	for ( iy = 0; iy < gridY1; iy ++ ) {

		var y = iy * segment_height - height_half;

		for ( ix = 0; ix < gridX1; ix ++ ) {

			var x = ix * segment_width - width_half;

			vertices.push( x, - y, 0 );

			normals.push( 0, 0, 1 );

			uvs.push( ix / gridX );
			uvs.push( 1 - ( iy / gridY ) );

		}

	}

	// indices

	for ( iy = 0; iy < gridY; iy ++ ) {

		for ( ix = 0; ix < gridX; ix ++ ) {

			var a = ix + gridX1 * iy;
			var b = ix + gridX1 * ( iy + 1 );
			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
			var d = ( ix + 1 ) + gridX1 * iy;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>
 * }
 */

function MeshBasicMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshBasicMaterial';

	this.color = new Color( 0xffffff ); // emissive

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;

	this.lights = false;

	this.setValues( parameters );

}

MeshBasicMaterial.prototype = Object.create( Material.prototype );
MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

MeshBasicMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	return this;

};

/**
 * @author bhouston / http://clara.io
 */

function Ray( origin, direction ) {

	this.origin = ( origin !== undefined ) ? origin : new Vector3();
	this.direction = ( direction !== undefined ) ? direction : new Vector3();

}

Object.assign( Ray.prototype, {

	set: function ( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

	},

	lookAt: function ( v ) {

		this.direction.copy( v ).sub( this.origin ).normalize();

		return this;

	},

	recast: function () {

		var v1 = new Vector3();

		return function recast( t ) {

			this.origin.copy( this.at( t, v1 ) );

			return this;

		};

	}(),

	closestPointToPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();
		result.subVectors( point, this.origin );
		var directionDistance = result.dot( this.direction );

		if ( directionDistance < 0 ) {

			return result.copy( this.origin );

		}

		return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	},

	distanceToPoint: function ( point ) {

		return Math.sqrt( this.distanceSqToPoint( point ) );

	},

	distanceSqToPoint: function () {

		var v1 = new Vector3();

		return function distanceSqToPoint( point ) {

			var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceToSquared( point );

			}

			v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			return v1.distanceToSquared( point );

		};

	}(),

	distanceSqToSegment: function () {

		var segCenter = new Vector3();
		var segDir = new Vector3();
		var diff = new Vector3();

		return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment

			segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
			segDir.copy( v1 ).sub( v0 ).normalize();
			diff.copy( this.origin ).sub( segCenter );

			var segExtent = v0.distanceTo( v1 ) * 0.5;
			var a01 = - this.direction.dot( segDir );
			var b0 = diff.dot( this.direction );
			var b1 = - diff.dot( segDir );
			var c = diff.lengthSq();
			var det = Math.abs( 1 - a01 * a01 );
			var s0, s1, sqrDist, extDet;

			if ( det > 0 ) {

				// The ray and segment are not parallel.

				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if ( s0 >= 0 ) {

					if ( s1 >= - extDet ) {

						if ( s1 <= extDet ) {

							// region 0
							// Minimum at interior points of ray and segment.

							var invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

						} else {

							// region 1

							s1 = segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						// region 5

						s1 = - segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					if ( s1 <= - extDet ) {

						// region 4

						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					} else if ( s1 <= extDet ) {

						// region 3

						s0 = 0;
						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

					} else {

						// region 2

						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				}

			} else {

				// Ray and segment are parallel.

				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

			}

			if ( optionalPointOnRay ) {

				optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

			}

			if ( optionalPointOnSegment ) {

				optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

			}

			return sqrDist;

		};

	}(),

	intersectSphere: function () {

		var v1 = new Vector3();

		return function intersectSphere( sphere, optionalTarget ) {

			v1.subVectors( sphere.center, this.origin );
			var tca = v1.dot( this.direction );
			var d2 = v1.dot( v1 ) - tca * tca;
			var radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) { return null; }

			var thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			var t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			var t1 = tca + thc;

			// test to see if both t0 and t1 are behind the ray - if so, return null
			if ( t0 < 0 && t1 < 0 ) { return null; }

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) { return this.at( t1, optionalTarget ); }

			// else t0 is in front of the ray, so return the first collision point scaled by t0
			return this.at( t0, optionalTarget );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) <= sphere.radius;

	},

	distanceToPlane: function ( plane ) {

		var denominator = plane.normal.dot( this.direction );

		if ( denominator === 0 ) {

			// line is coplanar, return origin
			if ( plane.distanceToPoint( this.origin ) === 0 ) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t :  null;

	},

	intersectPlane: function ( plane, optionalTarget ) {

		var t = this.distanceToPlane( plane );

		if ( t === null ) {

			return null;

		}

		return this.at( t, optionalTarget );

	},

	intersectsPlane: function ( plane ) {

		// check if the ray lies on the plane first

		var distToPoint = plane.distanceToPoint( this.origin );

		if ( distToPoint === 0 ) {

			return true;

		}

		var denominator = plane.normal.dot( this.direction );

		if ( denominator * distToPoint < 0 ) {

			return true;

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	},

	intersectBox: function ( box, optionalTarget ) {

		var tmin, tmax, tymin, tymax, tzmin, tzmax;

		var invdirx = 1 / this.direction.x,
			invdiry = 1 / this.direction.y,
			invdirz = 1 / this.direction.z;

		var origin = this.origin;

		if ( invdirx >= 0 ) {

			tmin = ( box.min.x - origin.x ) * invdirx;
			tmax = ( box.max.x - origin.x ) * invdirx;

		} else {

			tmin = ( box.max.x - origin.x ) * invdirx;
			tmax = ( box.min.x - origin.x ) * invdirx;

		}

		if ( invdiry >= 0 ) {

			tymin = ( box.min.y - origin.y ) * invdiry;
			tymax = ( box.max.y - origin.y ) * invdiry;

		} else {

			tymin = ( box.max.y - origin.y ) * invdiry;
			tymax = ( box.min.y - origin.y ) * invdiry;

		}

		if ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }

		// These lines also handle the case where tmin or tmax is NaN
		// (result of 0 * Infinity). x !== x returns true if x is NaN

		if ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }

		if ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }

		if ( invdirz >= 0 ) {

			tzmin = ( box.min.z - origin.z ) * invdirz;
			tzmax = ( box.max.z - origin.z ) * invdirz;

		} else {

			tzmin = ( box.max.z - origin.z ) * invdirz;
			tzmax = ( box.min.z - origin.z ) * invdirz;

		}

		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }

		if ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }

		if ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }

		//return point closest to the ray (positive side)

		if ( tmax < 0 ) { return null; }

		return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

	},

	intersectsBox: ( function () {

		var v = new Vector3();

		return function intersectsBox( box ) {

			return this.intersectBox( box, v ) !== null;

		};

	} )(),

	intersectTriangle: function () {

		// Compute the offset origin, edges, and normal.
		var diff = new Vector3();
		var edge1 = new Vector3();
		var edge2 = new Vector3();
		var normal = new Vector3();

		return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

			edge1.subVectors( b, a );
			edge2.subVectors( c, a );
			normal.crossVectors( edge1, edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			var DdN = this.direction.dot( normal );
			var sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) { return null; }
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			diff.subVectors( this.origin, a );
			var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			var QdN = - sign * diff.dot( normal );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, optionalTarget );

		};

	}(),

	applyMatrix4: function ( matrix4 ) {

		this.origin.applyMatrix4( matrix4 );
		this.direction.transformDirection( matrix4 );

		return this;

	},

	equals: function ( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	}

} );

/**
 * @author bhouston / http://clara.io
 */

function Line3( start, end ) {

	this.start = ( start !== undefined ) ? start : new Vector3();
	this.end = ( end !== undefined ) ? end : new Vector3();

}

Object.assign( Line3.prototype, {

	set: function ( start, end ) {

		this.start.copy( start );
		this.end.copy( end );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( line ) {

		this.start.copy( line.start );
		this.end.copy( line.end );

		return this;

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

	},

	delta: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.subVectors( this.end, this.start );

	},

	distanceSq: function () {

		return this.start.distanceToSquared( this.end );

	},

	distance: function () {

		return this.start.distanceTo( this.end );

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	closestPointToPointParameter: function () {

		var startP = new Vector3();
		var startEnd = new Vector3();

		return function closestPointToPointParameter( point, clampToLine ) {

			startP.subVectors( point, this.start );
			startEnd.subVectors( this.end, this.start );

			var startEnd2 = startEnd.dot( startEnd );
			var startEnd_startP = startEnd.dot( startP );

			var t = startEnd_startP / startEnd2;

			if ( clampToLine ) {

				t = _Math.clamp( t, 0, 1 );

			}

			return t;

		};

	}(),

	closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

		var t = this.closestPointToPointParameter( point, clampToLine );

		var result = optionalTarget || new Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	applyMatrix4: function ( matrix ) {

		this.start.applyMatrix4( matrix );
		this.end.applyMatrix4( matrix );

		return this;

	},

	equals: function ( line ) {

		return line.start.equals( this.start ) && line.end.equals( this.end );

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Triangle( a, b, c ) {

	this.a = ( a !== undefined ) ? a : new Vector3();
	this.b = ( b !== undefined ) ? b : new Vector3();
	this.c = ( c !== undefined ) ? c : new Vector3();

}

Object.assign( Triangle, {

	normal: function () {

		var v0 = new Vector3();

		return function normal( a, b, c, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}(),

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	barycoordFromPoint: function () {

		var v0 = new Vector3();
		var v1 = new Vector3();
		var v2 = new Vector3();

		return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}(),

	containsPoint: function () {

		var v1 = new Vector3();

		return function containsPoint( point, a, b, c ) {

			var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}()

} );

Object.assign( Triangle.prototype, {

	set: function ( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	},

	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

		this.a.copy( points[ i0 ] );
		this.b.copy( points[ i1 ] );
		this.c.copy( points[ i2 ] );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	},

	area: function () {

		var v0 = new Vector3();
		var v1 = new Vector3();

		return function area() {

			v0.subVectors( this.c, this.b );
			v1.subVectors( this.a, this.b );

			return v0.cross( v1 ).length() * 0.5;

		};

	}(),

	midpoint: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	},

	normal: function ( optionalTarget ) {

		return Triangle.normal( this.a, this.b, this.c, optionalTarget );

	},

	plane: function ( optionalTarget ) {

		var result = optionalTarget || new Plane();

		return result.setFromCoplanarPoints( this.a, this.b, this.c );

	},

	barycoordFromPoint: function ( point, optionalTarget ) {

		return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

	},

	containsPoint: function ( point ) {

		return Triangle.containsPoint( point, this.a, this.b, this.c );

	},

	closestPointToPoint: function () {

		var plane = new Plane();
		var edgeList = [ new Line3(), new Line3(), new Line3() ];
		var projectedPoint = new Vector3();
		var closestPoint = new Vector3();

		return function closestPointToPoint( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			var minDistance = Infinity;

			// project the point onto the plane of the triangle

			plane.setFromCoplanarPoints( this.a, this.b, this.c );
			plane.projectPoint( point, projectedPoint );

			// check if the projection lies within the triangle

			if( this.containsPoint( projectedPoint ) === true ) {

				// if so, this is the closest point

				result.copy( projectedPoint );

			} else {

				// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

				edgeList[ 0 ].set( this.a, this.b );
				edgeList[ 1 ].set( this.b, this.c );
				edgeList[ 2 ].set( this.c, this.a );

				for( var i = 0; i < edgeList.length; i ++ ) {

					edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

					var distance = projectedPoint.distanceToSquared( closestPoint );

					if( distance < minDistance ) {

						minDistance = distance;

						result.copy( closestPoint );

					}

				}

			}

			return result;

		};

	}(),

	equals: function ( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author jonobr1 / http://jonobr1.com/
 */

function Mesh( geometry, material ) {

	Object3D.call( this );

	this.type = 'Mesh';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

	this.drawMode = TrianglesDrawMode;

	this.updateMorphTargets();

}

Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Mesh,

	isMesh: true,

	setDrawMode: function ( value ) {

		this.drawMode = value;

	},

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.drawMode = source.drawMode;

		return this;

	},

	updateMorphTargets: function () {
		var this$1 = this;


		var geometry = this.geometry;
		var m, ml, name;

		if ( geometry.isBufferGeometry ) {

			var morphAttributes = geometry.morphAttributes;
			var keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				var morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						name = morphAttribute[ m ].name || String( m );

						this$1.morphTargetInfluences.push( 0 );
						this$1.morphTargetDictionary[ name ] = m;

					}

				}

			}

		} else {

			var morphTargets = geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {

					name = morphTargets[ m ].name || String( m );

					this$1.morphTargetInfluences.push( 0 );
					this$1.morphTargetDictionary[ name ] = m;

				}

			}

		}

	},

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		var vA = new Vector3();
		var vB = new Vector3();
		var vC = new Vector3();

		var tempA = new Vector3();
		var tempB = new Vector3();
		var tempC = new Vector3();

		var uvA = new Vector2();
		var uvB = new Vector2();
		var uvC = new Vector2();

		var barycoord = new Vector3();

		var intersectionPoint = new Vector3();
		var intersectionPointWorld = new Vector3();

		function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

			Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

			uv1.multiplyScalar( barycoord.x );
			uv2.multiplyScalar( barycoord.y );
			uv3.multiplyScalar( barycoord.z );

			uv1.add( uv2 ).add( uv3 );

			return uv1.clone();

		}

		function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {

			var intersect;
			var material = object.material;

			if ( material.side === BackSide ) {

				intersect = ray.intersectTriangle( pC, pB, pA, true, point );

			} else {

				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

			}

			if ( intersect === null ) { return null; }

			intersectionPointWorld.copy( point );
			intersectionPointWorld.applyMatrix4( object.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

			if ( distance < raycaster.near || distance > raycaster.far ) { return null; }

			return {
				distance: distance,
				point: intersectionPointWorld.clone(),
				object: object
			};

		}

		function checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {

			vA.fromBufferAttribute( position, a );
			vB.fromBufferAttribute( position, b );
			vC.fromBufferAttribute( position, c );

			var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

			if ( intersection ) {

				if ( uv ) {

					uvA.fromBufferAttribute( uv, a );
					uvB.fromBufferAttribute( uv, b );
					uvC.fromBufferAttribute( uv, c );

					intersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );

				}

				intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
				intersection.faceIndex = a;

			}

			return intersection;

		}

		return function raycast( raycaster, intersects ) {
			var this$1 = this;


			var geometry = this.geometry;
			var material = this.material;
			var matrixWorld = this.matrixWorld;

			if ( material === undefined ) { return; }

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) { return; }

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			// Check boundingBox before continuing

			if ( geometry.boundingBox !== null ) {

				if ( ray.intersectsBox( geometry.boundingBox ) === false ) { return; }

			}

			var intersection;

			if ( geometry.isBufferGeometry ) {

				var a, b, c;
				var index = geometry.index;
				var position = geometry.attributes.position;
				var uv = geometry.attributes.uv;
				var i, l;

				if ( index !== null ) {

					// indexed buffer geometry

					for ( i = 0, l = index.count; i < l; i += 3 ) {

						a = index.getX( i );
						b = index.getX( i + 1 );
						c = index.getX( i + 2 );

						intersection = checkBufferGeometryIntersection( this$1, raycaster, ray, position, uv, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
							intersects.push( intersection );

						}

					}

				} else {

					// non-indexed buffer geometry

					for ( i = 0, l = position.count; i < l; i += 3 ) {

						a = i;
						b = i + 1;
						c = i + 2;

						intersection = checkBufferGeometryIntersection( this$1, raycaster, ray, position, uv, a, b, c );

						if ( intersection ) {

							intersection.index = a; // triangle number in positions buffer semantics
							intersects.push( intersection );

						}

					}

				}

			} else if ( geometry.isGeometry ) {

				var fvA, fvB, fvC;
				var isMultiMaterial = Array.isArray( material );

				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var uvs;

				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
				if ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }

				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

					var face = faces[ f ];
					var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

					if ( faceMaterial === undefined ) { continue; }

					fvA = vertices[ face.a ];
					fvB = vertices[ face.b ];
					fvC = vertices[ face.c ];

					if ( faceMaterial.morphTargets === true ) {

						var morphTargets = geometry.morphTargets;
						var morphInfluences = this$1.morphTargetInfluences;

						vA.set( 0, 0, 0 );
						vB.set( 0, 0, 0 );
						vC.set( 0, 0, 0 );

						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

							var influence = morphInfluences[ t ];

							if ( influence === 0 ) { continue; }

							var targets = morphTargets[ t ].vertices;

							vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
							vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
							vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

						}

						vA.add( fvA );
						vB.add( fvB );
						vC.add( fvC );

						fvA = vA;
						fvB = vB;
						fvC = vC;

					}

					intersection = checkIntersection( this$1, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

					if ( intersection ) {

						if ( uvs && uvs[ f ] ) {

							var uvs_f = uvs[ f ];
							uvA.copy( uvs_f[ 0 ] );
							uvB.copy( uvs_f[ 1 ] );
							uvC.copy( uvs_f[ 2 ] );

							intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

						}

						intersection.face = face;
						intersection.faceIndex = f;
						intersects.push( intersection );

					}

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {

	var clearColor = new Color( 0x000000 );
	var clearAlpha = 0;

	var planeCamera, planeMesh;
	var boxCamera, boxMesh;

	function render( scene, camera, forceClear ) {

		var background = scene.background;

		if ( background === null ) {

			setClear( clearColor, clearAlpha );

		} else if ( background && background.isColor ) {

			setClear( background, 1 );
			forceClear = true;

		}

		if ( renderer.autoClear || forceClear ) {

			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

		}

		if ( background && background.isCubeTexture ) {

			if ( boxCamera === undefined ) {

				boxCamera = new PerspectiveCamera();

				boxMesh = new Mesh(
					new BoxBufferGeometry( 5, 5, 5 ),
					new ShaderMaterial( {
						uniforms: ShaderLib.cube.uniforms,
						vertexShader: ShaderLib.cube.vertexShader,
						fragmentShader: ShaderLib.cube.fragmentShader,
						side: BackSide,
						depthTest: false,
						depthWrite: false,
						fog: false
					} )
				);

			}

			boxCamera.projectionMatrix.copy( camera.projectionMatrix );

			boxCamera.matrixWorld.extractRotation( camera.matrixWorld );
			boxCamera.matrixWorldInverse.getInverse( boxCamera.matrixWorld );

			boxMesh.material.uniforms[ "tCube" ].value = background;
			boxMesh.modelViewMatrix.multiplyMatrices( boxCamera.matrixWorldInverse, boxMesh.matrixWorld );

			objects.update( boxMesh );

			renderer.renderBufferDirect( boxCamera, null, boxMesh.geometry, boxMesh.material, boxMesh, null );

		} else if ( background && background.isTexture ) {

			if ( planeCamera === undefined ) {

				planeCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );

				planeMesh = new Mesh(
					new PlaneBufferGeometry( 2, 2 ),
					new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
				);

			}

			planeMesh.material.map = background;

			objects.update( planeMesh );

			renderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );

		}

	}

	function setClear( color, alpha ) {

		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

	}

	return {

		getClearColor: function () {

			return clearColor;

		},
		setClearColor: function ( color, alpha ) {

			clearColor.set( color );
			clearAlpha = alpha !== undefined ? alpha : 1;
			setClear( clearColor, clearAlpha );

		},
		getClearAlpha: function () {

			return clearAlpha;

		},
		setClearAlpha: function ( alpha ) {

			clearAlpha = alpha;
			setClear( clearColor, clearAlpha );

		},
		render: render

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function painterSortStable( a, b ) {

	if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} else if ( a.program && b.program && a.program !== b.program ) {

		return a.program.id - b.program.id;

	} else if ( a.material.id !== b.material.id ) {

		return a.material.id - b.material.id;

	} else if ( a.z !== b.z ) {

		return a.z - b.z;

	} else {

		return a.id - b.id;

	}

}

function reversePainterSortStable( a, b ) {

	if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} if ( a.z !== b.z ) {

		return b.z - a.z;

	} else {

		return a.id - b.id;

	}

}

function WebGLRenderList() {

	var opaque = [];
	var opaqueLastIndex = - 1;

	var transparent = [];
	var transparentLastIndex = - 1;

	function init() {

		opaqueLastIndex = - 1;
		transparentLastIndex = - 1;

	}

	function push( object, geometry, material, z, group ) {

		var array, index;

		// allocate the next position in the appropriate array

		if ( material.transparent ) {

			array = transparent;
			index = ++ transparentLastIndex;

		} else {

			array = opaque;
			index = ++ opaqueLastIndex;

		}

		// recycle existing render item or grow the array

		var renderItem = array[ index ];

		if ( renderItem ) {

			renderItem.id = object.id;
			renderItem.object = object;
			renderItem.geometry = geometry;
			renderItem.material = material;
			renderItem.program = material.program;
			renderItem.renderOrder = object.renderOrder;
			renderItem.z = z;
			renderItem.group = group;

		} else {

			renderItem = {
				id: object.id,
				object: object,
				geometry: geometry,
				material: material,
				program: material.program,
				renderOrder: object.renderOrder,
				z: z,
				group: group
			};

			// assert( index === array.length );
			array.push( renderItem );

		}

	}

	function finish() {

		opaque.length = opaqueLastIndex + 1;
		transparent.length = transparentLastIndex + 1;

	}

	function sort() {

		opaque.sort( painterSortStable );
		transparent.sort( reversePainterSortStable );

	}

	return {
		opaque: opaque,
		transparent: transparent,

		init: init,
		push: push,
		finish: finish,

		sort: sort
	};

}

function WebGLRenderLists() {

	var lists = {};

	function get( scene, camera ) {

		var hash = scene.id + ',' + camera.id;
		var list = lists[ hash ];

		if ( list === undefined ) {

			// console.log( 'THREE.WebGLRenderLists:', hash );

			list = new WebGLRenderList();
			lists[ hash ] = list;

		}

		return list;

	}

	function dispose() {

		lists = {};

	}

	return {
		get: get,
		dispose: dispose
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

	var mode;

	function setMode( value ) {

		mode = value;

	}

	var type, bytesPerElement;

	function setIndex( value ) {

		type = value.type;
		bytesPerElement = value.bytesPerElement;

	}

	function render( start, count ) {

		gl.drawElements( mode, count, type, start * bytesPerElement );

		infoRender.calls ++;
		infoRender.vertices += count;

		if ( mode === gl.TRIANGLES ) { infoRender.faces += count / 3; }

	}

	function renderInstances( geometry, start, count ) {

		var extension = extensions.get( 'ANGLE_instanced_arrays' );

		if ( extension === null ) {

			console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
			return;

		}

		extension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );

		infoRender.calls ++;
		infoRender.vertices += count * geometry.maxInstancedCount;

		if ( mode === gl.TRIANGLES ) { infoRender.faces += geometry.maxInstancedCount * count / 3; }

	}

	//

	this.setMode = setMode;
	this.setIndex = setIndex;
	this.render = render;
	this.renderInstances = renderInstances;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLBufferRenderer( gl, extensions, infoRender ) {

	var mode;

	function setMode( value ) {

		mode = value;

	}

	function render( start, count ) {

		gl.drawArrays( mode, start, count );

		infoRender.calls ++;
		infoRender.vertices += count;

		if ( mode === gl.TRIANGLES ) { infoRender.faces += count / 3; }

	}

	function renderInstances( geometry, start, count ) {

		var extension = extensions.get( 'ANGLE_instanced_arrays' );

		if ( extension === null ) {

			console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
			return;

		}

		var position = geometry.attributes.position;

		if ( position.isInterleavedBufferAttribute ) {

			count = position.data.count;

			extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

		} else {

			extension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );

		}

		infoRender.calls ++;
		infoRender.vertices += count * geometry.maxInstancedCount;

		if ( mode === gl.TRIANGLES ) { infoRender.faces += geometry.maxInstancedCount * count / 3; }

	}

	//

	this.setMode = setMode;
	this.render = render;
	this.renderInstances = renderInstances;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLGeometries( gl, attributes, infoMemory ) {

	var geometries = {};
	var wireframeAttributes = {};

	function onGeometryDispose( event ) {

		var geometry = event.target;
		var buffergeometry = geometries[ geometry.id ];

		if ( buffergeometry.index !== null ) {

			attributes.remove( buffergeometry.index );

		}

		for ( var name in buffergeometry.attributes ) {

			attributes.remove( buffergeometry.attributes[ name ] );

		}

		geometry.removeEventListener( 'dispose', onGeometryDispose );

		delete geometries[ geometry.id ];

		// TODO Remove duplicate code

		var attribute = wireframeAttributes[ geometry.id ];

		if ( attribute ) {

			attributes.remove( attribute );
			delete wireframeAttributes[ geometry.id ];

		}

		attribute = wireframeAttributes[ buffergeometry.id ];

		if ( attribute ) {

			attributes.remove( attribute );
			delete wireframeAttributes[ buffergeometry.id ];

		}

		//

		infoMemory.geometries --;

	}

	function get( object, geometry ) {

		var buffergeometry = geometries[ geometry.id ];

		if ( buffergeometry ) { return buffergeometry; }

		geometry.addEventListener( 'dispose', onGeometryDispose );

		if ( geometry.isBufferGeometry ) {

			buffergeometry = geometry;

		} else if ( geometry.isGeometry ) {

			if ( geometry._bufferGeometry === undefined ) {

				geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

			}

			buffergeometry = geometry._bufferGeometry;

		}

		geometries[ geometry.id ] = buffergeometry;

		infoMemory.geometries ++;

		return buffergeometry;

	}

	function update( geometry ) {

		var index = geometry.index;
		var geometryAttributes = geometry.attributes;

		if ( index !== null ) {

			attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

		}

		for ( var name in geometryAttributes ) {

			attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

		}

		// morph targets

		var morphAttributes = geometry.morphAttributes;

		for ( var name in morphAttributes ) {

			var array = morphAttributes[ name ];

			for ( var i = 0, l = array.length; i < l; i ++ ) {

				attributes.update( array[ i ], gl.ARRAY_BUFFER );

			}

		}

	}

	function getWireframeAttribute( geometry ) {

		var attribute = wireframeAttributes[ geometry.id ];

		if ( attribute ) { return attribute; }

		var indices = [];

		var geometryIndex = geometry.index;
		var geometryAttributes = geometry.attributes;

		// console.time( 'wireframe' );

		if ( geometryIndex !== null ) {

			var array = geometryIndex.array;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var a = array[ i + 0 ];
				var b = array[ i + 1 ];
				var c = array[ i + 2 ];

				indices.push( a, b, b, c, c, a );

			}

		} else {

			var array = geometryAttributes.position.array;

			for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

				var a = i + 0;
				var b = i + 1;
				var c = i + 2;

				indices.push( a, b, b, c, c, a );

			}

		}

		// console.timeEnd( 'wireframe' );

		attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );

		attributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );

		wireframeAttributes[ geometry.id ] = attribute;

		return attribute;

	}

	return {

		get: get,
		update: update,

		getWireframeAttribute: getWireframeAttribute

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLLights() {

	var lights = {};

	return {

		get: function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			var uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						direction: new Vector3(),
						color: new Color(),

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new Vector3(),
						direction: new Vector3(),
						color: new Color(),
						distance: 0,
						coneCos: 0,
						penumbraCos: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new Vector3(),
						color: new Color(),
						distance: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new Vector3(),
						skyColor: new Color(),
						groundColor: new Color()
					};
					break;

				case 'RectAreaLight':
					uniforms = {
						color: new Color(),
						position: new Vector3(),
						halfWidth: new Vector3(),
						halfHeight: new Vector3()
						// TODO (abelnation): set RectAreaLight shadow uniforms
					};
					break;

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		}

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLObjects( gl, geometries, infoRender ) {

	var updateList = {};

	function update( object ) {

		var frame = infoRender.frame;

		var geometry = object.geometry;
		var buffergeometry = geometries.get( object, geometry );

		// Update once per frame

		if ( updateList[ buffergeometry.id ] !== frame ) {

			if ( geometry.isGeometry ) {

				buffergeometry.updateFromObject( object );

			}

			geometries.update( buffergeometry );

			updateList[ buffergeometry.id ] = frame;

		}

		return buffergeometry;

	}

	function clear() {

		updateList = {};

	}

	return {

		update: update,
		clear: clear

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function addLineNumbers( string ) {

	var lines = string.split( '\n' );

	for ( var i = 0; i < lines.length; i ++ ) {

		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

	}

	return lines.join( '\n' );

}

function WebGLShader( gl, type, string ) {

	var shader = gl.createShader( type );

	gl.shaderSource( shader, string );
	gl.compileShader( shader );

	if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

		console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

	}

	if ( gl.getShaderInfoLog( shader ) !== '' ) {

		console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

	}

	// --enable-privileged-webgl-extension
	// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

	return shader;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

var programIdCount = 0;

function getEncodingComponents( encoding ) {

	switch ( encoding ) {

		case LinearEncoding:
			return [ 'Linear','( value )' ];
		case sRGBEncoding:
			return [ 'sRGB','( value )' ];
		case RGBEEncoding:
			return [ 'RGBE','( value )' ];
		case RGBM7Encoding:
			return [ 'RGBM','( value, 7.0 )' ];
		case RGBM16Encoding:
			return [ 'RGBM','( value, 16.0 )' ];
		case RGBDEncoding:
			return [ 'RGBD','( value, 256.0 )' ];
		case GammaEncoding:
			return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
		default:
			throw new Error( 'unsupported encoding: ' + encoding );

	}

}

function getTexelDecodingFunction( functionName, encoding ) {

	var components = getEncodingComponents( encoding );
	return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

}

function getTexelEncodingFunction( functionName, encoding ) {

	var components = getEncodingComponents( encoding );
	return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

}

function getToneMappingFunction( functionName, toneMapping ) {

	var toneMappingName;

	switch ( toneMapping ) {

		case LinearToneMapping:
			toneMappingName = "Linear";
			break;

		case ReinhardToneMapping:
			toneMappingName = "Reinhard";
			break;

		case Uncharted2ToneMapping:
			toneMappingName = "Uncharted2";
			break;

		case CineonToneMapping:
			toneMappingName = "OptimizedCineon";
			break;

		default:
			throw new Error( 'unsupported toneMapping: ' + toneMapping );

	}

	return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

}

function generateExtensions( extensions, parameters, rendererExtensions ) {

	extensions = extensions || {};

	var chunks = [
		( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
		( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
		( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
		( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
	];

	return chunks.filter( filterEmptyLine ).join( '\n' );

}

function generateDefines( defines ) {

	var chunks = [];

	for ( var name in defines ) {

		var value = defines[ name ];

		if ( value === false ) { continue; }

		chunks.push( '#define ' + name + ' ' + value );

	}

	return chunks.join( '\n' );

}

function fetchAttributeLocations( gl, program, identifiers ) {

	var attributes = {};

	var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

	for ( var i = 0; i < n; i ++ ) {

		var info = gl.getActiveAttrib( program, i );
		var name = info.name;

		// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

		attributes[ name ] = gl.getAttribLocation( program, name );

	}

	return attributes;

}

function filterEmptyLine( string ) {

	return string !== '';

}

function replaceLightNums( string, parameters ) {

	return string
		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

}

function parseIncludes( string ) {

	var pattern = /^[ \t]*#include +<([\w\d.]+)>/gm;

	function replace( match, include ) {

		var replace = ShaderChunk[ include ];

		if ( replace === undefined ) {

			throw new Error( 'Can not resolve #include <' + include + '>' );

		}

		return parseIncludes( replace );

	}

	return string.replace( pattern, replace );

}

function unrollLoops( string ) {

	var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

	function replace( match, start, end, snippet ) {

		var unroll = '';

		for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

			unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

		}

		return unroll;

	}

	return string.replace( pattern, replace );

}

function WebGLProgram( renderer, code, material, shader, parameters ) {

	var gl = renderer.context;

	var extensions = material.extensions;
	var defines = material.defines;

	var vertexShader = shader.vertexShader;
	var fragmentShader = shader.fragmentShader;

	var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

	if ( parameters.shadowMapType === PCFShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

	}

	var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
	var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
	var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

	if ( parameters.envMap ) {

		switch ( material.envMap.mapping ) {

			case CubeReflectionMapping:
			case CubeRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
				break;

			case CubeUVReflectionMapping:
			case CubeUVRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
				break;

			case EquirectangularReflectionMapping:
			case EquirectangularRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
				break;

			case SphericalReflectionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
				break;

		}

		switch ( material.envMap.mapping ) {

			case CubeRefractionMapping:
			case EquirectangularRefractionMapping:
				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
				break;

		}

		switch ( material.combine ) {

			case MultiplyOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
				break;

			case MixOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
				break;

			case AddOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
				break;

		}

	}

	var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

	// console.log( 'building new program ' );

	//

	var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

	var customDefines = generateDefines( defines );

	//

	var program = gl.createProgram();

	var prefixVertex, prefixFragment;

	if ( material.isRawShaderMaterial ) {

		prefixVertex = [

			customDefines,

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

		prefixFragment = [

			customExtensions,
			customDefines,

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

	} else {

		prefixVertex = [

			'precision ' + parameters.precision + ' float;',
			'precision ' + parameters.precision + ' int;',

			'#define SHADER_NAME ' + shader.name,

			customDefines,

			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			'#define MAX_BONES ' + parameters.maxBones,
			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.skinning ? '#define USE_SKINNING' : '',
			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			'uniform mat4 modelMatrix;',
			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform mat4 viewMatrix;',
			'uniform mat3 normalMatrix;',
			'uniform vec3 cameraPosition;',

			'attribute vec3 position;',
			'attribute vec3 normal;',
			'attribute vec2 uv;',

			'#ifdef USE_COLOR',

			'	attribute vec3 color;',

			'#endif',

			'#ifdef USE_MORPHTARGETS',

			'	attribute vec3 morphTarget0;',
			'	attribute vec3 morphTarget1;',
			'	attribute vec3 morphTarget2;',
			'	attribute vec3 morphTarget3;',

			'	#ifdef USE_MORPHNORMALS',

			'		attribute vec3 morphNormal0;',
			'		attribute vec3 morphNormal1;',
			'		attribute vec3 morphNormal2;',
			'		attribute vec3 morphNormal3;',

			'	#else',

			'		attribute vec3 morphTarget4;',
			'		attribute vec3 morphTarget5;',
			'		attribute vec3 morphTarget6;',
			'		attribute vec3 morphTarget7;',

			'	#endif',

			'#endif',

			'#ifdef USE_SKINNING',

			'	attribute vec4 skinIndex;',
			'	attribute vec4 skinWeight;',

			'#endif',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

		prefixFragment = [

			customExtensions,

			'precision ' + parameters.precision + ' float;',
			'precision ' + parameters.precision + ' int;',

			'#define SHADER_NAME ' + shader.name,

			customDefines,

			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapTypeDefine : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',

			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
			'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

			parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

			'uniform mat4 viewMatrix;',
			'uniform vec3 cameraPosition;',

			( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

			parameters.dithering ? '#define DITHERING' : '',

			( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
			parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
			parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
			parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
			parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

			parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

	}

	vertexShader = parseIncludes( vertexShader );
	vertexShader = replaceLightNums( vertexShader, parameters );

	fragmentShader = parseIncludes( fragmentShader );
	fragmentShader = replaceLightNums( fragmentShader, parameters );

	if ( ! material.isShaderMaterial ) {

		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );

	}

	var vertexGlsl = prefixVertex + vertexShader;
	var fragmentGlsl = prefixFragment + fragmentShader;

	// console.log( '*VERTEX*', vertexGlsl );
	// console.log( '*FRAGMENT*', fragmentGlsl );

	var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
	var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

	gl.attachShader( program, glVertexShader );
	gl.attachShader( program, glFragmentShader );

	// Force a particular attribute to index 0.

	if ( material.index0AttributeName !== undefined ) {

		gl.bindAttribLocation( program, 0, material.index0AttributeName );

	} else if ( parameters.morphTargets === true ) {

		// programs with morphTargets displace position out of attribute 0
		gl.bindAttribLocation( program, 0, 'position' );

	}

	gl.linkProgram( program );

	var programLog = gl.getProgramInfoLog( program );
	var vertexLog = gl.getShaderInfoLog( glVertexShader );
	var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

	var runnable = true;
	var haveDiagnostics = true;

	// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
	// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

	if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

		runnable = false;

		console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

	} else if ( programLog !== '' ) {

		console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

	} else if ( vertexLog === '' || fragmentLog === '' ) {

		haveDiagnostics = false;

	}

	if ( haveDiagnostics ) {

		this.diagnostics = {

			runnable: runnable,
			material: material,

			programLog: programLog,

			vertexShader: {

				log: vertexLog,
				prefix: prefixVertex

			},

			fragmentShader: {

				log: fragmentLog,
				prefix: prefixFragment

			}

		};

	}

	// clean up

	gl.deleteShader( glVertexShader );
	gl.deleteShader( glFragmentShader );

	// set up caching for uniform locations

	var cachedUniforms;

	this.getUniforms = function() {

		if ( cachedUniforms === undefined ) {

			cachedUniforms =
				new WebGLUniforms( gl, program, renderer );

		}

		return cachedUniforms;

	};

	// set up caching for attribute locations

	var cachedAttributes;

	this.getAttributes = function() {

		if ( cachedAttributes === undefined ) {

			cachedAttributes = fetchAttributeLocations( gl, program );

		}

		return cachedAttributes;

	};

	// free resource

	this.destroy = function() {

		gl.deleteProgram( program );
		this.program = undefined;

	};

	// DEPRECATED

	Object.defineProperties( this, {

		uniforms: {
			get: function() {

				console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
				return this.getUniforms();

			}
		},

		attributes: {
			get: function() {

				console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
				return this.getAttributes();

			}
		}

	} );


	//

	this.id = programIdCount ++;
	this.code = code;
	this.usedTimes = 1;
	this.program = program;
	this.vertexShader = glVertexShader;
	this.fragmentShader = glFragmentShader;

	return this;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLPrograms( renderer, capabilities ) {

	var programs = [];

	var shaderIDs = {
		MeshDepthMaterial: 'depth',
		MeshNormalMaterial: 'normal',
		MeshBasicMaterial: 'basic',
		MeshLambertMaterial: 'lambert',
		MeshPhongMaterial: 'phong',
		MeshToonMaterial: 'phong',
		MeshStandardMaterial: 'physical',
		MeshPhysicalMaterial: 'physical',
		LineBasicMaterial: 'basic',
		LineDashedMaterial: 'dashed',
		PointsMaterial: 'points'
	};

	var parameterNames = [
		"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
		"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
		"roughnessMap", "metalnessMap", "gradientMap",
		"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
	];


	function allocateBones( object ) {

		var skeleton = object.skeleton;
		var bones = skeleton.bones;

		if ( capabilities.floatVertexTextures ) {

			return 1024;

		} else {

			// default for when object is not specified
			// ( for example when prebuilding shader to be used with multiple objects )
			//
			//  - leave some extra space for other uniforms
			//  - limit here is ANGLE's 254 max uniform vectors
			//    (up to 54 should be safe)

			var nVertexUniforms = capabilities.maxVertexUniforms;
			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

			var maxBones = Math.min( nVertexMatrices, bones.length );

			if ( maxBones < bones.length ) {

				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
				return 0;

			}

			return maxBones;

		}

	}

	function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

		var encoding;

		if ( ! map ) {

			encoding = LinearEncoding;

		} else if ( map.isTexture ) {

			encoding = map.encoding;

		} else if ( map.isWebGLRenderTarget ) {

			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
			encoding = map.texture.encoding;

		}

		// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
		if ( encoding === LinearEncoding && gammaOverrideLinear ) {

			encoding = GammaEncoding;

		}

		return encoding;

	}

	this.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {

		var shaderID = shaderIDs[ material.type ];

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
		var precision = renderer.getPrecision();

		if ( material.precision !== null ) {

			precision = capabilities.getMaxPrecision( material.precision );

			if ( precision !== material.precision ) {

				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

			}

		}

		var currentRenderTarget = renderer.getRenderTarget();

		var parameters = {

			shaderID: shaderID,

			precision: precision,
			supportsVertexTextures: capabilities.vertexTextures,
			outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
			map: !! material.map,
			mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
			envMap: !! material.envMap,
			envMapMode: material.envMap && material.envMap.mapping,
			envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
			envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
			lightMap: !! material.lightMap,
			aoMap: !! material.aoMap,
			emissiveMap: !! material.emissiveMap,
			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
			bumpMap: !! material.bumpMap,
			normalMap: !! material.normalMap,
			displacementMap: !! material.displacementMap,
			roughnessMap: !! material.roughnessMap,
			metalnessMap: !! material.metalnessMap,
			specularMap: !! material.specularMap,
			alphaMap: !! material.alphaMap,

			gradientMap: !! material.gradientMap,

			combine: material.combine,

			vertexColors: material.vertexColors,

			fog: !! fog,
			useFog: material.fog,
			fogExp: ( fog && fog.isFogExp2 ),

			flatShading: material.shading === FlatShading,

			sizeAttenuation: material.sizeAttenuation,
			logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

			skinning: material.skinning && maxBones > 0,
			maxBones: maxBones,
			useVertexTexture: capabilities.floatVertexTextures,

			morphTargets: material.morphTargets,
			morphNormals: material.morphNormals,
			maxMorphTargets: renderer.maxMorphTargets,
			maxMorphNormals: renderer.maxMorphNormals,

			numDirLights: lights.directional.length,
			numPointLights: lights.point.length,
			numSpotLights: lights.spot.length,
			numRectAreaLights: lights.rectArea.length,
			numHemiLights: lights.hemi.length,

			numClippingPlanes: nClipPlanes,
			numClipIntersection: nClipIntersection,

			dithering: material.dithering,

			shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
			shadowMapType: renderer.shadowMap.type,

			toneMapping: renderer.toneMapping,
			physicallyCorrectLights: renderer.physicallyCorrectLights,

			premultipliedAlpha: material.premultipliedAlpha,

			alphaTest: material.alphaTest,
			doubleSided: material.side === DoubleSide,
			flipSided: material.side === BackSide,

			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

		};

		return parameters;

	};

	this.getProgramCode = function ( material, parameters ) {

		var array = [];

		if ( parameters.shaderID ) {

			array.push( parameters.shaderID );

		} else {

			array.push( material.fragmentShader );
			array.push( material.vertexShader );

		}

		if ( material.defines !== undefined ) {

			for ( var name in material.defines ) {

				array.push( name );
				array.push( material.defines[ name ] );

			}

		}

		for ( var i = 0; i < parameterNames.length; i ++ ) {

			array.push( parameters[ parameterNames[ i ] ] );

		}

		array.push( material.onBeforeCompile.toString() );

		array.push( renderer.gammaOutput );

		return array.join();

	};

	this.acquireProgram = function ( material, shader, parameters, code ) {

		var program;

		// Check if code has been already compiled
		for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

			var programInfo = programs[ p ];

			if ( programInfo.code === code ) {

				program = programInfo;
				++ program.usedTimes;

				break;

			}

		}

		if ( program === undefined ) {

			program = new WebGLProgram( renderer, code, material, shader, parameters );
			programs.push( program );

		}

		return program;

	};

	this.releaseProgram = function ( program ) {

		if ( -- program.usedTimes === 0 ) {

			// Remove from unordered set
			var i = programs.indexOf( program );
			programs[ i ] = programs[ programs.length - 1 ];
			programs.pop();

			// Free WebGL resources
			program.destroy();

		}

	};

	// Exposed for resource monitoring & error feedback via renderer.info:
	this.programs = programs;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, infoMemory ) {

	var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );

	//

	function clampToMaxSize( image, maxSize ) {

		if ( image.width > maxSize || image.height > maxSize ) {

			// Warning: Scaling through the canvas will only work with images that use
			// premultiplied alpha.

			var scale = maxSize / Math.max( image.width, image.height );

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = Math.floor( image.width * scale );
			canvas.height = Math.floor( image.height * scale );

			var context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

			console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

			return canvas;

		}

		return image;

	}

	function isPowerOfTwo( image ) {

		return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

	}

	function makePowerOfTwo( image ) {

		if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = _Math.nearestPowerOfTwo( image.width );
			canvas.height = _Math.nearestPowerOfTwo( image.height );

			var context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, canvas.width, canvas.height );

			console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

			return canvas;

		}

		return image;

	}

	function textureNeedsPowerOfTwo( texture ) {

		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

	}

	function textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {

		return texture.generateMipmaps && isPowerOfTwo &&
			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

	}

	// Fallback filters for non-power-of-2 textures

	function filterFallback( f ) {

		if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

			return _gl.NEAREST;

		}

		return _gl.LINEAR;

	}

	//

	function onTextureDispose( event ) {

		var texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		deallocateTexture( texture );

		infoMemory.textures --;


	}

	function onRenderTargetDispose( event ) {

		var renderTarget = event.target;

		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

		deallocateRenderTarget( renderTarget );

		infoMemory.textures --;

	}

	//

	function deallocateTexture( texture ) {

		var textureProperties = properties.get( texture );

		if ( texture.image && textureProperties.__image__webglTextureCube ) {

			// cube texture

			_gl.deleteTexture( textureProperties.__image__webglTextureCube );

		} else {

			// 2D texture

			if ( textureProperties.__webglInit === undefined ) { return; }

			_gl.deleteTexture( textureProperties.__webglTexture );

		}

		// remove all webgl properties
		properties.remove( texture );

	}

	function deallocateRenderTarget( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );
		var textureProperties = properties.get( renderTarget.texture );

		if ( ! renderTarget ) { return; }

		if ( textureProperties.__webglTexture !== undefined ) {

			_gl.deleteTexture( textureProperties.__webglTexture );

		}

		if ( renderTarget.depthTexture ) {

			renderTarget.depthTexture.dispose();

		}

		if ( renderTarget.isWebGLRenderTargetCube ) {

			for ( var i = 0; i < 6; i ++ ) {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
				if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }

			}

		} else {

			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
			if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }

		}

		properties.remove( renderTarget.texture );
		properties.remove( renderTarget );

	}

	//



	function setTexture2D( texture, slot ) {

		var textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			var image = texture.image;

			if ( image === undefined ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

			} else if ( image.complete === false ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

			} else {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

		}

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

	}

	function setTextureCube( texture, slot ) {

		var textureProperties = properties.get( texture );

		if ( texture.image.length === 6 ) {

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				if ( ! textureProperties.__image__webglTextureCube ) {

					texture.addEventListener( 'dispose', onTextureDispose );

					textureProperties.__image__webglTextureCube = _gl.createTexture();

					infoMemory.textures ++;

				}

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

				var isCompressed = ( texture && texture.isCompressedTexture );
				var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

				var cubeImage = [];

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed && ! isDataTexture ) {

						cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

					} else {

						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

					}

				}

				var image = cubeImage[ 0 ],
				isPowerOfTwoImage = isPowerOfTwo( image ),
				glFormat = paramThreeToGL( texture.format ),
				glType = paramThreeToGL( texture.type );

				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed ) {

						if ( isDataTexture ) {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

						} else {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

						}

					} else {

						var mipmap, mipmaps = cubeImage[ i ].mipmaps;

						for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

							mipmap = mipmaps[ j ];

							if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

								if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

									state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

								} else {

									console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()" );

								}

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {

					_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				textureProperties.__version = texture.version;

				if ( texture.onUpdate ) { texture.onUpdate( texture ); }

			} else {

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

			}

		}

	}

	function setTextureCubeDynamic( texture, slot ) {

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

	}

	function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

		var extension;

		if ( isPowerOfTwoImage ) {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

		} else {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

			}

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

			}

		}

		extension = extensions.get( 'EXT_texture_filter_anisotropic' );

		if ( extension ) {

			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }
			if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) { return; }

			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

			}

		}

	}

	function uploadTexture( textureProperties, texture, slot ) {

		if ( textureProperties.__webglInit === undefined ) {

			textureProperties.__webglInit = true;

			texture.addEventListener( 'dispose', onTextureDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			infoMemory.textures ++;

		}

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
		_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
		_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

		var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

		if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

			image = makePowerOfTwo( image );

		}

		var isPowerOfTwoImage = isPowerOfTwo( image ),
		glFormat = paramThreeToGL( texture.format ),
		glType = paramThreeToGL( texture.type );

		setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

		var mipmap, mipmaps = texture.mipmaps;

		if ( texture.isDepthTexture ) {

			// populate depth texture with dummy data

			var internalFormat = _gl.DEPTH_COMPONENT;

			if ( texture.type === FloatType ) {

				if ( !_isWebGL2 ) { throw new Error('Float Depth Texture only supported in WebGL2.0'); }
				internalFormat = _gl.DEPTH_COMPONENT32F;

			} else if ( _isWebGL2 ) {

				// WebGL 2.0 requires signed internalformat for glTexImage2D
				internalFormat = _gl.DEPTH_COMPONENT16;

			}

			if ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

				        console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

					texture.type = UnsignedShortType;
					glType = paramThreeToGL( texture.type );

				}

			}

			// Depth stencil textures need the DEPTH_STENCIL internal format
			// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
			if ( texture.format === DepthStencilFormat ) {

				internalFormat = _gl.DEPTH_STENCIL;

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedInt248Type ) {

					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

					texture.type = UnsignedInt248Type;
					glType = paramThreeToGL( texture.type );

				}

			}

			state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

		} else if ( texture.isDataTexture ) {

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

				texture.generateMipmaps = false;

			} else {

				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

			}

		} else if ( texture.isCompressedTexture ) {

			for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

				mipmap = mipmaps[ i ];

				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

					if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

						state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

					} else {

						console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

					}

				} else {

					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

			}

		} else {

			// regular Texture (image, video, canvas)

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

				}

				texture.generateMipmaps = false;

			} else {

				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

			}

		}

		if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) { _gl.generateMipmap( _gl.TEXTURE_2D ); }

		textureProperties.__version = texture.version;

		if ( texture.onUpdate ) { texture.onUpdate( texture ); }

	}

	// Render targets

	// Setup storage for target texture and bind it to correct framebuffer
	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

		var glFormat = paramThreeToGL( renderTarget.texture.format );
		var glType = paramThreeToGL( renderTarget.texture.type );
		state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
		_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}

	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
	function setupRenderBufferStorage( renderbuffer, renderTarget ) {

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else {

			// FIXME: We don't support !depth !stencil
			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

		}

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

	}

	// Setup resources for a Depth Texture for a FBO (needs an extension)
	function setupDepthTexture( framebuffer, renderTarget ) {

		var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
		if ( isCube ) { throw new Error('Depth Texture with cube render targets is not supported!'); }

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

		if ( !( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

			throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

		}

		// upload an empty depth texture with framebuffer size
		if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
				renderTarget.depthTexture.image.width !== renderTarget.width ||
				renderTarget.depthTexture.image.height !== renderTarget.height ) {
			renderTarget.depthTexture.image.width = renderTarget.width;
			renderTarget.depthTexture.image.height = renderTarget.height;
			renderTarget.depthTexture.needsUpdate = true;
		}

		setTexture2D( renderTarget.depthTexture, 0 );

		var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

		if ( renderTarget.depthTexture.format === DepthFormat ) {

			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

		} else {

			throw new Error('Unknown depthTexture format')

		}

	}

	// Setup GL resources for a non-texture depth buffer
	function setupDepthRenderbuffer( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );

		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

		if ( renderTarget.depthTexture ) {

			if ( isCube ) { throw new Error('target.depthTexture not supported in Cube render targets'); }

			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

		} else {

			if ( isCube ) {

				renderTargetProperties.__webglDepthbuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

				}

			} else {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

			}

		}

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}

	// Set up GL resources for the render target
	function setupRenderTarget( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );
		var textureProperties = properties.get( renderTarget.texture );

		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

		textureProperties.__webglTexture = _gl.createTexture();

		infoMemory.textures ++;

		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
		var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

		// Setup framebuffer

		if ( isCube ) {

			renderTargetProperties.__webglFramebuffer = [];

			for ( var i = 0; i < 6; i ++ ) {

				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

			}

		} else {

			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

		}

		// Setup color buffer

		if ( isCube ) {

			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
			setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

			for ( var i = 0; i < 6; i ++ ) {

				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

			}

			if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) { _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP ); }
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

		} else {

			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
			setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

			if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) { _gl.generateMipmap( _gl.TEXTURE_2D ); }
			state.bindTexture( _gl.TEXTURE_2D, null );

		}

		// Setup depth and stencil buffers

		if ( renderTarget.depthBuffer ) {

			setupDepthRenderbuffer( renderTarget );

		}

	}

	function updateRenderTargetMipmap( renderTarget ) {

		var texture = renderTarget.texture;
		var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

		if ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {

			var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
			var webglTexture = properties.get( texture ).__webglTexture;

			state.bindTexture( target, webglTexture );
			_gl.generateMipmap( target );
			state.bindTexture( target, null );

		}

	}

	this.setTexture2D = setTexture2D;
	this.setTextureCube = setTextureCube;
	this.setTextureCubeDynamic = setTextureCubeDynamic;
	this.setupRenderTarget = setupRenderTarget;
	this.updateRenderTargetMipmap = updateRenderTargetMipmap;

}

/**
 * @author fordacious / fordacious.github.io
 */

function WebGLProperties() {

	var properties = {};

	function get( object ) {

		var uuid = object.uuid;
		var map = properties[ uuid ];

		if ( map === undefined ) {

			map = {};
			properties[ uuid ] = map;

		}

		return map;

	}

	function remove( object ) {

		delete properties[ object.uuid ];

	}

	function clear() {

		properties = {};

	}

	return {
		get: get,
		remove: remove,
		clear: clear
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLState( gl, extensions, paramThreeToGL ) {

	function ColorBuffer() {

		var locked = false;

		var color = new Vector4();
		var currentColorMask = null;
		var currentColorClear = new Vector4();

		return {

			setMask: function ( colorMask ) {

				if ( currentColorMask !== colorMask && ! locked ) {

					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
					currentColorMask = colorMask;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( r, g, b, a, premultipliedAlpha ) {

				if ( premultipliedAlpha === true ) {

					r *= a; g *= a; b *= a;

				}

				color.set( r, g, b, a );

				if ( currentColorClear.equals( color ) === false ) {

					gl.clearColor( r, g, b, a );
					currentColorClear.copy( color );

				}

			},

			reset: function () {

				locked = false;

				currentColorMask = null;
				currentColorClear.set( 0, 0, 0, 1 );

			}

		};

	}

	function DepthBuffer() {

		var locked = false;

		var currentDepthMask = null;
		var currentDepthFunc = null;
		var currentDepthClear = null;

		return {

			setTest: function ( depthTest ) {

				if ( depthTest ) {

					enable( gl.DEPTH_TEST );

				} else {

					disable( gl.DEPTH_TEST );

				}

			},

			setMask: function ( depthMask ) {

				if ( currentDepthMask !== depthMask && ! locked ) {

					gl.depthMask( depthMask );
					currentDepthMask = depthMask;

				}

			},

			setFunc: function ( depthFunc ) {

				if ( currentDepthFunc !== depthFunc ) {

					if ( depthFunc ) {

						switch ( depthFunc ) {

							case NeverDepth:

								gl.depthFunc( gl.NEVER );
								break;

							case AlwaysDepth:

								gl.depthFunc( gl.ALWAYS );
								break;

							case LessDepth:

								gl.depthFunc( gl.LESS );
								break;

							case LessEqualDepth:

								gl.depthFunc( gl.LEQUAL );
								break;

							case EqualDepth:

								gl.depthFunc( gl.EQUAL );
								break;

							case GreaterEqualDepth:

								gl.depthFunc( gl.GEQUAL );
								break;

							case GreaterDepth:

								gl.depthFunc( gl.GREATER );
								break;

							case NotEqualDepth:

								gl.depthFunc( gl.NOTEQUAL );
								break;

							default:

								gl.depthFunc( gl.LEQUAL );

						}

					} else {

						gl.depthFunc( gl.LEQUAL );

					}

					currentDepthFunc = depthFunc;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( depth ) {

				if ( currentDepthClear !== depth ) {

					gl.clearDepth( depth );
					currentDepthClear = depth;

				}

			},

			reset: function () {

				locked = false;

				currentDepthMask = null;
				currentDepthFunc = null;
				currentDepthClear = null;

			}

		};

	}

	function StencilBuffer() {

		var locked = false;

		var currentStencilMask = null;
		var currentStencilFunc = null;
		var currentStencilRef = null;
		var currentStencilFuncMask = null;
		var currentStencilFail = null;
		var currentStencilZFail = null;
		var currentStencilZPass = null;
		var currentStencilClear = null;

		return {

			setTest: function ( stencilTest ) {

				if ( stencilTest ) {

					enable( gl.STENCIL_TEST );

				} else {

					disable( gl.STENCIL_TEST );

				}

			},

			setMask: function ( stencilMask ) {

				if ( currentStencilMask !== stencilMask && ! locked ) {

					gl.stencilMask( stencilMask );
					currentStencilMask = stencilMask;

				}

			},

			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

				if ( currentStencilFunc !== stencilFunc ||
				     currentStencilRef 	!== stencilRef 	||
				     currentStencilFuncMask !== stencilMask ) {

					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

					currentStencilFunc = stencilFunc;
					currentStencilRef = stencilRef;
					currentStencilFuncMask = stencilMask;

				}

			},

			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

				if ( currentStencilFail	 !== stencilFail 	||
				     currentStencilZFail !== stencilZFail ||
				     currentStencilZPass !== stencilZPass ) {

					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

					currentStencilFail = stencilFail;
					currentStencilZFail = stencilZFail;
					currentStencilZPass = stencilZPass;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( stencil ) {

				if ( currentStencilClear !== stencil ) {

					gl.clearStencil( stencil );
					currentStencilClear = stencil;

				}

			},

			reset: function () {

				locked = false;

				currentStencilMask = null;
				currentStencilFunc = null;
				currentStencilRef = null;
				currentStencilFuncMask = null;
				currentStencilFail = null;
				currentStencilZFail = null;
				currentStencilZPass = null;
				currentStencilClear = null;

			}

		};

	}

	//

	var colorBuffer = new ColorBuffer();
	var depthBuffer = new DepthBuffer();
	var stencilBuffer = new StencilBuffer();

	var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	var newAttributes = new Uint8Array( maxVertexAttributes );
	var enabledAttributes = new Uint8Array( maxVertexAttributes );
	var attributeDivisors = new Uint8Array( maxVertexAttributes );

	var capabilities = {};

	var compressedTextureFormats = null;

	var currentBlending = null;
	var currentBlendEquation = null;
	var currentBlendSrc = null;
	var currentBlendDst = null;
	var currentBlendEquationAlpha = null;
	var currentBlendSrcAlpha = null;
	var currentBlendDstAlpha = null;
	var currentPremultipledAlpha = false;

	var currentFlipSided = null;
	var currentCullFace = null;

	var currentLineWidth = null;

	var currentPolygonOffsetFactor = null;
	var currentPolygonOffsetUnits = null;

	var currentScissorTest = null;

	var maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

	var version = parseFloat( /^WebGL\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );
	var lineWidthAvailable = parseFloat( version ) >= 1.0;

	var currentTextureSlot = null;
	var currentBoundTextures = {};

	var currentScissor = new Vector4();
	var currentViewport = new Vector4();

	function createTexture( type, target, count ) {

		var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
		var texture = gl.createTexture();

		gl.bindTexture( type, texture );
		gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
		gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

		for ( var i = 0; i < count; i ++ ) {

			gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

		}

		return texture;

	}

	var emptyTextures = {};
	emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
	emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

	//

	function init() {

		colorBuffer.setClear( 0, 0, 0, 1 );
		depthBuffer.setClear( 1 );
		stencilBuffer.setClear( 0 );

		enable( gl.DEPTH_TEST );
		depthBuffer.setFunc( LessEqualDepth );

		setFlipSided( false );
		setCullFace( CullFaceBack );
		enable( gl.CULL_FACE );

		enable( gl.BLEND );
		setBlending( NormalBlending );

	}

	function initAttributes() {

		for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

			newAttributes[ i ] = 0;

		}

	}

	function enableAttribute( attribute ) {

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== 0 ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			extension.vertexAttribDivisorANGLE( attribute, 0 );
			attributeDivisors[ attribute ] = 0;

		}

	}

	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
			attributeDivisors[ attribute ] = meshPerAttribute;

		}

	}

	function disableUnusedAttributes() {

		for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

	}

	function enable( id ) {

		if ( capabilities[ id ] !== true ) {

			gl.enable( id );
			capabilities[ id ] = true;

		}

	}

	function disable( id ) {

		if ( capabilities[ id ] !== false ) {

			gl.disable( id );
			capabilities[ id ] = false;

		}

	}

	function getCompressedTextureFormats() {

		if ( compressedTextureFormats === null ) {

			compressedTextureFormats = [];

			if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
			     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
			     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

				var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

				for ( var i = 0; i < formats.length; i ++ ) {

					compressedTextureFormats.push( formats[ i ] );

				}

			}

		}

		return compressedTextureFormats;

	}

	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

		if ( blending !== NoBlending ) {

			enable( gl.BLEND );

		} else {

			disable( gl.BLEND );

		}

		if ( ( blending !== CustomBlending ) && ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) ) {

			if ( blending === AdditiveBlending ) {

				if ( premultipliedAlpha ) {

					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
					gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

				} else {

					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

				}

			} else if ( blending === SubtractiveBlending ) {

				if ( premultipliedAlpha ) {

					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
					gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

				} else {

					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

				}

			} else if ( blending === MultiplyBlending ) {

				if ( premultipliedAlpha ) {

					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
					gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

				} else {

					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

				}

			} else {

				if ( premultipliedAlpha ) {

					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
					gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

				} else {

					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
					gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

				}

			}

			currentBlending = blending;
			currentPremultipledAlpha = premultipliedAlpha;

		}

		if ( blending === CustomBlending ) {

			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

				gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;

			}

			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

				gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;

			}

		} else {

			currentBlendEquation = null;
			currentBlendSrc = null;
			currentBlendDst = null;
			currentBlendEquationAlpha = null;
			currentBlendSrcAlpha = null;
			currentBlendDstAlpha = null;

		}

	}

	function setMaterial( material ) {

		material.side === DoubleSide
			? disable( gl.CULL_FACE )
			: enable( gl.CULL_FACE );

		setFlipSided( material.side === BackSide );

		material.transparent === true
			? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
			: setBlending( NoBlending );

		depthBuffer.setFunc( material.depthFunc );
		depthBuffer.setTest( material.depthTest );
		depthBuffer.setMask( material.depthWrite );
		colorBuffer.setMask( material.colorWrite );

		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

	}

	//

	function setFlipSided( flipSided ) {

		if ( currentFlipSided !== flipSided ) {

			if ( flipSided ) {

				gl.frontFace( gl.CW );

			} else {

				gl.frontFace( gl.CCW );

			}

			currentFlipSided = flipSided;

		}

	}

	function setCullFace( cullFace ) {

		if ( cullFace !== CullFaceNone ) {

			enable( gl.CULL_FACE );

			if ( cullFace !== currentCullFace ) {

				if ( cullFace === CullFaceBack ) {

					gl.cullFace( gl.BACK );

				} else if ( cullFace === CullFaceFront ) {

					gl.cullFace( gl.FRONT );

				} else {

					gl.cullFace( gl.FRONT_AND_BACK );

				}

			}

		} else {

			disable( gl.CULL_FACE );

		}

		currentCullFace = cullFace;

	}

	function setLineWidth( width ) {

		if ( width !== currentLineWidth ) {

			if ( lineWidthAvailable ) { gl.lineWidth( width ); }

			currentLineWidth = width;

		}

	}

	function setPolygonOffset( polygonOffset, factor, units ) {

		if ( polygonOffset ) {

			enable( gl.POLYGON_OFFSET_FILL );

			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

				gl.polygonOffset( factor, units );

				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;

			}

		} else {

			disable( gl.POLYGON_OFFSET_FILL );

		}

	}

	function getScissorTest() {

		return currentScissorTest;

	}

	function setScissorTest( scissorTest ) {

		currentScissorTest = scissorTest;

		if ( scissorTest ) {

			enable( gl.SCISSOR_TEST );

		} else {

			disable( gl.SCISSOR_TEST );

		}

	}

	// texture

	function activeTexture( webglSlot ) {

		if ( webglSlot === undefined ) { webglSlot = gl.TEXTURE0 + maxTextures - 1; }

		if ( currentTextureSlot !== webglSlot ) {

			gl.activeTexture( webglSlot );
			currentTextureSlot = webglSlot;

		}

	}

	function bindTexture( webglType, webglTexture ) {

		if ( currentTextureSlot === null ) {

			activeTexture();

		}

		var boundTexture = currentBoundTextures[ currentTextureSlot ];

		if ( boundTexture === undefined ) {

			boundTexture = { type: undefined, texture: undefined };
			currentBoundTextures[ currentTextureSlot ] = boundTexture;

		}

		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

			boundTexture.type = webglType;
			boundTexture.texture = webglTexture;

		}

	}

	function compressedTexImage2D() {

		try {

			gl.compressedTexImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texImage2D() {

		try {

			gl.texImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	//

	function scissor( scissor ) {

		if ( currentScissor.equals( scissor ) === false ) {

			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
			currentScissor.copy( scissor );

		}

	}

	function viewport( viewport ) {

		if ( currentViewport.equals( viewport ) === false ) {

			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
			currentViewport.copy( viewport );

		}

	}

	//

	function reset() {

		for ( var i = 0; i < enabledAttributes.length; i ++ ) {

			if ( enabledAttributes[ i ] === 1 ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

		capabilities = {};

		compressedTextureFormats = null;

		currentTextureSlot = null;
		currentBoundTextures = {};

		currentBlending = null;

		currentFlipSided = null;
		currentCullFace = null;

		colorBuffer.reset();
		depthBuffer.reset();
		stencilBuffer.reset();

	}

	return {

		buffers: {
			color: colorBuffer,
			depth: depthBuffer,
			stencil: stencilBuffer
		},

		init: init,
		initAttributes: initAttributes,
		enableAttribute: enableAttribute,
		enableAttributeAndDivisor: enableAttributeAndDivisor,
		disableUnusedAttributes: disableUnusedAttributes,
		enable: enable,
		disable: disable,
		getCompressedTextureFormats: getCompressedTextureFormats,

		setBlending: setBlending,
		setMaterial: setMaterial,

		setFlipSided: setFlipSided,
		setCullFace: setCullFace,

		setLineWidth: setLineWidth,
		setPolygonOffset: setPolygonOffset,

		getScissorTest: getScissorTest,
		setScissorTest: setScissorTest,

		activeTexture: activeTexture,
		bindTexture: bindTexture,
		compressedTexImage2D: compressedTexImage2D,
		texImage2D: texImage2D,

		scissor: scissor,
		viewport: viewport,

		reset: reset

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLCapabilities( gl, extensions, parameters ) {

	var maxAnisotropy;

	function getMaxAnisotropy() {

		if ( maxAnisotropy !== undefined ) { return maxAnisotropy; }

		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

		if ( extension !== null ) {

			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

		} else {

			maxAnisotropy = 0;

		}

		return maxAnisotropy;

	}

	function getMaxPrecision( precision ) {

		if ( precision === 'highp' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

				return 'highp';

			}

			precision = 'mediump';

		}

		if ( precision === 'mediump' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

				return 'mediump';

			}

		}

		return 'lowp';

	}

	var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
	var maxPrecision = getMaxPrecision( precision );

	if ( maxPrecision !== precision ) {

		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
		precision = maxPrecision;

	}

	var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );

	var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
	var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
	var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
	var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

	var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
	var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
	var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

	var vertexTextures = maxVertexTextures > 0;
	var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
	var floatVertexTextures = vertexTextures && floatFragmentTextures;

	return {

		getMaxAnisotropy: getMaxAnisotropy,
		getMaxPrecision: getMaxPrecision,

		precision: precision,
		logarithmicDepthBuffer: logarithmicDepthBuffer,

		maxTextures: maxTextures,
		maxVertexTextures: maxVertexTextures,
		maxTextureSize: maxTextureSize,
		maxCubemapSize: maxCubemapSize,

		maxAttributes: maxAttributes,
		maxVertexUniforms: maxVertexUniforms,
		maxVaryings: maxVaryings,
		maxFragmentUniforms: maxFragmentUniforms,

		vertexTextures: vertexTextures,
		floatFragmentTextures: floatFragmentTextures,
		floatVertexTextures: floatVertexTextures

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ArrayCamera( array ) {

	PerspectiveCamera.call( this );

	this.cameras = array || [];

}

ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

	constructor: ArrayCamera,

	isArrayCamera: true

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebVRManager( renderer ) {

	var scope = this;

	var device = null;
	var frameData = null;

	if ( 'VRFrameData' in window ) {

		frameData = new window.VRFrameData();

	}

	var matrixWorldInverse = new Matrix4();

	var standingMatrix = new Matrix4();
	var standingMatrixInverse = new Matrix4();

	var cameraL = new PerspectiveCamera();
	cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
	cameraL.layers.enable( 1 );

	var cameraR = new PerspectiveCamera();
	cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
	cameraR.layers.enable( 2 );

	var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
	cameraVR.layers.enable( 1 );
	cameraVR.layers.enable( 2 );

	//

	var currentSize, currentPixelRatio;

	function onVRDisplayPresentChange() {

		if ( device.isPresenting ) {

			var eyeParameters = device.getEyeParameters( 'left' );
			var renderWidth = eyeParameters.renderWidth;
			var renderHeight = eyeParameters.renderHeight;

			currentPixelRatio = renderer.getPixelRatio();
			currentSize = renderer.getSize();

			renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );

		} else if ( scope.enabled ) {

			renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

		}

	}

	window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

	//

	this.enabled = false;
	this.standing = false;

	this.getDevice = function () {

		return device;

	};

	this.setDevice = function ( value ) {

		if ( value !== undefined ) { device = value; }

	};

	this.getCamera = function ( camera ) {

		if ( device === null ) { return camera; }

		device.depthNear = camera.near;
		device.depthFar = camera.far;

		device.getFrameData( frameData );

		//

		var pose = frameData.pose;

		if ( pose.position !== null ) {

			camera.position.fromArray( pose.position );

		} else {

			camera.position.set( 0, 0, 0 );

		}

		if ( pose.orientation !== null ) {

			camera.quaternion.fromArray( pose.orientation );

		}

		camera.updateMatrixWorld();

		var stageParameters = device.stageParameters;

		if ( this.standing && stageParameters ) {

			standingMatrix.fromArray( stageParameters.sittingToStandingTransform );
			standingMatrixInverse.getInverse( standingMatrix );

			camera.matrixWorld.multiply( standingMatrix );
			camera.matrixWorldInverse.multiply( standingMatrixInverse );

		}

		if ( device.isPresenting === false ) { return camera; }

		//

		cameraVR.matrixWorld.copy( camera.matrixWorld );
		cameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );

		cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
		cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

		if ( this.standing && stageParameters ) {

			cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
			cameraR.matrixWorldInverse.multiply( standingMatrixInverse );

		}

		var parent = camera.parent;

		if ( parent !== null ) {

			matrixWorldInverse.getInverse( parent.matrixWorld );

			cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
			cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

		}

		// envMap and Mirror needs camera.matrixWorld

		cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
		cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

		cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
		cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

		// HACK @mrdoob
		// https://github.com/w3c/webvr/issues/203

		cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

		//

		var layers = device.getLayers();

		if ( layers.length ) {

			var layer = layers[ 0 ];

			if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {

				cameraL.bounds.fromArray( layer.leftBounds );

			}

			if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {

				cameraR.bounds.fromArray( layer.rightBounds );

			}

		}

		return cameraVR;

	};

	this.getStandingMatrix = function () {

		return standingMatrix;

	};

	this.submitFrame = function () {

		if ( device && device.isPresenting ) { device.submitFrame(); }

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLExtensions( gl ) {

	var extensions = {};

	return {

		get: function ( name ) {

			if ( extensions[ name ] !== undefined ) {

				return extensions[ name ];

			}

			var extension;

			switch ( name ) {

				case 'WEBGL_depth_texture':
					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
					break;

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;

				case 'WEBGL_compressed_texture_etc1':
					extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
					break;

				default:
					extension = gl.getExtension( name );

			}

			if ( extension === null ) {

				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

			}

			extensions[ name ] = extension;

			return extension;

		}

	};

}

/**
 * @author tschw
 */

function WebGLClipping() {

	var scope = this,

		globalState = null,
		numGlobalPlanes = 0,
		localClippingEnabled = false,
		renderingShadows = false,

		plane = new Plane(),
		viewNormalMatrix = new Matrix3(),

		uniform = { value: null, needsUpdate: false };

	this.uniform = uniform;
	this.numPlanes = 0;
	this.numIntersection = 0;

	this.init = function( planes, enableLocalClipping, camera ) {

		var enabled =
			planes.length !== 0 ||
			enableLocalClipping ||
			// enable state of previous frame - the clipping code has to
			// run another frame in order to reset the state:
			numGlobalPlanes !== 0 ||
			localClippingEnabled;

		localClippingEnabled = enableLocalClipping;

		globalState = projectPlanes( planes, camera, 0 );
		numGlobalPlanes = planes.length;

		return enabled;

	};

	this.beginShadows = function() {

		renderingShadows = true;
		projectPlanes( null );

	};

	this.endShadows = function() {

		renderingShadows = false;
		resetGlobalState();

	};

	this.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

		if ( ! localClippingEnabled ||
				planes === null || planes.length === 0 ||
				renderingShadows && ! clipShadows ) {
			// there's no local clipping

			if ( renderingShadows ) {
				// there's no global clipping

				projectPlanes( null );

			} else {

				resetGlobalState();
			}

		} else {

			var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
				lGlobal = nGlobal * 4,

				dstArray = cache.clippingState || null;

			uniform.value = dstArray; // ensure unique state

			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

			for ( var i = 0; i !== lGlobal; ++ i ) {

				dstArray[ i ] = globalState[ i ];

			}

			cache.clippingState = dstArray;
			this.numIntersection = clipIntersection ? this.numPlanes : 0;
			this.numPlanes += nGlobal;

		}


	};

	function resetGlobalState() {

		if ( uniform.value !== globalState ) {

			uniform.value = globalState;
			uniform.needsUpdate = numGlobalPlanes > 0;

		}

		scope.numPlanes = numGlobalPlanes;
		scope.numIntersection = 0;

	}

	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

		var nPlanes = planes !== null ? planes.length : 0,
			dstArray = null;

		if ( nPlanes !== 0 ) {

			dstArray = uniform.value;

			if ( skipTransform !== true || dstArray === null ) {

				var flatSize = dstOffset + nPlanes * 4,
					viewMatrix = camera.matrixWorldInverse;

				viewNormalMatrix.getNormalMatrix( viewMatrix );

				if ( dstArray === null || dstArray.length < flatSize ) {

					dstArray = new Float32Array( flatSize );

				}

				for ( var i = 0, i4 = dstOffset;
									i !== nPlanes; ++ i, i4 += 4 ) {

					plane.copy( planes[ i ] ).
							applyMatrix4( viewMatrix, viewNormalMatrix );

					plane.normal.toArray( dstArray, i4 );
					dstArray[ i4 + 3 ] = plane.constant;

				}

			}

			uniform.value = dstArray;
			uniform.needsUpdate = true;

		}

		scope.numPlanes = nPlanes;

		return dstArray;

	}

}

// import { Sphere } from '../math/Sphere';
/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 * @author tschw
 */

function WebGLRenderer( parameters ) {

	console.log( 'THREE.WebGLRenderer', REVISION );

	parameters = parameters || {};

	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

	var lights = [];

	var currentRenderList = null;

	var morphInfluences = new Float32Array( 8 );

	var sprites = [];
	var lensFlares = [];

	// public properties

	this.domElement = _canvas;
	this.context = null;

	// clearing

	this.autoClear = true;
	this.autoClearColor = true;
	this.autoClearDepth = true;
	this.autoClearStencil = true;

	// scene graph

	this.sortObjects = true;

	// user-defined clipping

	this.clippingPlanes = [];
	this.localClippingEnabled = false;

	// physically based shading

	this.gammaFactor = 2.0;	// for backwards compatibility
	this.gammaInput = false;
	this.gammaOutput = false;

	// physical lights

	this.physicallyCorrectLights = false;

	// tone mapping

	this.toneMapping = LinearToneMapping;
	this.toneMappingExposure = 1.0;
	this.toneMappingWhitePoint = 1.0;

	// morphs

	this.maxMorphTargets = 8;
	this.maxMorphNormals = 4;

	// internal properties

	var _this = this,

		// internal state cache

		_currentProgram = null,
		_currentRenderTarget = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',

		_currentCamera = null,
		_currentArrayCamera = null,

		_currentScissor = new Vector4(),
		_currentScissorTest = null,

		_currentViewport = new Vector4(),

		//

		_usedTextureUnits = 0,

		//

		_width = _canvas.width,
		_height = _canvas.height,

		_pixelRatio = 1,

		_scissor = new Vector4( 0, 0, _width, _height ),
		_scissorTest = false,

		_viewport = new Vector4( 0, 0, _width, _height ),

		// frustum

		_frustum = new Frustum(),

		// clipping

		_clipping = new WebGLClipping(),
		_clippingEnabled = false,
		_localClippingEnabled = false,

		// camera matrices cache

		_projScreenMatrix = new Matrix4(),

		_vector3 = new Vector3(),
		_matrix4 = new Matrix4(),
		_matrix42 = new Matrix4(),

		// light arrays cache

		_lights = {

			hash: '',

			ambient: [ 0, 0, 0 ],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			rectArea: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],

			shadows: []

		},

		// info

		_infoMemory = {
			geometries: 0,
			textures: 0
		},

		_infoRender = {

			frame: 0,
			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

	this.info = {

		render: _infoRender,
		memory: _infoMemory,
		programs: null

	};


	// initialize

	var _gl;

	try {

		var contextAttributes = {
			alpha: _alpha,
			depth: _depth,
			stencil: _stencil,
			antialias: _antialias,
			premultipliedAlpha: _premultipliedAlpha,
			preserveDrawingBuffer: _preserveDrawingBuffer
		};

		_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

		if ( _gl === null ) {

			if ( _canvas.getContext( 'webgl' ) !== null ) {

				throw 'Error creating WebGL context with your selected attributes.';

			} else {

				throw 'Error creating WebGL context.';

			}

		}

		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

		if ( _gl.getShaderPrecisionFormat === undefined ) {

			_gl.getShaderPrecisionFormat = function () {

				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

			};

		}

		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

	} catch ( error ) {

		console.error( 'THREE.WebGLRenderer: ' + error );

	}

	var extensions = new WebGLExtensions( _gl );

	extensions.get( 'WEBGL_depth_texture' );
	extensions.get( 'OES_texture_float' );
	extensions.get( 'OES_texture_float_linear' );
	extensions.get( 'OES_texture_half_float' );
	extensions.get( 'OES_texture_half_float_linear' );
	extensions.get( 'OES_standard_derivatives' );
	extensions.get( 'ANGLE_instanced_arrays' );

	if ( extensions.get( 'OES_element_index_uint' ) ) {

		BufferGeometry.MaxIndex = 4294967296;

	}

	var capabilities = new WebGLCapabilities( _gl, extensions, parameters );

	var state = new WebGLState( _gl, extensions, paramThreeToGL );

	var properties = new WebGLProperties();
	var textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, _infoMemory );
	var attributes = new WebGLAttributes( _gl );
	var geometries = new WebGLGeometries( _gl, attributes, _infoMemory );
	var objects = new WebGLObjects( _gl, geometries, _infoRender );
	var programCache = new WebGLPrograms( this, capabilities );
	var lightCache = new WebGLLights();
	var renderLists = new WebGLRenderLists();

	var background = new WebGLBackground( this, state, objects, _premultipliedAlpha );
	var vr = new WebVRManager( this );

	this.info.programs = programCache.programs;

	var bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
	var indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

	//

	function getTargetPixelRatio() {

		return _currentRenderTarget === null ? _pixelRatio : 1;

	}

	function setDefaultGLState() {

		state.init();

		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

	}

	function resetGLState() {

		_currentProgram = null;
		_currentCamera = null;

		_currentGeometryProgram = '';
		_currentMaterialId = - 1;

		state.reset();

	}

	setDefaultGLState();

	this.context = _gl;
	this.capabilities = capabilities;
	this.extensions = extensions;
	this.properties = properties;
	this.renderLists = renderLists;
	this.state = state;
	this.vr = vr;

	// shadow map

	var shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );

	this.shadowMap = shadowMap;


	// Plugins

	var spritePlugin = new SpritePlugin( this, sprites );
	var lensFlarePlugin = new LensFlarePlugin( this, lensFlares );

	// API

	this.getContext = function () {

		return _gl;

	};

	this.getContextAttributes = function () {

		return _gl.getContextAttributes();

	};

	this.forceContextLoss = function () {

		var extension = extensions.get( 'WEBGL_lose_context' );
		if ( extension ) { extension.loseContext(); }

	};

	this.getMaxAnisotropy = function () {

		return capabilities.getMaxAnisotropy();

	};

	this.getPrecision = function () {

		return capabilities.precision;

	};

	this.getPixelRatio = function () {

		return _pixelRatio;

	};

	this.setPixelRatio = function ( value ) {

		if ( value === undefined ) { return; }

		_pixelRatio = value;

		this.setSize( _width, _height, false );

	};

	this.getSize = function () {

		return {
			width: _width,
			height: _height
		};

	};

	this.setSize = function ( width, height, updateStyle ) {

		var device = vr.getDevice();

		if ( device && device.isPresenting ) {

			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
			return;

		}

		_width = width;
		_height = height;

		_canvas.width = width * _pixelRatio;
		_canvas.height = height * _pixelRatio;

		if ( updateStyle !== false ) {

			_canvas.style.width = width + 'px';
			_canvas.style.height = height + 'px';

		}

		this.setViewport( 0, 0, width, height );

	};

	this.getDrawingBufferSize = function () {

		return {
			width: _width * _pixelRatio,
			height: _height * _pixelRatio
		};

	};

	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

		_width = width;
		_height = height;

		_pixelRatio = pixelRatio;

		_canvas.width = width * pixelRatio;
		_canvas.height = height * pixelRatio;

		this.setViewport( 0, 0, width, height );

	};

	this.setViewport = function ( x, y, width, height ) {

		_viewport.set( x, _height - y - height, width, height );
		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

	};

	this.setScissor = function ( x, y, width, height ) {

		_scissor.set( x, _height - y - height, width, height );
		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );

	};

	this.setScissorTest = function ( boolean ) {

		state.setScissorTest( _scissorTest = boolean );

	};

	// Clearing

	this.getClearColor = background.getClearColor;
	this.setClearColor = background.setClearColor;
	this.getClearAlpha = background.getClearAlpha;
	this.setClearAlpha = background.setClearAlpha;

	this.clear = function ( color, depth, stencil ) {

		var bits = 0;

		if ( color === undefined || color ) { bits |= _gl.COLOR_BUFFER_BIT; }
		if ( depth === undefined || depth ) { bits |= _gl.DEPTH_BUFFER_BIT; }
		if ( stencil === undefined || stencil ) { bits |= _gl.STENCIL_BUFFER_BIT; }

		_gl.clear( bits );

	};

	this.clearColor = function () {

		this.clear( true, false, false );

	};

	this.clearDepth = function () {

		this.clear( false, true, false );

	};

	this.clearStencil = function () {

		this.clear( false, false, true );

	};

	this.clearTarget = function ( renderTarget, color, depth, stencil ) {

		this.setRenderTarget( renderTarget );
		this.clear( color, depth, stencil );

	};

	// Reset

	this.resetGLState = resetGLState;

	this.dispose = function () {

		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

		renderLists.dispose();

	};

	// Events

	function onContextLost( event ) {

		event.preventDefault();

		resetGLState();
		setDefaultGLState();

		properties.clear();
		objects.clear();

	}

	function onMaterialDispose( event ) {

		var material = event.target;

		material.removeEventListener( 'dispose', onMaterialDispose );

		deallocateMaterial( material );

	}

	// Buffer deallocation

	function deallocateMaterial( material ) {

		releaseMaterialProgramReference( material );

		properties.remove( material );

	}


	function releaseMaterialProgramReference( material ) {

		var programInfo = properties.get( material ).program;

		material.program = undefined;

		if ( programInfo !== undefined ) {

			programCache.releaseProgram( programInfo );

		}

	}

	// Buffer rendering

	function renderObjectImmediate( object, program, material ) {

		object.render( function ( object ) {

			_this.renderBufferImmediate( object, program, material );

		} );

	}

	this.renderBufferImmediate = function ( object, program, material ) {

		state.initAttributes();

		var buffers = properties.get( object );

		if ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }
		if ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }
		if ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }
		if ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }

		var programAttributes = program.getAttributes();

		if ( object.hasPositions ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.position );
			_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasNormals ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

			if ( ! material.isMeshPhongMaterial &&
				! material.isMeshStandardMaterial &&
				! material.isMeshNormalMaterial &&
				material.shading === FlatShading ) {

				for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

					var array = object.normalArray;

					var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
					var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
					var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

					array[ i + 0 ] = nx;
					array[ i + 1 ] = ny;
					array[ i + 2 ] = nz;

					array[ i + 3 ] = nx;
					array[ i + 4 ] = ny;
					array[ i + 5 ] = nz;

					array[ i + 6 ] = nx;
					array[ i + 7 ] = ny;
					array[ i + 8 ] = nz;

				}

			}

			_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.normal );

			_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasUvs && material.map ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.uv );

			_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasColors && material.vertexColors !== NoColors ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.color );

			_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );

		}

		state.disableUnusedAttributes();

		_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

		object.count = 0;

	};

	function absNumericalSort( a, b ) {

		return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );

	}

	this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

		state.setMaterial( material );

		var program = setProgram( camera, fog, material, object );
		var geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );

		var updateBuffers = false;

		if ( geometryProgram !== _currentGeometryProgram ) {

			_currentGeometryProgram = geometryProgram;
			updateBuffers = true;

		}

		// morph targets

		var morphTargetInfluences = object.morphTargetInfluences;

		if ( morphTargetInfluences !== undefined ) {

			// TODO Remove allocations

			var activeInfluences = [];

			for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

				var influence = morphTargetInfluences[ i ];
				activeInfluences.push( [ influence, i ] );

			}

			activeInfluences.sort( absNumericalSort );

			if ( activeInfluences.length > 8 ) {

				activeInfluences.length = 8;

			}

			var morphAttributes = geometry.morphAttributes;

			for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

				var influence = activeInfluences[ i ];
				morphInfluences[ i ] = influence[ 0 ];

				if ( influence[ 0 ] !== 0 ) {

					var index = influence[ 1 ];

					if ( material.morphTargets === true && morphAttributes.position ) { geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] ); }
					if ( material.morphNormals === true && morphAttributes.normal ) { geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] ); }

				} else {

					if ( material.morphTargets === true ) { geometry.removeAttribute( 'morphTarget' + i ); }
					if ( material.morphNormals === true ) { geometry.removeAttribute( 'morphNormal' + i ); }

				}

			}

			for ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {

				morphInfluences[ i ] = 0.0;

			}

			program.getUniforms().setValue( _gl, 'morphTargetInfluences', morphInfluences );

			updateBuffers = true;

		}

		//

		var index = geometry.index;
		var position = geometry.attributes.position;
		var rangeFactor = 1;

		if ( material.wireframe === true ) {

			index = geometries.getWireframeAttribute( geometry );
			rangeFactor = 2;

		}

		var attribute;
		var renderer = bufferRenderer;

		if ( index !== null ) {

			attribute = attributes.get( index );

			renderer = indexedBufferRenderer;
			renderer.setIndex( attribute );

		}

		if ( updateBuffers ) {

			setupVertexAttributes( material, program, geometry );

			if ( index !== null ) {

				_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );

			}

		}

		//

		var dataCount = 0;

		if ( index !== null ) {

			dataCount = index.count;

		} else if ( position !== undefined ) {

			dataCount = position.count;

		}

		var rangeStart = geometry.drawRange.start * rangeFactor;
		var rangeCount = geometry.drawRange.count * rangeFactor;

		var groupStart = group !== null ? group.start * rangeFactor : 0;
		var groupCount = group !== null ? group.count * rangeFactor : Infinity;

		var drawStart = Math.max( rangeStart, groupStart );
		var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

		var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

		if ( drawCount === 0 ) { return; }

		//

		if ( object.isMesh ) {

			if ( material.wireframe === true ) {

				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
				renderer.setMode( _gl.LINES );

			} else {

				switch ( object.drawMode ) {

					case TrianglesDrawMode:
						renderer.setMode( _gl.TRIANGLES );
						break;

					case TriangleStripDrawMode:
						renderer.setMode( _gl.TRIANGLE_STRIP );
						break;

					case TriangleFanDrawMode:
						renderer.setMode( _gl.TRIANGLE_FAN );
						break;

				}

			}


		} else if ( object.isLine ) {

			var lineWidth = material.linewidth;

			if ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material

			state.setLineWidth( lineWidth * getTargetPixelRatio() );

			if ( object.isLineSegments ) {

				renderer.setMode( _gl.LINES );

			} else if ( object.isLineLoop ) {

				renderer.setMode( _gl.LINE_LOOP );

			} else {

				renderer.setMode( _gl.LINE_STRIP );

			}

		} else if ( object.isPoints ) {

			renderer.setMode( _gl.POINTS );

		}

		if ( geometry && geometry.isInstancedBufferGeometry ) {

			if ( geometry.maxInstancedCount > 0 ) {

				renderer.renderInstances( geometry, drawStart, drawCount );

			}

		} else {

			renderer.render( drawStart, drawCount );

		}

	};

	function setupVertexAttributes( material, program, geometry, startIndex ) {

		if ( geometry && geometry.isInstancedBufferGeometry ) {

			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {

				console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

		}

		if ( startIndex === undefined ) { startIndex = 0; }

		state.initAttributes();

		var geometryAttributes = geometry.attributes;

		var programAttributes = program.getAttributes();

		var materialDefaultAttributeValues = material.defaultAttributeValues;

		for ( var name in programAttributes ) {

			var programAttribute = programAttributes[ name ];

			if ( programAttribute >= 0 ) {

				var geometryAttribute = geometryAttributes[ name ];

				if ( geometryAttribute !== undefined ) {

					var normalized = geometryAttribute.normalized;
					var size = geometryAttribute.itemSize;

					var attribute = attributes.get( geometryAttribute );

					var buffer = attribute.buffer;
					var type = attribute.type;
					var bytesPerElement = attribute.bytesPerElement;

					if ( geometryAttribute.isInterleavedBufferAttribute ) {

						var data = geometryAttribute.data;
						var stride = data.stride;
						var offset = geometryAttribute.offset;

						if ( data && data.isInstancedInterleavedBuffer ) {

							state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

							if ( geometry.maxInstancedCount === undefined ) {

								geometry.maxInstancedCount = data.meshPerAttribute * data.count;

							}

						} else {

							state.enableAttribute( programAttribute );

						}

						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
						_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );

					} else {

						if ( geometryAttribute.isInstancedBufferAttribute ) {

							state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

							if ( geometry.maxInstancedCount === undefined ) {

								geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

							}

						} else {

							state.enableAttribute( programAttribute );

						}

						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
						_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );

					}

				} else if ( materialDefaultAttributeValues !== undefined ) {

					var value = materialDefaultAttributeValues[ name ];

					if ( value !== undefined ) {

						switch ( value.length ) {

							case 2:
								_gl.vertexAttrib2fv( programAttribute, value );
								break;

							case 3:
								_gl.vertexAttrib3fv( programAttribute, value );
								break;

							case 4:
								_gl.vertexAttrib4fv( programAttribute, value );
								break;

							default:
								_gl.vertexAttrib1fv( programAttribute, value );

						}

					}

				}

			}

		}

		state.disableUnusedAttributes();

	}

	// Compile

	this.compile = function ( scene, camera ) {

		lights = [];

		scene.traverse( function ( object ) {

			if ( object.isLight ) {

				lights.push( object );

			}

		} );

		setupLights( lights, camera );

		scene.traverse( function ( object ) {

			if ( object.material ) {

				if ( Array.isArray( object.material ) ) {

					for ( var i = 0; i < object.material.length; i ++ ) {

						initMaterial( object.material[ i ], scene.fog, object );

					}

				} else {

					initMaterial( object.material, scene.fog, object );

				}

			}

		} );

	};

	// Rendering

	this.animate = function ( callback ) {

		function onFrame() {

			callback();

			( vr.getDevice() || window ).requestAnimationFrame( onFrame );

		}

		( vr.getDevice() || window ).requestAnimationFrame( onFrame );

	};

	this.render = function ( scene, camera, renderTarget, forceClear ) {

		if ( ! ( camera && camera.isCamera ) ) {

			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		// reset caching for this frame

		_currentGeometryProgram = '';
		_currentMaterialId = - 1;
		_currentCamera = null;

		// update scene graph

		if ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }

		// update camera matrices and frustum

		if ( camera.parent === null ) { camera.updateMatrixWorld(); }

		if ( vr.enabled ) {

			camera = vr.getCamera( camera );

		}

		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromMatrix( _projScreenMatrix );

		lights.length = 0;
		sprites.length = 0;
		lensFlares.length = 0;

		_localClippingEnabled = this.localClippingEnabled;
		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

		currentRenderList = renderLists.get( scene, camera );
		currentRenderList.init();

		projectObject( scene, camera, _this.sortObjects );

		currentRenderList.finish();

		if ( _this.sortObjects === true ) {

			currentRenderList.sort();

		}

		//

		if ( _clippingEnabled ) { _clipping.beginShadows(); }

		setupShadows( lights );

		shadowMap.render( scene, camera );

		setupLights( lights, camera );

		if ( _clippingEnabled ) { _clipping.endShadows(); }

		//

		_infoRender.frame ++;
		_infoRender.calls = 0;
		_infoRender.vertices = 0;
		_infoRender.faces = 0;
		_infoRender.points = 0;

		if ( renderTarget === undefined ) {

			renderTarget = null;

		}

		this.setRenderTarget( renderTarget );

		//

		background.render( scene, camera, forceClear );

		// render scene

		var opaqueObjects = currentRenderList.opaque;
		var transparentObjects = currentRenderList.transparent;

		if ( scene.overrideMaterial ) {

			var overrideMaterial = scene.overrideMaterial;

			if ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }
			if ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }

		} else {

			// opaque pass (front-to-back order)

			if ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }

			// transparent pass (back-to-front order)

			if ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }

		}

		// custom render plugins (post pass)

		spritePlugin.render( scene, camera );
		lensFlarePlugin.render( scene, camera, _currentViewport );

		// Generate mipmap if we're using any kind of mipmap filtering

		if ( renderTarget ) {

			textures.updateRenderTargetMipmap( renderTarget );

		}

		// Ensure depth buffer writing is enabled so it can be cleared on next render

		state.buffers.depth.setTest( true );
		state.buffers.depth.setMask( true );
		state.buffers.color.setMask( true );

		if ( camera.isArrayCamera ) {

			_this.setScissorTest( false );

		}

		if ( vr.enabled ) {

			vr.submitFrame();

		}

		// _gl.finish();

	};

	/*
	// TODO Duplicated code (Frustum)

	var _sphere = new Sphere();

	function isObjectViewable( object ) {

		var geometry = object.geometry;

		if ( geometry.boundingSphere === null )
			geometry.computeBoundingSphere();

		_sphere.copy( geometry.boundingSphere ).
		applyMatrix4( object.matrixWorld );

		return isSphereViewable( _sphere );

	}

	function isSpriteViewable( sprite ) {

		_sphere.center.set( 0, 0, 0 );
		_sphere.radius = 0.7071067811865476;
		_sphere.applyMatrix4( sprite.matrixWorld );

		return isSphereViewable( _sphere );

	}

	function isSphereViewable( sphere ) {

		if ( ! _frustum.intersectsSphere( sphere ) ) return false;

		var numPlanes = _clipping.numPlanes;

		if ( numPlanes === 0 ) return true;

		var planes = _this.clippingPlanes,

			center = sphere.center,
			negRad = - sphere.radius,
			i = 0;

		do {

			// out when deeper than radius in the negative halfspace
			if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

		} while ( ++ i !== numPlanes );

		return true;

	}
	*/

	function projectObject( object, camera, sortObjects ) {

		if ( ! object.visible ) { return; }

		var visible = object.layers.test( camera.layers );

		if ( visible ) {

			if ( object.isLight ) {

				lights.push( object );

			} else if ( object.isSprite ) {

				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

					sprites.push( object );

				}

			} else if ( object.isLensFlare ) {

				lensFlares.push( object );

			} else if ( object.isImmediateRenderObject ) {

				if ( sortObjects ) {

					_vector3.setFromMatrixPosition( object.matrixWorld )
						.applyMatrix4( _projScreenMatrix );

				}

				currentRenderList.push( object, null, object.material, _vector3.z, null );

			} else if ( object.isMesh || object.isLine || object.isPoints ) {

				if ( object.isSkinnedMesh ) {

					object.skeleton.update();

				}

				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					var geometry = objects.update( object );
					var material = object.material;

					if ( Array.isArray( material ) ) {

						var groups = geometry.groups;

						for ( var i = 0, l = groups.length; i < l; i ++ ) {

							var group = groups[ i ];
							var groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								currentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );

							}

						}

					} else if ( material.visible ) {

						currentRenderList.push( object, geometry, material, _vector3.z, null );

					}

				}

			}

		}

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			projectObject( children[ i ], camera, sortObjects );

		}

	}

	function renderObjects( renderList, scene, camera, overrideMaterial ) {

		for ( var i = 0, l = renderList.length; i < l; i ++ ) {

			var renderItem = renderList[ i ];

			var object = renderItem.object;
			var geometry = renderItem.geometry;
			var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
			var group = renderItem.group;

			if ( camera.isArrayCamera ) {

				_currentArrayCamera = camera;

				var cameras = camera.cameras;

				for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

					var camera2 = cameras[ j ];

					if ( object.layers.test( camera2.layers ) ) {

						var bounds = camera2.bounds;

						var x = bounds.x * _width;
						var y = bounds.y * _height;
						var width = bounds.z * _width;
						var height = bounds.w * _height;

						_this.setViewport( x, y, width, height );
						_this.setScissor( x, y, width, height );
						_this.setScissorTest( true );

						renderObject( object, scene, camera2, geometry, material, group );

					}

				}

			} else {

				_currentArrayCamera = null;

				renderObject( object, scene, camera, geometry, material, group );

			}

		}

	}

	function renderObject( object, scene, camera, geometry, material, group ) {

		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

		object.onBeforeRender( _this, scene, camera, geometry, material, group );

		if ( object.isImmediateRenderObject ) {

			state.setMaterial( material );

			var program = setProgram( camera, scene.fog, material, object );

			_currentGeometryProgram = '';

			renderObjectImmediate( object, program, material );

		} else {

			_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

		}

		object.onAfterRender( _this, scene, camera, geometry, material, group );

	}

	function initMaterial( material, fog, object ) {

		var materialProperties = properties.get( material );

		var parameters = programCache.getParameters(
			material, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );

		var code = programCache.getProgramCode( material, parameters );

		var program = materialProperties.program;
		var programChange = true;

		if ( program === undefined ) {

			// new material
			material.addEventListener( 'dispose', onMaterialDispose );

		} else if ( program.code !== code ) {

			// changed glsl or parameters
			releaseMaterialProgramReference( material );

		} else if ( parameters.shaderID !== undefined ) {

			// same glsl and uniform list
			return;

		} else {

			// only rebuild uniform list
			programChange = false;

		}

		if ( programChange ) {

			if ( parameters.shaderID ) {

				var shader = ShaderLib[ parameters.shaderID ];

				materialProperties.shader = {
					name: material.type,
					uniforms: UniformsUtils.clone( shader.uniforms ),
					vertexShader: shader.vertexShader,
					fragmentShader: shader.fragmentShader
				};

			} else {

				materialProperties.shader = {
					name: material.type,
					uniforms: material.uniforms,
					vertexShader: material.vertexShader,
					fragmentShader: material.fragmentShader
				};

			}

			material.onBeforeCompile( materialProperties.shader );

			program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );

			materialProperties.program = program;
			material.program = program;

		}

		var programAttributes = program.getAttributes();

		if ( material.morphTargets ) {

			material.numSupportedMorphTargets = 0;

			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

				if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

					material.numSupportedMorphTargets ++;

				}

			}

		}

		if ( material.morphNormals ) {

			material.numSupportedMorphNormals = 0;

			for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

				if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

					material.numSupportedMorphNormals ++;

				}

			}

		}

		var uniforms = materialProperties.shader.uniforms;

		if ( ! material.isShaderMaterial &&
			! material.isRawShaderMaterial ||
			material.clipping === true ) {

			materialProperties.numClippingPlanes = _clipping.numPlanes;
			materialProperties.numIntersection = _clipping.numIntersection;
			uniforms.clippingPlanes = _clipping.uniform;

		}

		materialProperties.fog = fog;

		// store the light setup it was created for

		materialProperties.lightsHash = _lights.hash;

		if ( material.lights ) {

			// wire up the material to this renderer's lighting state

			uniforms.ambientLightColor.value = _lights.ambient;
			uniforms.directionalLights.value = _lights.directional;
			uniforms.spotLights.value = _lights.spot;
			uniforms.rectAreaLights.value = _lights.rectArea;
			uniforms.pointLights.value = _lights.point;
			uniforms.hemisphereLights.value = _lights.hemi;

			uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
			uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
			uniforms.spotShadowMap.value = _lights.spotShadowMap;
			uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
			uniforms.pointShadowMap.value = _lights.pointShadowMap;
			uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;
			// TODO (abelnation): add area lights shadow info to uniforms

		}

		var progUniforms = materialProperties.program.getUniforms(),
			uniformsList =
				WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

		materialProperties.uniformsList = uniformsList;

	}

	function setProgram( camera, fog, material, object ) {

		_usedTextureUnits = 0;

		var materialProperties = properties.get( material );

		if ( _clippingEnabled ) {

			if ( _localClippingEnabled || camera !== _currentCamera ) {

				var useCache =
					camera === _currentCamera &&
					material.id === _currentMaterialId;

				// we might want to call this function with some ClippingGroup
				// object instead of the material, once it becomes feasible
				// (#8465, #8379)
				_clipping.setState(
					material.clippingPlanes, material.clipIntersection, material.clipShadows,
					camera, materialProperties, useCache );

			}

		}

		if ( material.needsUpdate === false ) {

			if ( materialProperties.program === undefined ) {

				material.needsUpdate = true;

			} else if ( material.fog && materialProperties.fog !== fog ) {

				material.needsUpdate = true;

			} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {

				material.needsUpdate = true;

			} else if ( materialProperties.numClippingPlanes !== undefined &&
				( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
				materialProperties.numIntersection !== _clipping.numIntersection ) ) {

				material.needsUpdate = true;

			}

		}

		if ( material.needsUpdate ) {

			initMaterial( material, fog, object );
			material.needsUpdate = false;

		}

		var refreshProgram = false;
		var refreshMaterial = false;
		var refreshLights = false;

		var program = materialProperties.program,
			p_uniforms = program.getUniforms(),
			m_uniforms = materialProperties.shader.uniforms;

		if ( program.id !== _currentProgram ) {

			_gl.useProgram( program.program );
			_currentProgram = program.id;

			refreshProgram = true;
			refreshMaterial = true;
			refreshLights = true;

		}

		if ( material.id !== _currentMaterialId ) {

			_currentMaterialId = material.id;

			refreshMaterial = true;

		}

		if ( refreshProgram || camera !== _currentCamera ) {

			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

			if ( capabilities.logarithmicDepthBuffer ) {

				p_uniforms.setValue( _gl, 'logDepthBufFC',
					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

			}

			// Avoid unneeded uniform updates per ArrayCamera's sub-camera

			if ( _currentCamera !== ( _currentArrayCamera || camera ) ) {

				_currentCamera = ( _currentArrayCamera || camera );

				// lighting uniforms depend on the camera so enforce an update
				// now, in case this material supports lights - or later, when
				// the next material that does gets activated:

				refreshMaterial = true;		// set to true on material change
				refreshLights = true;		// remains set until update done

			}

			// load material specific uniforms
			// (shader material also gets them for the sake of genericity)

			if ( material.isShaderMaterial ||
				material.isMeshPhongMaterial ||
				material.isMeshStandardMaterial ||
				material.envMap ) {

				var uCamPos = p_uniforms.map.cameraPosition;

				if ( uCamPos !== undefined ) {

					uCamPos.setValue( _gl,
						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

				}

			}

			if ( material.isMeshPhongMaterial ||
				material.isMeshLambertMaterial ||
				material.isMeshBasicMaterial ||
				material.isMeshStandardMaterial ||
				material.isShaderMaterial ||
				material.skinning ) {

				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

			}

		}

		// skinning uniforms must be set even if material didn't change
		// auto-setting of texture unit for bone texture must go before other textures
		// not sure why, but otherwise weird things happen

		if ( material.skinning ) {

			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

			var skeleton = object.skeleton;

			if ( skeleton ) {

				var bones = skeleton.bones;

				if ( capabilities.floatVertexTextures ) {

					if ( skeleton.boneTexture === undefined ) {

						// layout (1 matrix = 4 pixels)
						//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
						//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
						//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
						//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
						//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


						var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
						size = _Math.nextPowerOfTwo( Math.ceil( size ) );
						size = Math.max( size, 4 );

						var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
						boneMatrices.set( skeleton.boneMatrices ); // copy current values

						var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

						skeleton.boneMatrices = boneMatrices;
						skeleton.boneTexture = boneTexture;
						skeleton.boneTextureSize = size;

					}

					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );
					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

				} else {

					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

				}

			}

		}

		if ( refreshMaterial ) {

			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
			p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

			if ( material.lights ) {

				// the current material requires lighting info

				// note: all lighting uniforms are always set correctly
				// they simply reference the renderer's state for their
				// values
				//
				// use the current material's .needsUpdate flags to set
				// the GL state when required

				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

			}

			// refresh uniforms common to several materials

			if ( fog && material.fog ) {

				refreshUniformsFog( m_uniforms, fog );

			}

			if ( material.isMeshBasicMaterial ||
				material.isMeshLambertMaterial ||
				material.isMeshPhongMaterial ||
				material.isMeshStandardMaterial ||
				material.isMeshNormalMaterial ||
				material.isMeshDepthMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

			}

			// refresh single material specific uniforms

			if ( material.isLineBasicMaterial ) {

				refreshUniformsLine( m_uniforms, material );

			} else if ( material.isLineDashedMaterial ) {

				refreshUniformsLine( m_uniforms, material );
				refreshUniformsDash( m_uniforms, material );

			} else if ( material.isPointsMaterial ) {

				refreshUniformsPoints( m_uniforms, material );

			} else if ( material.isMeshLambertMaterial ) {

				refreshUniformsLambert( m_uniforms, material );

			} else if ( material.isMeshToonMaterial ) {

				refreshUniformsToon( m_uniforms, material );

			} else if ( material.isMeshPhongMaterial ) {

				refreshUniformsPhong( m_uniforms, material );

			} else if ( material.isMeshPhysicalMaterial ) {

				refreshUniformsPhysical( m_uniforms, material );

			} else if ( material.isMeshStandardMaterial ) {

				refreshUniformsStandard( m_uniforms, material );

			} else if ( material.isMeshDepthMaterial ) {

				if ( material.displacementMap ) {

					m_uniforms.displacementMap.value = material.displacementMap;
					m_uniforms.displacementScale.value = material.displacementScale;
					m_uniforms.displacementBias.value = material.displacementBias;

				}

			} else if ( material.isMeshNormalMaterial ) {

				refreshUniformsNormal( m_uniforms, material );

			}

			// RectAreaLight Texture
			// TODO (mrdoob): Find a nicer implementation

			if ( m_uniforms.ltcMat !== undefined ) { m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE; }
			if ( m_uniforms.ltcMag !== undefined ) { m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE; }

			WebGLUniforms.upload(
				_gl, materialProperties.uniformsList, m_uniforms, _this );

		}


		// common matrices

		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

		return program;

	}

	// Uniforms (refresh uniforms objects)

	function refreshUniformsCommon( uniforms, material ) {

		uniforms.opacity.value = material.opacity;

		uniforms.diffuse.value = material.color;

		if ( material.emissive ) {

			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

		}

		uniforms.map.value = material.map;
		uniforms.specularMap.value = material.specularMap;
		uniforms.alphaMap.value = material.alphaMap;

		if ( material.lightMap ) {

			uniforms.lightMap.value = material.lightMap;
			uniforms.lightMapIntensity.value = material.lightMapIntensity;

		}

		if ( material.aoMap ) {

			uniforms.aoMap.value = material.aoMap;
			uniforms.aoMapIntensity.value = material.aoMapIntensity;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. specular map
		// 3. normal map
		// 4. bump map
		// 5. alpha map
		// 6. emissive map

		var uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.specularMap ) {

			uvScaleMap = material.specularMap;

		} else if ( material.displacementMap ) {

			uvScaleMap = material.displacementMap;

		} else if ( material.normalMap ) {

			uvScaleMap = material.normalMap;

		} else if ( material.bumpMap ) {

			uvScaleMap = material.bumpMap;

		} else if ( material.roughnessMap ) {

			uvScaleMap = material.roughnessMap;

		} else if ( material.metalnessMap ) {

			uvScaleMap = material.metalnessMap;

		} else if ( material.alphaMap ) {

			uvScaleMap = material.alphaMap;

		} else if ( material.emissiveMap ) {

			uvScaleMap = material.emissiveMap;

		}

		if ( uvScaleMap !== undefined ) {

			// backwards compatibility
			if ( uvScaleMap.isWebGLRenderTarget ) {

				uvScaleMap = uvScaleMap.texture;

			}

			var offset = uvScaleMap.offset;
			var repeat = uvScaleMap.repeat;

			uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

		}

		uniforms.envMap.value = material.envMap;

		// don't flip CubeTexture envMaps, flip everything else:
		//  WebGLRenderTargetCube will be flipped for backwards compatibility
		//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
		// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
		uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

		uniforms.reflectivity.value = material.reflectivity;
		uniforms.refractionRatio.value = material.refractionRatio;

	}

	function refreshUniformsLine( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;

	}

	function refreshUniformsDash( uniforms, material ) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	}

	function refreshUniformsPoints( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size * _pixelRatio;
		uniforms.scale.value = _height * 0.5;

		uniforms.map.value = material.map;

		if ( material.map !== null ) {

			var offset = material.map.offset;
			var repeat = material.map.repeat;

			uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

		}

	}

	function refreshUniformsFog( uniforms, fog ) {

		uniforms.fogColor.value = fog.color;

		if ( fog.isFog ) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if ( fog.isFogExp2 ) {

			uniforms.fogDensity.value = fog.density;

		}

	}

	function refreshUniformsLambert( uniforms, material ) {

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

	}

	function refreshUniformsPhong( uniforms, material ) {

		uniforms.specular.value = material.specular;
		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsToon( uniforms, material ) {

		refreshUniformsPhong( uniforms, material );

		if ( material.gradientMap ) {

			uniforms.gradientMap.value = material.gradientMap;

		}

	}

	function refreshUniformsStandard( uniforms, material ) {

		uniforms.roughness.value = material.roughness;
		uniforms.metalness.value = material.metalness;

		if ( material.roughnessMap ) {

			uniforms.roughnessMap.value = material.roughnessMap;

		}

		if ( material.metalnessMap ) {

			uniforms.metalnessMap.value = material.metalnessMap;

		}

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		if ( material.envMap ) {

			//uniforms.envMap.value = material.envMap; // part of uniforms common
			uniforms.envMapIntensity.value = material.envMapIntensity;

		}

	}

	function refreshUniformsPhysical( uniforms, material ) {

		uniforms.clearCoat.value = material.clearCoat;
		uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

		refreshUniformsStandard( uniforms, material );

	}

	function refreshUniformsNormal( uniforms, material ) {

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

	function markUniformsLightsNeedsUpdate( uniforms, value ) {

		uniforms.ambientLightColor.needsUpdate = value;

		uniforms.directionalLights.needsUpdate = value;
		uniforms.pointLights.needsUpdate = value;
		uniforms.spotLights.needsUpdate = value;
		uniforms.rectAreaLights.needsUpdate = value;
		uniforms.hemisphereLights.needsUpdate = value;

	}

	// Lighting

	function setupShadows( lights ) {

		var lightShadowsLength = 0;

		for ( var i = 0, l = lights.length; i < l; i ++ ) {

			var light = lights[ i ];

			if ( light.castShadow ) {

				_lights.shadows[ lightShadowsLength ] = light;
				lightShadowsLength ++;

			}

		}

		_lights.shadows.length = lightShadowsLength;

	}

	function setupLights( lights, camera ) {

		var l, ll, light, shadow,
			r = 0, g = 0, b = 0,
			color,
			intensity,
			distance,
			shadowMap,

			viewMatrix = camera.matrixWorldInverse,

			directionalLength = 0,
			pointLength = 0,
			spotLength = 0,
			rectAreaLength = 0,
			hemiLength = 0;

		for ( l = 0, ll = lights.length; l < ll; l ++ ) {

			light = lights[ l ];

			color = light.color;
			intensity = light.intensity;
			distance = light.distance;

			shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

			if ( light.isAmbientLight ) {

				r += color.r * intensity;
				g += color.g * intensity;
				b += color.b * intensity;

			} else if ( light.isDirectionalLight ) {

				var uniforms = lightCache.get( light );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				_vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( _vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;

				}

				_lights.directionalShadowMap[ directionalLength ] = shadowMap;
				_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
				_lights.directional[ directionalLength ] = uniforms;

				directionalLength ++;

			} else if ( light.isSpotLight ) {

				var uniforms = lightCache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.color.copy( color ).multiplyScalar( intensity );
				uniforms.distance = distance;

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				_vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( _vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				uniforms.coneCos = Math.cos( light.angle );
				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;

				}

				_lights.spotShadowMap[ spotLength ] = shadowMap;
				_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
				_lights.spot[ spotLength ] = uniforms;

				spotLength ++;

			} else if ( light.isRectAreaLight ) {

				var uniforms = lightCache.get( light );

				// (a) intensity controls irradiance of entire light
				uniforms.color
					.copy( color )
					.multiplyScalar( intensity / ( light.width * light.height ) );

				// (b) intensity controls the radiance per light area
				// uniforms.color.copy( color ).multiplyScalar( intensity );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				// extract local rotation of light to derive width/height half vectors
				_matrix42.identity();
				_matrix4.copy( light.matrixWorld );
				_matrix4.premultiply( viewMatrix );
				_matrix42.extractRotation( _matrix4 );

				uniforms.halfWidth.set( light.width * 0.5,                0.0, 0.0 );
				uniforms.halfHeight.set(              0.0, light.height * 0.5, 0.0 );

				uniforms.halfWidth.applyMatrix4( _matrix42 );
				uniforms.halfHeight.applyMatrix4( _matrix42 );

				// TODO (abelnation): RectAreaLight distance?
				// uniforms.distance = distance;

				_lights.rectArea[ rectAreaLength ] = uniforms;

				rectAreaLength ++;

			} else if ( light.isPointLight ) {

				var uniforms = lightCache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
				uniforms.distance = light.distance;
				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;

				}

				_lights.pointShadowMap[ pointLength ] = shadowMap;
				_lights.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
				_lights.point[ pointLength ] = uniforms;

				pointLength ++;

			} else if ( light.isHemisphereLight ) {

				var uniforms = lightCache.get( light );

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				uniforms.direction.transformDirection( viewMatrix );
				uniforms.direction.normalize();

				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

				_lights.hemi[ hemiLength ] = uniforms;

				hemiLength ++;

			}

		}

		_lights.ambient[ 0 ] = r;
		_lights.ambient[ 1 ] = g;
		_lights.ambient[ 2 ] = b;

		_lights.directional.length = directionalLength;
		_lights.spot.length = spotLength;
		_lights.rectArea.length = rectAreaLength;
		_lights.point.length = pointLength;
		_lights.hemi.length = hemiLength;

		// TODO (sam-g-steel) why aren't we using join
		_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + _lights.shadows.length;

	}

	// GL state setting

	this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

		state.setCullFace( cullFace );
		state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

	};

	// Textures

	function allocTextureUnit() {

		var textureUnit = _usedTextureUnits;

		if ( textureUnit >= capabilities.maxTextures ) {

			console.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

		}

		_usedTextureUnits += 1;

		return textureUnit;

	}

	this.allocTextureUnit = allocTextureUnit;

	// this.setTexture2D = setTexture2D;
	this.setTexture2D = ( function () {

		var warned = false;

		// backwards compatibility: peel texture.texture
		return function setTexture2D( texture, slot ) {

			if ( texture && texture.isWebGLRenderTarget ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
					warned = true;

				}

				texture = texture.texture;

			}

			textures.setTexture2D( texture, slot );

		};

	}() );

	this.setTexture = ( function () {

		var warned = false;

		return function setTexture( texture, slot ) {

			if ( ! warned ) {

				console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
				warned = true;

			}

			textures.setTexture2D( texture, slot );

		};

	}() );

	this.setTextureCube = ( function () {

		var warned = false;

		return function setTextureCube( texture, slot ) {

			// backwards compatibility: peel texture.texture
			if ( texture && texture.isWebGLRenderTargetCube ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
					warned = true;

				}

				texture = texture.texture;

			}

			// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
			// TODO: unify these code paths
			if ( ( texture && texture.isCubeTexture ) ||
				( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

				// CompressedTexture can have Array in image :/

				// this function alone should take care of cube textures
				textures.setTextureCube( texture, slot );

			} else {

				// assumed: texture property of THREE.WebGLRenderTargetCube

				textures.setTextureCubeDynamic( texture, slot );

			}

		};

	}() );

	this.getRenderTarget = function () {

		return _currentRenderTarget;

	};

	this.setRenderTarget = function ( renderTarget ) {

		_currentRenderTarget = renderTarget;

		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

			textures.setupRenderTarget( renderTarget );

		}

		var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
		var framebuffer;

		if ( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			if ( isCube ) {

				framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

			} else {

				framebuffer = renderTargetProperties.__webglFramebuffer;

			}

			_currentScissor.copy( renderTarget.scissor );
			_currentScissorTest = renderTarget.scissorTest;

			_currentViewport.copy( renderTarget.viewport );

		} else {

			framebuffer = null;

			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
			_currentScissorTest = _scissorTest;

			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );

		}

		if ( _currentFramebuffer !== framebuffer ) {

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_currentFramebuffer = framebuffer;

		}

		state.scissor( _currentScissor );
		state.setScissorTest( _currentScissorTest );

		state.viewport( _currentViewport );

		if ( isCube ) {

			var textureProperties = properties.get( renderTarget.texture );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

		}

	};

	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
			return;

		}

		var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

		if ( framebuffer ) {

			var restore = false;

			if ( framebuffer !== _currentFramebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				restore = true;

			}

			try {

				var texture = renderTarget.texture;
				var textureFormat = texture.format;
				var textureType = texture.type;

				if ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
					return;

				}

				if ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
					! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
					! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
					return;

				}

				if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

						_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );

					}

				} else {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

				}

			} finally {

				if ( restore ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

				}

			}

		}

	};

	// Map three.js constants to WebGL constants

	function paramThreeToGL( p ) {

		var extension;

		if ( p === RepeatWrapping ) { return _gl.REPEAT; }
		if ( p === ClampToEdgeWrapping ) { return _gl.CLAMP_TO_EDGE; }
		if ( p === MirroredRepeatWrapping ) { return _gl.MIRRORED_REPEAT; }

		if ( p === NearestFilter ) { return _gl.NEAREST; }
		if ( p === NearestMipMapNearestFilter ) { return _gl.NEAREST_MIPMAP_NEAREST; }
		if ( p === NearestMipMapLinearFilter ) { return _gl.NEAREST_MIPMAP_LINEAR; }

		if ( p === LinearFilter ) { return _gl.LINEAR; }
		if ( p === LinearMipMapNearestFilter ) { return _gl.LINEAR_MIPMAP_NEAREST; }
		if ( p === LinearMipMapLinearFilter ) { return _gl.LINEAR_MIPMAP_LINEAR; }

		if ( p === UnsignedByteType ) { return _gl.UNSIGNED_BYTE; }
		if ( p === UnsignedShort4444Type ) { return _gl.UNSIGNED_SHORT_4_4_4_4; }
		if ( p === UnsignedShort5551Type ) { return _gl.UNSIGNED_SHORT_5_5_5_1; }
		if ( p === UnsignedShort565Type ) { return _gl.UNSIGNED_SHORT_5_6_5; }

		if ( p === ByteType ) { return _gl.BYTE; }
		if ( p === ShortType ) { return _gl.SHORT; }
		if ( p === UnsignedShortType ) { return _gl.UNSIGNED_SHORT; }
		if ( p === IntType ) { return _gl.INT; }
		if ( p === UnsignedIntType ) { return _gl.UNSIGNED_INT; }
		if ( p === FloatType ) { return _gl.FLOAT; }

		if ( p === HalfFloatType ) {

			extension = extensions.get( 'OES_texture_half_float' );

			if ( extension !== null ) { return extension.HALF_FLOAT_OES; }

		}

		if ( p === AlphaFormat ) { return _gl.ALPHA; }
		if ( p === RGBFormat ) { return _gl.RGB; }
		if ( p === RGBAFormat ) { return _gl.RGBA; }
		if ( p === LuminanceFormat ) { return _gl.LUMINANCE; }
		if ( p === LuminanceAlphaFormat ) { return _gl.LUMINANCE_ALPHA; }
		if ( p === DepthFormat ) { return _gl.DEPTH_COMPONENT; }
		if ( p === DepthStencilFormat ) { return _gl.DEPTH_STENCIL; }

		if ( p === AddEquation ) { return _gl.FUNC_ADD; }
		if ( p === SubtractEquation ) { return _gl.FUNC_SUBTRACT; }
		if ( p === ReverseSubtractEquation ) { return _gl.FUNC_REVERSE_SUBTRACT; }

		if ( p === ZeroFactor ) { return _gl.ZERO; }
		if ( p === OneFactor ) { return _gl.ONE; }
		if ( p === SrcColorFactor ) { return _gl.SRC_COLOR; }
		if ( p === OneMinusSrcColorFactor ) { return _gl.ONE_MINUS_SRC_COLOR; }
		if ( p === SrcAlphaFactor ) { return _gl.SRC_ALPHA; }
		if ( p === OneMinusSrcAlphaFactor ) { return _gl.ONE_MINUS_SRC_ALPHA; }
		if ( p === DstAlphaFactor ) { return _gl.DST_ALPHA; }
		if ( p === OneMinusDstAlphaFactor ) { return _gl.ONE_MINUS_DST_ALPHA; }

		if ( p === DstColorFactor ) { return _gl.DST_COLOR; }
		if ( p === OneMinusDstColorFactor ) { return _gl.ONE_MINUS_DST_COLOR; }
		if ( p === SrcAlphaSaturateFactor ) { return _gl.SRC_ALPHA_SATURATE; }

		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

			if ( extension !== null ) {

				if ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }
				if ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }
				if ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }
				if ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }

			}

		}

		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			if ( extension !== null ) {

				if ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }
				if ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }
				if ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }
				if ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }

			}

		}

		if ( p === RGB_ETC1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

			if ( extension !== null ) { return extension.COMPRESSED_RGB_ETC1_WEBGL; }

		}

		if ( p === MinEquation || p === MaxEquation ) {

			extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				if ( p === MinEquation ) { return extension.MIN_EXT; }
				if ( p === MaxEquation ) { return extension.MAX_EXT; }

			}

		}

		if ( p === UnsignedInt248Type ) {

			extension = extensions.get( 'WEBGL_depth_texture' );

			if ( extension !== null ) { return extension.UNSIGNED_INT_24_8_WEBGL; }

		}

		return 0;

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function FogExp2 ( color, density ) {

	this.name = '';

	this.color = new Color( color );
	this.density = ( density !== undefined ) ? density : 0.00025;

}

FogExp2.prototype.isFogExp2 = true;

FogExp2.prototype.clone = function () {

	return new FogExp2( this.color.getHex(), this.density );

};

FogExp2.prototype.toJSON = function ( meta ) {

	return {
		type: 'FogExp2',
		color: this.color.getHex(),
		density: this.density
	};

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Fog ( color, near, far ) {

	this.name = '';

	this.color = new Color( color );

	this.near = ( near !== undefined ) ? near : 1;
	this.far = ( far !== undefined ) ? far : 1000;

}

Fog.prototype.isFog = true;

Fog.prototype.clone = function () {

	return new Fog( this.color.getHex(), this.near, this.far );

};

Fog.prototype.toJSON = function ( meta ) {

	return {
		type: 'Fog',
		color: this.color.getHex(),
		near: this.near,
		far: this.far
	};

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Scene () {

	Object3D.call( this );

	this.type = 'Scene';

	this.background = null;
	this.fog = null;
	this.overrideMaterial = null;

	this.autoUpdate = true; // checked by the renderer

}

Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Scene,

	copy: function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		if ( source.background !== null ) { this.background = source.background.clone(); }
		if ( source.fog !== null ) { this.fog = source.fog.clone(); }
		if ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		if ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }
		if ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }

		return data;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function LensFlare( texture, size, distance, blending, color ) {

	Object3D.call( this );

	this.lensFlares = [];

	this.positionScreen = new Vector3();
	this.customUpdateCallback = undefined;

	if ( texture !== undefined ) {

		this.add( texture, size, distance, blending, color );

	}

}

LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: LensFlare,

	isLensFlare: true,

	copy: function ( source ) {
		var this$1 = this;


		Object3D.prototype.copy.call( this, source );

		this.positionScreen.copy( source.positionScreen );
		this.customUpdateCallback = source.customUpdateCallback;

		for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

			this$1.lensFlares.push( source.lensFlares[ i ] );

		}

		return this;

	},

	add: function ( texture, size, distance, blending, color, opacity ) {

		if ( size === undefined ) { size = - 1; }
		if ( distance === undefined ) { distance = 0; }
		if ( opacity === undefined ) { opacity = 1; }
		if ( color === undefined ) { color = new Color( 0xffffff ); }
		if ( blending === undefined ) { blending = NormalBlending; }

		distance = Math.min( distance, Math.max( 0, distance ) );

		this.lensFlares.push( {
			texture: texture,	// THREE.Texture
			size: size, 		// size in pixels (-1 = use texture.width)
			distance: distance, 	// distance (0-1) from light source (0=at light source)
			x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
			scale: 1, 		// scale
			rotation: 0, 		// rotation
			opacity: opacity,	// opacity
			color: color,		// color
			blending: blending	// blending
		} );

	},

	/*
	 * Update lens flares update positions on all flares based on the screen position
	 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
	 */

	updateLensFlares: function () {
		var this$1 = this;


		var f, fl = this.lensFlares.length;
		var flare;
		var vecX = - this.positionScreen.x * 2;
		var vecY = - this.positionScreen.y * 2;

		for ( f = 0; f < fl; f ++ ) {

			flare = this$1.lensFlares[ f ];

			flare.x = this$1.positionScreen.x + vecX * flare.distance;
			flare.y = this$1.positionScreen.y + vecY * flare.distance;

			flare.wantedRotation = flare.x * Math.PI * 0.25;
			flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

		}

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *	uvOffset: new THREE.Vector2(),
 *	uvScale: new THREE.Vector2()
 * }
 */

function SpriteMaterial( parameters ) {

	Material.call( this );

	this.type = 'SpriteMaterial';

	this.color = new Color( 0xffffff );
	this.map = null;

	this.rotation = 0;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

SpriteMaterial.prototype = Object.create( Material.prototype );
SpriteMaterial.prototype.constructor = SpriteMaterial;
SpriteMaterial.prototype.isSpriteMaterial = true;

SpriteMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );
	this.map = source.map;

	this.rotation = source.rotation;

	return this;

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function Sprite( material ) {

	Object3D.call( this );

	this.type = 'Sprite';

	this.material = ( material !== undefined ) ? material : new SpriteMaterial();

}

Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Sprite,

	isSprite: true,

	raycast: ( function () {

		var intersectPoint = new Vector3();
		var worldPosition = new Vector3();
		var worldScale = new Vector3();

		return function raycast( raycaster, intersects ) {

			worldPosition.setFromMatrixPosition( this.matrixWorld );
			raycaster.ray.closestPointToPoint( worldPosition, intersectPoint );

			worldScale.setFromMatrixScale( this.matrixWorld );
			var guessSizeSq = worldScale.x * worldScale.y / 4;

			if ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) { return; }

			var distance = raycaster.ray.origin.distanceTo( intersectPoint );

			if ( distance < raycaster.near || distance > raycaster.far ) { return; }

			intersects.push( {

				distance: distance,
				point: intersectPoint.clone(),
				face: null,
				object: this

			} );

		};

	}() ),

	clone: function () {

		return new this.constructor( this.material ).copy( this );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function LOD() {

	Object3D.call( this );

	this.type = 'LOD';

	Object.defineProperties( this, {
		levels: {
			enumerable: true,
			value: []
		}
	} );

}

LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: LOD,

	copy: function ( source ) {
		var this$1 = this;


		Object3D.prototype.copy.call( this, source, false );

		var levels = source.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			this$1.addLevel( level.object.clone(), level.distance );

		}

		return this;

	},

	addLevel: function ( object, distance ) {

		if ( distance === undefined ) { distance = 0; }

		distance = Math.abs( distance );

		var levels = this.levels;

		for ( var l = 0; l < levels.length; l ++ ) {

			if ( distance < levels[ l ].distance ) {

				break;

			}

		}

		levels.splice( l, 0, { distance: distance, object: object } );

		this.add( object );

	},

	getObjectForDistance: function ( distance ) {

		var levels = this.levels;

		for ( var i = 1, l = levels.length; i < l; i ++ ) {

			if ( distance < levels[ i ].distance ) {

				break;

			}

		}

		return levels[ i - 1 ].object;

	},

	raycast: ( function () {

		var matrixPosition = new Vector3();

		return function raycast( raycaster, intersects ) {

			matrixPosition.setFromMatrixPosition( this.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( matrixPosition );

			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

		};

	}() ),

	update: function () {

		var v1 = new Vector3();
		var v2 = new Vector3();

		return function update( camera ) {

			var levels = this.levels;

			if ( levels.length > 1 ) {

				v1.setFromMatrixPosition( camera.matrixWorld );
				v2.setFromMatrixPosition( this.matrixWorld );

				var distance = v1.distanceTo( v2 );

				levels[ 0 ].object.visible = true;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance >= levels[ i ].distance ) {

						levels[ i - 1 ].object.visible = false;
						levels[ i ].object.visible = true;

					} else {

						break;

					}

				}

				for ( ; i < l; i ++ ) {

					levels[ i ].object.visible = false;

				}

			}

		};

	}(),

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.levels = [];

		var levels = this.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			data.object.levels.push( {
				object: level.object.uuid,
				distance: level.distance
			} );

		}

		return data;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author michael guerrero / http://realitymeltdown.com
 * @author ikerr / http://verold.com
 */

function Skeleton( bones, boneInverses ) {
	var this$1 = this;


	// copy the bone array

	bones = bones || [];

	this.bones = bones.slice( 0 );
	this.boneMatrices = new Float32Array( this.bones.length * 16 );

	// use the supplied bone inverses or calculate the inverses

	if ( boneInverses === undefined ) {

		this.calculateInverses();

	} else {

		if ( this.bones.length === boneInverses.length ) {

			this.boneInverses = boneInverses.slice( 0 );

		} else {

			console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

			this.boneInverses = [];

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				this$1.boneInverses.push( new Matrix4() );

			}

		}

	}

}

Object.assign( Skeleton.prototype, {

	calculateInverses: function () {
		var this$1 = this;


		this.boneInverses = [];

		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

			var inverse = new Matrix4();

			if ( this$1.bones[ i ] ) {

				inverse.getInverse( this$1.bones[ i ].matrixWorld );

			}

			this$1.boneInverses.push( inverse );

		}

	},

	pose: function () {
		var this$1 = this;


		var bone, i, il;

		// recover the bind-time world matrices

		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

			bone = this$1.bones[ i ];

			if ( bone ) {

				bone.matrixWorld.getInverse( this$1.boneInverses[ i ] );

			}

		}

		// compute the local matrices, positions, rotations and scales

		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

			bone = this$1.bones[ i ];

			if ( bone ) {

				if ( bone.parent && bone.parent.isBone ) {

					bone.matrix.getInverse( bone.parent.matrixWorld );
					bone.matrix.multiply( bone.matrixWorld );

				} else {

					bone.matrix.copy( bone.matrixWorld );

				}

				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

			}

		}

	},

	update: ( function () {

		var offsetMatrix = new Matrix4();
		var identityMatrix = new Matrix4();

		return function update() {

			var bones = this.bones;
			var boneInverses = this.boneInverses;
			var boneMatrices = this.boneMatrices;
			var boneTexture = this.boneTexture;

			// flatten bone matrices to array

			for ( var i = 0, il = bones.length; i < il; i ++ ) {

				// compute the offset between the current and the original transform

				var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;

				offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
				offsetMatrix.toArray( boneMatrices, i * 16 );

			}

			if ( boneTexture !== undefined ) {

				boneTexture.needsUpdate = true;

			}

		};

	} )(),

	clone: function () {

		return new Skeleton( this.bones, this.boneInverses );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function Bone() {

	Object3D.call( this );

	this.type = 'Bone';

}

Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Bone,

	isBone: true

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function SkinnedMesh( geometry, material ) {

	Mesh.call( this, geometry, material );

	this.type = 'SkinnedMesh';

	this.bindMode = 'attached';
	this.bindMatrix = new Matrix4();
	this.bindMatrixInverse = new Matrix4();

	var bones = this.initBones();
	var skeleton = new Skeleton( bones );

	this.bind( skeleton, this.matrixWorld );

	this.normalizeSkinWeights();

}

SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

	constructor: SkinnedMesh,

	isSkinnedMesh: true,

	initBones: function () {
		var this$1 = this;


		var bones = [], bone, gbone;
		var i, il;

		if ( this.geometry && this.geometry.bones !== undefined ) {

			// first, create array of 'Bone' objects from geometry data

			for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

				gbone = this$1.geometry.bones[ i ];

				// create new 'Bone' object

				bone = new Bone();
				bones.push( bone );

				// apply values

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) { bone.scale.fromArray( gbone.scl ); }

			}

			// second, create bone hierarchy

			for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

				gbone = this$1.geometry.bones[ i ];

				if ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {

					// subsequent bones in the hierarchy

					bones[ gbone.parent ].add( bones[ i ] );

				} else {

					// topmost bone, immediate child of the skinned mesh

					this$1.add( bones[ i ] );

				}

			}

		}

		// now the bones are part of the scene graph and children of the skinned mesh.
		// let's update the corresponding matrices

		this.updateMatrixWorld( true );

		return bones;

	},

	bind: function ( skeleton, bindMatrix ) {

		this.skeleton = skeleton;

		if ( bindMatrix === undefined ) {

			this.updateMatrixWorld( true );

			this.skeleton.calculateInverses();

			bindMatrix = this.matrixWorld;

		}

		this.bindMatrix.copy( bindMatrix );
		this.bindMatrixInverse.getInverse( bindMatrix );

	},

	pose: function () {

		this.skeleton.pose();

	},

	normalizeSkinWeights: function () {
		var this$1 = this;


		var scale, i;

		if ( this.geometry && this.geometry.isGeometry ) {

			for ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {

				var sw = this$1.geometry.skinWeights[ i ];

				scale = 1.0 / sw.lengthManhattan();

				if ( scale !== Infinity ) {

					sw.multiplyScalar( scale );

				} else {

					sw.set( 1, 0, 0, 0 ); // do something reasonable

				}

			}

		} else if ( this.geometry && this.geometry.isBufferGeometry ) {

			var vec = new Vector4();

			var skinWeight = this.geometry.attributes.skinWeight;

			for ( i = 0; i < skinWeight.count; i ++ ) {

				vec.x = skinWeight.getX( i );
				vec.y = skinWeight.getY( i );
				vec.z = skinWeight.getZ( i );
				vec.w = skinWeight.getW( i );

				scale = 1.0 / vec.lengthManhattan();

				if ( scale !== Infinity ) {

					vec.multiplyScalar( scale );

				} else {

					vec.set( 1, 0, 0, 0 ); // do something reasonable

				}

				skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

			}

		}

	},

	updateMatrixWorld: function ( force ) {

		Mesh.prototype.updateMatrixWorld.call( this, force );

		if ( this.bindMode === 'attached' ) {

			this.bindMatrixInverse.getInverse( this.matrixWorld );

		} else if ( this.bindMode === 'detached' ) {

			this.bindMatrixInverse.getInverse( this.bindMatrix );

		} else {

			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

		}

	},

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */

function LineBasicMaterial( parameters ) {

	Material.call( this );

	this.type = 'LineBasicMaterial';

	this.color = new Color( 0xffffff );

	this.linewidth = 1;
	this.linecap = 'round';
	this.linejoin = 'round';

	this.lights = false;

	this.setValues( parameters );

}

LineBasicMaterial.prototype = Object.create( Material.prototype );
LineBasicMaterial.prototype.constructor = LineBasicMaterial;

LineBasicMaterial.prototype.isLineBasicMaterial = true;

LineBasicMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.linewidth = source.linewidth;
	this.linecap = source.linecap;
	this.linejoin = source.linejoin;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Line( geometry, material, mode ) {

	if ( mode === 1 ) {

		console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
		return new LineSegments( geometry, material );

	}

	Object3D.call( this );

	this.type = 'Line';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

}

Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Line,

	isLine: true,

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		return function raycast( raycaster, intersects ) {
			var this$1 = this;


			var precision = raycaster.linePrecision;
			var precisionSq = precision * precision;

			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) { return; }

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var vStart = new Vector3();
			var vEnd = new Vector3();
			var interSegment = new Vector3();
			var interRay = new Vector3();
			var step = (this && this.isLineSegments) ? 2 : 1;

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

						var a = indices[ i ];
						var b = indices[ i + 1 ];

						vStart.fromArray( positions, a * 3 );
						vEnd.fromArray( positions, b * 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) { continue; }

						interRay.applyMatrix4( this$1.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this$1.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this$1

						} );

					}

				} else {

					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

						vStart.fromArray( positions, 3 * i );
						vEnd.fromArray( positions, 3 * i + 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) { continue; }

						interRay.applyMatrix4( this$1.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this$1.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this$1

						} );

					}

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var nbVertices = vertices.length;

				for ( var i = 0; i < nbVertices - 1; i += step ) {

					var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

					if ( distSq > precisionSq ) { continue; }

					interRay.applyMatrix4( this$1.matrixWorld ); //Move back to world space for distance calculation

					var distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this$1.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this$1

					} );

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LineSegments( geometry, material ) {

	Line.call( this, geometry, material );

	this.type = 'LineSegments';

}

LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

	constructor: LineSegments,

	isLineSegments: true

} );

/**
 * @author mgreter / http://github.com/mgreter
 */

function LineLoop( geometry, material ) {

	Line.call( this, geometry, material );

	this.type = 'LineLoop';

}

LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

	constructor: LineLoop,

	isLineLoop: true,

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 * }
 */

function PointsMaterial( parameters ) {

	Material.call( this );

	this.type = 'PointsMaterial';

	this.color = new Color( 0xffffff );

	this.map = null;

	this.size = 1;
	this.sizeAttenuation = true;

	this.lights = false;

	this.setValues( parameters );

}

PointsMaterial.prototype = Object.create( Material.prototype );
PointsMaterial.prototype.constructor = PointsMaterial;

PointsMaterial.prototype.isPointsMaterial = true;

PointsMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.size = source.size;
	this.sizeAttenuation = source.sizeAttenuation;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Points( geometry, material ) {

	Object3D.call( this );

	this.type = 'Points';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

}

Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Points,

	isPoints: true,

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		return function raycast( raycaster, intersects ) {

			var object = this;
			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;
			var threshold = raycaster.params.Points.threshold;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );
			sphere.radius += threshold;

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) { return; }

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localThresholdSq = localThreshold * localThreshold;
			var position = new Vector3();

			function testPoint( point, index ) {

				var rayPointDistanceSq = ray.distanceSqToPoint( point );

				if ( rayPointDistanceSq < localThresholdSq ) {

					var intersectPoint = ray.closestPointToPoint( point );
					intersectPoint.applyMatrix4( matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectPoint );

					if ( distance < raycaster.near || distance > raycaster.far ) { return; }

					intersects.push( {

						distance: distance,
						distanceToRay: Math.sqrt( rayPointDistanceSq ),
						point: intersectPoint.clone(),
						index: index,
						face: null,
						object: object

					} );

				}

			}

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, il = indices.length; i < il; i ++ ) {

						var a = indices[ i ];

						position.fromArray( positions, a * 3 );

						testPoint( position, a );

					}

				} else {

					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

						position.fromArray( positions, i * 3 );

						testPoint( position, i );

					}

				}

			} else {

				var vertices = geometry.vertices;

				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

					testPoint( vertices[ i ], i );

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Group() {

	Object3D.call( this );

	this.type = 'Group';

}

Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Group

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.image = { width: width, height: height };
	this.mipmaps = mipmaps;

	// no flipping for cube textures
	// (also flipping doesn't work for compressed textures )

	this.flipY = false;

	// can't generate mipmaps for compressed textures
	// mips must be embedded in DDS files

	this.generateMipmaps = false;

}

CompressedTexture.prototype = Object.create( Texture.prototype );
CompressedTexture.prototype.constructor = CompressedTexture;

CompressedTexture.prototype.isCompressedTexture = true;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.needsUpdate = true;

}

CanvasTexture.prototype = Object.create( Texture.prototype );
CanvasTexture.prototype.constructor = CanvasTexture;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

function WireframeGeometry( geometry ) {

	BufferGeometry.call( this );

	this.type = 'WireframeGeometry';

	// buffer

	var vertices = [];

	// helper variables

	var i, j, l, o, ol;
	var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
	var key, keys = [ 'a', 'b', 'c' ];
	var vertex;

	// different logic for Geometry and BufferGeometry

	if ( geometry && geometry.isGeometry ) {

		// create a data structure that contains all edges without duplicates

		var faces = geometry.faces;

		for ( i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( j = 0; j < 3; j ++ ) {

				edge1 = face[ keys[ j ] ];
				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
				edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
				edge[ 1 ] = Math.max( edge1, edge2 );

				key = edge[ 0 ] + ',' + edge[ 1 ];

				if ( edges[ key ] === undefined ) {

					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

				}

			}

		}

		// generate vertices

		for ( key in edges ) {

			e = edges[ key ];

			vertex = geometry.vertices[ e.index1 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

			vertex = geometry.vertices[ e.index2 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	} else if ( geometry && geometry.isBufferGeometry ) {

		var position, indices, groups;
		var group, start, count;
		var index1, index2;

		vertex = new Vector3();

		if ( geometry.index !== null ) {

			// indexed BufferGeometry

			position = geometry.attributes.position;
			indices = geometry.index;
			groups = geometry.groups;

			if ( groups.length === 0 ) {

				groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

			}

			// create a data structure that contains all eges without duplicates

			for ( o = 0, ol = groups.length; o < ol; ++ o ) {

				group = groups[ o ];

				start = group.start;
				count = group.count;

				for ( i = start, l = ( start + count ); i < l; i += 3 ) {

					for ( j = 0; j < 3; j ++ ) {

						edge1 = indices.getX( i + j );
						edge2 = indices.getX( i + ( j + 1 ) % 3 );
						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
						edge[ 1 ] = Math.max( edge1, edge2 );

						key = edge[ 0 ] + ',' + edge[ 1 ];

						if ( edges[ key ] === undefined ) {

							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

						}

					}

				}

			}

			// generate vertices

			for ( key in edges ) {

				e = edges[ key ];

				vertex.fromBufferAttribute( position, e.index1 );
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex.fromBufferAttribute( position, e.index2 );
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		} else {

			// non-indexed BufferGeometry

			position = geometry.attributes.position;

			for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

				for ( j = 0; j < 3; j ++ ) {

					// three edges per triangle, an edge is represented as (index1, index2)
					// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

					index1 = 3 * i + j;
					vertex.fromBufferAttribute( position, index1 );
					vertices.push( vertex.x, vertex.y, vertex.z );

					index2 = 3 * i + ( ( j + 1 ) % 3 );
					vertex.fromBufferAttribute( position, index2 );
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			}

		}

	}

	// build geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

}

WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
WireframeGeometry.prototype.constructor = WireframeGeometry;

/**
 * @author zz85 / https://github.com/zz85
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
 */

// ParametricGeometry

function ParametricGeometry( func, slices, stacks ) {

	Geometry.call( this );

	this.type = 'ParametricGeometry';

	this.parameters = {
		func: func,
		slices: slices,
		stacks: stacks
	};

	this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
	this.mergeVertices();

}

ParametricGeometry.prototype = Object.create( Geometry.prototype );
ParametricGeometry.prototype.constructor = ParametricGeometry;

// ParametricBufferGeometry

function ParametricBufferGeometry( func, slices, stacks ) {

	BufferGeometry.call( this );

	this.type = 'ParametricBufferGeometry';

	this.parameters = {
		func: func,
		slices: slices,
		stacks: stacks
	};

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	var EPS = 0.00001;

	var normal = new Vector3();

	var p0 = new Vector3(), p1 = new Vector3();
	var pu = new Vector3(), pv = new Vector3();

	var i, j;

	// generate vertices, normals and uvs

	var sliceCount = slices + 1;

	for ( i = 0; i <= stacks; i ++ ) {

		var v = i / stacks;

		for ( j = 0; j <= slices; j ++ ) {

			var u = j / slices;

			// vertex

			p0 = func( u, v, p0 );
			vertices.push( p0.x, p0.y, p0.z );

			// normal

			// approximate tangent vectors via finite differences

			if ( u - EPS >= 0 ) {

				p1 = func( u - EPS, v, p1 );
				pu.subVectors( p0, p1 );

			} else {

				p1 = func( u + EPS, v, p1 );
				pu.subVectors( p1, p0 );

			}

			if ( v - EPS >= 0 ) {

				p1 = func( u, v - EPS, p1 );
				pv.subVectors( p0, p1 );

			} else {

				p1 = func( u, v + EPS, p1 );
				pv.subVectors( p1, p0 );

			}

			// cross product of tangent vectors returns surface normal

			normal.crossVectors( pu, pv ).normalize();
			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( u, v );

		}

	}

	// generate indices

	for ( i = 0; i < stacks; i ++ ) {

		for ( j = 0; j < slices; j ++ ) {

			var a = i * sliceCount + j;
			var b = i * sliceCount + j + 1;
			var c = ( i + 1 ) * sliceCount + j + 1;
			var d = ( i + 1 ) * sliceCount + j;

			// faces one and two

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */

// PolyhedronGeometry

function PolyhedronGeometry( vertices, indices, radius, detail ) {

	Geometry.call( this );

	this.type = 'PolyhedronGeometry';

	this.parameters = {
		vertices: vertices,
		indices: indices,
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
	this.mergeVertices();

}

PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

// PolyhedronBufferGeometry

function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

	BufferGeometry.call( this );

	this.type = 'PolyhedronBufferGeometry';

	this.parameters = {
		vertices: vertices,
		indices: indices,
		radius: radius,
		detail: detail
	};

	radius = radius || 1;
	detail = detail || 0;

	// default buffer data

	var vertexBuffer = [];
	var uvBuffer = [];

	// the subdivision creates the vertex buffer data

	subdivide( detail );

	// all vertices should lie on a conceptual sphere with a given radius

	appplyRadius( radius );

	// finally, create the uv data

	generateUVs();

	// build non-indexed geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

	if ( detail === 0 ) {

		this.computeVertexNormals(); // flat normals

	} else {

		this.normalizeNormals(); // smooth normals

	}

	// helper functions

	function subdivide( detail ) {

		var a = new Vector3();
		var b = new Vector3();
		var c = new Vector3();

		// iterate over all faces and apply a subdivison with the given detail value

		for ( var i = 0; i < indices.length; i += 3 ) {

			// get the vertices of the face

			getVertexByIndex( indices[ i + 0 ], a );
			getVertexByIndex( indices[ i + 1 ], b );
			getVertexByIndex( indices[ i + 2 ], c );

			// perform subdivision

			subdivideFace( a, b, c, detail );

		}

	}

	function subdivideFace( a, b, c, detail ) {

		var cols = Math.pow( 2, detail );

		// we use this multidimensional array as a data structure for creating the subdivision

		var v = [];

		var i, j;

		// construct all of the vertices for this subdivision

		for ( i = 0; i <= cols; i ++ ) {

			v[ i ] = [];

			var aj = a.clone().lerp( c, i / cols );
			var bj = b.clone().lerp( c, i / cols );

			var rows = cols - i;

			for ( j = 0; j <= rows; j ++ ) {

				if ( j === 0 && i === cols ) {

					v[ i ][ j ] = aj;

				} else {

					v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

				}

			}

		}

		// construct all of the faces

		for ( i = 0; i < cols; i ++ ) {

			for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

				var k = Math.floor( j / 2 );

				if ( j % 2 === 0 ) {

					pushVertex( v[ i ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k ] );
					pushVertex( v[ i ][ k ] );

				} else {

					pushVertex( v[ i ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k ] );

				}

			}

		}

	}

	function appplyRadius( radius ) {

		var vertex = new Vector3();

		// iterate over the entire buffer and apply the radius to each vertex

		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

			vertex.x = vertexBuffer[ i + 0 ];
			vertex.y = vertexBuffer[ i + 1 ];
			vertex.z = vertexBuffer[ i + 2 ];

			vertex.normalize().multiplyScalar( radius );

			vertexBuffer[ i + 0 ] = vertex.x;
			vertexBuffer[ i + 1 ] = vertex.y;
			vertexBuffer[ i + 2 ] = vertex.z;

		}

	}

	function generateUVs() {

		var vertex = new Vector3();

		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

			vertex.x = vertexBuffer[ i + 0 ];
			vertex.y = vertexBuffer[ i + 1 ];
			vertex.z = vertexBuffer[ i + 2 ];

			var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
			var v = inclination( vertex ) / Math.PI + 0.5;
			uvBuffer.push( u, 1 - v );

		}

		correctUVs();

		correctSeam();

	}

	function correctSeam() {

		// handle case when face straddles the seam, see #3269

		for ( var i = 0; i < uvBuffer.length; i += 6 ) {

			// uv data of a single face

			var x0 = uvBuffer[ i + 0 ];
			var x1 = uvBuffer[ i + 2 ];
			var x2 = uvBuffer[ i + 4 ];

			var max = Math.max( x0, x1, x2 );
			var min = Math.min( x0, x1, x2 );

			// 0.9 is somewhat arbitrary

			if ( max > 0.9 && min < 0.1 ) {

				if ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }
				if ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }
				if ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }

			}

		}

	}

	function pushVertex( vertex ) {

		vertexBuffer.push( vertex.x, vertex.y, vertex.z );

	}

	function getVertexByIndex( index, vertex ) {

		var stride = index * 3;

		vertex.x = vertices[ stride + 0 ];
		vertex.y = vertices[ stride + 1 ];
		vertex.z = vertices[ stride + 2 ];

	}

	function correctUVs() {

		var a = new Vector3();
		var b = new Vector3();
		var c = new Vector3();

		var centroid = new Vector3();

		var uvA = new Vector2();
		var uvB = new Vector2();
		var uvC = new Vector2();

		for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

			a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
			b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
			c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

			uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
			uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
			uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

			centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

			var azi = azimuth( centroid );

			correctUV( uvA, j + 0, a, azi );
			correctUV( uvB, j + 2, b, azi );
			correctUV( uvC, j + 4, c, azi );

		}

	}

	function correctUV( uv, stride, vector, azimuth ) {

		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

			uvBuffer[ stride ] = uv.x - 1;

		}

		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

			uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

		}

	}

	// Angle around the Y axis, counter-clockwise when looking from above.

	function azimuth( vector ) {

		return Math.atan2( vector.z, - vector.x );

	}


	// Angle above the XZ plane.

	function inclination( vector ) {

		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

	}

}

PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// TetrahedronGeometry

function TetrahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'TetrahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

// TetrahedronBufferGeometry

function TetrahedronBufferGeometry( radius, detail ) {

	var vertices = [
		1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
	];

	var indices = [
		2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'TetrahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// OctahedronGeometry

function OctahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'OctahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

OctahedronGeometry.prototype = Object.create( Geometry.prototype );
OctahedronGeometry.prototype.constructor = OctahedronGeometry;

// OctahedronBufferGeometry

function OctahedronBufferGeometry( radius, detail ) {

	var vertices = [
		1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
	];

	var indices = [
		0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'OctahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// IcosahedronGeometry

function IcosahedronGeometry( radius, detail ) {

 	Geometry.call( this );

	this.type = 'IcosahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

// IcosahedronBufferGeometry

function IcosahedronBufferGeometry( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

	var vertices = [
		- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
		 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
		 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
	];

	var indices = [
		 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
		 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
		 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
		 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'IcosahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

/**
 * @author Abe Pazos / https://hamoid.com
 * @author Mugen87 / https://github.com/Mugen87
 */

// DodecahedronGeometry

function DodecahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'DodecahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

// DodecahedronBufferGeometry

function DodecahedronBufferGeometry( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	var r = 1 / t;

	var vertices = [

		// (±1, ±1, ±1)
		- 1, - 1, - 1,    - 1, - 1,  1,
		- 1,  1, - 1,    - 1,  1,  1,
		  1, - 1, - 1,     1, - 1,  1,
		  1,  1, - 1,     1,  1,  1,

		// (0, ±1/φ, ±φ)
		 0, - r, - t,     0, - r,  t,
		 0,  r, - t,     0,  r,  t,

		// (±1/φ, ±φ, 0)
		- r, - t,  0,    - r,  t,  0,
		 r, - t,  0,     r,  t,  0,

		// (±φ, 0, ±1/φ)
		- t,  0, - r,     t,  0, - r,
		- t,  0,  r,     t,  0,  r
	];

	var indices = [
		 3, 11,  7,      3,  7, 15,      3, 15, 13,
		 7, 19, 17,      7, 17,  6,      7,  6, 15,
		17,  4,  8,     17,  8, 10,     17, 10,  6,
		 8,  0, 16,      8, 16,  2,      8,  2, 10,
		 0, 12,  1,      0,  1, 18,      0, 18, 16,
		 6, 10,  2,      6,  2, 13,      6, 13, 15,
		 2, 16, 18,      2, 18,  3,      2,  3, 13,
		18,  1,  9,     18,  9, 11,     18, 11,  3,
		 4, 14, 12,      4, 12,  0,      4,  0,  8,
		11,  9,  5,     11,  5, 19,     11, 19,  7,
		19,  5, 14,     19, 14,  4,     19,  4, 17,
		 1, 12, 14,      1, 14,  5,      1,  5,  9
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'DodecahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

/**
 * @author oosmoxiecode / https://github.com/oosmoxiecode
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 * @author jonobr1 / https://github.com/jonobr1
 * @author Mugen87 / https://github.com/Mugen87
 *
 */

// TubeGeometry

function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

	Geometry.call( this );

	this.type = 'TubeGeometry';

	this.parameters = {
		path: path,
		tubularSegments: tubularSegments,
		radius: radius,
		radialSegments: radialSegments,
		closed: closed
	};

	if ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }

	var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

	// expose internals

	this.tangents = bufferGeometry.tangents;
	this.normals = bufferGeometry.normals;
	this.binormals = bufferGeometry.binormals;

	// create geometry

	this.fromBufferGeometry( bufferGeometry );
	this.mergeVertices();

}

TubeGeometry.prototype = Object.create( Geometry.prototype );
TubeGeometry.prototype.constructor = TubeGeometry;

// TubeBufferGeometry

function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

	BufferGeometry.call( this );

	this.type = 'TubeBufferGeometry';

	this.parameters = {
		path: path,
		tubularSegments: tubularSegments,
		radius: radius,
		radialSegments: radialSegments,
		closed: closed
	};

	tubularSegments = tubularSegments || 64;
	radius = radius || 1;
	radialSegments = radialSegments || 8;
	closed = closed || false;

	var frames = path.computeFrenetFrames( tubularSegments, closed );

	// expose internals

	this.tangents = frames.tangents;
	this.normals = frames.normals;
	this.binormals = frames.binormals;

	// helper variables

	var vertex = new Vector3();
	var normal = new Vector3();
	var uv = new Vector2();

	var i, j;

	// buffer

	var vertices = [];
	var normals = [];
	var uvs = [];
	var indices = [];

	// create buffer data

	generateBufferData();

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// functions

	function generateBufferData() {

		for ( i = 0; i < tubularSegments; i ++ ) {

			generateSegment( i );

		}

		// if the geometry is not closed, generate the last row of vertices and normals
		// at the regular position on the given path
		//
		// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

		generateSegment( ( closed === false ) ? tubularSegments : 0 );

		// uvs are generated in a separate function.
		// this makes it easy compute correct values for closed geometries

		generateUVs();

		// finally create faces

		generateIndices();

	}

	function generateSegment( i ) {

		// we use getPointAt to sample evenly distributed points from the given path

		var P = path.getPointAt( i / tubularSegments );

		// retrieve corresponding normal and binormal

		var N = frames.normals[ i ];
		var B = frames.binormals[ i ];

		// generate normals and vertices for the current segment

		for ( j = 0; j <= radialSegments; j ++ ) {

			var v = j / radialSegments * Math.PI * 2;

			var sin =   Math.sin( v );
			var cos = - Math.cos( v );

			// normal

			normal.x = ( cos * N.x + sin * B.x );
			normal.y = ( cos * N.y + sin * B.y );
			normal.z = ( cos * N.z + sin * B.z );
			normal.normalize();

			normals.push( normal.x, normal.y, normal.z );

			// vertex

			vertex.x = P.x + radius * normal.x;
			vertex.y = P.y + radius * normal.y;
			vertex.z = P.z + radius * normal.z;

			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	}

	function generateIndices() {

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

	}

	function generateUVs() {

		for ( i = 0; i <= tubularSegments; i ++ ) {

			for ( j = 0; j <= radialSegments; j ++ ) {

				uv.x = i / tubularSegments;
				uv.y = j / radialSegments;

				uvs.push( uv.x, uv.y );

			}

		}

	}

}

TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

/**
 * @author oosmoxiecode
 * @author Mugen87 / https://github.com/Mugen87
 *
 * based on http://www.blackpawn.com/texts/pqtorus/
 */

// TorusKnotGeometry

function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

	Geometry.call( this );

	this.type = 'TorusKnotGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		tubularSegments: tubularSegments,
		radialSegments: radialSegments,
		p: p,
		q: q
	};

	if ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }

	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
	this.mergeVertices();

}

TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

// TorusKnotBufferGeometry

function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

	BufferGeometry.call( this );

	this.type = 'TorusKnotBufferGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		tubularSegments: tubularSegments,
		radialSegments: radialSegments,
		p: p,
		q: q
	};

	radius = radius || 100;
	tube = tube || 40;
	tubularSegments = Math.floor( tubularSegments ) || 64;
	radialSegments = Math.floor( radialSegments ) || 8;
	p = p || 2;
	q = q || 3;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var i, j;

	var vertex = new Vector3();
	var normal = new Vector3();

	var P1 = new Vector3();
	var P2 = new Vector3();

	var B = new Vector3();
	var T = new Vector3();
	var N = new Vector3();

	// generate vertices, normals and uvs

	for ( i = 0; i <= tubularSegments; ++ i ) {

		// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

		var u = i / tubularSegments * p * Math.PI * 2;

		// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
		// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

		calculatePositionOnCurve( u, p, q, radius, P1 );
		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

		// calculate orthonormal basis

		T.subVectors( P2, P1 );
		N.addVectors( P2, P1 );
		B.crossVectors( T, N );
		N.crossVectors( B, T );

		// normalize B, N. T can be ignored, we don't use it

		B.normalize();
		N.normalize();

		for ( j = 0; j <= radialSegments; ++ j ) {

			// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
			// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

			var v = j / radialSegments * Math.PI * 2;
			var cx = - tube * Math.cos( v );
			var cy = tube * Math.sin( v );

			// now calculate the final vertex position.
			// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

			vertex.x = P1.x + ( cx * N.x + cy * B.x );
			vertex.y = P1.y + ( cx * N.y + cy * B.y );
			vertex.z = P1.z + ( cx * N.z + cy * B.z );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

			normal.subVectors( vertex, P1 ).normalize();

			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( i / tubularSegments );
			uvs.push( j / radialSegments );

		}

	}

	// generate indices

	for ( j = 1; j <= tubularSegments; j ++ ) {

		for ( i = 1; i <= radialSegments; i ++ ) {

			// indices

			var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
			var b = ( radialSegments + 1 ) * j + ( i - 1 );
			var c = ( radialSegments + 1 ) * j + i;
			var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// this function calculates the current position on the torus curve

	function calculatePositionOnCurve( u, p, q, radius, position ) {

		var cu = Math.cos( u );
		var su = Math.sin( u );
		var quOverP = q / p * u;
		var cs = Math.cos( quOverP );

		position.x = radius * ( 2 + cs ) * 0.5 * cu;
		position.y = radius * ( 2 + cs ) * su * 0.5;
		position.z = radius * Math.sin( quOverP ) * 0.5;

	}

}

TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// TorusGeometry

function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	Geometry.call( this );

	this.type = 'TorusGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		arc: arc
	};

	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
	this.mergeVertices();

}

TorusGeometry.prototype = Object.create( Geometry.prototype );
TorusGeometry.prototype.constructor = TorusGeometry;

// TorusBufferGeometry

function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	BufferGeometry.call( this );

	this.type = 'TorusBufferGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		arc: arc
	};

	radius = radius || 100;
	tube = tube || 40;
	radialSegments = Math.floor( radialSegments ) || 8;
	tubularSegments = Math.floor( tubularSegments ) || 6;
	arc = arc || Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var center = new Vector3();
	var vertex = new Vector3();
	var normal = new Vector3();

	var j, i;

	// generate vertices, normals and uvs

	for ( j = 0; j <= radialSegments; j ++ ) {

		for ( i = 0; i <= tubularSegments; i ++ ) {

			var u = i / tubularSegments * arc;
			var v = j / radialSegments * Math.PI * 2;

			// vertex

			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
			vertex.z = tube * Math.sin( v );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			center.x = radius * Math.cos( u );
			center.y = radius * Math.sin( u );
			normal.subVectors( vertex, center ).normalize();

			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( i / tubularSegments );
			uvs.push( j / radialSegments );

		}

	}

	// generate indices

	for ( j = 1; j <= radialSegments; j ++ ) {

		for ( i = 1; i <= tubularSegments; i ++ ) {

			// indices

			var a = ( tubularSegments + 1 ) * j + i - 1;
			var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
			var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
			var d = ( tubularSegments + 1 ) * j + i;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

var ShapeUtils = {

	// calculate area of the contour polygon

	area: function ( contour ) {

		var n = contour.length;
		var a = 0.0;

		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

		}

		return a * 0.5;

	},

	triangulate: ( function () {

		/**
		 * This code is a quick port of code written in C++ which was submitted to
		 * flipcode.com by John W. Ratcliff  // July 22, 2000
		 * See original code and more information here:
		 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
		 *
		 * ported to actionscript by Zevan Rosser
		 * www.actionsnippet.com
		 *
		 * ported to javascript by Joshua Koo
		 * http://www.lab4games.net/zz85/blog
		 *
		 */

		function snip( contour, u, v, w, n, verts ) {

			var p;
			var ax, ay, bx, by;
			var cx, cy, px, py;

			ax = contour[ verts[ u ] ].x;
			ay = contour[ verts[ u ] ].y;

			bx = contour[ verts[ v ] ].x;
			by = contour[ verts[ v ] ].y;

			cx = contour[ verts[ w ] ].x;
			cy = contour[ verts[ w ] ].y;

			if ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) { return false; }

			var aX, aY, bX, bY, cX, cY;
			var apx, apy, bpx, bpy, cpx, cpy;
			var cCROSSap, bCROSScp, aCROSSbp;

			aX = cx - bx;  aY = cy - by;
			bX = ax - cx;  bY = ay - cy;
			cX = bx - ax;  cY = by - ay;

			for ( p = 0; p < n; p ++ ) {

				px = contour[ verts[ p ] ].x;
				py = contour[ verts[ p ] ].y;

				if ( ( ( px === ax ) && ( py === ay ) ) ||
					 ( ( px === bx ) && ( py === by ) ) ||
					 ( ( px === cx ) && ( py === cy ) ) )	{ continue; }

				apx = px - ax;  apy = py - ay;
				bpx = px - bx;  bpy = py - by;
				cpx = px - cx;  cpy = py - cy;

				// see if p is inside triangle abc

				aCROSSbp = aX * bpy - aY * bpx;
				cCROSSap = cX * apy - cY * apx;
				bCROSScp = bX * cpy - bY * cpx;

				if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) { return false; }

			}

			return true;

		}

		// takes in an contour array and returns

		return function triangulate( contour, indices ) {

			var n = contour.length;

			if ( n < 3 ) { return null; }

			var result = [],
				verts = [],
				vertIndices = [];

			/* we want a counter-clockwise polygon in verts */

			var u, v, w;

			if ( ShapeUtils.area( contour ) > 0.0 ) {

				for ( v = 0; v < n; v ++ ) { verts[ v ] = v; }

			} else {

				for ( v = 0; v < n; v ++ ) { verts[ v ] = ( n - 1 ) - v; }

			}

			var nv = n;

			/*  remove nv - 2 vertices, creating 1 triangle every time */

			var count = 2 * nv;   /* error detection */

			for ( v = nv - 1; nv > 2; ) {

				/* if we loop, it is probably a non-simple polygon */

				if ( ( count -- ) <= 0 ) {

					//** Triangulate: ERROR - probable bad polygon!

					//throw ( "Warning, unable to triangulate polygon!" );
					//return null;
					// Sometimes warning is fine, especially polygons are triangulated in reverse.
					console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

					if ( indices ) { return vertIndices; }
					return result;

				}

				/* three consecutive vertices in current polygon, <u,v,w> */

				u = v; 	 	if ( nv <= u ) { u = 0; }     /* previous */
				v = u + 1;  if ( nv <= v ) { v = 0; }     /* new v    */
				w = v + 1;  if ( nv <= w ) { w = 0; }     /* next     */

				if ( snip( contour, u, v, w, nv, verts ) ) {

					var a, b, c, s, t;

					/* true names of the vertices */

					a = verts[ u ];
					b = verts[ v ];
					c = verts[ w ];

					/* output Triangle */

					result.push( [ contour[ a ],
						contour[ b ],
						contour[ c ] ] );


					vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

					/* remove v from the remaining polygon */

					for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

						verts[ s ] = verts[ t ];

					}

					nv --;

					/* reset error detection counter */

					count = 2 * nv;

				}

			}

			if ( indices ) { return vertIndices; }
			return result;

		}

	} )(),

	triangulateShape: function ( contour, holes ) {

		function removeDupEndPts(points) {

			var l = points.length;

			if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

				points.pop();

			}

		}

		removeDupEndPts( contour );
		holes.forEach( removeDupEndPts );

		function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

			// inOtherPt needs to be collinear to the inSegment
			if ( inSegPt1.x !== inSegPt2.x ) {

				if ( inSegPt1.x < inSegPt2.x ) {

					return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

				} else {

					return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

				}

			} else {

				if ( inSegPt1.y < inSegPt2.y ) {

					return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

				} else {

					return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

				}

			}

		}

		function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

			var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
			var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

			var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
			var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

			var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
			var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

			if ( Math.abs( limit ) > Number.EPSILON ) {

				// not parallel

				var perpSeg2;
				if ( limit > 0 ) {

					if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		{ return []; }
					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
					if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		{ return []; }

				} else {

					if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		{ return []; }
					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
					if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		{ return []; }

				}

				// i.e. to reduce rounding errors
				// intersection at endpoint of segment#1?
				if ( perpSeg2 === 0 ) {

					if ( ( inExcludeAdjacentSegs ) &&
						 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		{ return []; }
					return [ inSeg1Pt1 ];

				}
				if ( perpSeg2 === limit ) {

					if ( ( inExcludeAdjacentSegs ) &&
						 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		{ return []; }
					return [ inSeg1Pt2 ];

				}
				// intersection at endpoint of segment#2?
				if ( perpSeg1 === 0 )		{ return [ inSeg2Pt1 ]; }
				if ( perpSeg1 === limit )	{ return [ inSeg2Pt2 ]; }

				// return real intersection point
				var factorSeg1 = perpSeg2 / limit;
				return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
							y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

			} else {

				// parallel or collinear
				if ( ( perpSeg1 !== 0 ) ||
					 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			{ return []; }

				// they are collinear or degenerate
				var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
				var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
				// both segments are points
				if ( seg1Pt && seg2Pt ) {

					if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
						 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		{ return []; }	// they are distinct  points
					return [ inSeg1Pt1 ];                 						// they are the same point

				}
				// segment#1  is a single point
				if ( seg1Pt ) {

					if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		{ return []; }		// but not in segment#2
					return [ inSeg1Pt1 ];

				}
				// segment#2  is a single point
				if ( seg2Pt ) {

					if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		{ return []; }		// but not in segment#1
					return [ inSeg2Pt1 ];

				}

				// they are collinear segments, which might overlap
				var seg1min, seg1max, seg1minVal, seg1maxVal;
				var seg2min, seg2max, seg2minVal, seg2maxVal;
				if ( seg1dx !== 0 ) {

					// the segments are NOT on a vertical line
					if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

					} else {

						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

					}
					if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

					} else {

						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

					}

				} else {

					// the segments are on a vertical line
					if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

					} else {

						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

					}
					if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

					} else {

						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

					}

				}
				if ( seg1minVal <= seg2minVal ) {

					if ( seg1maxVal <  seg2minVal )	{ return []; }
					if ( seg1maxVal === seg2minVal )	{

						if ( inExcludeAdjacentSegs )		{ return []; }
						return [ seg2min ];

					}
					if ( seg1maxVal <= seg2maxVal )	{ return [ seg2min, seg1max ]; }
					return	[ seg2min, seg2max ];

				} else {

					if ( seg1minVal >  seg2maxVal )	{ return []; }
					if ( seg1minVal === seg2maxVal )	{

						if ( inExcludeAdjacentSegs )		{ return []; }
						return [ seg1min ];

					}
					if ( seg1maxVal <= seg2maxVal )	{ return [ seg1min, seg1max ]; }
					return	[ seg1min, seg2max ];

				}

			}

		}

		function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

			// The order of legs is important

			// translation of all points, so that Vertex is at (0,0)
			var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
			var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
			var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

			// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
			var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
			var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

			if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

				// angle != 180 deg.

				var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
				// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

				if ( from2toAngle > 0 ) {

					// main angle < 180 deg.
					return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

				} else {

					// main angle > 180 deg.
					return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

				}

			} else {

				// angle == 180 deg.
				// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
				return	( from2otherAngle > 0 );

			}

		}


		function removeHoles( contour, holes ) {

			var shape = contour.concat(); // work on this shape
			var hole;

			function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

				// Check if hole point lies within angle around shape point
				var lastShapeIdx = shape.length - 1;

				var prevShapeIdx = inShapeIdx - 1;
				if ( prevShapeIdx < 0 )			{ prevShapeIdx = lastShapeIdx; }

				var nextShapeIdx = inShapeIdx + 1;
				if ( nextShapeIdx > lastShapeIdx )	{ nextShapeIdx = 0; }

				var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
				if ( ! insideAngle ) {

					// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
					return	false;

				}

				// Check if shape point lies within angle around hole point
				var lastHoleIdx = hole.length - 1;

				var prevHoleIdx = inHoleIdx - 1;
				if ( prevHoleIdx < 0 )			{ prevHoleIdx = lastHoleIdx; }

				var nextHoleIdx = inHoleIdx + 1;
				if ( nextHoleIdx > lastHoleIdx )	{ nextHoleIdx = 0; }

				insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
				if ( ! insideAngle ) {

					// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
					return	false;

				}

				return	true;

			}

			function intersectsShapeEdge( inShapePt, inHolePt ) {

				// checks for intersections with shape edges
				var sIdx, nextIdx, intersection;
				for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

					nextIdx = sIdx + 1; nextIdx %= shape.length;
					intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
					if ( intersection.length > 0 )		{ return	true; }

				}

				return	false;

			}

			var indepHoles = [];

			function intersectsHoleEdge( inShapePt, inHolePt ) {

				// checks for intersections with hole edges
				var ihIdx, chkHole,
					hIdx, nextIdx, intersection;
				for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

					chkHole = holes[ indepHoles[ ihIdx ]];
					for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

						nextIdx = hIdx + 1; nextIdx %= chkHole.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
						if ( intersection.length > 0 )		{ return	true; }

					}

				}
				return	false;

			}

			var holeIndex, shapeIndex,
				shapePt, holePt,
				holeIdx, cutKey, failedCuts = [],
				tmpShape1, tmpShape2,
				tmpHole1, tmpHole2;

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				indepHoles.push( h );

			}

			var minShapeIndex = 0;
			var counter = indepHoles.length * 2;
			while ( indepHoles.length > 0 ) {

				counter --;
				if ( counter < 0 ) {

					console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
					break;

				}

				// search for shape-vertex and hole-vertex,
				// which can be connected without intersections
				for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

					shapePt = shape[ shapeIndex ];
					holeIndex	= - 1;

					// search for hole which can be reached without intersections
					for ( var h = 0; h < indepHoles.length; h ++ ) {

						holeIdx = indepHoles[ h ];

						// prevent multiple checks
						cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
						if ( failedCuts[ cutKey ] !== undefined )			{ continue; }

						hole = holes[ holeIdx ];
						for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

							holePt = hole[ h2 ];
							if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		{ continue; }
							if ( intersectsShapeEdge( shapePt, holePt ) )		{ continue; }
							if ( intersectsHoleEdge( shapePt, holePt ) )		{ continue; }

							holeIndex = h2;
							indepHoles.splice( h, 1 );

							tmpShape1 = shape.slice( 0, shapeIndex + 1 );
							tmpShape2 = shape.slice( shapeIndex );
							tmpHole1 = hole.slice( holeIndex );
							tmpHole2 = hole.slice( 0, holeIndex + 1 );

							shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

							minShapeIndex = shapeIndex;

							// Debug only, to show the selected cuts
							// glob_CutLines.push( [ shapePt, holePt ] );

							break;

						}
						if ( holeIndex >= 0 )	{ break; }		// hole-vertex found

						failedCuts[ cutKey ] = true;			// remember failure

					}
					if ( holeIndex >= 0 )	{ break; }		// hole-vertex found

				}

			}

			return shape; 			/* shape with no holes */

		}


		var i, il, f, face,
			key, index,
			allPointsMap = {};

		// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

		var allpoints = contour.concat();

		for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

			Array.prototype.push.apply( allpoints, holes[ h ] );

		}

		//console.log( "allpoints",allpoints, allpoints.length );

		// prepare all points map

		for ( i = 0, il = allpoints.length; i < il; i ++ ) {

			key = allpoints[ i ].x + ":" + allpoints[ i ].y;

			if ( allPointsMap[ key ] !== undefined ) {

				console.warn( "THREE.ShapeUtils: Duplicate point", key, i );

			}

			allPointsMap[ key ] = i;

		}

		// remove holes by cutting paths to holes and adding them to the shape
		var shapeWithoutHoles = removeHoles( contour, holes );

		var triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
		//console.log( "triangles",triangles, triangles.length );

		// check all face vertices against all points map

		for ( i = 0, il = triangles.length; i < il; i ++ ) {

			face = triangles[ i ];

			for ( f = 0; f < 3; f ++ ) {

				key = face[ f ].x + ":" + face[ f ].y;

				index = allPointsMap[ key ];

				if ( index !== undefined ) {

					face[ f ] = index;

				}

			}

		}

		return triangles.concat();

	},

	isClockWise: function ( pts ) {

		return ShapeUtils.area( pts ) < 0;

	}

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  amount: <int>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline is bevel
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *  frames: <Object> // containing arrays of tangents, normals, binormals
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */

// ExtrudeGeometry

function ExtrudeGeometry( shapes, options ) {

	Geometry.call( this );

	this.type = 'ExtrudeGeometry';

	this.parameters = {
		shapes: shapes,
		options: options
	};

	this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
	this.mergeVertices();

}

ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

// ExtrudeBufferGeometry

function ExtrudeBufferGeometry( shapes, options ) {

	if ( typeof ( shapes ) === "undefined" ) {

		return;

	}

	BufferGeometry.call( this );

	this.type = 'ExtrudeBufferGeometry';

	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

	this.addShapeList( shapes, options );

	this.computeVertexNormals();

	// can't really use automatic vertex normals
	// as then front and back sides get smoothed too
	// should do separate smoothing just for sides

	//this.computeVertexNormals();

	//console.log( "took", ( Date.now() - startTime ) );

}

ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

ExtrudeBufferGeometry.prototype.getArrays = function () {

	var positionAttribute = this.getAttribute( "position" );
	var verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];

	var uvAttribute = this.getAttribute( "uv" );
	var uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];

	var IndexAttribute = this.index;
	var indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];

	return {
		position: verticesArray,
		uv: uvArray,
		index: indicesArray
	};

};

ExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {
	var this$1 = this;


	var sl = shapes.length;
	options.arrays = this.getArrays();

	for ( var s = 0; s < sl; s ++ ) {

		var shape = shapes[ s ];
		this$1.addShape( shape, options );

	}

	this.setIndex( options.arrays.index );
	this.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

};

ExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {

	var arrays = options.arrays ? options.arrays : this.getArrays();
	var verticesArray = arrays.position;
	var indicesArray = arrays.index;
	var uvArray = arrays.uv;

	var placeholder = [];


	var amount = options.amount !== undefined ? options.amount : 100;

	var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
	var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
	var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

	var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var steps = options.steps !== undefined ? options.steps : 1;

	var extrudePath = options.extrudePath;
	var extrudePts, extrudeByPath = false;

	// Use default WorldUVGenerator if no UV generators are specified.
	var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

	var splineTube, binormal, normal, position2;
	if ( extrudePath ) {

		extrudePts = extrudePath.getSpacedPoints( steps );

		extrudeByPath = true;
		bevelEnabled = false; // bevels not supported for path extrusion

		// SETUP TNB variables

		// TODO1 - have a .isClosed in spline?

		splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );

		// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

		binormal = new Vector3();
		normal = new Vector3();
		position2 = new Vector3();

	}

	// Safeguards if bevels are not enabled

	if ( ! bevelEnabled ) {

		bevelSegments = 0;
		bevelThickness = 0;
		bevelSize = 0;

	}

	// Variables initialization

	var ahole, h, hl; // looping of holes
	var scope = this;

	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = ! ShapeUtils.isClockWise( vertices );

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe ...

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			if ( ShapeUtils.isClockWise( ahole ) ) {

				holes[ h ] = ahole.reverse();

			}

		}

	}


	var faces = ShapeUtils.triangulateShape( vertices, holes );

	/* Vertices */

	var contour = vertices; // vertices has all points but contour has only points of circumference

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		vertices = vertices.concat( ahole );

	}


	function scalePt2( pt, vec, size ) {

		if ( ! vec ) { console.error( "THREE.ExtrudeGeometry: vec does not exist" ); }

		return vec.clone().multiplyScalar( size ).add( pt );

	}

	var b, bs, t, z,
		vert, vlen = vertices.length,
		face, flen = faces.length;


	// Find directions for point movement


	function getBevelVec( inPt, inPrev, inNext ) {

		// computes for inPt the corresponding point inPt' on a new contour
		//   shifted by 1 unit (length of normalized vector) to the left
		// if we walk along contour clockwise, this new contour is outside the old one
		//
		// inPt' is the intersection of the two lines parallel to the two
		//  adjacent edges of inPt at a distance of 1 unit on the left side.

		var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

		// good reading for geometry algorithms (here: line-line intersection)
		// http://geomalgorithms.com/a05-_intersect-1.html

		var v_prev_x = inPt.x - inPrev.x,
			v_prev_y = inPt.y - inPrev.y;
		var v_next_x = inNext.x - inPt.x,
			v_next_y = inNext.y - inPt.y;

		var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

		// check for collinear edges
		var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

		if ( Math.abs( collinear0 ) > Number.EPSILON ) {

			// not collinear

			// length of vectors for normalizing

			var v_prev_len = Math.sqrt( v_prev_lensq );
			var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

			// shift adjacent points by unit vectors to the left

			var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
			var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

			var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
			var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

			// scaling factor for v_prev to intersection point

			var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
					( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
				( v_prev_x * v_next_y - v_prev_y * v_next_x );

			// vector from inPt to intersection point

			v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
			v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

			// Don't normalize!, otherwise sharp corners become ugly
			//  but prevent crazy spikes
			var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
			if ( v_trans_lensq <= 2 ) {

				return new Vector2( v_trans_x, v_trans_y );

			} else {

				shrink_by = Math.sqrt( v_trans_lensq / 2 );

			}

		} else {

			// handle special case of collinear edges

			var direction_eq = false; // assumes: opposite
			if ( v_prev_x > Number.EPSILON ) {

				if ( v_next_x > Number.EPSILON ) {

					direction_eq = true;

				}

			} else {

				if ( v_prev_x < - Number.EPSILON ) {

					if ( v_next_x < - Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

						direction_eq = true;

					}

				}

			}

			if ( direction_eq ) {

				// console.log("Warning: lines are a straight sequence");
				v_trans_x = - v_prev_y;
				v_trans_y = v_prev_x;
				shrink_by = Math.sqrt( v_prev_lensq );

			} else {

				// console.log("Warning: lines are a straight spike");
				v_trans_x = v_prev_x;
				v_trans_y = v_prev_y;
				shrink_by = Math.sqrt( v_prev_lensq / 2 );

			}

		}

		return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

	}


	var contourMovements = [];

	for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

		if ( j === il ) { j = 0; }
		if ( k === il ) { k = 0; }

		//  (j)---(i)---(k)
		// console.log('i,j,k', i, j , k)

		contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

	}

	var holesMovements = [],
		oneHoleMovements, verticesMovements = contourMovements.concat();

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		oneHoleMovements = [];

		for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) { j = 0; }
			if ( k === il ) { k = 0; }

			//  (j)---(i)---(k)
			oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

		}

		holesMovements.push( oneHoleMovements );
		verticesMovements = verticesMovements.concat( oneHoleMovements );

	}


	// Loop bevelSegments, 1 for the front, 1 for the back

	for ( b = 0; b < bevelSegments; b ++ ) {

		//for ( b = bevelSegments; b > 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * Math.cos( t * Math.PI / 2 );
		bs = bevelSize * Math.sin( t * Math.PI / 2 );

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

			v( vert.x, vert.y, - z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				v( vert.x, vert.y, - z );

			}

		}

	}

	bs = bevelSize;

	// Back facing vertices

	for ( i = 0; i < vlen; i ++ ) {

		vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

		if ( ! extrudeByPath ) {

			v( vert.x, vert.y, 0 );

		} else {

			// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

			normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
			binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

			position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

			v( position2.x, position2.y, position2.z );

		}

	}

	// Add stepped vertices...
	// Including front facing vertices

	var s;

	for ( s = 1; s <= steps; s ++ ) {

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, amount / steps * s );

			} else {

				// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

				normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

	}


	// Add bevel segments planes

	//for ( b = 1; b <= bevelSegments; b ++ ) {
	for ( b = bevelSegments - 1; b >= 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * Math.cos( t * Math.PI / 2 );
		bs = bevelSize * Math.sin( t * Math.PI / 2 );

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
			v( vert.x, vert.y, amount + z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount + z );

				} else {

					v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

				}

			}

		}

	}

	/* Faces */

	// Top and bottom faces

	buildLidFaces();

	// Sides faces

	buildSideFaces();


	/////  Internal functions

	function buildLidFaces() {

		var start = verticesArray.length/3;

		if ( bevelEnabled ) {

			var layer = 0; // steps + 1
			var offset = vlen * layer;

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

			}

			layer = steps + bevelSegments * 2;
			offset = vlen * layer;

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

			}

		} else {

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ], face[ 1 ], face[ 0 ] );

			}

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

			}

		}

		scope.addGroup( start, verticesArray.length/3 -start, options.material !== undefined ? options.material : 0);

	}

	// Create faces for the z-sides of the shape

	function buildSideFaces() {

		var start = verticesArray.length/3;
		var layeroffset = 0;
		sidewalls( contour, layeroffset );
		layeroffset += contour.length;

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			sidewalls( ahole, layeroffset );

			//, true
			layeroffset += ahole.length;

		}


		scope.addGroup( start, verticesArray.length/3 -start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1);


	}

	function sidewalls( contour, layeroffset ) {

		var j, k;
		i = contour.length;

		while ( -- i >= 0 ) {

			j = i;
			k = i - 1;
			if ( k < 0 ) { k = contour.length - 1; }

			//console.log('b', i,j, i-1, k,vertices.length);

			var s = 0,
				sl = steps + bevelSegments * 2;

			for ( s = 0; s < sl; s ++ ) {

				var slen1 = vlen * s;
				var slen2 = vlen * ( s + 1 );

				var a = layeroffset + j + slen1,
					b = layeroffset + k + slen1,
					c = layeroffset + k + slen2,
					d = layeroffset + j + slen2;

				f4( a, b, c, d, contour, s, sl, j, k );

			}

		}

	}

	function v( x, y, z ) {

		placeholder.push( x );
		placeholder.push( y );
		placeholder.push( z );

	}


	function f3( a, b, c ) {

		addVertex( a );
		addVertex( b );
		addVertex( c );

		var nextIndex = verticesArray.length / 3;
		var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

		addUV( uvs[ 0 ] );
		addUV( uvs[ 1 ] );
		addUV( uvs[ 2 ] );

	}

	function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

		addVertex( a );
		addVertex( b );
		addVertex( d );

		addVertex( b );
		addVertex( c );
		addVertex( d );


		var nextIndex = verticesArray.length / 3;
		var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

		addUV( uvs[ 0 ] );
		addUV( uvs[ 1 ] );
		addUV( uvs[ 3 ] );

		addUV( uvs[ 1 ] );
		addUV( uvs[ 2 ] );
		addUV( uvs[ 3 ] );

	}

	function addVertex( index ) {

		indicesArray.push( verticesArray.length / 3 );
		verticesArray.push( placeholder[ index * 3 + 0 ] );
		verticesArray.push( placeholder[ index * 3 + 1 ] );
		verticesArray.push( placeholder[ index * 3 + 2 ] );

	}


	function addUV( vector2 ) {

		uvArray.push( vector2.x );
		uvArray.push( vector2.y );

	}

	if ( ! options.arrays ) {

		this.setIndex( indicesArray );
		this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

	}

};

ExtrudeGeometry.WorldUVGenerator = {

	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

		var a_x = vertices[ indexA * 3 ];
		var a_y = vertices[ indexA * 3 + 1 ];
		var b_x = vertices[ indexB * 3 ];
		var b_y = vertices[ indexB * 3 + 1 ];
		var c_x = vertices[ indexC * 3 ];
		var c_y = vertices[ indexC * 3 + 1 ];

		return [
			new Vector2( a_x, a_y ),
			new Vector2( b_x, b_y ),
			new Vector2( c_x, c_y )
		];

	},

	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

		var a_x = vertices[ indexA * 3 ];
		var a_y = vertices[ indexA * 3 + 1 ];
		var a_z = vertices[ indexA * 3 + 2 ];
		var b_x = vertices[ indexB * 3 ];
		var b_y = vertices[ indexB * 3 + 1 ];
		var b_z = vertices[ indexB * 3 + 2 ];
		var c_x = vertices[ indexC * 3 ];
		var c_y = vertices[ indexC * 3 + 1 ];
		var c_z = vertices[ indexC * 3 + 2 ];
		var d_x = vertices[ indexD * 3 ];
		var d_y = vertices[ indexD * 3 + 1 ];
		var d_z = vertices[ indexD * 3 + 2 ];

		if ( Math.abs( a_y - b_y ) < 0.01 ) {

			return [
				new Vector2( a_x, 1 - a_z ),
				new Vector2( b_x, 1 - b_z ),
				new Vector2( c_x, 1 - c_z ),
				new Vector2( d_x, 1 - d_z )
			];

		} else {

			return [
				new Vector2( a_y, 1 - a_z ),
				new Vector2( b_y, 1 - b_z ),
				new Vector2( c_y, 1 - c_z ),
				new Vector2( d_y, 1 - d_z )
			];

		}

	}
};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * Text = 3D Text
 *
 * parameters = {
 *  font: <THREE.Font>, // font
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float> // how far from text outline is bevel
 * }
 */

// TextGeometry

function TextGeometry(  text, parameters ) {

	Geometry.call( this );

	this.type = 'TextGeometry';

	this.parameters = {
		text: text,
		parameters: parameters
	};

	this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
	this.mergeVertices();

}

TextGeometry.prototype = Object.create( Geometry.prototype );
TextGeometry.prototype.constructor = TextGeometry;

// TextBufferGeometry

function TextBufferGeometry( text, parameters ) {

	parameters = parameters || {};

	var font = parameters.font;

	if ( ! ( font && font.isFont ) ) {

		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
		return new Geometry();

	}

	var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

	// translate parameters to ExtrudeGeometry API

	parameters.amount = parameters.height !== undefined ? parameters.height : 50;

	// defaults

	if ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }
	if ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }
	if ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }

	ExtrudeBufferGeometry.call( this, shapes, parameters );

	this.type = 'TextBufferGeometry';

}

TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
TextBufferGeometry.prototype.constructor = TextBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 */

// SphereGeometry

function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'SphereGeometry';

	this.parameters = {
		radius: radius,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		phiStart: phiStart,
		phiLength: phiLength,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
	this.mergeVertices();

}

SphereGeometry.prototype = Object.create( Geometry.prototype );
SphereGeometry.prototype.constructor = SphereGeometry;

// SphereBufferGeometry

function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'SphereBufferGeometry';

	this.parameters = {
		radius: radius,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		phiStart: phiStart,
		phiLength: phiLength,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	radius = radius || 50;

	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

	phiStart = phiStart !== undefined ? phiStart : 0;
	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

	var thetaEnd = thetaStart + thetaLength;

	var ix, iy;

	var index = 0;
	var grid = [];

	var vertex = new Vector3();
	var normal = new Vector3();

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// generate vertices, normals and uvs

	for ( iy = 0; iy <= heightSegments; iy ++ ) {

		var verticesRow = [];

		var v = iy / heightSegments;

		for ( ix = 0; ix <= widthSegments; ix ++ ) {

			var u = ix / widthSegments;

			// vertex

			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normal.set( vertex.x, vertex.y, vertex.z ).normalize();
			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( u, 1 - v );

			verticesRow.push( index ++ );

		}

		grid.push( verticesRow );

	}

	// indices

	for ( iy = 0; iy < heightSegments; iy ++ ) {

		for ( ix = 0; ix < widthSegments; ix ++ ) {

			var a = grid[ iy ][ ix + 1 ];
			var b = grid[ iy ][ ix ];
			var c = grid[ iy + 1 ][ ix ];
			var d = grid[ iy + 1 ][ ix + 1 ];

			if ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }
			if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

/**
 * @author Kaleb Murphy
 * @author Mugen87 / https://github.com/Mugen87
 */

// RingGeometry

function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'RingGeometry';

	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
	this.mergeVertices();

}

RingGeometry.prototype = Object.create( Geometry.prototype );
RingGeometry.prototype.constructor = RingGeometry;

// RingBufferGeometry

function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'RingBufferGeometry';

	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	innerRadius = innerRadius || 20;
	outerRadius = outerRadius || 50;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// some helper variables

	var segment;
	var radius = innerRadius;
	var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
	var vertex = new Vector3();
	var uv = new Vector2();
	var j, i;

	// generate vertices, normals and uvs

	for ( j = 0; j <= phiSegments; j ++ ) {

		for ( i = 0; i <= thetaSegments; i ++ ) {

			// values are generate from the inside of the ring to the outside

			segment = thetaStart + i / thetaSegments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uv

			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
			uv.y = ( vertex.y / outerRadius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// increase the radius for next row of vertices

		radius += radiusStep;

	}

	// indices

	for ( j = 0; j < phiSegments; j ++ ) {

		var thetaSegmentLevel = j * ( thetaSegments + 1 );

		for ( i = 0; i < thetaSegments; i ++ ) {

			segment = i + thetaSegmentLevel;

			var a = segment;
			var b = segment + thetaSegments + 1;
			var c = segment + thetaSegments + 2;
			var d = segment + 1;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
RingBufferGeometry.prototype.constructor = RingBufferGeometry;

/**
 * @author astrodud / http://astrodud.isgreat.org/
 * @author zz85 / https://github.com/zz85
 * @author bhouston / http://clara.io
 * @author Mugen87 / https://github.com/Mugen87
 */

// LatheGeometry

function LatheGeometry( points, segments, phiStart, phiLength ) {

	Geometry.call( this );

	this.type = 'LatheGeometry';

	this.parameters = {
		points: points,
		segments: segments,
		phiStart: phiStart,
		phiLength: phiLength
	};

	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
	this.mergeVertices();

}

LatheGeometry.prototype = Object.create( Geometry.prototype );
LatheGeometry.prototype.constructor = LatheGeometry;

// LatheBufferGeometry

function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

	BufferGeometry.call( this );

	this.type = 'LatheBufferGeometry';

	this.parameters = {
		points: points,
		segments: segments,
		phiStart: phiStart,
		phiLength: phiLength
	};

	segments = Math.floor( segments ) || 12;
	phiStart = phiStart || 0;
	phiLength = phiLength || Math.PI * 2;

	// clamp phiLength so it's in range of [ 0, 2PI ]

	phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


	// buffers

	var indices = [];
	var vertices = [];
	var uvs = [];

	// helper variables

	var base;
	var inverseSegments = 1.0 / segments;
	var vertex = new Vector3();
	var uv = new Vector2();
	var i, j;

	// generate vertices and uvs

	for ( i = 0; i <= segments; i ++ ) {

		var phi = phiStart + i * inverseSegments * phiLength;

		var sin = Math.sin( phi );
		var cos = Math.cos( phi );

		for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

			// vertex

			vertex.x = points[ j ].x * sin;
			vertex.y = points[ j ].y;
			vertex.z = points[ j ].x * cos;

			vertices.push( vertex.x, vertex.y, vertex.z );

			// uv

			uv.x = i / segments;
			uv.y = j / ( points.length - 1 );

			uvs.push( uv.x, uv.y );


		}

	}

	// indices

	for ( i = 0; i < segments; i ++ ) {

		for ( j = 0; j < ( points.length - 1 ); j ++ ) {

			base = j + i * points.length;

			var a = base;
			var b = base + points.length;
			var c = base + points.length + 1;
			var d = base + 1;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// generate normals

	this.computeVertexNormals();

	// if the geometry is closed, we need to average the normals along the seam.
	// because the corresponding vertices are identical (but still have different UVs).

	if ( phiLength === Math.PI * 2 ) {

		var normals = this.attributes.normal.array;
		var n1 = new Vector3();
		var n2 = new Vector3();
		var n = new Vector3();

		// this is the buffer offset for the last line of vertices

		base = segments * points.length * 3;

		for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

			// select the normal of the vertex in the first line

			n1.x = normals[ j + 0 ];
			n1.y = normals[ j + 1 ];
			n1.z = normals[ j + 2 ];

			// select the normal of the vertex in the last line

			n2.x = normals[ base + j + 0 ];
			n2.y = normals[ base + j + 1 ];
			n2.z = normals[ base + j + 2 ];

			// average normals

			n.addVectors( n1, n2 ).normalize();

			// assign the new values to both normals

			normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
			normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
			normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

		}

	}

}

LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

/**
 * @author jonobr1 / http://jonobr1.com
 * @author Mugen87 / https://github.com/Mugen87
 */

// ShapeGeometry

function ShapeGeometry( shapes, curveSegments ) {

	Geometry.call( this );

	this.type = 'ShapeGeometry';

	if ( typeof curveSegments === 'object' ) {

		console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

		curveSegments = curveSegments.curveSegments;

	}

	this.parameters = {
		shapes: shapes,
		curveSegments: curveSegments
	};

	this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
	this.mergeVertices();

}

ShapeGeometry.prototype = Object.create( Geometry.prototype );
ShapeGeometry.prototype.constructor = ShapeGeometry;

// ShapeBufferGeometry

function ShapeBufferGeometry( shapes, curveSegments ) {
	var this$1 = this;


	BufferGeometry.call( this );

	this.type = 'ShapeBufferGeometry';

	this.parameters = {
		shapes: shapes,
		curveSegments: curveSegments
	};

	curveSegments = curveSegments || 12;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var groupStart = 0;
	var groupCount = 0;

	// allow single and array values for "shapes" parameter

	if ( Array.isArray( shapes ) === false ) {

		addShape( shapes );

	} else {

		for ( var i = 0; i < shapes.length; i ++ ) {

			addShape( shapes[ i ] );

			this$1.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

			groupStart += groupCount;
			groupCount = 0;

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


	// helper functions

	function addShape( shape ) {

		var i, l, shapeHole;

		var indexOffset = vertices.length / 3;
		var points = shape.extractPoints( curveSegments );

		var shapeVertices = points.shape;
		var shapeHoles = points.holes;

		// check direction of vertices

		if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

			shapeVertices = shapeVertices.reverse();

			// also check if holes are in the opposite direction

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];

				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

					shapeHoles[ i ] = shapeHole.reverse();

				}

			}

		}

		var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

		// join vertices of inner and outer paths to a single array

		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

			shapeHole = shapeHoles[ i ];
			shapeVertices = shapeVertices.concat( shapeHole );

		}

		// vertices, normals, uvs

		for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

			var vertex = shapeVertices[ i ];

			vertices.push( vertex.x, vertex.y, 0 );
			normals.push( 0, 0, 1 );
			uvs.push( vertex.x, vertex.y ); // world uvs

		}

		// incides

		for ( i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var a = face[ 0 ] + indexOffset;
			var b = face[ 1 ] + indexOffset;
			var c = face[ 2 ] + indexOffset;

			indices.push( a, b, c );
			groupCount += 3;

		}

	}

}

ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

/**
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */

function EdgesGeometry( geometry, thresholdAngle ) {

	BufferGeometry.call( this );

	this.type = 'EdgesGeometry';

	this.parameters = {
		thresholdAngle: thresholdAngle
	};

	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

	// buffer

	var vertices = [];

	// helper variables

	var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
	var edge = [ 0, 0 ], edges = {}, edge1, edge2;
	var key, keys = [ 'a', 'b', 'c' ];

	// prepare source geometry

	var geometry2;

	if ( geometry.isBufferGeometry ) {

		geometry2 = new Geometry();
		geometry2.fromBufferGeometry( geometry );

	} else {

		geometry2 = geometry.clone();

	}

	geometry2.mergeVertices();
	geometry2.computeFaceNormals();

	var sourceVertices = geometry2.vertices;
	var faces = geometry2.faces;

	// now create a data structure where each entry represents an edge with its adjoining faces

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0; j < 3; j ++ ) {

			edge1 = face[ keys[ j ] ];
			edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
			edge[ 0 ] = Math.min( edge1, edge2 );
			edge[ 1 ] = Math.max( edge1, edge2 );

			key = edge[ 0 ] + ',' + edge[ 1 ];

			if ( edges[ key ] === undefined ) {

				edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

			} else {

				edges[ key ].face2 = i;

			}

		}

	}

	// generate vertices

	for ( key in edges ) {

		var e = edges[ key ];

		// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

		if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

			var vertex = sourceVertices[ e.index1 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

			vertex = sourceVertices[ e.index2 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	}

	// build geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

}

EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
EdgesGeometry.prototype.constructor = EdgesGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// CylinderGeometry

function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'CylinderGeometry';

	this.parameters = {
		radiusTop: radiusTop,
		radiusBottom: radiusBottom,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
	this.mergeVertices();

}

CylinderGeometry.prototype = Object.create( Geometry.prototype );
CylinderGeometry.prototype.constructor = CylinderGeometry;

// CylinderBufferGeometry

function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'CylinderBufferGeometry';

	this.parameters = {
		radiusTop: radiusTop,
		radiusBottom: radiusBottom,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	var scope = this;

	radiusTop = radiusTop !== undefined ? radiusTop : 20;
	radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
	height = height !== undefined ? height : 100;

	radialSegments = Math.floor( radialSegments ) || 8;
	heightSegments = Math.floor( heightSegments ) || 1;

	openEnded = openEnded !== undefined ? openEnded : false;
	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
	thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var index = 0;
	var indexArray = [];
	var halfHeight = height / 2;
	var groupStart = 0;

	// generate geometry

	generateTorso();

	if ( openEnded === false ) {

		if ( radiusTop > 0 ) { generateCap( true ); }
		if ( radiusBottom > 0 ) { generateCap( false ); }

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	function generateTorso() {

		var x, y;
		var normal = new Vector3();
		var vertex = new Vector3();

		var groupCount = 0;

		// this will be used to calculate the normal
		var slope = ( radiusBottom - radiusTop ) / height;

		// generate vertices, normals and uvs

		for ( y = 0; y <= heightSegments; y ++ ) {

			var indexRow = [];

			var v = y / heightSegments;

			// calculate the radius of the current row

			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;

				var theta = u * thetaLength + thetaStart;

				var sinTheta = Math.sin( theta );
				var cosTheta = Math.cos( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = - v * height + halfHeight;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normal.set( sinTheta, slope, cosTheta ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, 1 - v );

				// save index of vertex in respective row

				indexRow.push( index ++ );

			}

			// now save vertices of the row in our index array

			indexArray.push( indexRow );

		}

		// generate indices

		for ( x = 0; x < radialSegments; x ++ ) {

			for ( y = 0; y < heightSegments; y ++ ) {

				// we use the index array to access the correct indices

				var a = indexArray[ y ][ x ];
				var b = indexArray[ y + 1 ][ x ];
				var c = indexArray[ y + 1 ][ x + 1 ];
				var d = indexArray[ y ][ x + 1 ];

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

				// update group counter

				groupCount += 6;

			}

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, 0 );

		// calculate new start value for groups

		groupStart += groupCount;

	}

	function generateCap( top ) {

		var x, centerIndexStart, centerIndexEnd;

		var uv = new Vector2();
		var vertex = new Vector3();

		var groupCount = 0;

		var radius = ( top === true ) ? radiusTop : radiusBottom;
		var sign = ( top === true ) ? 1 : - 1;

		// save the index of the first center vertex
		centerIndexStart = index;

		// first we generate the center vertex data of the cap.
		// because the geometry needs one set of uvs per face,
		// we must generate a center vertex per face/segment

		for ( x = 1; x <= radialSegments; x ++ ) {

			// vertex

			vertices.push( 0, halfHeight * sign, 0 );

			// normal

			normals.push( 0, sign, 0 );

			// uv

			uvs.push( 0.5, 0.5 );

			// increase index

			index ++;

		}

		// save the index of the last center vertex

		centerIndexEnd = index;

		// now we generate the surrounding vertices, normals and uvs

		for ( x = 0; x <= radialSegments; x ++ ) {

			var u = x / radialSegments;
			var theta = u * thetaLength + thetaStart;

			var cosTheta = Math.cos( theta );
			var sinTheta = Math.sin( theta );

			// vertex

			vertex.x = radius * sinTheta;
			vertex.y = halfHeight * sign;
			vertex.z = radius * cosTheta;
			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, sign, 0 );

			// uv

			uv.x = ( cosTheta * 0.5 ) + 0.5;
			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
			uvs.push( uv.x, uv.y );

			// increase index

			index ++;

		}

		// generate indices

		for ( x = 0; x < radialSegments; x ++ ) {

			var c = centerIndexStart + x;
			var i = centerIndexEnd + x;

			if ( top === true ) {

				// face top

				indices.push( i, i + 1, c );

			} else {

				// face bottom

				indices.push( i + 1, i, c );

			}

			groupCount += 3;

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

		// calculate new start value for groups

		groupStart += groupCount;

	}

}

CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

/**
 * @author abelnation / http://github.com/abelnation
 */

// ConeGeometry

function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

	this.type = 'ConeGeometry';

	this.parameters = {
		radius: radius,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

}

ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
ConeGeometry.prototype.constructor = ConeGeometry;

// ConeBufferGeometry

function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

	this.type = 'ConeBufferGeometry';

	this.parameters = {
		radius: radius,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

}

ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 * @author hughes
 */

// CircleGeometry

function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'CircleGeometry';

	this.parameters = {
		radius: radius,
		segments: segments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
	this.mergeVertices();

}

CircleGeometry.prototype = Object.create( Geometry.prototype );
CircleGeometry.prototype.constructor = CircleGeometry;

// CircleBufferGeometry

function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'CircleBufferGeometry';

	this.parameters = {
		radius: radius,
		segments: segments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	radius = radius || 50;
	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var i, s;
	var vertex = new Vector3();
	var uv = new Vector2();

	// center point

	vertices.push( 0, 0, 0 );
	normals.push( 0, 0, 1 );
	uvs.push( 0.5, 0.5 );

	for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

		var segment = thetaStart + s / segments * thetaLength;

		// vertex

		vertex.x = radius * Math.cos( segment );
		vertex.y = radius * Math.sin( segment );

		vertices.push( vertex.x, vertex.y, vertex.z );

		// normal

		normals.push( 0, 0, 1 );

		// uvs

		uv.x = ( vertices[ i ] / radius + 1 ) / 2;
		uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

		uvs.push( uv.x, uv.y );

	}

	// indices

	for ( i = 1; i <= segments; i ++ ) {

		indices.push( i, i + 1, 0 );

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



var Geometries = Object.freeze({
	WireframeGeometry: WireframeGeometry,
	ParametricGeometry: ParametricGeometry,
	ParametricBufferGeometry: ParametricBufferGeometry,
	TetrahedronGeometry: TetrahedronGeometry,
	TetrahedronBufferGeometry: TetrahedronBufferGeometry,
	OctahedronGeometry: OctahedronGeometry,
	OctahedronBufferGeometry: OctahedronBufferGeometry,
	IcosahedronGeometry: IcosahedronGeometry,
	IcosahedronBufferGeometry: IcosahedronBufferGeometry,
	DodecahedronGeometry: DodecahedronGeometry,
	DodecahedronBufferGeometry: DodecahedronBufferGeometry,
	PolyhedronGeometry: PolyhedronGeometry,
	PolyhedronBufferGeometry: PolyhedronBufferGeometry,
	TubeGeometry: TubeGeometry,
	TubeBufferGeometry: TubeBufferGeometry,
	TorusKnotGeometry: TorusKnotGeometry,
	TorusKnotBufferGeometry: TorusKnotBufferGeometry,
	TorusGeometry: TorusGeometry,
	TorusBufferGeometry: TorusBufferGeometry,
	TextGeometry: TextGeometry,
	TextBufferGeometry: TextBufferGeometry,
	SphereGeometry: SphereGeometry,
	SphereBufferGeometry: SphereBufferGeometry,
	RingGeometry: RingGeometry,
	RingBufferGeometry: RingBufferGeometry,
	PlaneGeometry: PlaneGeometry,
	PlaneBufferGeometry: PlaneBufferGeometry,
	LatheGeometry: LatheGeometry,
	LatheBufferGeometry: LatheBufferGeometry,
	ShapeGeometry: ShapeGeometry,
	ShapeBufferGeometry: ShapeBufferGeometry,
	ExtrudeGeometry: ExtrudeGeometry,
	ExtrudeBufferGeometry: ExtrudeBufferGeometry,
	EdgesGeometry: EdgesGeometry,
	ConeGeometry: ConeGeometry,
	ConeBufferGeometry: ConeBufferGeometry,
	CylinderGeometry: CylinderGeometry,
	CylinderBufferGeometry: CylinderBufferGeometry,
	CircleGeometry: CircleGeometry,
	CircleBufferGeometry: CircleBufferGeometry,
	BoxGeometry: BoxGeometry,
	BoxBufferGeometry: BoxBufferGeometry
});

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  opacity: <float>
 * }
 */

function ShadowMaterial( parameters ) {

	ShaderMaterial.call( this, {
		uniforms: UniformsUtils.merge( [
			UniformsLib.lights,
			{
				opacity: { value: 1.0 }
			}
		] ),
		vertexShader: ShaderChunk[ 'shadow_vert' ],
		fragmentShader: ShaderChunk[ 'shadow_frag' ]
	} );

	this.lights = true;
	this.transparent = true;

	Object.defineProperties( this, {
		opacity: {
			enumerable: true,
			get: function () {
				return this.uniforms.opacity.value;
			},
			set: function ( value ) {
				this.uniforms.opacity.value = value;
			}
		}
	} );

	this.setValues( parameters );

}

ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );
ShadowMaterial.prototype.constructor = ShadowMaterial;

ShadowMaterial.prototype.isShadowMaterial = true;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function RawShaderMaterial( parameters ) {

	ShaderMaterial.call( this, parameters );

	this.type = 'RawShaderMaterial';

}

RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
RawShaderMaterial.prototype.constructor = RawShaderMaterial;

RawShaderMaterial.prototype.isRawShaderMaterial = true;

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshStandardMaterial( parameters ) {

	Material.call( this );

	this.defines = { 'STANDARD': '' };

	this.type = 'MeshStandardMaterial';

	this.color = new Color( 0xffffff ); // diffuse
	this.roughness = 0.5;
	this.metalness = 0.5;

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.roughnessMap = null;

	this.metalnessMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.envMapIntensity = 1.0;

	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshStandardMaterial.prototype = Object.create( Material.prototype );
MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

MeshStandardMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.defines = { 'STANDARD': '' };

	this.color.copy( source.color );
	this.roughness = source.roughness;
	this.metalness = source.metalness;

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.roughnessMap = source.roughnessMap;

	this.metalnessMap = source.metalnessMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.envMapIntensity = source.envMapIntensity;

	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  reflectivity: <float>
 * }
 */

function MeshPhysicalMaterial( parameters ) {

	MeshStandardMaterial.call( this );

	this.defines = { 'PHYSICAL': '' };

	this.type = 'MeshPhysicalMaterial';

	this.reflectivity = 0.5; // maps to F0 = 0.04

	this.clearCoat = 0.0;
	this.clearCoatRoughness = 0.0;

	this.setValues( parameters );

}

MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

MeshPhysicalMaterial.prototype.copy = function ( source ) {

	MeshStandardMaterial.prototype.copy.call( this, source );

	this.defines = { 'PHYSICAL': '' };

	this.reflectivity = source.reflectivity;

	this.clearCoat = source.clearCoat;
	this.clearCoatRoughness = source.clearCoatRoughness;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshPhongMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshPhongMaterial';

	this.color = new Color( 0xffffff ); // diffuse
	this.specular = new Color( 0x111111 );
	this.shininess = 30;

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshPhongMaterial.prototype = Object.create( Material.prototype );
MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

MeshPhongMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );
	this.specular.copy( source.specular );
	this.shininess = source.shininess;

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author takahirox / http://github.com/takahirox
 *
 * parameters = {
 *  gradientMap: new THREE.Texture( <Image> )
 * }
 */

function MeshToonMaterial( parameters ) {

	MeshPhongMaterial.call( this );

	this.defines = { 'TOON': '' };

	this.type = 'MeshToonMaterial';

	this.gradientMap = null;

	this.setValues( parameters );

}

MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
MeshToonMaterial.prototype.constructor = MeshToonMaterial;

MeshToonMaterial.prototype.isMeshToonMaterial = true;

MeshToonMaterial.prototype.copy = function ( source ) {

	MeshPhongMaterial.prototype.copy.call( this, source );

	this.gradientMap = source.gradientMap;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshNormalMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshNormalMaterial';

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false;
	this.lights = false;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshNormalMaterial.prototype = Object.create( Material.prototype );
MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

MeshNormalMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshLambertMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshLambertMaterial';

	this.color = new Color( 0xffffff ); // diffuse

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshLambertMaterial.prototype = Object.create( Material.prototype );
MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

MeshLambertMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */

function LineDashedMaterial( parameters ) {

	Material.call( this );

	this.type = 'LineDashedMaterial';

	this.color = new Color( 0xffffff );

	this.linewidth = 1;

	this.scale = 1;
	this.dashSize = 3;
	this.gapSize = 1;

	this.lights = false;

	this.setValues( parameters );

}

LineDashedMaterial.prototype = Object.create( Material.prototype );
LineDashedMaterial.prototype.constructor = LineDashedMaterial;

LineDashedMaterial.prototype.isLineDashedMaterial = true;

LineDashedMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.linewidth = source.linewidth;

	this.scale = source.scale;
	this.dashSize = source.dashSize;
	this.gapSize = source.gapSize;

	return this;

};



var Materials = Object.freeze({
	ShadowMaterial: ShadowMaterial,
	SpriteMaterial: SpriteMaterial,
	RawShaderMaterial: RawShaderMaterial,
	ShaderMaterial: ShaderMaterial,
	PointsMaterial: PointsMaterial,
	MeshPhysicalMaterial: MeshPhysicalMaterial,
	MeshStandardMaterial: MeshStandardMaterial,
	MeshPhongMaterial: MeshPhongMaterial,
	MeshToonMaterial: MeshToonMaterial,
	MeshNormalMaterial: MeshNormalMaterial,
	MeshLambertMaterial: MeshLambertMaterial,
	MeshDepthMaterial: MeshDepthMaterial,
	MeshBasicMaterial: MeshBasicMaterial,
	LineDashedMaterial: LineDashedMaterial,
	LineBasicMaterial: LineBasicMaterial,
	Material: Material
});

/**
 * @author mrdoob / http://mrdoob.com/
 */

var Cache = {

	enabled: false,

	files: {},

	add: function ( key, file ) {

		if ( this.enabled === false ) { return; }

		// console.log( 'THREE.Cache', 'Adding key:', key );

		this.files[ key ] = file;

	},

	get: function ( key ) {

		if ( this.enabled === false ) { return; }

		// console.log( 'THREE.Cache', 'Checking key:', key );

		return this.files[ key ];

	},

	remove: function ( key ) {

		delete this.files[ key ];

	},

	clear: function () {

		this.files = {};

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LoadingManager( onLoad, onProgress, onError ) {

	var scope = this;

	var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

	this.onStart = undefined;
	this.onLoad = onLoad;
	this.onProgress = onProgress;
	this.onError = onError;

	this.itemStart = function ( url ) {

		itemsTotal ++;

		if ( isLoading === false ) {

			if ( scope.onStart !== undefined ) {

				scope.onStart( url, itemsLoaded, itemsTotal );

			}

		}

		isLoading = true;

	};

	this.itemEnd = function ( url ) {

		itemsLoaded ++;

		if ( scope.onProgress !== undefined ) {

			scope.onProgress( url, itemsLoaded, itemsTotal );

		}

		if ( itemsLoaded === itemsTotal ) {

			isLoading = false;

			if ( scope.onLoad !== undefined ) {

				scope.onLoad();

			}

		}

	};

	this.itemError = function ( url ) {

		if ( scope.onError !== undefined ) {

			scope.onError( url );

		}

	};

}

var DefaultLoadingManager = new LoadingManager();

/**
 * @author mrdoob / http://mrdoob.com/
 */

function FileLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( FileLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {
		var this$1 = this;


		if ( url === undefined ) { url = ''; }

		if ( this.path !== undefined ) { url = this.path + url; }

		var scope = this;

		var cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) { onLoad( cached ); }

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		// Check for data: URI
		var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
		var dataUriRegexResult = url.match( dataUriRegex );

		// Safari can not handle Data URIs through XMLHttpRequest so process manually
		if ( dataUriRegexResult ) {

			var mimeType = dataUriRegexResult[ 1 ];
			var isBase64 = !! dataUriRegexResult[ 2 ];
			var data = dataUriRegexResult[ 3 ];

			data = window.decodeURIComponent( data );

			if ( isBase64 ) { data = window.atob( data ); }

			try {

				var response;
				var responseType = ( this.responseType || '' ).toLowerCase();

				switch ( responseType ) {

					case 'arraybuffer':
					case 'blob':

					 	response = new ArrayBuffer( data.length );

						var view = new Uint8Array( response );

						for ( var i = 0; i < data.length; i ++ ) {

							view[ i ] = data.charCodeAt( i );

						}

						if ( responseType === 'blob' ) {

							response = new Blob( [ response ], { type: mimeType } );

						}

						break;

					case 'document':

						var parser = new DOMParser();
						response = parser.parseFromString( data, mimeType );

						break;

					case 'json':

						response = JSON.parse( data );

						break;

					default: // 'text' or other

						response = data;

						break;

				}

				// Wait for next browser tick
				window.setTimeout( function () {

					if ( onLoad ) { onLoad( response ); }

					scope.manager.itemEnd( url );

				}, 0 );

			} catch ( error ) {

				// Wait for next browser tick
				window.setTimeout( function () {

					if ( onError ) { onError( error ); }

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}, 0 );

			}

		} else {

			var request = new XMLHttpRequest();
			request.open( 'GET', url, true );

			request.addEventListener( 'load', function ( event ) {

				var response = event.target.response;

				Cache.add( url, response );

				if ( this.status === 200 ) {

					if ( onLoad ) { onLoad( response ); }

					scope.manager.itemEnd( url );

				} else if ( this.status === 0 ) {

					// Some browsers return HTTP Status 0 when using non-http protocol
					// e.g. 'file://' or 'data://'. Handle as success.

					console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

					if ( onLoad ) { onLoad( response ); }

					scope.manager.itemEnd( url );

				} else {

					if ( onError ) { onError( event ); }

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}

			}, false );

			if ( onProgress !== undefined ) {

				request.addEventListener( 'progress', function ( event ) {

					onProgress( event );

				}, false );

			}

			request.addEventListener( 'error', function ( event ) {

				if ( onError ) { onError( event ); }

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			}, false );

			if ( this.responseType !== undefined ) { request.responseType = this.responseType; }
			if ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }

			if ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }

			for ( var header in this$1.requestHeader ) {

				request.setRequestHeader( header, this$1.requestHeader[ header ] );

			}

			request.send( null );

		}

		scope.manager.itemStart( url );

		return request;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	},

	setResponseType: function ( value ) {

		this.responseType = value;
		return this;

	},

	setWithCredentials: function ( value ) {

		this.withCredentials = value;
		return this;

	},

	setMimeType: function ( value ) {

		this.mimeType = value;
		return this;

	},

	setRequestHeader: function ( value ) {

		this.requestHeader = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 */

function CompressedTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	// override in sub classes
	this._parser = null;

}

Object.assign( CompressedTextureLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var images = [];

		var texture = new CompressedTexture();
		texture.image = images;

		var loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setResponseType( 'arraybuffer' );

		function loadTexture( i ) {

			loader.load( url[ i ], function ( buffer ) {

				var texDatas = scope._parser( buffer, true );

				images[ i ] = {
					width: texDatas.width,
					height: texDatas.height,
					format: texDatas.format,
					mipmaps: texDatas.mipmaps
				};

				loaded += 1;

				if ( loaded === 6 ) {

					if ( texDatas.mipmapCount === 1 )
						{ texture.minFilter = LinearFilter; }

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) { onLoad( texture ); }

				}

			}, onProgress, onError );

		}

		if ( Array.isArray( url ) ) {

			var loaded = 0;

			for ( var i = 0, il = url.length; i < il; ++ i ) {

				loadTexture( i );

			}

		} else {

			// compressed cubemap texture stored in a single DDS file

			loader.load( url, function ( buffer ) {

				var texDatas = scope._parser( buffer, true );

				if ( texDatas.isCubemap ) {

					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

					for ( var f = 0; f < faces; f ++ ) {

						images[ f ] = { mipmaps : [] };

						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
							images[ f ].format = texDatas.format;
							images[ f ].width = texDatas.width;
							images[ f ].height = texDatas.height;

						}

					}

				} else {

					texture.image.width = texDatas.width;
					texture.image.height = texDatas.height;
					texture.mipmaps = texDatas.mipmaps;

				}

				if ( texDatas.mipmapCount === 1 ) {

					texture.minFilter = LinearFilter;

				}

				texture.format = texDatas.format;
				texture.needsUpdate = true;

				if ( onLoad ) { onLoad( texture ); }

			}, onProgress, onError );

		}

		return texture;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author Nikos M. / https://github.com/foo123/
 *
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 */

function DataTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	// override in sub classes
	this._parser = null;

}

Object.assign( DataTextureLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var texture = new DataTexture();

		var loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );

		loader.load( url, function ( buffer ) {

			var texData = scope._parser( buffer );

			if ( ! texData ) { return; }

			if ( undefined !== texData.image ) {

				texture.image = texData.image;

			} else if ( undefined !== texData.data ) {

				texture.image.width = texData.width;
				texture.image.height = texData.height;
				texture.image.data = texData.data;

			}

			texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
			texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

			texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
			texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

			texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

			if ( undefined !== texData.format ) {

				texture.format = texData.format;

			}
			if ( undefined !== texData.type ) {

				texture.type = texData.type;

			}

			if ( undefined !== texData.mipmaps ) {

				texture.mipmaps = texData.mipmaps;

			}

			if ( 1 === texData.mipmapCount ) {

				texture.minFilter = LinearFilter;

			}

			texture.needsUpdate = true;

			if ( onLoad ) { onLoad( texture, texData ); }

		}, onProgress, onError );


		return texture;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ImageLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( ImageLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) { url = ''; }

		if ( this.path !== undefined ) { url = this.path + url; }

		var scope = this;

		var cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) { onLoad( cached ); }

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

		image.addEventListener( 'load', function () {

			Cache.add( url, this );

			if ( onLoad ) { onLoad( this ); }

			scope.manager.itemEnd( url );

		}, false );

		/*
		image.addEventListener( 'progress', function ( event ) {

			if ( onProgress ) onProgress( event );

		}, false );
		*/

		image.addEventListener( 'error', function ( event ) {

			if ( onError ) { onError( event ); }

			scope.manager.itemEnd( url );
			scope.manager.itemError( url );

		}, false );

		if ( url.substr( 0, 5 ) !== 'data:' ) {

			if ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }

		}

		scope.manager.itemStart( url );

		image.src = url;

		return image;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CubeTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( CubeTextureLoader.prototype, {

	load: function ( urls, onLoad, onProgress, onError ) {

		var texture = new CubeTexture();

		var loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		var loaded = 0;

		function loadTexture( i ) {

			loader.load( urls[ i ], function ( image ) {

				texture.images[ i ] = image;

				loaded ++;

				if ( loaded === 6 ) {

					texture.needsUpdate = true;

					if ( onLoad ) { onLoad( texture ); }

				}

			}, undefined, onError );

		}

		for ( var i = 0; i < urls.length; ++ i ) {

			loadTexture( i );

		}

		return texture;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function TextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( TextureLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		var texture = new Texture();
		texture.image = loader.load( url, function () {

			// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
			var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

			texture.format = isJPEG ? RGBFormat : RGBAFormat;
			texture.needsUpdate = true;

			if ( onLoad !== undefined ) {

				onLoad( texture );

			}

		}, onProgress, onError );

		return texture;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Light( color, intensity ) {

	Object3D.call( this );

	this.type = 'Light';

	this.color = new Color( color );
	this.intensity = intensity !== undefined ? intensity : 1;

	this.receiveShadow = undefined;

}

Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Light,

	isLight: true,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.intensity = source.intensity;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.color = this.color.getHex();
		data.object.intensity = this.intensity;

		if ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }

		if ( this.distance !== undefined ) { data.object.distance = this.distance; }
		if ( this.angle !== undefined ) { data.object.angle = this.angle; }
		if ( this.decay !== undefined ) { data.object.decay = this.decay; }
		if ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }

		if ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }

		return data;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function HemisphereLight( skyColor, groundColor, intensity ) {

	Light.call( this, skyColor, intensity );

	this.type = 'HemisphereLight';

	this.castShadow = undefined;

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.groundColor = new Color( groundColor );

}

HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: HemisphereLight,

	isHemisphereLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.groundColor.copy( source.groundColor );

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LightShadow( camera ) {

	this.camera = camera;

	this.bias = 0;
	this.radius = 1;

	this.mapSize = new Vector2( 512, 512 );

	this.map = null;
	this.matrix = new Matrix4();

}

Object.assign( LightShadow.prototype, {

	copy: function ( source ) {

		this.camera = source.camera.clone();

		this.bias = source.bias;
		this.radius = source.radius;

		this.mapSize.copy( source.mapSize );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	toJSON: function () {

		var object = {};

		if ( this.bias !== 0 ) { object.bias = this.bias; }
		if ( this.radius !== 1 ) { object.radius = this.radius; }
		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }

		object.camera = this.camera.toJSON( false ).object;
		delete object.camera.matrix;

		return object;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function SpotLightShadow() {

	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

}

SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	constructor: SpotLightShadow,

	isSpotLightShadow: true,

	update: function ( light ) {

		var camera = this.camera;

		var fov = _Math.RAD2DEG * 2 * light.angle;
		var aspect = this.mapSize.width / this.mapSize.height;
		var far = light.distance || camera.far;

		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

			camera.fov = fov;
			camera.aspect = aspect;
			camera.far = far;
			camera.updateProjectionMatrix();

		}

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

	Light.call( this, color, intensity );

	this.type = 'SpotLight';

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.target = new Object3D();

	Object.defineProperty( this, 'power', {
		get: function () {
			// intensity = power per solid angle.
			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			return this.intensity * Math.PI;
		},
		set: function ( power ) {
			// intensity = power per solid angle.
			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			this.intensity = power / Math.PI;
		}
	} );

	this.distance = ( distance !== undefined ) ? distance : 0;
	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	this.shadow = new SpotLightShadow();

}

SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: SpotLight,

	isSpotLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.angle = source.angle;
		this.penumbra = source.penumbra;
		this.decay = source.decay;

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */


function PointLight( color, intensity, distance, decay ) {

	Light.call( this, color, intensity );

	this.type = 'PointLight';

	Object.defineProperty( this, 'power', {
		get: function () {
			// intensity = power per solid angle.
			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			return this.intensity * 4 * Math.PI;

		},
		set: function ( power ) {
			// intensity = power per solid angle.
			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			this.intensity = power / ( 4 * Math.PI );
		}
	} );

	this.distance = ( distance !== undefined ) ? distance : 0;
	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

}

PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: PointLight,

	isPointLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.decay = source.decay;

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function DirectionalLightShadow( ) {

	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

}

DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	constructor: DirectionalLightShadow

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function DirectionalLight( color, intensity ) {

	Light.call( this, color, intensity );

	this.type = 'DirectionalLight';

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.target = new Object3D();

	this.shadow = new DirectionalLightShadow();

}

DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: DirectionalLight,

	isDirectionalLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AmbientLight( color, intensity ) {

	Light.call( this, color, intensity );

	this.type = 'AmbientLight';

	this.castShadow = undefined;

}

AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: AmbientLight,

	isAmbientLight: true

} );

/**
 * @author abelnation / http://github.com/abelnation
 */

function RectAreaLight( color, intensity, width, height ) {

	Light.call( this, color, intensity );

	this.type = 'RectAreaLight';

	this.position.set( 0, 1, 0 );
	this.updateMatrix();

	this.width = ( width !== undefined ) ? width : 10;
	this.height = ( height !== undefined ) ? height : 10;

	// TODO (abelnation): distance/decay

	// TODO (abelnation): update method for RectAreaLight to update transform to lookat target

	// TODO (abelnation): shadows

}

// TODO (abelnation): RectAreaLight update when light shape is changed
RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: RectAreaLight,

	isRectAreaLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.width = source.width;
		this.height = source.height;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Light.prototype.toJSON.call( this, meta );

		data.object.width = this.width;
		data.object.height = this.height;

		return data;

	}

} );

/**
 * @author tschw
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

var AnimationUtils = {

	// same as Array.prototype.slice, but also works on typed arrays
	arraySlice: function ( array, from, to ) {

		if ( AnimationUtils.isTypedArray( array ) ) {

			// in ios9 array.subarray(from, undefined) will return empty array
			// but array.subarray(from) or array.subarray(from, len) is correct
			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

		}

		return array.slice( from, to );

	},

	// converts an array to a specific type
	convertArray: function ( array, type, forceClone ) {

		if ( ! array || // let 'undefined' and 'null' pass
				! forceClone && array.constructor === type ) { return array; }

		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

			return new type( array ); // create typed array

		}

		return Array.prototype.slice.call( array ); // create Array

	},

	isTypedArray: function ( object ) {

		return ArrayBuffer.isView( object ) &&
				! ( object instanceof DataView );

	},

	// returns an array by which times and values can be sorted
	getKeyframeOrder: function ( times ) {

		function compareTime( i, j ) {

			return times[ i ] - times[ j ];

		}

		var n = times.length;
		var result = new Array( n );
		for ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }

		result.sort( compareTime );

		return result;

	},

	// uses the array previously returned by 'getKeyframeOrder' to sort data
	sortedArray: function ( values, stride, order ) {

		var nValues = values.length;
		var result = new values.constructor( nValues );

		for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

			var srcOffset = order[ i ] * stride;

			for ( var j = 0; j !== stride; ++ j ) {

				result[ dstOffset ++ ] = values[ srcOffset + j ];

			}

		}

		return result;

	},

	// function for parsing AOS keyframe formats
	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

		var i = 1, key = jsonKeys[ 0 ];

		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

			key = jsonKeys[ i ++ ];

		}

		if ( key === undefined ) { return; } // no data

		var value = key[ valuePropertyName ];
		if ( value === undefined ) { return; } // no data

		if ( Array.isArray( value ) ) {

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push.apply( values, value ); // push all elements

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else if ( value.toArray !== undefined ) {

			// ...assume THREE.Math-ish

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					value.toArray( values, values.length );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else {

			// otherwise push as-is

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push( value );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		}

	}

};

/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 * @author tschw
 */

function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	this.parameterPositions = parameterPositions;
	this._cachedIndex = 0;

	this.resultBuffer = resultBuffer !== undefined ?
			resultBuffer : new sampleValues.constructor( sampleSize );
	this.sampleValues = sampleValues;
	this.valueSize = sampleSize;

}

Object.assign( Interpolant.prototype, {

	evaluate: function( t ) {
		var this$1 = this;


		var pp = this.parameterPositions,
			i1 = this._cachedIndex,

			t1 = pp[   i1   ],
			t0 = pp[ i1 - 1 ];

		validate_interval: {

			seek: {

				var right;

				linear_scan: {
					//- See http://jsperf.com/comparison-to-undefined/3
					//- slower code:
					//-
					//- 				if ( t >= t1 || t1 === undefined ) {
					forward_scan: if ( ! ( t < t1 ) ) {

						for ( var giveUpAt = i1 + 2; ;) {

							if ( t1 === undefined ) {

								if ( t < t0 ) { break forward_scan; }

								// after end

								i1 = pp.length;
								this$1._cachedIndex = i1;
								return this$1.afterEnd_( i1 - 1, t, t0 );

							}

							if ( i1 === giveUpAt ) { break; } // this loop

							t0 = t1;
							t1 = pp[ ++ i1 ];

							if ( t < t1 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the right side of the index
						right = pp.length;
						break linear_scan;

					}

					//- slower code:
					//-					if ( t < t0 || t0 === undefined ) {
					if ( ! ( t >= t0 ) ) {

						// looping?

						var t1global = pp[ 1 ];

						if ( t < t1global ) {

							i1 = 2; // + 1, using the scan for the details
							t0 = t1global;

						}

						// linear reverse scan

						for ( var giveUpAt = i1 - 2; ;) {

							if ( t0 === undefined ) {

								// before start

								this$1._cachedIndex = 0;
								return this$1.beforeStart_( 0, t, t1 );

							}

							if ( i1 === giveUpAt ) { break; } // this loop

							t1 = t0;
							t0 = pp[ -- i1 - 1 ];

							if ( t >= t0 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the left side of the index
						right = i1;
						i1 = 0;
						break linear_scan;

					}

					// the interval is valid

					break validate_interval;

				} // linear scan

				// binary search

				while ( i1 < right ) {

					var mid = ( i1 + right ) >>> 1;

					if ( t < pp[ mid ] ) {

						right = mid;

					} else {

						i1 = mid + 1;

					}

				}

				t1 = pp[   i1   ];
				t0 = pp[ i1 - 1 ];

				// check boundary cases, again

				if ( t0 === undefined ) {

					this._cachedIndex = 0;
					return this.beforeStart_( 0, t, t1 );

				}

				if ( t1 === undefined ) {

					i1 = pp.length;
					this._cachedIndex = i1;
					return this.afterEnd_( i1 - 1, t0, t );

				}

			} // seek

			this._cachedIndex = i1;

			this.intervalChanged_( i1, t0, t1 );

		} // validate_interval

		return this.interpolate_( i1, t0, t, t1 );

	},

	settings: null, // optional, subclass-specific settings structure
	// Note: The indirection allows central control of many interpolants.

	// --- Protected interface

	DefaultSettings_: {},

	getSettings_: function() {

		return this.settings || this.DefaultSettings_;

	},

	copySampleValue_: function( index ) {

		// copies a sample value to the result buffer

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,
			offset = index * stride;

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] = values[ offset + i ];

		}

		return result;

	},

	// Template methods for derived classes:

	interpolate_: function( i1, t0, t, t1 ) {

		throw new Error( "call to abstract method" );
		// implementations shall return this.resultBuffer

	},

	intervalChanged_: function( i1, t0, t1 ) {

		// empty

	}

} );

//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign( Interpolant.prototype, {

	//( 0, t, t0 ), returns this.resultBuffer
	beforeStart_: Interpolant.prototype.copySampleValue_,

	//( N-1, tN-1, t ), returns this.resultBuffer
	afterEnd_: Interpolant.prototype.copySampleValue_,

} );

/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 *
 * @author tschw
 */

function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call(
			this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	this._weightPrev = -0;
	this._offsetPrev = -0;
	this._weightNext = -0;
	this._offsetNext = -0;

}

CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: CubicInterpolant,

	DefaultSettings_: {

		endingStart: 	ZeroCurvatureEnding,
		endingEnd:		ZeroCurvatureEnding

	},

	intervalChanged_: function( i1, t0, t1 ) {

		var pp = this.parameterPositions,
			iPrev = i1 - 2,
			iNext = i1 + 1,

			tPrev = pp[ iPrev ],
			tNext = pp[ iNext ];

		if ( tPrev === undefined ) {

			switch ( this.getSettings_().endingStart ) {

				case ZeroSlopeEnding:

					// f'(t0) = 0
					iPrev = i1;
					tPrev = 2 * t0 - t1;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iPrev = pp.length - 2;
					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(t0) = 0 a.k.a. Natural Spline
					iPrev = i1;
					tPrev = t1;

			}

		}

		if ( tNext === undefined ) {

			switch ( this.getSettings_().endingEnd ) {

				case ZeroSlopeEnding:

					// f'(tN) = 0
					iNext = i1;
					tNext = 2 * t1 - t0;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iNext = 1;
					tNext = t1 + pp[ 1 ] - pp[ 0 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(tN) = 0, a.k.a. Natural Spline
					iNext = i1 - 1;
					tNext = t0;

			}

		}

		var halfDt = ( t1 - t0 ) * 0.5,
			stride = this.valueSize;

		this._weightPrev = halfDt / ( t0 - tPrev );
		this._weightNext = halfDt / ( tNext - t1 );
		this._offsetPrev = iPrev * stride;
		this._offsetNext = iNext * stride;

	},

	interpolate_: function( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			o1 = i1 * stride,		o0 = o1 - stride,
			oP = this._offsetPrev, 	oN = this._offsetNext,
			wP = this._weightPrev,	wN = this._weightNext,

			p = ( t - t0 ) / ( t1 - t0 ),
			pp = p * p,
			ppp = pp * p;

		// evaluate polynomials

		var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
		var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
		var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
		var sN =       wN   * ppp   -           wN      * pp;

		// combine data linearly

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] =
					sP * values[ oP + i ] +
					s0 * values[ o0 + i ] +
					s1 * values[ o1 + i ] +
					sN * values[ oN + i ];

		}

		return result;

	}

} );

/**
 * @author tschw
 */

function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: LinearInterpolant,

	interpolate_: function( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			offset1 = i1 * stride,
			offset0 = offset1 - stride,

			weight1 = ( t - t0 ) / ( t1 - t0 ),
			weight0 = 1 - weight1;

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] =
					values[ offset0 + i ] * weight0 +
					values[ offset1 + i ] * weight1;

		}

		return result;

	}

} );

/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 *
 * @author tschw
 */

function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: DiscreteInterpolant,

	interpolate_: function( i1, t0, t, t1 ) {

		return this.copySampleValue_( i1 - 1 );

	}

} );

var KeyframeTrackPrototype;

KeyframeTrackPrototype = {

	TimeBufferType: Float32Array,
	ValueBufferType: Float32Array,

	DefaultInterpolation: InterpolateLinear,

	InterpolantFactoryMethodDiscrete: function ( result ) {

		return new DiscreteInterpolant(
				this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodLinear: function ( result ) {

		return new LinearInterpolant(
				this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodSmooth: function ( result ) {

		return new CubicInterpolant(
				this.times, this.values, this.getValueSize(), result );

	},

	setInterpolation: function ( interpolation ) {

		var factoryMethod;

		switch ( interpolation ) {

			case InterpolateDiscrete:

				factoryMethod = this.InterpolantFactoryMethodDiscrete;

				break;

			case InterpolateLinear:

				factoryMethod = this.InterpolantFactoryMethodLinear;

				break;

			case InterpolateSmooth:

				factoryMethod = this.InterpolantFactoryMethodSmooth;

				break;

		}

		if ( factoryMethod === undefined ) {

			var message = "unsupported interpolation for " +
					this.ValueTypeName + " keyframe track named " + this.name;

			if ( this.createInterpolant === undefined ) {

				// fall back to default, unless the default itself is messed up
				if ( interpolation !== this.DefaultInterpolation ) {

					this.setInterpolation( this.DefaultInterpolation );

				} else {

					throw new Error( message ); // fatal, in this case

				}

			}

			console.warn( 'THREE.KeyframeTrackPrototype:', message );
			return;

		}

		this.createInterpolant = factoryMethod;

	},

	getInterpolation: function () {

		switch ( this.createInterpolant ) {

			case this.InterpolantFactoryMethodDiscrete:

				return InterpolateDiscrete;

			case this.InterpolantFactoryMethodLinear:

				return InterpolateLinear;

			case this.InterpolantFactoryMethodSmooth:

				return InterpolateSmooth;

		}

	},

	getValueSize: function () {

		return this.values.length / this.times.length;

	},

	// move all keyframes either forwards or backwards in time
	shift: function ( timeOffset ) {

		if ( timeOffset !== 0.0 ) {

			var times = this.times;

			for ( var i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] += timeOffset;

			}

		}

		return this;

	},

	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
	scale: function ( timeScale ) {

		if ( timeScale !== 1.0 ) {

			var times = this.times;

			for ( var i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] *= timeScale;

			}

		}

		return this;

	},

	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
	trim: function ( startTime, endTime ) {

		var times = this.times,
			nKeys = times.length,
			from = 0,
			to = nKeys - 1;

		while ( from !== nKeys && times[ from ] < startTime ) { ++ from; }
		while ( to !== - 1 && times[ to ] > endTime ) { -- to; }

		++ to; // inclusive -> exclusive bound

		if ( from !== 0 || to !== nKeys ) {

			// empty tracks are forbidden, so keep at least one keyframe
			if ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }

			var stride = this.getValueSize();
			this.times = AnimationUtils.arraySlice( times, from, to );
			this.values = AnimationUtils.
					arraySlice( this.values, from * stride, to * stride );

		}

		return this;

	},

	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
	validate: function () {
		var this$1 = this;


		var valid = true;

		var valueSize = this.getValueSize();
		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

			console.error( 'THREE.KeyframeTrackPrototype: Invalid value size in track.', this );
			valid = false;

		}

		var times = this.times,
			values = this.values,

			nKeys = times.length;

		if ( nKeys === 0 ) {

			console.error( 'THREE.KeyframeTrackPrototype: Track is empty.', this );
			valid = false;

		}

		var prevTime = null;

		for ( var i = 0; i !== nKeys; i ++ ) {

			var currTime = times[ i ];

			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

				console.error( 'THREE.KeyframeTrackPrototype: Time is not a valid number.', this$1, i, currTime );
				valid = false;
				break;

			}

			if ( prevTime !== null && prevTime > currTime ) {

				console.error( 'THREE.KeyframeTrackPrototype: Out of order keys.', this$1, i, currTime, prevTime );
				valid = false;
				break;

			}

			prevTime = currTime;

		}

		if ( values !== undefined ) {

			if ( AnimationUtils.isTypedArray( values ) ) {

				for ( var i = 0, n = values.length; i !== n; ++ i ) {

					var value = values[ i ];

					if ( isNaN( value ) ) {

						console.error( 'THREE.KeyframeTrackPrototype: Value is not a valid number.', this$1, i, value );
						valid = false;
						break;

					}

				}

			}

		}

		return valid;

	},

	// removes equivalent sequential keys as common in morph target sequences
	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
	optimize: function () {

		var times = this.times,
			values = this.values,
			stride = this.getValueSize(),

			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

			writeIndex = 1,
			lastIndex = times.length - 1;

		for ( var i = 1; i < lastIndex; ++ i ) {

			var keep = false;

			var time = times[ i ];
			var timeNext = times[ i + 1 ];

			// remove adjacent keyframes scheduled at the same time

			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

				if ( ! smoothInterpolation ) {

					// remove unnecessary keyframes same as their neighbors

					var offset = i * stride,
						offsetP = offset - stride,
						offsetN = offset + stride;

					for ( var j = 0; j !== stride; ++ j ) {

						var value = values[ offset + j ];

						if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

							keep = true;
							break;

						}

					}

				} else { keep = true; }

			}

			// in-place compaction

			if ( keep ) {

				if ( i !== writeIndex ) {

					times[ writeIndex ] = times[ i ];

					var readOffset = i * stride,
						writeOffset = writeIndex * stride;

					for ( var j = 0; j !== stride; ++ j )

						{ values[ writeOffset + j ] = values[ readOffset + j ]; }

				}

				++ writeIndex;

			}

		}

		// flush last keyframe (compaction looks ahead)

		if ( lastIndex > 0 ) {

			times[ writeIndex ] = times[ lastIndex ];

			for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )

				{ values[ writeOffset + j ] = values[ readOffset + j ]; }

			++ writeIndex;

		}

		if ( writeIndex !== times.length ) {

			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

		}

		return this;

	}

};

function KeyframeTrackConstructor( name, times, values, interpolation ) {

	if ( name === undefined ) { throw new Error( "track name is undefined" ); }

	if ( times === undefined || times.length === 0 ) {

		throw new Error( "no keyframes in track named " + name );

	}

	this.name = name;

	this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
	this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

	this.setInterpolation( interpolation || this.DefaultInterpolation );

	this.validate();
	this.optimize();

}

/**
 *
 * A Track of vectored keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function VectorKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

VectorKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: VectorKeyframeTrack,

	ValueTypeName: 'vector'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited

} );

/**
 * Spherical linear unit quaternion interpolant.
 *
 * @author tschw
 */

function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: QuaternionLinearInterpolant,

	interpolate_: function( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			offset = i1 * stride,

			alpha = ( t - t0 ) / ( t1 - t0 );

		for ( var end = offset + stride; offset !== end; offset += 4 ) {

			Quaternion.slerpFlat( result, 0,
					values, offset - stride, values, offset, alpha );

		}

		return result;

	}

} );

/**
 *
 * A Track of quaternion keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function QuaternionKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

QuaternionKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: QuaternionKeyframeTrack,

	ValueTypeName: 'quaternion',

	// ValueBufferType is inherited

	DefaultInterpolation: InterpolateLinear,

	InterpolantFactoryMethodLinear: function( result ) {

		return new QuaternionLinearInterpolant(
				this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodSmooth: undefined // not yet implemented

} );

/**
 *
 * A Track of numeric keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function NumberKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

NumberKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: NumberKeyframeTrack,

	ValueTypeName: 'number'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited

} );

/**
 *
 * A Track that interpolates Strings
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function StringKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

StringKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: StringKeyframeTrack,

	ValueTypeName: 'string',
	ValueBufferType: Array,

	DefaultInterpolation: InterpolateDiscrete,

	InterpolantFactoryMethodLinear: undefined,

	InterpolantFactoryMethodSmooth: undefined

} );

/**
 *
 * A Track of Boolean keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function BooleanKeyframeTrack( name, times, values ) {

	KeyframeTrackConstructor.call( this, name, times, values );

}

BooleanKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: BooleanKeyframeTrack,

	ValueTypeName: 'bool',
	ValueBufferType: Array,

	DefaultInterpolation: InterpolateDiscrete,

	InterpolantFactoryMethodLinear: undefined,
	InterpolantFactoryMethodSmooth: undefined

	// Note: Actually this track could have a optimized / compressed
	// representation of a single value and a custom interpolant that
	// computes "firstValue ^ isOdd( index )".

} );

/**
 *
 * A Track of keyframe values that represent color.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function ColorKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

ColorKeyframeTrack.prototype =
		Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: ColorKeyframeTrack,

	ValueTypeName: 'color'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited


	// Note: Very basic implementation and nothing special yet.
	// However, this is the place for color space parameterization.

} );

/**
 *
 * A timed sequence of keyframes for a specific property.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function KeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.apply( this, arguments );

}

KeyframeTrack.prototype = KeyframeTrackPrototype;
KeyframeTrackPrototype.constructor = KeyframeTrack;

// Static methods:

Object.assign( KeyframeTrack, {

	// Serialization (in static context, because of constructor invocation
	// and automatic invocation of .toJSON):

	parse: function( json ) {

		if( json.type === undefined ) {

			throw new Error( "track type undefined, can not parse" );

		}

		var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

		if ( json.times === undefined ) {

			var times = [], values = [];

			AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

			json.times = times;
			json.values = values;

		}

		// derived classes can define a static parse method
		if ( trackType.parse !== undefined ) {

			return trackType.parse( json );

		} else {

			// by default, we asssume a constructor compatible with the base
			return new trackType(
					json.name, json.times, json.values, json.interpolation );

		}

	},

	toJSON: function( track ) {

		var trackType = track.constructor;

		var json;

		// derived classes can define a static toJSON method
		if ( trackType.toJSON !== undefined ) {

			json = trackType.toJSON( track );

		} else {

			// by default, we assume the data can be serialized as-is
			json = {

				'name': track.name,
				'times': AnimationUtils.convertArray( track.times, Array ),
				'values': AnimationUtils.convertArray( track.values, Array )

			};

			var interpolation = track.getInterpolation();

			if ( interpolation !== track.DefaultInterpolation ) {

				json.interpolation = interpolation;

			}

		}

		json.type = track.ValueTypeName; // mandatory

		return json;

	},

	_getTrackTypeForValueTypeName: function( typeName ) {

		switch( typeName.toLowerCase() ) {

			case "scalar":
			case "double":
			case "float":
			case "number":
			case "integer":

				return NumberKeyframeTrack;

			case "vector":
			case "vector2":
			case "vector3":
			case "vector4":

				return VectorKeyframeTrack;

			case "color":

				return ColorKeyframeTrack;

			case "quaternion":

				return QuaternionKeyframeTrack;

			case "bool":
			case "boolean":

				return BooleanKeyframeTrack;

			case "string":

				return StringKeyframeTrack;

		}

		throw new Error( "Unsupported typeName: " + typeName );

	}

} );

/**
 *
 * Reusable set of Tracks that represent an animation.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

function AnimationClip( name, duration, tracks ) {

	this.name = name;
	this.tracks = tracks;
	this.duration = ( duration !== undefined ) ? duration : - 1;

	this.uuid = _Math.generateUUID();

	// this means it should figure out its duration by scanning the tracks
	if ( this.duration < 0 ) {

		this.resetDuration();

	}

	this.optimize();

}

Object.assign( AnimationClip, {

	parse: function ( json ) {

		var tracks = [],
			jsonTracks = json.tracks,
			frameTime = 1.0 / ( json.fps || 1.0 );

		for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

			tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

		}

		return new AnimationClip( json.name, json.duration, tracks );

	},

	toJSON: function ( clip ) {

		var tracks = [],
			clipTracks = clip.tracks;

		var json = {

			'name': clip.name,
			'duration': clip.duration,
			'tracks': tracks

		};

		for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

		}

		return json;

	},

	CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

		var numMorphTargets = morphTargetSequence.length;
		var tracks = [];

		for ( var i = 0; i < numMorphTargets; i ++ ) {

			var times = [];
			var values = [];

			times.push(
					( i + numMorphTargets - 1 ) % numMorphTargets,
					i,
					( i + 1 ) % numMorphTargets );

			values.push( 0, 1, 0 );

			var order = AnimationUtils.getKeyframeOrder( times );
			times = AnimationUtils.sortedArray( times, 1, order );
			values = AnimationUtils.sortedArray( values, 1, order );

			// if there is a key at the first frame, duplicate it as the
			// last frame as well for perfect loop.
			if ( ! noLoop && times[ 0 ] === 0 ) {

				times.push( numMorphTargets );
				values.push( values[ 0 ] );

			}

			tracks.push(
					new NumberKeyframeTrack(
						'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
						times, values
					).scale( 1.0 / fps ) );

		}

		return new AnimationClip( name, - 1, tracks );

	},

	findByName: function ( objectOrClipArray, name ) {

		var clipArray = objectOrClipArray;

		if ( ! Array.isArray( objectOrClipArray ) ) {

			var o = objectOrClipArray;
			clipArray = o.geometry && o.geometry.animations || o.animations;

		}

		for ( var i = 0; i < clipArray.length; i ++ ) {

			if ( clipArray[ i ].name === name ) {

				return clipArray[ i ];

			}

		}

		return null;

	},

	CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

		var animationToMorphTargets = {};

		// tested with https://regex101.com/ on trick sequences
		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
		var pattern = /^([\w-]*?)([\d]+)$/;

		// sort morph target names into animation groups based
		// patterns like Walk_001, Walk_002, Run_001, Run_002
		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

			var morphTarget = morphTargets[ i ];
			var parts = morphTarget.name.match( pattern );

			if ( parts && parts.length > 1 ) {

				var name = parts[ 1 ];

				var animationMorphTargets = animationToMorphTargets[ name ];
				if ( ! animationMorphTargets ) {

					animationToMorphTargets[ name ] = animationMorphTargets = [];

				}

				animationMorphTargets.push( morphTarget );

			}

		}

		var clips = [];

		for ( var name in animationToMorphTargets ) {

			clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

		}

		return clips;

	},

	// parse the animation.hierarchy format
	parseAnimation: function ( animation, bones ) {

		if ( ! animation ) {

			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
			return null;

		}

		var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

			// only return track if there are actually keys.
			if ( animationKeys.length !== 0 ) {

				var times = [];
				var values = [];

				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

				// empty keys are filtered out, so check again
				if ( times.length !== 0 ) {

					destTracks.push( new trackType( trackName, times, values ) );

				}

			}

		};

		var tracks = [];

		var clipName = animation.name || 'default';
		// automatic length determination in AnimationClip.
		var duration = animation.length || - 1;
		var fps = animation.fps || 30;

		var hierarchyTracks = animation.hierarchy || [];

		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

			var animationKeys = hierarchyTracks[ h ].keys;

			// skip empty tracks
			if ( ! animationKeys || animationKeys.length === 0 ) { continue; }

			// process morph targets
			if ( animationKeys[ 0 ].morphTargets ) {

				// figure out all morph targets used in this track
				var morphTargetNames = {};

				for ( var k = 0; k < animationKeys.length; k ++ ) {

					if ( animationKeys[ k ].morphTargets ) {

						for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

						}

					}

				}

				// create a track for each morph target with all zero
				// morphTargetInfluences except for the keys in which
				// the morphTarget is named.
				for ( var morphTargetName in morphTargetNames ) {

					var times = [];
					var values = [];

					for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

						var animationKey = animationKeys[ k ];

						times.push( animationKey.time );
						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

					}

					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

				}

				duration = morphTargetNames.length * ( fps || 1.0 );

			} else {

				// ...assume skeletal animation

				var boneName = '.bones[' + bones[ h ].name + ']';

				addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.position',
						animationKeys, 'pos', tracks );

				addNonemptyTrack(
						QuaternionKeyframeTrack, boneName + '.quaternion',
						animationKeys, 'rot', tracks );

				addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.scale',
						animationKeys, 'scl', tracks );

			}

		}

		if ( tracks.length === 0 ) {

			return null;

		}

		var clip = new AnimationClip( clipName, duration, tracks );

		return clip;

	}

} );

Object.assign( AnimationClip.prototype, {

	resetDuration: function () {
		var this$1 = this;


		var tracks = this.tracks, duration = 0;

		for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

			var track = this$1.tracks[ i ];

			duration = Math.max( duration, track.times[ track.times.length - 1 ] );

		}

		this.duration = duration;

	},

	trim: function () {
		var this$1 = this;


		for ( var i = 0; i < this.tracks.length; i ++ ) {

			this$1.tracks[ i ].trim( 0, this$1.duration );

		}

		return this;

	},

	optimize: function () {
		var this$1 = this;


		for ( var i = 0; i < this.tracks.length; i ++ ) {

			this$1.tracks[ i ].optimize();

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function MaterialLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	this.textures = {};

}

Object.assign( MaterialLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	setTextures: function ( value ) {

		this.textures = value;

	},

	parse: function ( json ) {

		var textures = this.textures;

		function getTexture( name ) {

			if ( textures[ name ] === undefined ) {

				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

			}

			return textures[ name ];

		}

		var material = new Materials[ json.type ]();

		if ( json.uuid !== undefined ) { material.uuid = json.uuid; }
		if ( json.name !== undefined ) { material.name = json.name; }
		if ( json.color !== undefined ) { material.color.setHex( json.color ); }
		if ( json.roughness !== undefined ) { material.roughness = json.roughness; }
		if ( json.metalness !== undefined ) { material.metalness = json.metalness; }
		if ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }
		if ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }
		if ( json.shininess !== undefined ) { material.shininess = json.shininess; }
		if ( json.clearCoat !== undefined ) { material.clearCoat = json.clearCoat; }
		if ( json.clearCoatRoughness !== undefined ) { material.clearCoatRoughness = json.clearCoatRoughness; }
		if ( json.uniforms !== undefined ) { material.uniforms = json.uniforms; }
		if ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }
		if ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }
		if ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }
		if ( json.fog !== undefined ) { material.fog = json.fog; }
		if ( json.shading !== undefined ) { material.shading = json.shading; }
		if ( json.blending !== undefined ) { material.blending = json.blending; }
		if ( json.side !== undefined ) { material.side = json.side; }
		if ( json.opacity !== undefined ) { material.opacity = json.opacity; }
		if ( json.transparent !== undefined ) { material.transparent = json.transparent; }
		if ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }
		if ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }
		if ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }
		if ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }
		if ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }
		if ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }
		if ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }
		if ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }
		if ( json.skinning !== undefined ) { material.skinning = json.skinning; }
		if ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }

		// for PointsMaterial

		if ( json.size !== undefined ) { material.size = json.size; }
		if ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }

		// maps

		if ( json.map !== undefined ) { material.map = getTexture( json.map ); }

		if ( json.alphaMap !== undefined ) {

			material.alphaMap = getTexture( json.alphaMap );
			material.transparent = true;

		}

		if ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }
		if ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }

		if ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }
		if ( json.normalScale !== undefined ) {

			var normalScale = json.normalScale;

			if ( Array.isArray( normalScale ) === false ) {

				// Blender exporter used to export a scalar. See #7459

				normalScale = [ normalScale, normalScale ];

			}

			material.normalScale = new Vector2().fromArray( normalScale );

		}

		if ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }
		if ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }
		if ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }

		if ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }
		if ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }

		if ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }
		if ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }

		if ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }

		if ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }

		if ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }

		if ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }
		if ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }

		if ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }
		if ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }

		if ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }

		return material;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function BufferGeometryLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( BufferGeometryLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	parse: function ( json ) {

		var geometry = new BufferGeometry();

		var index = json.data.index;

		if ( index !== undefined ) {

			var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

		}

		var attributes = json.data.attributes;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];
			var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

			geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

		}

		var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

		if ( groups !== undefined ) {

			for ( var i = 0, n = groups.length; i !== n; ++ i ) {

				var group = groups[ i ];

				geometry.addGroup( group.start, group.count, group.materialIndex );

			}

		}

		var boundingSphere = json.data.boundingSphere;

		if ( boundingSphere !== undefined ) {

			var center = new Vector3();

			if ( boundingSphere.center !== undefined ) {

				center.fromArray( boundingSphere.center );

			}

			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

		}

		return geometry;

	}

} );

var TYPED_ARRAYS = {
	Int8Array: Int8Array,
	Uint8Array: Uint8Array,
	// Workaround for IE11 pre KB2929437. See #11440
	Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
	Int16Array: Int16Array,
	Uint16Array: Uint16Array,
	Int32Array: Int32Array,
	Uint32Array: Uint32Array,
	Float32Array: Float32Array,
	Float64Array: Float64Array
};

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Loader() {

	this.onLoadStart = function () {};
	this.onLoadProgress = function () {};
	this.onLoadComplete = function () {};

}

Loader.Handlers = {

	handlers: [],

	add: function ( regex, loader ) {

		this.handlers.push( regex, loader );

	},

	get: function ( file ) {

		var handlers = this.handlers;

		for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

			var regex = handlers[ i ];
			var loader = handlers[ i + 1 ];

			if ( regex.test( file ) ) {

				return loader;

			}

		}

		return null;

	}

};

Object.assign( Loader.prototype, {

	crossOrigin: undefined,

	extractUrlBase: function ( url ) {

		var parts = url.split( '/' );

		if ( parts.length === 1 ) { return './'; }

		parts.pop();

		return parts.join( '/' ) + '/';

	},

	initMaterials: function ( materials, texturePath, crossOrigin ) {
		var this$1 = this;


		var array = [];

		for ( var i = 0; i < materials.length; ++ i ) {

			array[ i ] = this$1.createMaterial( materials[ i ], texturePath, crossOrigin );

		}

		return array;

	},

	createMaterial: ( function () {

		var BlendingMode = {
			NoBlending: NoBlending,
			NormalBlending: NormalBlending,
			AdditiveBlending: AdditiveBlending,
			SubtractiveBlending: SubtractiveBlending,
			MultiplyBlending: MultiplyBlending,
			CustomBlending: CustomBlending
		};

		var color = new Color();
		var textureLoader = new TextureLoader();
		var materialLoader = new MaterialLoader();

		return function createMaterial( m, texturePath, crossOrigin ) {

			// convert from old material format

			var textures = {};

			function loadTexture( path, repeat, offset, wrap, anisotropy ) {

				var fullPath = texturePath + path;
				var loader = Loader.Handlers.get( fullPath );

				var texture;

				if ( loader !== null ) {

					texture = loader.load( fullPath );

				} else {

					textureLoader.setCrossOrigin( crossOrigin );
					texture = textureLoader.load( fullPath );

				}

				if ( repeat !== undefined ) {

					texture.repeat.fromArray( repeat );

					if ( repeat[ 0 ] !== 1 ) { texture.wrapS = RepeatWrapping; }
					if ( repeat[ 1 ] !== 1 ) { texture.wrapT = RepeatWrapping; }

				}

				if ( offset !== undefined ) {

					texture.offset.fromArray( offset );

				}

				if ( wrap !== undefined ) {

					if ( wrap[ 0 ] === 'repeat' ) { texture.wrapS = RepeatWrapping; }
					if ( wrap[ 0 ] === 'mirror' ) { texture.wrapS = MirroredRepeatWrapping; }

					if ( wrap[ 1 ] === 'repeat' ) { texture.wrapT = RepeatWrapping; }
					if ( wrap[ 1 ] === 'mirror' ) { texture.wrapT = MirroredRepeatWrapping; }

				}

				if ( anisotropy !== undefined ) {

					texture.anisotropy = anisotropy;

				}

				var uuid = _Math.generateUUID();

				textures[ uuid ] = texture;

				return uuid;

			}

			//

			var json = {
				uuid: _Math.generateUUID(),
				type: 'MeshLambertMaterial'
			};

			for ( var name in m ) {

				var value = m[ name ];

				switch ( name ) {

					case 'DbgColor':
					case 'DbgIndex':
					case 'opticalDensity':
					case 'illumination':
						break;
					case 'DbgName':
						json.name = value;
						break;
					case 'blending':
						json.blending = BlendingMode[ value ];
						break;
					case 'colorAmbient':
					case 'mapAmbient':
						console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
						break;
					case 'colorDiffuse':
						json.color = color.fromArray( value ).getHex();
						break;
					case 'colorSpecular':
						json.specular = color.fromArray( value ).getHex();
						break;
					case 'colorEmissive':
						json.emissive = color.fromArray( value ).getHex();
						break;
					case 'specularCoef':
						json.shininess = value;
						break;
					case 'shading':
						if ( value.toLowerCase() === 'basic' ) { json.type = 'MeshBasicMaterial'; }
						if ( value.toLowerCase() === 'phong' ) { json.type = 'MeshPhongMaterial'; }
						if ( value.toLowerCase() === 'standard' ) { json.type = 'MeshStandardMaterial'; }
						break;
					case 'mapDiffuse':
						json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
						break;
					case 'mapDiffuseRepeat':
					case 'mapDiffuseOffset':
					case 'mapDiffuseWrap':
					case 'mapDiffuseAnisotropy':
						break;
					case 'mapEmissive':
						json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
						break;
					case 'mapEmissiveRepeat':
					case 'mapEmissiveOffset':
					case 'mapEmissiveWrap':
					case 'mapEmissiveAnisotropy':
						break;
					case 'mapLight':
						json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
						break;
					case 'mapLightRepeat':
					case 'mapLightOffset':
					case 'mapLightWrap':
					case 'mapLightAnisotropy':
						break;
					case 'mapAO':
						json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
						break;
					case 'mapAORepeat':
					case 'mapAOOffset':
					case 'mapAOWrap':
					case 'mapAOAnisotropy':
						break;
					case 'mapBump':
						json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
						break;
					case 'mapBumpScale':
						json.bumpScale = value;
						break;
					case 'mapBumpRepeat':
					case 'mapBumpOffset':
					case 'mapBumpWrap':
					case 'mapBumpAnisotropy':
						break;
					case 'mapNormal':
						json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
						break;
					case 'mapNormalFactor':
						json.normalScale = [ value, value ];
						break;
					case 'mapNormalRepeat':
					case 'mapNormalOffset':
					case 'mapNormalWrap':
					case 'mapNormalAnisotropy':
						break;
					case 'mapSpecular':
						json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
						break;
					case 'mapSpecularRepeat':
					case 'mapSpecularOffset':
					case 'mapSpecularWrap':
					case 'mapSpecularAnisotropy':
						break;
					case 'mapMetalness':
						json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
						break;
					case 'mapMetalnessRepeat':
					case 'mapMetalnessOffset':
					case 'mapMetalnessWrap':
					case 'mapMetalnessAnisotropy':
						break;
					case 'mapRoughness':
						json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
						break;
					case 'mapRoughnessRepeat':
					case 'mapRoughnessOffset':
					case 'mapRoughnessWrap':
					case 'mapRoughnessAnisotropy':
						break;
					case 'mapAlpha':
						json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
						break;
					case 'mapAlphaRepeat':
					case 'mapAlphaOffset':
					case 'mapAlphaWrap':
					case 'mapAlphaAnisotropy':
						break;
					case 'flipSided':
						json.side = BackSide;
						break;
					case 'doubleSided':
						json.side = DoubleSide;
						break;
					case 'transparency':
						console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
						json.opacity = value;
						break;
					case 'depthTest':
					case 'depthWrite':
					case 'colorWrite':
					case 'opacity':
					case 'reflectivity':
					case 'transparent':
					case 'visible':
					case 'wireframe':
						json[ name ] = value;
						break;
					case 'vertexColors':
						if ( value === true ) { json.vertexColors = VertexColors; }
						if ( value === 'face' ) { json.vertexColors = FaceColors; }
						break;
					default:
						console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
						break;

				}

			}

			if ( json.type === 'MeshBasicMaterial' ) { delete json.emissive; }
			if ( json.type !== 'MeshPhongMaterial' ) { delete json.specular; }

			if ( json.opacity < 1 ) { json.transparent = true; }

			materialLoader.setTextures( textures );

			return materialLoader.parse( json );

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function JSONLoader( manager ) {

	if ( typeof manager === 'boolean' ) {

		console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
		manager = undefined;

	}

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	this.withCredentials = false;

}

Object.assign( JSONLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );

		var loader = new FileLoader( this.manager );
		loader.setWithCredentials( this.withCredentials );
		loader.load( url, function ( text ) {

			var json = JSON.parse( text );
			var metadata = json.metadata;

			if ( metadata !== undefined ) {

				var type = metadata.type;

				if ( type !== undefined ) {

					if ( type.toLowerCase() === 'object' ) {

						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
						return;

					}

					if ( type.toLowerCase() === 'scene' ) {

						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
						return;

					}

				}

			}

			var object = scope.parse( json, texturePath );
			onLoad( object.geometry, object.materials );

		}, onProgress, onError );

	},

	setTexturePath: function ( value ) {

		this.texturePath = value;

	},

	parse: ( function () {

		function parseModel( json, geometry ) {

			function isBitSet( value, position ) {

				return value & ( 1 << position );

			}

			var i, j, fi,

				offset, zLength,

				colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

				vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				scale = json.scale,

				nUvLayers = 0;


			if ( json.uvs !== undefined ) {

				// disregard empty arrays

				for ( i = 0; i < json.uvs.length; i ++ ) {

					if ( json.uvs[ i ].length ) { nUvLayers ++; }

				}

				for ( i = 0; i < nUvLayers; i ++ ) {

					geometry.faceVertexUvs[ i ] = [];

				}

			}

			offset = 0;
			zLength = vertices.length;

			while ( offset < zLength ) {

				vertex = new Vector3();

				vertex.x = vertices[ offset ++ ] * scale;
				vertex.y = vertices[ offset ++ ] * scale;
				vertex.z = vertices[ offset ++ ] * scale;

				geometry.vertices.push( vertex );

			}

			offset = 0;
			zLength = faces.length;

			while ( offset < zLength ) {

				type = faces[ offset ++ ];

				isQuad = isBitSet( type, 0 );
				hasMaterial = isBitSet( type, 1 );
				hasFaceVertexUv = isBitSet( type, 3 );
				hasFaceNormal = isBitSet( type, 4 );
				hasFaceVertexNormal = isBitSet( type, 5 );
				hasFaceColor = isBitSet( type, 6 );
				hasFaceVertexColor = isBitSet( type, 7 );

				// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

				if ( isQuad ) {

					faceA = new Face3();
					faceA.a = faces[ offset ];
					faceA.b = faces[ offset + 1 ];
					faceA.c = faces[ offset + 3 ];

					faceB = new Face3();
					faceB.a = faces[ offset + 1 ];
					faceB.b = faces[ offset + 2 ];
					faceB.c = faces[ offset + 3 ];

					offset += 4;

					if ( hasMaterial ) {

						materialIndex = faces[ offset ++ ];
						faceA.materialIndex = materialIndex;
						faceB.materialIndex = materialIndex;

					}

					// to get face <=> uv index correspondence

					fi = geometry.faces.length;

					if ( hasFaceVertexUv ) {

						for ( i = 0; i < nUvLayers; i ++ ) {

							uvLayer = json.uvs[ i ];

							geometry.faceVertexUvs[ i ][ fi ] = [];
							geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

							for ( j = 0; j < 4; j ++ ) {

								uvIndex = faces[ offset ++ ];

								u = uvLayer[ uvIndex * 2 ];
								v = uvLayer[ uvIndex * 2 + 1 ];

								uv = new Vector2( u, v );

								if ( j !== 2 ) { geometry.faceVertexUvs[ i ][ fi ].push( uv ); }
								if ( j !== 0 ) { geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv ); }

							}

						}

					}

					if ( hasFaceNormal ) {

						normalIndex = faces[ offset ++ ] * 3;

						faceA.normal.set(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

						faceB.normal.copy( faceA.normal );

					}

					if ( hasFaceVertexNormal ) {

						for ( i = 0; i < 4; i ++ ) {

							normalIndex = faces[ offset ++ ] * 3;

							normal = new Vector3(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);


							if ( i !== 2 ) { faceA.vertexNormals.push( normal ); }
							if ( i !== 0 ) { faceB.vertexNormals.push( normal ); }

						}

					}


					if ( hasFaceColor ) {

						colorIndex = faces[ offset ++ ];
						hex = colors[ colorIndex ];

						faceA.color.setHex( hex );
						faceB.color.setHex( hex );

					}


					if ( hasFaceVertexColor ) {

						for ( i = 0; i < 4; i ++ ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							if ( i !== 2 ) { faceA.vertexColors.push( new Color( hex ) ); }
							if ( i !== 0 ) { faceB.vertexColors.push( new Color( hex ) ); }

						}

					}

					geometry.faces.push( faceA );
					geometry.faces.push( faceB );

				} else {

					face = new Face3();
					face.a = faces[ offset ++ ];
					face.b = faces[ offset ++ ];
					face.c = faces[ offset ++ ];

					if ( hasMaterial ) {

						materialIndex = faces[ offset ++ ];
						face.materialIndex = materialIndex;

					}

					// to get face <=> uv index correspondence

					fi = geometry.faces.length;

					if ( hasFaceVertexUv ) {

						for ( i = 0; i < nUvLayers; i ++ ) {

							uvLayer = json.uvs[ i ];

							geometry.faceVertexUvs[ i ][ fi ] = [];

							for ( j = 0; j < 3; j ++ ) {

								uvIndex = faces[ offset ++ ];

								u = uvLayer[ uvIndex * 2 ];
								v = uvLayer[ uvIndex * 2 + 1 ];

								uv = new Vector2( u, v );

								geometry.faceVertexUvs[ i ][ fi ].push( uv );

							}

						}

					}

					if ( hasFaceNormal ) {

						normalIndex = faces[ offset ++ ] * 3;

						face.normal.set(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

					}

					if ( hasFaceVertexNormal ) {

						for ( i = 0; i < 3; i ++ ) {

							normalIndex = faces[ offset ++ ] * 3;

							normal = new Vector3(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							face.vertexNormals.push( normal );

						}

					}


					if ( hasFaceColor ) {

						colorIndex = faces[ offset ++ ];
						face.color.setHex( colors[ colorIndex ] );

					}


					if ( hasFaceVertexColor ) {

						for ( i = 0; i < 3; i ++ ) {

							colorIndex = faces[ offset ++ ];
							face.vertexColors.push( new Color( colors[ colorIndex ] ) );

						}

					}

					geometry.faces.push( face );

				}

			}

		}

		function parseSkin( json, geometry ) {

			var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

			if ( json.skinWeights ) {

				for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

					var x = json.skinWeights[ i ];
					var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
					var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
					var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

					geometry.skinWeights.push( new Vector4( x, y, z, w ) );

				}

			}

			if ( json.skinIndices ) {

				for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

					var a = json.skinIndices[ i ];
					var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
					var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
					var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

					geometry.skinIndices.push( new Vector4( a, b, c, d ) );

				}

			}

			geometry.bones = json.bones;

			if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

				console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
					geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

			}

		}

		function parseMorphing( json, geometry ) {

			var scale = json.scale;

			if ( json.morphTargets !== undefined ) {

				for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

					geometry.morphTargets[ i ] = {};
					geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
					geometry.morphTargets[ i ].vertices = [];

					var dstVertices = geometry.morphTargets[ i ].vertices;
					var srcVertices = json.morphTargets[ i ].vertices;

					for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

						var vertex = new Vector3();
						vertex.x = srcVertices[ v ] * scale;
						vertex.y = srcVertices[ v + 1 ] * scale;
						vertex.z = srcVertices[ v + 2 ] * scale;

						dstVertices.push( vertex );

					}

				}

			}

			if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

				console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

				var faces = geometry.faces;
				var morphColors = json.morphColors[ 0 ].colors;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					faces[ i ].color.fromArray( morphColors, i * 3 );

				}

			}

		}

		function parseAnimations( json, geometry ) {

			var outputAnimations = [];

			// parse old style Bone/Hierarchy animations
			var animations = [];

			if ( json.animation !== undefined ) {

				animations.push( json.animation );

			}

			if ( json.animations !== undefined ) {

				if ( json.animations.length ) {

					animations = animations.concat( json.animations );

				} else {

					animations.push( json.animations );

				}

			}

			for ( var i = 0; i < animations.length; i ++ ) {

				var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
				if ( clip ) { outputAnimations.push( clip ); }

			}

			// parse implicit morph animations
			if ( geometry.morphTargets ) {

				// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
				var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
				outputAnimations = outputAnimations.concat( morphAnimationClips );

			}

			if ( outputAnimations.length > 0 ) { geometry.animations = outputAnimations; }

		}

		return function ( json, texturePath ) {

			if ( json.data !== undefined ) {

				// Geometry 4.0 spec
				json = json.data;

			}

			if ( json.scale !== undefined ) {

				json.scale = 1.0 / json.scale;

			} else {

				json.scale = 1.0;

			}

			var geometry = new Geometry();

			parseModel( json, geometry );
			parseSkin( json, geometry );
			parseMorphing( json, geometry );
			parseAnimations( json, geometry );

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ObjectLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	this.texturePath = '';

}

Object.assign( ObjectLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		if ( this.texturePath === '' ) {

			this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

		}

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			var json = null;

			try {

				json = JSON.parse( text );

			} catch ( error ) {

				if ( onError !== undefined ) { onError( error ); }

				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

				return;

			}

			var metadata = json.metadata;

			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

				console.error( 'THREE.ObjectLoader: Can\'t load ' + url + '. Use THREE.JSONLoader instead.' );
				return;

			}

			scope.parse( json, onLoad );

		}, onProgress, onError );

	},

	setTexturePath: function ( value ) {

		this.texturePath = value;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json, onLoad ) {

		var geometries = this.parseGeometries( json.geometries );

		var images = this.parseImages( json.images, function () {

			if ( onLoad !== undefined ) { onLoad( object ); }

		} );

		var textures = this.parseTextures( json.textures, images );
		var materials = this.parseMaterials( json.materials, textures );

		var object = this.parseObject( json.object, geometries, materials );

		if ( json.animations ) {

			object.animations = this.parseAnimations( json.animations );

		}

		if ( json.images === undefined || json.images.length === 0 ) {

			if ( onLoad !== undefined ) { onLoad( object ); }

		}

		return object;

	},

	parseGeometries: function ( json ) {
		var this$1 = this;


		var geometries = {};

		if ( json !== undefined ) {

			var geometryLoader = new JSONLoader();
			var bufferGeometryLoader = new BufferGeometryLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var geometry;
				var data = json[ i ];

				switch ( data.type ) {

					case 'PlaneGeometry':
					case 'PlaneBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.width,
							data.height,
							data.widthSegments,
							data.heightSegments
						);

						break;

					case 'BoxGeometry':
					case 'BoxBufferGeometry':
					case 'CubeGeometry': // backwards compatible

						geometry = new Geometries[ data.type ](
							data.width,
							data.height,
							data.depth,
							data.widthSegments,
							data.heightSegments,
							data.depthSegments
						);

						break;

					case 'CircleGeometry':
					case 'CircleBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.segments,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'CylinderGeometry':
					case 'CylinderBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radiusTop,
							data.radiusBottom,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'ConeGeometry':
					case 'ConeBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'SphereGeometry':
					case 'SphereBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.widthSegments,
							data.heightSegments,
							data.phiStart,
							data.phiLength,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'DodecahedronGeometry':
					case 'IcosahedronGeometry':
					case 'OctahedronGeometry':
					case 'TetrahedronGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.detail
						);

						break;

					case 'RingGeometry':
					case 'RingBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.innerRadius,
							data.outerRadius,
							data.thetaSegments,
							data.phiSegments,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'TorusGeometry':
					case 'TorusBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.arc
						);

						break;

					case 'TorusKnotGeometry':
					case 'TorusKnotBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.tube,
							data.tubularSegments,
							data.radialSegments,
							data.p,
							data.q
						);

						break;

					case 'LatheGeometry':
					case 'LatheBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.points,
							data.segments,
							data.phiStart,
							data.phiLength
						);

						break;

					case 'BufferGeometry':

						geometry = bufferGeometryLoader.parse( data );

						break;

					case 'Geometry':

						geometry = geometryLoader.parse( data, this$1.texturePath ).geometry;

						break;

					default:

						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

						continue;

				}

				geometry.uuid = data.uuid;

				if ( data.name !== undefined ) { geometry.name = data.name; }

				geometries[ data.uuid ] = geometry;

			}

		}

		return geometries;

	},

	parseMaterials: function ( json, textures ) {

		var materials = {};

		if ( json !== undefined ) {

			var loader = new MaterialLoader();
			loader.setTextures( textures );

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];

				if ( data.type === 'MultiMaterial' ) {

					// Deprecated

					var array = [];

					for ( var j = 0; j < data.materials.length; j ++ ) {

						array.push( loader.parse( data.materials[ j ] ) );

					}

					materials[ data.uuid ] = array;

				} else {

					materials[ data.uuid ] = loader.parse( data );

				}

			}

		}

		return materials;

	},

	parseAnimations: function ( json ) {

		var animations = [];

		for ( var i = 0; i < json.length; i ++ ) {

			var clip = AnimationClip.parse( json[ i ] );

			animations.push( clip );

		}

		return animations;

	},

	parseImages: function ( json, onLoad ) {

		var scope = this;
		var images = {};

		function loadImage( url ) {

			scope.manager.itemStart( url );

			return loader.load( url, function () {

				scope.manager.itemEnd( url );

			}, undefined, function () {

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			} );

		}

		if ( json !== undefined && json.length > 0 ) {

			var manager = new LoadingManager( onLoad );

			var loader = new ImageLoader( manager );
			loader.setCrossOrigin( this.crossOrigin );

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var image = json[ i ];
				var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

				images[ image.uuid ] = loadImage( path );

			}

		}

		return images;

	},

	parseTextures: function ( json, images ) {

		function parseConstant( value, type ) {

			if ( typeof( value ) === 'number' ) { return value; }

			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

			return type[ value ];

		}

		var textures = {};

		if ( json !== undefined ) {

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];

				if ( data.image === undefined ) {

					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

				}

				if ( images[ data.image ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

				}

				var texture = new Texture( images[ data.image ] );
				texture.needsUpdate = true;

				texture.uuid = data.uuid;

				if ( data.name !== undefined ) { texture.name = data.name; }

				if ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }

				if ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }
				if ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }
				if ( data.wrap !== undefined ) {

					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

				}

				if ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }
				if ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }
				if ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }

				if ( data.flipY !== undefined ) { texture.flipY = data.flipY; }

				textures[ data.uuid ] = texture;

			}

		}

		return textures;

	},

	parseObject: function () {

		var matrix = new Matrix4();

		return function parseObject( data, geometries, materials ) {
			var this$1 = this;


			var object;

			function getGeometry( name ) {

				if ( geometries[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

				}

				return geometries[ name ];

			}

			function getMaterial( name ) {

				if ( name === undefined ) { return undefined; }

				if ( Array.isArray( name ) ) {

					var array = [];

					for ( var i = 0, l = name.length; i < l; i ++ ) {

						var uuid = name[ i ];

						if ( materials[ uuid ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

						}

						array.push( materials[ uuid ] );

					}

					return array;

				}

				if ( materials[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined material', name );

				}

				return materials[ name ];

			}

			switch ( data.type ) {

				case 'Scene':

					object = new Scene();

					if ( data.background !== undefined ) {

						if ( Number.isInteger( data.background ) ) {

							object.background = new Color( data.background );

						}

					}

					if ( data.fog !== undefined ) {

						if ( data.fog.type === 'Fog' ) {

							object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

						} else if ( data.fog.type === 'FogExp2' ) {

							object.fog = new FogExp2( data.fog.color, data.fog.density );

						}

					}

					break;

				case 'PerspectiveCamera':

					object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					if ( data.focus !== undefined ) { object.focus = data.focus; }
					if ( data.zoom !== undefined ) { object.zoom = data.zoom; }
					if ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }
					if ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }
					if ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }

					break;

				case 'OrthographicCamera':

					object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					break;

				case 'AmbientLight':

					object = new AmbientLight( data.color, data.intensity );

					break;

				case 'DirectionalLight':

					object = new DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new PointLight( data.color, data.intensity, data.distance, data.decay );

					break;

				case 'RectAreaLight':

					object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

					break;

				case 'SpotLight':

					object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

					break;

				case 'HemisphereLight':

					object = new HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'SkinnedMesh':

					console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

				case 'Mesh':

					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );

					if ( geometry.bones && geometry.bones.length > 0 ) {

						object = new SkinnedMesh( geometry, material );

					} else {

						object = new Mesh( geometry, material );

					}

					break;

				case 'LOD':

					object = new LOD();

					break;

				case 'Line':

					object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

					break;

				case 'LineLoop':

					object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'LineSegments':

					object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'PointCloud':
				case 'Points':

					object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'Sprite':

					object = new Sprite( getMaterial( data.material ) );

					break;

				case 'Group':

					object = new Group();

					break;

				default:

					object = new Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) { object.name = data.name; }
			if ( data.matrix !== undefined ) {

				matrix.fromArray( data.matrix );
				matrix.decompose( object.position, object.quaternion, object.scale );

			} else {

				if ( data.position !== undefined ) { object.position.fromArray( data.position ); }
				if ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }
				if ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }
				if ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }

			}

			if ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }
			if ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }

			if ( data.shadow ) {

				if ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }
				if ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }
				if ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }
				if ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }

			}

			if ( data.visible !== undefined ) { object.visible = data.visible; }
			if ( data.userData !== undefined ) { object.userData = data.userData; }

			if ( data.children !== undefined ) {

				for ( var child in data.children ) {

					object.add( this$1.parseObject( data.children[ child ], geometries, materials ) );

				}

			}

			if ( data.type === 'LOD' ) {

				var levels = data.levels;

				for ( var l = 0; l < levels.length; l ++ ) {

					var level = levels[ l ];
					var child = object.getObjectByProperty( 'uuid', level.object );

					if ( child !== undefined ) {

						object.addLevel( child, level.distance );

					}

				}

			}

			return object;

		};

	}()

} );

var TEXTURE_MAPPING = {
	UVMapping: UVMapping,
	CubeReflectionMapping: CubeReflectionMapping,
	CubeRefractionMapping: CubeRefractionMapping,
	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
	SphericalReflectionMapping: SphericalReflectionMapping,
	CubeUVReflectionMapping: CubeUVReflectionMapping,
	CubeUVRefractionMapping: CubeUVRefractionMapping
};

var TEXTURE_WRAPPING = {
	RepeatWrapping: RepeatWrapping,
	ClampToEdgeWrapping: ClampToEdgeWrapping,
	MirroredRepeatWrapping: MirroredRepeatWrapping
};

var TEXTURE_FILTER = {
	NearestFilter: NearestFilter,
	NearestMipMapNearestFilter: NearestMipMapNearestFilter,
	NearestMipMapLinearFilter: NearestMipMapLinearFilter,
	LinearFilter: LinearFilter,
	LinearMipMapNearestFilter: LinearMipMapNearestFilter,
	LinearMipMapLinearFilter: LinearMipMapLinearFilter
};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Bezier Curves formulas obtained from
 * http://en.wikipedia.org/wiki/Bézier_curve
 */

function CatmullRom( t, p0, p1, p2, p3 ) {

	var v0 = ( p2 - p0 ) * 0.5;
	var v1 = ( p3 - p1 ) * 0.5;
	var t2 = t * t;
	var t3 = t * t2;
	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

}

//

function QuadraticBezierP0( t, p ) {

	var k = 1 - t;
	return k * k * p;

}

function QuadraticBezierP1( t, p ) {

	return 2 * ( 1 - t ) * t * p;

}

function QuadraticBezierP2( t, p ) {

	return t * t * p;

}

function QuadraticBezier( t, p0, p1, p2 ) {

	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
		QuadraticBezierP2( t, p2 );

}

//

function CubicBezierP0( t, p ) {

	var k = 1 - t;
	return k * k * k * p;

}

function CubicBezierP1( t, p ) {

	var k = 1 - t;
	return 3 * k * k * t * p;

}

function CubicBezierP2( t, p ) {

	return 3 * ( 1 - t ) * t * t * p;

}

function CubicBezierP3( t, p ) {

	return t * t * t * p;

}

function CubicBezier( t, p0, p1, p2, p3 ) {

	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
		CubicBezierP3( t, p3 );

}

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of curve methods:
 * .getPoint(t), getTangent(t)
 * .getPointAt(u), getTangentAt(u)
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

/**************************************************************
 *	Abstract Curve base class
 **************************************************************/

function Curve() {

	this.arcLengthDivisions = 200;

}

Object.assign( Curve.prototype, {

	// Virtual base class method to overwrite and implement in subclasses
	//	- t [0 .. 1]

	getPoint: function () {

		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
		return null;

	},

	// Get point at relative position in curve according to arc length
	// - u [0 .. 1]

	getPointAt: function ( u ) {

		var t = this.getUtoTmapping( u );
		return this.getPoint( t );

	},

	// Get sequence of points using getPoint( t )

	getPoints: function ( divisions ) {
		var this$1 = this;


		if ( divisions === undefined ) { divisions = 5; }

		var points = [];

		for ( var d = 0; d <= divisions; d ++ ) {

			points.push( this$1.getPoint( d / divisions ) );

		}

		return points;

	},

	// Get sequence of points using getPointAt( u )

	getSpacedPoints: function ( divisions ) {
		var this$1 = this;


		if ( divisions === undefined ) { divisions = 5; }

		var points = [];

		for ( var d = 0; d <= divisions; d ++ ) {

			points.push( this$1.getPointAt( d / divisions ) );

		}

		return points;

	},

	// Get total curve arc length

	getLength: function () {

		var lengths = this.getLengths();
		return lengths[ lengths.length - 1 ];

	},

	// Get list of cumulative segment lengths

	getLengths: function ( divisions ) {
		var this$1 = this;


		if ( divisions === undefined ) { divisions = this.arcLengthDivisions; }

		if ( this.cacheArcLengths &&
			( this.cacheArcLengths.length === divisions + 1 ) &&
			! this.needsUpdate ) {

			return this.cacheArcLengths;

		}

		this.needsUpdate = false;

		var cache = [];
		var current, last = this.getPoint( 0 );
		var p, sum = 0;

		cache.push( 0 );

		for ( p = 1; p <= divisions; p ++ ) {

			current = this$1.getPoint( p / divisions );
			sum += current.distanceTo( last );
			cache.push( sum );
			last = current;

		}

		this.cacheArcLengths = cache;

		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

	},

	updateArcLengths: function () {

		this.needsUpdate = true;
		this.getLengths();

	},

	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	getUtoTmapping: function ( u, distance ) {

		var arcLengths = this.getLengths();

		var i = 0, il = arcLengths.length;

		var targetArcLength; // The targeted u distance value to get

		if ( distance ) {

			targetArcLength = distance;

		} else {

			targetArcLength = u * arcLengths[ il - 1 ];

		}

		// binary search for the index with largest value smaller than target u distance

		var low = 0, high = il - 1, comparison;

		while ( low <= high ) {

			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

			comparison = arcLengths[ i ] - targetArcLength;

			if ( comparison < 0 ) {

				low = i + 1;

			} else if ( comparison > 0 ) {

				high = i - 1;

			} else {

				high = i;
				break;

				// DONE

			}

		}

		i = high;

		if ( arcLengths[ i ] === targetArcLength ) {

			return i / ( il - 1 );

		}

		// we could get finer grain at lengths, or use simple interpolation between two points

		var lengthBefore = arcLengths[ i ];
		var lengthAfter = arcLengths[ i + 1 ];

		var segmentLength = lengthAfter - lengthBefore;

		// determine where we are between the 'before' and 'after' points

		var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

		// add that fractional amount to t

		var t = ( i + segmentFraction ) / ( il - 1 );

		return t;

	},

	// Returns a unit vector tangent at t
	// In case any sub curve does not implement its tangent derivation,
	// 2 points a small delta apart will be used to find its gradient
	// which seems to give a reasonable approximation

	getTangent: function ( t ) {

		var delta = 0.0001;
		var t1 = t - delta;
		var t2 = t + delta;

		// Capping in case of danger

		if ( t1 < 0 ) { t1 = 0; }
		if ( t2 > 1 ) { t2 = 1; }

		var pt1 = this.getPoint( t1 );
		var pt2 = this.getPoint( t2 );

		var vec = pt2.clone().sub( pt1 );
		return vec.normalize();

	},

	getTangentAt: function ( u ) {

		var t = this.getUtoTmapping( u );
		return this.getTangent( t );

	},

	computeFrenetFrames: function ( segments, closed ) {
		var this$1 = this;


		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

		var normal = new Vector3();

		var tangents = [];
		var normals = [];
		var binormals = [];

		var vec = new Vector3();
		var mat = new Matrix4();

		var i, u, theta;

		// compute the tangent vectors for each segment on the curve

		for ( i = 0; i <= segments; i ++ ) {

			u = i / segments;

			tangents[ i ] = this$1.getTangentAt( u );
			tangents[ i ].normalize();

		}

		// select an initial normal vector perpendicular to the first tangent vector,
		// and in the direction of the minimum tangent xyz component

		normals[ 0 ] = new Vector3();
		binormals[ 0 ] = new Vector3();
		var min = Number.MAX_VALUE;
		var tx = Math.abs( tangents[ 0 ].x );
		var ty = Math.abs( tangents[ 0 ].y );
		var tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= min ) {

			min = tx;
			normal.set( 1, 0, 0 );

		}

		if ( ty <= min ) {

			min = ty;
			normal.set( 0, 1, 0 );

		}

		if ( tz <= min ) {

			normal.set( 0, 0, 1 );

		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


		// compute the slowly-varying normal and binormal vectors for each segment on the curve

		for ( i = 1; i <= segments; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed === true ) {

			theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
			theta /= segments;

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( i = 1; i <= segments; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

		return {
			tangents: tangents,
			normals: normals,
			binormals: binormals
		};

	}

} );

function LineCurve( v1, v2 ) {

	Curve.call( this );

	this.v1 = v1;
	this.v2 = v2;

}

LineCurve.prototype = Object.create( Curve.prototype );
LineCurve.prototype.constructor = LineCurve;

LineCurve.prototype.isLineCurve = true;

LineCurve.prototype.getPoint = function ( t ) {

	if ( t === 1 ) {

		return this.v2.clone();

	}

	var point = this.v2.clone().sub( this.v1 );
	point.multiplyScalar( t ).add( this.v1 );

	return point;

};

// Line curve is linear, so we can overwrite default getPointAt

LineCurve.prototype.getPointAt = function ( u ) {

	return this.getPoint( u );

};

LineCurve.prototype.getTangent = function ( t ) {

	var tangent = this.v2.clone().sub( this.v1 );

	return tangent.normalize();

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

function CurvePath() {

	Curve.call( this );

	this.curves = [];

	this.autoClose = false; // Automatically closes the path

}

CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

	constructor: CurvePath,

	add: function ( curve ) {

		this.curves.push( curve );

	},

	closePath: function () {

		// Add a line curve if start and end of lines are not connected
		var startPoint = this.curves[ 0 ].getPoint( 0 );
		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

		if ( ! startPoint.equals( endPoint ) ) {

			this.curves.push( new LineCurve( endPoint, startPoint ) );

		}

	},

	// To get accurate point with reference to
	// entire path distance at time t,
	// following has to be done:

	// 1. Length of each sub path have to be known
	// 2. Locate and identify type of curve
	// 3. Get t for the curve
	// 4. Return curve.getPointAt(t')

	getPoint: function ( t ) {
		var this$1 = this;


		var d = t * this.getLength();
		var curveLengths = this.getCurveLengths();
		var i = 0;

		// To think about boundaries points.

		while ( i < curveLengths.length ) {

			if ( curveLengths[ i ] >= d ) {

				var diff = curveLengths[ i ] - d;
				var curve = this$1.curves[ i ];

				var segmentLength = curve.getLength();
				var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

				return curve.getPointAt( u );

			}

			i ++;

		}

		return null;

		// loop where sum != 0, sum > d , sum+1 <d

	},

	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	// getPoint() depends on getLength

	getLength: function () {

		var lens = this.getCurveLengths();
		return lens[ lens.length - 1 ];

	},

	// cacheLengths must be recalculated.
	updateArcLengths: function () {

		this.needsUpdate = true;
		this.cacheLengths = null;
		this.getCurveLengths();

	},

	// Compute lengths and cache them
	// We cannot overwrite getLengths() because UtoT mapping uses it.

	getCurveLengths: function () {
		var this$1 = this;


		// We use cache values if curves and cache array are same length

		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

			return this.cacheLengths;

		}

		// Get length of sub-curve
		// Push sums into cached array

		var lengths = [], sums = 0;

		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

			sums += this$1.curves[ i ].getLength();
			lengths.push( sums );

		}

		this.cacheLengths = lengths;

		return lengths;

	},

	getSpacedPoints: function ( divisions ) {
		var this$1 = this;


		if ( divisions === undefined ) { divisions = 40; }

		var points = [];

		for ( var i = 0; i <= divisions; i ++ ) {

			points.push( this$1.getPoint( i / divisions ) );

		}

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	},

	getPoints: function ( divisions ) {

		divisions = divisions || 12;

		var points = [], last;

		for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

			var curve = curves[ i ];
			var resolution = (curve && curve.isEllipseCurve) ? divisions * 2
				: (curve && curve.isLineCurve) ? 1
				: (curve && curve.isSplineCurve) ? divisions * curve.points.length
				: divisions;

			var pts = curve.getPoints( resolution );

			for ( var j = 0; j < pts.length; j++ ) {

				var point = pts[ j ];

				if ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates

				points.push( point );
				last = point;

			}

		}

		if ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {

			points.push( points[ 0 ] );

		}

		return points;

	},

	/**************************************************************
	 *	Create Geometries Helpers
	 **************************************************************/

	/// Generate geometry from path points (for Line or Points objects)

	createPointsGeometry: function ( divisions ) {

		var pts = this.getPoints( divisions );
		return this.createGeometry( pts );

	},

	// Generate geometry from equidistant sampling along the path

	createSpacedPointsGeometry: function ( divisions ) {

		var pts = this.getSpacedPoints( divisions );
		return this.createGeometry( pts );

	},

	createGeometry: function ( points ) {

		var geometry = new Geometry();

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

		}

		return geometry;

	}

} );

function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

	Curve.call( this );

	this.aX = aX;
	this.aY = aY;

	this.xRadius = xRadius;
	this.yRadius = yRadius;

	this.aStartAngle = aStartAngle;
	this.aEndAngle = aEndAngle;

	this.aClockwise = aClockwise;

	this.aRotation = aRotation || 0;

}

EllipseCurve.prototype = Object.create( Curve.prototype );
EllipseCurve.prototype.constructor = EllipseCurve;

EllipseCurve.prototype.isEllipseCurve = true;

EllipseCurve.prototype.getPoint = function ( t ) {

	var twoPi = Math.PI * 2;
	var deltaAngle = this.aEndAngle - this.aStartAngle;
	var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

	// ensures that deltaAngle is 0 .. 2 PI
	while ( deltaAngle < 0 ) { deltaAngle += twoPi; }
	while ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }

	if ( deltaAngle < Number.EPSILON ) {

		if ( samePoints ) {

			deltaAngle = 0;

		} else {

			deltaAngle = twoPi;

		}

	}

	if ( this.aClockwise === true && ! samePoints ) {

		if ( deltaAngle === twoPi ) {

			deltaAngle = - twoPi;

		} else {

			deltaAngle = deltaAngle - twoPi;

		}

	}

	var angle = this.aStartAngle + t * deltaAngle;
	var x = this.aX + this.xRadius * Math.cos( angle );
	var y = this.aY + this.yRadius * Math.sin( angle );

	if ( this.aRotation !== 0 ) {

		var cos = Math.cos( this.aRotation );
		var sin = Math.sin( this.aRotation );

		var tx = x - this.aX;
		var ty = y - this.aY;

		// Rotate the point about the center of the ellipse.
		x = tx * cos - ty * sin + this.aX;
		y = tx * sin + ty * cos + this.aY;

	}

	return new Vector2( x, y );

};

function SplineCurve( points /* array of Vector2 */ ) {

	Curve.call( this );

	this.points = ( points === undefined ) ? [] : points;

}

SplineCurve.prototype = Object.create( Curve.prototype );
SplineCurve.prototype.constructor = SplineCurve;

SplineCurve.prototype.isSplineCurve = true;

SplineCurve.prototype.getPoint = function ( t ) {

	var points = this.points;
	var point = ( points.length - 1 ) * t;

	var intPoint = Math.floor( point );
	var weight = point - intPoint;

	var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
	var point1 = points[ intPoint ];
	var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
	var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

	return new Vector2(
		CatmullRom( weight, point0.x, point1.x, point2.x, point3.x ),
		CatmullRom( weight, point0.y, point1.y, point2.y, point3.y )
	);

};

function CubicBezierCurve( v0, v1, v2, v3 ) {

	Curve.call( this );

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;
	this.v3 = v3;

}

CubicBezierCurve.prototype = Object.create( Curve.prototype );
CubicBezierCurve.prototype.constructor = CubicBezierCurve;

CubicBezierCurve.prototype.getPoint = function ( t ) {

	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

	return new Vector2(
		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
		CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
	);

};

function QuadraticBezierCurve( v0, v1, v2 ) {

	Curve.call( this );

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;

}

QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

QuadraticBezierCurve.prototype.getPoint = function ( t ) {

	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

	return new Vector2(
		QuadraticBezier( t, v0.x, v1.x, v2.x ),
		QuadraticBezier( t, v0.y, v1.y, v2.y )
	);

};

var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {

	fromPoints: function ( vectors ) {
		var this$1 = this;


		this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

		for ( var i = 1, l = vectors.length; i < l; i ++ ) {

			this$1.lineTo( vectors[ i ].x, vectors[ i ].y );

		}

	},

	moveTo: function ( x, y ) {

		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

	},

	lineTo: function ( x, y ) {

		var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
		this.curves.push( curve );

		this.currentPoint.set( x, y );

	},

	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

		var curve = new QuadraticBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCPx, aCPy ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

	},

	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		var curve = new CubicBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCP1x, aCP1y ),
			new Vector2( aCP2x, aCP2y ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

	},

	splineThru: function ( pts /*Array of Vector*/ ) {

		var npts = [ this.currentPoint.clone() ].concat( pts );

		var curve = new SplineCurve( npts );
		this.curves.push( curve );

		this.currentPoint.copy( pts[ pts.length - 1 ] );

	},

	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		var x0 = this.currentPoint.x;
		var y0 = this.currentPoint.y;

		this.absarc( aX + x0, aY + y0, aRadius,
			aStartAngle, aEndAngle, aClockwise );

	},

	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	},

	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var x0 = this.currentPoint.x;
		var y0 = this.currentPoint.y;

		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

	},

	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		if ( this.curves.length > 0 ) {

			// if a previous curve is present, attempt to join
			var firstPoint = curve.getPoint( 0 );

			if ( ! firstPoint.equals( this.currentPoint ) ) {

				this.lineTo( firstPoint.x, firstPoint.y );

			}

		}

		this.curves.push( curve );

		var lastPoint = curve.getPoint( 1 );
		this.currentPoint.copy( lastPoint );

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 **/

function Path( points ) {

	CurvePath.call( this );
	this.currentPoint = new Vector2();

	if ( points ) {

		this.fromPoints( points );

	}

}

Path.prototype = PathPrototype;
PathPrototype.constructor = Path;

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/

// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.

function Shape() {

	Path.apply( this, arguments );

	this.holes = [];

}

Shape.prototype = Object.assign( Object.create( PathPrototype ), {

	constructor: Shape,

	getPointsHoles: function ( divisions ) {
		var this$1 = this;


		var holesPts = [];

		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

			holesPts[ i ] = this$1.holes[ i ].getPoints( divisions );

		}

		return holesPts;

	},

	// Get points of shape and holes (keypoints based on segments parameter)

	extractAllPoints: function ( divisions ) {

		return {

			shape: this.getPoints( divisions ),
			holes: this.getPointsHoles( divisions )

		};

	},

	extractPoints: function ( divisions ) {

		return this.extractAllPoints( divisions );

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
 **/

function ShapePath() {

	this.subPaths = [];
	this.currentPath = null;

}

Object.assign( ShapePath.prototype, {

	moveTo: function ( x, y ) {

		this.currentPath = new Path();
		this.subPaths.push( this.currentPath );
		this.currentPath.moveTo( x, y );

	},

	lineTo: function ( x, y ) {

		this.currentPath.lineTo( x, y );

	},

	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

	},

	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

	},

	splineThru: function ( pts ) {

		this.currentPath.splineThru( pts );

	},

	toShapes: function ( isCCW, noHoles ) {

		function toShapesNoHoles( inSubpaths ) {

			var shapes = [];

			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

				var tmpPath = inSubpaths[ i ];

				var tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );

			}

			return shapes;

		}

		function isPointInsidePolygon( inPt, inPolygon ) {

			var polyLen = inPolygon.length;

			// inPt on polygon contour => immediate success    or
			// toggling of inside/outside at every single! intersection point of an edge
			//  with the horizontal line through inPt, left of inPt
			//  not counting lowerY endpoints of edges and whole edges on that line
			var inside = false;
			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

				var edgeLowPt  = inPolygon[ p ];
				var edgeHighPt = inPolygon[ q ];

				var edgeDx = edgeHighPt.x - edgeLowPt.x;
				var edgeDy = edgeHighPt.y - edgeLowPt.y;

				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

					// not parallel
					if ( edgeDy < 0 ) {

						edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

					}
					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		{ continue; }

					if ( inPt.y === edgeLowPt.y ) {

						if ( inPt.x === edgeLowPt.x )		{ return	true; }		// inPt is on contour ?
						// continue;				// no intersection or edgeLowPt => doesn't count !!!

					} else {

						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
						if ( perpEdge === 0 )				{ return	true; }		// inPt is on contour ?
						if ( perpEdge < 0 ) 				{ continue; }
						inside = ! inside;		// true intersection left of inPt

					}

				} else {

					// parallel or collinear
					if ( inPt.y !== edgeLowPt.y ) 		{ continue; }			// parallel
					// edge lies on the same horizontal line as inPt
					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		{ return	true; }	// inPt: Point on contour !
					// continue;

				}

			}

			return	inside;

		}

		var isClockWise = ShapeUtils.isClockWise;

		var subPaths = this.subPaths;
		if ( subPaths.length === 0 ) { return []; }

		if ( noHoles === true )	{ return	toShapesNoHoles( subPaths ); }


		var solid, tmpPath, tmpShape, shapes = [];

		if ( subPaths.length === 1 ) {

			tmpPath = subPaths[ 0 ];
			tmpShape = new Shape();
			tmpShape.curves = tmpPath.curves;
			shapes.push( tmpShape );
			return shapes;

		}

		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
		holesFirst = isCCW ? ! holesFirst : holesFirst;

		// console.log("Holes first", holesFirst);

		var betterShapeHoles = [];
		var newShapes = [];
		var newShapeHoles = [];
		var mainIdx = 0;
		var tmpPoints;

		newShapes[ mainIdx ] = undefined;
		newShapeHoles[ mainIdx ] = [];

		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

			tmpPath = subPaths[ i ];
			tmpPoints = tmpPath.getPoints();
			solid = isClockWise( tmpPoints );
			solid = isCCW ? ! solid : solid;

			if ( solid ) {

				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	{ mainIdx ++; }

				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
				newShapes[ mainIdx ].s.curves = tmpPath.curves;

				if ( holesFirst )	{ mainIdx ++; }
				newShapeHoles[ mainIdx ] = [];

				//console.log('cw', i);

			} else {

				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

				//console.log('ccw', i);

			}

		}

		// only Holes? -> probably all Shapes with wrong orientation
		if ( ! newShapes[ 0 ] )	{ return	toShapesNoHoles( subPaths ); }


		if ( newShapes.length > 1 ) {

			var ambiguous = false;
			var toChange = [];

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				betterShapeHoles[ sIdx ] = [];

			}

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				var sho = newShapeHoles[ sIdx ];

				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

					var ho = sho[ hIdx ];
					var hole_unassigned = true;

					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

							if ( sIdx !== s2Idx )	{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }
							if ( hole_unassigned ) {

								hole_unassigned = false;
								betterShapeHoles[ s2Idx ].push( ho );

							} else {

								ambiguous = true;

							}

						}

					}
					if ( hole_unassigned ) {

						betterShapeHoles[ sIdx ].push( ho );

					}

				}

			}
			// console.log("ambiguous: ", ambiguous);
			if ( toChange.length > 0 ) {

				// console.log("to change: ", toChange);
				if ( ! ambiguous )	{ newShapeHoles = betterShapeHoles; }

			}

		}

		var tmpHoles;

		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

			tmpShape = newShapes[ i ].s;
			shapes.push( tmpShape );
			tmpHoles = newShapeHoles[ i ];

			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

				tmpShape.holes.push( tmpHoles[ j ].h );

			}

		}

		//console.log("shape", shapes);

		return shapes;

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author mrdoob / http://mrdoob.com/
 */

function Font( data ) {

	this.data = data;

}

Object.assign( Font.prototype, {

	isFont: true,

	generateShapes: function ( text, size, divisions ) {

		function createPaths( text ) {

			var chars = String( text ).split( '' );
			var scale = size / data.resolution;
			var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

			var offsetX = 0, offsetY = 0;

			var paths = [];

			for ( var i = 0; i < chars.length; i ++ ) {

				var char = chars[ i ];

				if ( char === '\n' ) {

					offsetX = 0;
					offsetY -= line_height;

				} else {

					var ret = createPath( char, scale, offsetX, offsetY );
					offsetX += ret.offsetX;
					paths.push( ret.path );

				}

			}

			return paths;

		}

		function createPath( c, scale, offsetX, offsetY ) {

			var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

			if ( ! glyph ) { return; }

			var path = new ShapePath();

			var pts = [];
			var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

			if ( glyph.o ) {

				var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

				for ( var i = 0, l = outline.length; i < l; ) {

					var action = outline[ i ++ ];

					switch ( action ) {

						case 'm': // moveTo

							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;

							path.moveTo( x, y );

							break;

						case 'l': // lineTo

							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;

							path.lineTo( x, y );

							break;

						case 'q': // quadraticCurveTo

							cpx  = outline[ i ++ ] * scale + offsetX;
							cpy  = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;

							path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

							laste = pts[ pts.length - 1 ];

							if ( laste ) {

								cpx0 = laste.x;
								cpy0 = laste.y;

								for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

									var t = i2 / divisions;
									QuadraticBezier( t, cpx0, cpx1, cpx );
									QuadraticBezier( t, cpy0, cpy1, cpy );

								}

							}

							break;

						case 'b': // bezierCurveTo

							cpx  = outline[ i ++ ] * scale + offsetX;
							cpy  = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;
							cpx2 = outline[ i ++ ] * scale + offsetX;
							cpy2 = outline[ i ++ ] * scale + offsetY;

							path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

							laste = pts[ pts.length - 1 ];

							if ( laste ) {

								cpx0 = laste.x;
								cpy0 = laste.y;

								for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

									var t = i2 / divisions;
									CubicBezier( t, cpx0, cpx1, cpx2, cpx );
									CubicBezier( t, cpy0, cpy1, cpy2, cpy );

								}

							}

							break;

					}

				}

			}

			return { offsetX: glyph.ha * scale, path: path };

		}

		//

		if ( size === undefined ) { size = 100; }
		if ( divisions === undefined ) { divisions = 4; }

		var data = this.data;

		var paths = createPaths( text );
		var shapes = [];

		for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

		}

		return shapes;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function FontLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( FontLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( this.manager );
		loader.load( url, function ( text ) {

			var json;

			try {

				json = JSON.parse( text );

			} catch ( e ) {

				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
				json = JSON.parse( text.substring( 65, text.length - 2 ) );

			}

			var font = scope.parse( json );

			if ( onLoad ) { onLoad( font ); }

		}, onProgress, onError );

	},

	parse: function ( json ) {

		return new Font( json );

	}

} );

var context;

var AudioContext = {

	getContext: function () {

		if ( context === undefined ) {

			context = new ( window.AudioContext || window.webkitAudioContext )();

		}

		return context;

	},

	setContext: function ( value ) {

		context = value;

	}

};

/**
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

function AudioLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( AudioLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );
		loader.load( url, function ( buffer ) {

			var context = AudioContext.getContext();

			context.decodeAudioData( buffer, function ( audioBuffer ) {

				onLoad( audioBuffer );

			} );

		}, onProgress, onError );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function StereoCamera() {

	this.type = 'StereoCamera';

	this.aspect = 1;

	this.eyeSep = 0.064;

	this.cameraL = new PerspectiveCamera();
	this.cameraL.layers.enable( 1 );
	this.cameraL.matrixAutoUpdate = false;

	this.cameraR = new PerspectiveCamera();
	this.cameraR.layers.enable( 2 );
	this.cameraR.matrixAutoUpdate = false;

}

Object.assign( StereoCamera.prototype, {

	update: ( function () {

		var instance, focus, fov, aspect, near, far, zoom, eyeSep;

		var eyeRight = new Matrix4();
		var eyeLeft = new Matrix4();

		return function update( camera ) {

			var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
												aspect !== camera.aspect * this.aspect || near !== camera.near ||
												far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;

			if ( needsUpdate ) {

				instance = this;
				focus = camera.focus;
				fov = camera.fov;
				aspect = camera.aspect * this.aspect;
				near = camera.near;
				far = camera.far;
				zoom = camera.zoom;

				// Off-axis stereoscopic effect based on
				// http://paulbourke.net/stereographics/stereorender/

				var projectionMatrix = camera.projectionMatrix.clone();
				eyeSep = this.eyeSep / 2;
				var eyeSepOnProjection = eyeSep * near / focus;
				var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
				var xmin, xmax;

				// translate xOffset

				eyeLeft.elements[ 12 ] = - eyeSep;
				eyeRight.elements[ 12 ] = eyeSep;

				// for left eye

				xmin = - ymax * aspect + eyeSepOnProjection;
				xmax = ymax * aspect + eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraL.projectionMatrix.copy( projectionMatrix );

				// for right eye

				xmin = - ymax * aspect - eyeSepOnProjection;
				xmax = ymax * aspect - eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraR.projectionMatrix.copy( projectionMatrix );

			}

			this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
			this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AudioListener() {

	Object3D.call( this );

	this.type = 'AudioListener';

	this.context = AudioContext.getContext();

	this.gain = this.context.createGain();
	this.gain.connect( this.context.destination );

	this.filter = null;

}

AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: AudioListener,

	getInput: function () {

		return this.gain;

	},

	removeFilter: function ( ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );
			this.gain.connect( this.context.destination );
			this.filter = null;

		}

	},

	getFilter: function () {

		return this.filter;

	},

	setFilter: function ( value ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );

		} else {

			this.gain.disconnect( this.context.destination );

		}

		this.filter = value;
		this.gain.connect( this.filter );
		this.filter.connect( this.context.destination );

	},

	getMasterVolume: function () {

		return this.gain.gain.value;

	},

	setMasterVolume: function ( value ) {

		this.gain.gain.value = value;

	},

	updateMatrixWorld: ( function () {

		var position = new Vector3();
		var quaternion = new Quaternion();
		var scale = new Vector3();

		var orientation = new Vector3();

		return function updateMatrixWorld( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			var listener = this.context.listener;
			var up = this.up;

			this.matrixWorld.decompose( position, quaternion, scale );

			orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

			if ( listener.positionX ) {

				listener.positionX.setValueAtTime( position.x, this.context.currentTime );
				listener.positionY.setValueAtTime( position.y, this.context.currentTime );
				listener.positionZ.setValueAtTime( position.z, this.context.currentTime );
				listener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );
				listener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );
				listener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );
				listener.upX.setValueAtTime( up.x, this.context.currentTime );
				listener.upY.setValueAtTime( up.y, this.context.currentTime );
				listener.upZ.setValueAtTime( up.z, this.context.currentTime );

			} else {

				listener.setPosition( position.x, position.y, position.z );
				listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

			}

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

function Audio( listener ) {

	Object3D.call( this );

	this.type = 'Audio';

	this.context = listener.context;

	this.gain = this.context.createGain();
	this.gain.connect( listener.getInput() );

	this.autoplay = false;

	this.buffer = null;
	this.loop = false;
	this.startTime = 0;
	this.playbackRate = 1;
	this.isPlaying = false;
	this.hasPlaybackControl = true;
	this.sourceType = 'empty';

	this.filters = [];

}

Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Audio,

	getOutput: function () {

		return this.gain;

	},

	setNodeSource: function ( audioNode ) {

		this.hasPlaybackControl = false;
		this.sourceType = 'audioNode';
		this.source = audioNode;
		this.connect();

		return this;

	},

	setBuffer: function ( audioBuffer ) {

		this.buffer = audioBuffer;
		this.sourceType = 'buffer';

		if ( this.autoplay ) { this.play(); }

		return this;

	},

	play: function () {

		if ( this.isPlaying === true ) {

			console.warn( 'THREE.Audio: Audio is already playing.' );
			return;

		}

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		var source = this.context.createBufferSource();

		source.buffer = this.buffer;
		source.loop = this.loop;
		source.onended = this.onEnded.bind( this );
		source.playbackRate.setValueAtTime( this.playbackRate, this.startTime );
		source.start( 0, this.startTime );

		this.isPlaying = true;

		this.source = source;

		return this.connect();

	},

	pause: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.startTime = this.context.currentTime;
		this.isPlaying = false;

		return this;

	},

	stop: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.startTime = 0;
		this.isPlaying = false;

		return this;

	},

	connect: function () {
		var this$1 = this;


		if ( this.filters.length > 0 ) {

			this.source.connect( this.filters[ 0 ] );

			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

				this$1.filters[ i - 1 ].connect( this$1.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

		} else {

			this.source.connect( this.getOutput() );

		}

		return this;

	},

	disconnect: function () {
		var this$1 = this;


		if ( this.filters.length > 0 ) {

			this.source.disconnect( this.filters[ 0 ] );

			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

				this$1.filters[ i - 1 ].disconnect( this$1.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

		} else {

			this.source.disconnect( this.getOutput() );

		}

		return this;

	},

	getFilters: function () {

		return this.filters;

	},

	setFilters: function ( value ) {

		if ( ! value ) { value = []; }

		if ( this.isPlaying === true ) {

			this.disconnect();
			this.filters = value;
			this.connect();

		} else {

			this.filters = value;

		}

		return this;

	},

	getFilter: function () {

		return this.getFilters()[ 0 ];

	},

	setFilter: function ( filter ) {

		return this.setFilters( filter ? [ filter ] : [] );

	},

	setPlaybackRate: function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.playbackRate = value;

		if ( this.isPlaying === true ) {

			this.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );

		}

		return this;

	},

	getPlaybackRate: function () {

		return this.playbackRate;

	},

	onEnded: function () {

		this.isPlaying = false;

	},

	getLoop: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return false;

		}

		return this.loop;

	},

	setLoop: function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.loop = value;

		if ( this.isPlaying === true ) {

			this.source.loop = this.loop;

		}

		return this;

	},

	getVolume: function () {

		return this.gain.gain.value;

	},

	setVolume: function ( value ) {

		this.gain.gain.value = value;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function PositionalAudio( listener ) {

	Audio.call( this, listener );

	this.panner = this.context.createPanner();
	this.panner.connect( this.gain );

}

PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

	constructor: PositionalAudio,

	getOutput: function () {

		return this.panner;

	},

	getRefDistance: function () {

		return this.panner.refDistance;

	},

	setRefDistance: function ( value ) {

		this.panner.refDistance = value;

	},

	getRolloffFactor: function () {

		return this.panner.rolloffFactor;

	},

	setRolloffFactor: function ( value ) {

		this.panner.rolloffFactor = value;

	},

	getDistanceModel: function () {

		return this.panner.distanceModel;

	},

	setDistanceModel: function ( value ) {

		this.panner.distanceModel = value;

	},

	getMaxDistance: function () {

		return this.panner.maxDistance;

	},

	setMaxDistance: function ( value ) {

		this.panner.maxDistance = value;

	},

	updateMatrixWorld: ( function () {

		var position = new Vector3();

		return function updateMatrixWorld( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			position.setFromMatrixPosition( this.matrixWorld );

			this.panner.setPosition( position.x, position.y, position.z );

		};

	} )()


} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AudioAnalyser( audio, fftSize ) {

	this.analyser = audio.context.createAnalyser();
	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

	this.data = new Uint8Array( this.analyser.frequencyBinCount );

	audio.getOutput().connect( this.analyser );

}

Object.assign( AudioAnalyser.prototype, {

	getFrequencyData: function () {

		this.analyser.getByteFrequencyData( this.data );

		return this.data;

	},

	getAverageFrequency: function () {

		var value = 0, data = this.getFrequencyData();

		for ( var i = 0; i < data.length; i ++ ) {

			value += data[ i ];

		}

		return value / data.length;

	}

} );

/**
 *
 * Buffered scene graph property that allows weighted accumulation.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function PropertyMixer( binding, typeName, valueSize ) {

	this.binding = binding;
	this.valueSize = valueSize;

	var bufferType = Float64Array,
		mixFunction;

	switch ( typeName ) {

		case 'quaternion':
			mixFunction = this._slerp;
			break;

		case 'string':
		case 'bool':
			bufferType = Array;
			mixFunction = this._select;
			break;

		default:
			mixFunction = this._lerp;

	}

	this.buffer = new bufferType( valueSize * 4 );
	// layout: [ incoming | accu0 | accu1 | orig ]
	//
	// interpolators can use .buffer as their .result
	// the data then goes to 'incoming'
	//
	// 'accu0' and 'accu1' are used frame-interleaved for
	// the cumulative result and are compared to detect
	// changes
	//
	// 'orig' stores the original state of the property

	this._mixBufferRegion = mixFunction;

	this.cumulativeWeight = 0;

	this.useCount = 0;
	this.referenceCount = 0;

}

Object.assign( PropertyMixer.prototype, {

	// accumulate data in the 'incoming' region into 'accu<i>'
	accumulate: function ( accuIndex, weight ) {

		// note: happily accumulating nothing when weight = 0, the caller knows
		// the weight and shouldn't have made the call in the first place

		var buffer = this.buffer,
			stride = this.valueSize,
			offset = accuIndex * stride + stride,

			currentWeight = this.cumulativeWeight;

		if ( currentWeight === 0 ) {

			// accuN := incoming * weight

			for ( var i = 0; i !== stride; ++ i ) {

				buffer[ offset + i ] = buffer[ i ];

			}

			currentWeight = weight;

		} else {

			// accuN := accuN + incoming * weight

			currentWeight += weight;
			var mix = weight / currentWeight;
			this._mixBufferRegion( buffer, offset, 0, mix, stride );

		}

		this.cumulativeWeight = currentWeight;

	},

	// apply the state of 'accu<i>' to the binding when accus differ
	apply: function ( accuIndex ) {

		var stride = this.valueSize,
			buffer = this.buffer,
			offset = accuIndex * stride + stride,

			weight = this.cumulativeWeight,

			binding = this.binding;

		this.cumulativeWeight = 0;

		if ( weight < 1 ) {

			// accuN := accuN + original * ( 1 - cumulativeWeight )

			var originalValueOffset = stride * 3;

			this._mixBufferRegion(
				buffer, offset, originalValueOffset, 1 - weight, stride );

		}

		for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

			if ( buffer[ i ] !== buffer[ i + stride ] ) {

				// value has changed -> update scene graph

				binding.setValue( buffer, offset );
				break;

			}

		}

	},

	// remember the state of the bound property and copy it to both accus
	saveOriginalState: function () {

		var binding = this.binding;

		var buffer = this.buffer,
			stride = this.valueSize,

			originalValueOffset = stride * 3;

		binding.getValue( buffer, originalValueOffset );

		// accu[0..1] := orig -- initially detect changes against the original
		for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

		}

		this.cumulativeWeight = 0;

	},

	// apply the state previously taken via 'saveOriginalState' to the binding
	restoreOriginalState: function () {

		var originalValueOffset = this.valueSize * 3;
		this.binding.setValue( this.buffer, originalValueOffset );

	},


	// mix functions

	_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

		if ( t >= 0.5 ) {

			for ( var i = 0; i !== stride; ++ i ) {

				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

			}

		}

	},

	_slerp: function ( buffer, dstOffset, srcOffset, t ) {

		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

	},

	_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

		var s = 1 - t;

		for ( var i = 0; i !== stride; ++ i ) {

			var j = dstOffset + i;

			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

		}

	}

} );

/**
 *
 * A reference to a real property in the scene graph.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function Composite( targetGroup, path, optionalParsedPath ) {

	var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

	this._targetGroup = targetGroup;
	this._bindings = targetGroup.subscribe_( path, parsedPath );

}

Object.assign( Composite.prototype, {

	getValue: function ( array, offset ) {

		this.bind(); // bind all binding

		var firstValidIndex = this._targetGroup.nCachedObjects_,
			binding = this._bindings[ firstValidIndex ];

		// and only call .getValue on the first
		if ( binding !== undefined ) { binding.getValue( array, offset ); }

	},

	setValue: function ( array, offset ) {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].setValue( array, offset );

		}

	},

	bind: function () {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].bind();

		}

	},

	unbind: function () {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].unbind();

		}

	}

} );


function PropertyBinding( rootNode, path, parsedPath ) {

	this.path = path;
	this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

	this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

	this.rootNode = rootNode;

}

Object.assign( PropertyBinding, {

	Composite: Composite,

	create: function ( root, path, parsedPath ) {

		if ( ! ( root && root.isAnimationObjectGroup ) ) {

			return new PropertyBinding( root, path, parsedPath );

		} else {

			return new PropertyBinding.Composite( root, path, parsedPath );

		}

	},

	/**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param  {string} name Node name to be sanitized.
	 * @return {string}
	 */
	sanitizeNodeName: function ( name ) {

		return name.replace( /\s/g, '_' ).replace( /[^\w-]/g, '' );

	},

	parseTrackName: function () {

		// Parent directories, delimited by '/' or ':'. Currently unused, but must
		// be matched to parse the rest of the track name.
		var directoryRe = /((?:[\w-]+[\/:])*)/;

		// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
		var nodeRe = /([\w-\.]+)?/;

		// Object on target node, and accessor. Name may contain only word
		// characters. Accessor may contain any character except closing bracket.
		var objectRe = /(?:\.([\w-]+)(?:\[(.+)\])?)?/;

		// Property and accessor. May contain only word characters. Accessor may
		// contain any non-bracket characters.
		var propertyRe = /\.([\w-]+)(?:\[(.+)\])?/;

		var trackRe = new RegExp(''
			+ '^'
			+ directoryRe.source
			+ nodeRe.source
			+ objectRe.source
			+ propertyRe.source
			+ '$'
		);

		var supportedObjectNames = [ 'material', 'materials', 'bones' ];

		return function ( trackName ) {

				var matches = trackRe.exec( trackName );

				if ( ! matches ) {

					throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

				}

				var results = {
					// directoryName: matches[ 1 ], // (tschw) currently unused
					nodeName: matches[ 2 ],
					objectName: matches[ 3 ],
					objectIndex: matches[ 4 ],
					propertyName: matches[ 5 ],     // required
					propertyIndex: matches[ 6 ]
				};

				var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

				if ( lastDot !== undefined && lastDot !== -1 ) {

					var objectName = results.nodeName.substring( lastDot + 1 );

					// Object names must be checked against a whitelist. Otherwise, there
					// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
					// 'bar' could be the objectName, or part of a nodeName (which can
					// include '.' characters).
					if ( supportedObjectNames.indexOf( objectName ) !== -1 ) {

						results.nodeName = results.nodeName.substring( 0, lastDot );
						results.objectName = objectName;

					}

				}

				if ( results.propertyName === null || results.propertyName.length === 0 ) {

					throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

				}

				return results;

			};

	}(),

	findNode: function ( root, nodeName ) {

		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if ( root.skeleton ) {

			var searchSkeleton = function ( skeleton ) {

				for ( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[ i ];

					if ( bone.name === nodeName ) {

						return bone;

					}

				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if ( bone ) {

				return bone;

			}

		}

		// search into node subtree.
		if ( root.children ) {

			var searchNodeSubtree = function ( children ) {

				for ( var i = 0; i < children.length; i ++ ) {

					var childNode = children[ i ];

					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if ( result ) { return result; }

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if ( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	}

} );

Object.assign( PropertyBinding.prototype, { // prototype, continued

	// these are used to "bind" a nonexistent property
	_getValue_unavailable: function () {},
	_setValue_unavailable: function () {},

	BindingType: {
		Direct: 0,
		EntireArray: 1,
		ArrayElement: 2,
		HasFromToArray: 3
	},

	Versioning: {
		None: 0,
		NeedsUpdate: 1,
		MatrixWorldNeedsUpdate: 2
	},

	GetterByBindingType: [

		function getValue_direct( buffer, offset ) {

			buffer[ offset ] = this.node[ this.propertyName ];

		},

		function getValue_array( buffer, offset ) {

			var source = this.resolvedProperty;

			for ( var i = 0, n = source.length; i !== n; ++ i ) {

				buffer[ offset ++ ] = source[ i ];

			}

		},

		function getValue_arrayElement( buffer, offset ) {

			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

		},

		function getValue_toArray( buffer, offset ) {

			this.resolvedProperty.toArray( buffer, offset );

		}

	],

	SetterByBindingTypeAndVersioning: [

		[
			// Direct

			function setValue_direct( buffer, offset ) {

				this.node[ this.propertyName ] = buffer[ offset ];

			},

			function setValue_direct_setNeedsUpdate( buffer, offset ) {

				this.node[ this.propertyName ] = buffer[ offset ];
				this.targetObject.needsUpdate = true;

			},

			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.node[ this.propertyName ] = buffer[ offset ];
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// EntireArray

			function setValue_array( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

			},

			function setValue_array_setNeedsUpdate( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

				this.targetObject.needsUpdate = true;

			},

			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// ArrayElement

			function setValue_arrayElement( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

			},

			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
				this.targetObject.needsUpdate = true;

			},

			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// HasToFromArray

			function setValue_fromArray( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );

			},

			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );
				this.targetObject.needsUpdate = true;

			},

			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		]

	],

	getValue: function getValue_unbound( targetArray, offset ) {

		this.bind();
		this.getValue( targetArray, offset );

		// Note: This class uses a State pattern on a per-method basis:
		// 'bind' sets 'this.getValue' / 'setValue' and shadows the
		// prototype version of these methods with one that represents
		// the bound state. When the property is not found, the methods
		// become no-ops.

	},

	setValue: function getValue_unbound( sourceArray, offset ) {

		this.bind();
		this.setValue( sourceArray, offset );

	},

	// create getter / setter pair for a property in the scene graph
	bind: function () {

		var targetObject = this.node,
			parsedPath = this.parsedPath,

			objectName = parsedPath.objectName,
			propertyName = parsedPath.propertyName,
			propertyIndex = parsedPath.propertyIndex;

		if ( ! targetObject ) {

			targetObject = PropertyBinding.findNode(
					this.rootNode, parsedPath.nodeName ) || this.rootNode;

			this.node = targetObject;

		}

		// set fail state so we can just 'return' on error
		this.getValue = this._getValue_unavailable;
		this.setValue = this._setValue_unavailable;

		// ensure there is a value node
		if ( ! targetObject ) {

			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
			return;

		}

		if ( objectName ) {

			var objectIndex = parsedPath.objectIndex;

			// special cases were we need to reach deeper into the hierarchy to get the face materials....
			switch ( objectName ) {

				case 'materials':

					if ( ! targetObject.material ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
						return;

					}

					if ( ! targetObject.material.materials ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
						return;

					}

					targetObject = targetObject.material.materials;

					break;

				case 'bones':

					if ( ! targetObject.skeleton ) {

						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
						return;

					}

					// potential future optimization: skip this if propertyIndex is already an integer
					// and convert the integer string to a true integer.

					targetObject = targetObject.skeleton.bones;

					// support resolving morphTarget names into indices.
					for ( var i = 0; i < targetObject.length; i ++ ) {

						if ( targetObject[ i ].name === objectIndex ) {

							objectIndex = i;
							break;

						}

					}

					break;

				default:

					if ( targetObject[ objectName ] === undefined ) {

						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
						return;

					}

					targetObject = targetObject[ objectName ];

			}


			if ( objectIndex !== undefined ) {

				if ( targetObject[ objectIndex ] === undefined ) {

					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
					return;

				}

				targetObject = targetObject[ objectIndex ];

			}

		}

		// resolve property
		var nodeProperty = targetObject[ propertyName ];

		if ( nodeProperty === undefined ) {

			var nodeName = parsedPath.nodeName;

			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
				'.' + propertyName + ' but it wasn\'t found.', targetObject );
			return;

		}

		// determine versioning scheme
		var versioning = this.Versioning.None;

		if ( targetObject.needsUpdate !== undefined ) { // material

			versioning = this.Versioning.NeedsUpdate;
			this.targetObject = targetObject;

		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

			versioning = this.Versioning.MatrixWorldNeedsUpdate;
			this.targetObject = targetObject;

		}

		// determine how the property gets bound
		var bindingType = this.BindingType.Direct;

		if ( propertyIndex !== undefined ) {

			// access a sub element of the property array (only primitives are supported right now)

			if ( propertyName === "morphTargetInfluences" ) {

				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

				// support resolving morphTarget names into indices.
				if ( ! targetObject.geometry ) {

					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
					return;

				}

				if ( targetObject.geometry.isBufferGeometry ) {

					if ( ! targetObject.geometry.morphAttributes ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

						if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}


				} else {

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

			}

			bindingType = this.BindingType.ArrayElement;

			this.resolvedProperty = nodeProperty;
			this.propertyIndex = propertyIndex;

		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

			// must use copy for Object3D.Euler/Quaternion

			bindingType = this.BindingType.HasFromToArray;

			this.resolvedProperty = nodeProperty;

		} else if ( Array.isArray( nodeProperty ) ) {

			bindingType = this.BindingType.EntireArray;

			this.resolvedProperty = nodeProperty;

		} else {

			this.propertyName = propertyName;

		}

		// select getter / setter
		this.getValue = this.GetterByBindingType[ bindingType ];
		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

	},

	unbind: function () {

		this.node = null;

		// back to the prototype version of getValue / setValue
		// note: avoiding to mutate the shape of 'this' via 'delete'
		this.getValue = this._getValue_unbound;
		this.setValue = this._setValue_unbound;

	}

} );

//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign( PropertyBinding.prototype, {

	// initial state of these methods that calls 'bind'
	_getValue_unbound: PropertyBinding.prototype.getValue,
	_setValue_unbound: PropertyBinding.prototype.setValue,

} );

/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 * 	-	Add objects you would otherwise pass as 'root' to the
 * 		constructor or the .clipAction method of AnimationMixer.
 *
 * 	-	Instead pass this object as 'root'.
 *
 * 	-	You can also add and remove objects later when the mixer
 * 		is running.
 *
 * Note:
 *
 *  	Objects of this class appear as one object to the mixer,
 *  	so cache control of the individual objects must be done
 *  	on the group.
 *
 * Limitation:
 *
 * 	- 	The animated properties must be compatible among the
 * 		all objects in the group.
 *
 *  -	A single property can either be controlled through a
 *  	target group or directly, but not both.
 *
 * @author tschw
 */

function AnimationObjectGroup( var_args ) {
	var arguments$1 = arguments;


	this.uuid = _Math.generateUUID();

	// cached objects followed by the active ones
	this._objects = Array.prototype.slice.call( arguments );

	this.nCachedObjects_ = 0;			// threshold
	// note: read by PropertyBinding.Composite

	var indices = {};
	this._indicesByUUID = indices;		// for bookkeeping

	for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

		indices[ arguments$1[ i ].uuid ] = i;

	}

	this._paths = [];					// inside: string
	this._parsedPaths = [];				// inside: { we don't care, here }
	this._bindings = []; 				// inside: Array< PropertyBinding >
	this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

	var scope = this;

	this.stats = {

		objects: {
			get total() { return scope._objects.length; },
			get inUse() { return this.total - scope.nCachedObjects_; }
		},

		get bindingsPerObject() { return scope._bindings.length; }

	};

}

Object.assign( AnimationObjectGroup.prototype, {

	isAnimationObjectGroup: true,

	add: function( var_args ) {
		var arguments$1 = arguments;


		var objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			paths = this._paths,
			parsedPaths = this._parsedPaths,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments$1[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ],
				knownObject = undefined;

			if ( index === undefined ) {

				// unknown object -> add it to the ACTIVE region

				index = nObjects ++;
				indicesByUUID[ uuid ] = index;
				objects.push( object );

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					bindings[ j ].push(
							new PropertyBinding(
								object, paths[ j ], parsedPaths[ j ] ) );

				}

			} else if ( index < nCachedObjects ) {

				knownObject = objects[ index ];

				// move existing object to the ACTIVE region

				var firstActiveIndex = -- nCachedObjects,
					lastCachedObject = objects[ firstActiveIndex ];

				indicesByUUID[ lastCachedObject.uuid ] = index;
				objects[ index ] = lastCachedObject;

				indicesByUUID[ uuid ] = firstActiveIndex;
				objects[ firstActiveIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					var bindingsForPath = bindings[ j ],
						lastCached = bindingsForPath[ firstActiveIndex ],
						binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = lastCached;

					if ( binding === undefined ) {

						// since we do not bother to create new bindings
						// for objects that are cached, the binding may
						// or may not exist

						binding = new PropertyBinding(
								object, paths[ j ], parsedPaths[ j ] );

					}

					bindingsForPath[ firstActiveIndex ] = binding;

				}

			} else if ( objects[ index ] !== knownObject ) {

				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
						'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

			} // else the object is already where we want it to be

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	remove: function( var_args ) {
		var arguments$1 = arguments;


		var objects = this._objects,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments$1[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined && index >= nCachedObjects ) {

				// move existing object into the CACHED region

				var lastCachedIndex = nCachedObjects ++,
					firstActiveObject = objects[ lastCachedIndex ];

				indicesByUUID[ firstActiveObject.uuid ] = index;
				objects[ index ] = firstActiveObject;

				indicesByUUID[ uuid ] = lastCachedIndex;
				objects[ lastCachedIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					var bindingsForPath = bindings[ j ],
						firstActive = bindingsForPath[ lastCachedIndex ],
						binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = firstActive;
					bindingsForPath[ lastCachedIndex ] = binding;

				}

			}

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	// remove & forget
	uncache: function( var_args ) {
		var arguments$1 = arguments;


		var objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments$1[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined ) {

				delete indicesByUUID[ uuid ];

				if ( index < nCachedObjects ) {

					// object is cached, shrink the CACHED region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ],
						lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					// last cached object takes this object's place
					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					// last object goes to the activated slot and pop
					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							last = bindingsForPath[ lastIndex ];

						bindingsForPath[ index ] = lastCached;
						bindingsForPath[ firstActiveIndex ] = last;
						bindingsForPath.pop();

					}

				} else {

					// object is active, just swap with the last and pop

					var lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					indicesByUUID[ lastObject.uuid ] = index;
					objects[ index ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ];

						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
						bindingsForPath.pop();

					}

				} // cached or active

			} // if object is known

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	// Internal interface used by befriended PropertyBinding.Composite:

	subscribe_: function ( path, parsedPath ) {

		// returns an array of bindings for the given path that is changed
		// according to the contained objects in the group

		var indicesByPath = this._bindingsIndicesByPath,
			index = indicesByPath[ path ],
			bindings = this._bindings;

		if ( index !== undefined ) { return bindings[ index ]; }

		var paths = this._paths,
			parsedPaths = this._parsedPaths,
			objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			bindingsForPath = new Array( nObjects );

		index = bindings.length;

		indicesByPath[ path ] = index;

		paths.push( path );
		parsedPaths.push( parsedPath );
		bindings.push( bindingsForPath );

		for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

			var object = objects[ i ];
			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

		}

		return bindingsForPath;

	},

	unsubscribe_: function ( path ) {

		// tells the group to forget about a property path and no longer
		// update the array previously obtained with 'subscribe_'

		var indicesByPath = this._bindingsIndicesByPath,
			index = indicesByPath[ path ];

		if ( index !== undefined ) {

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				lastBindingsIndex = bindings.length - 1,
				lastBindings = bindings[ lastBindingsIndex ],
				lastBindingsPath = path[ lastBindingsIndex ];

			indicesByPath[ lastBindingsPath ] = index;

			bindings[ index ] = lastBindings;
			bindings.pop();

			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
			parsedPaths.pop();

			paths[ index ] = paths[ lastBindingsIndex ];
			paths.pop();

		}

	}

} );

/**
 *
 * Action provided by AnimationMixer for scheduling clip playback on specific
 * objects.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 *
 */

function AnimationAction( mixer, clip, localRoot ) {

	this._mixer = mixer;
	this._clip = clip;
	this._localRoot = localRoot || null;

	var tracks = clip.tracks,
		nTracks = tracks.length,
		interpolants = new Array( nTracks );

	var interpolantSettings = {
			endingStart: 	ZeroCurvatureEnding,
			endingEnd:		ZeroCurvatureEnding
	};

	for ( var i = 0; i !== nTracks; ++ i ) {

		var interpolant = tracks[ i ].createInterpolant( null );
		interpolants[ i ] = interpolant;
		interpolant.settings = interpolantSettings;

	}

	this._interpolantSettings = interpolantSettings;

	this._interpolants = interpolants;	// bound by the mixer

	// inside: PropertyMixer (managed by the mixer)
	this._propertyBindings = new Array( nTracks );

	this._cacheIndex = null;			// for the memory manager
	this._byClipCacheIndex = null;		// for the memory manager

	this._timeScaleInterpolant = null;
	this._weightInterpolant = null;

	this.loop = LoopRepeat;
	this._loopCount = -1;

	// global mixer time when the action is to be started
	// it's set back to 'null' upon start of the action
	this._startTime = null;

	// scaled local time of the action
	// gets clamped or wrapped to 0..clip.duration according to loop
	this.time = 0;

	this.timeScale = 1;
	this._effectiveTimeScale = 1;

	this.weight = 1;
	this._effectiveWeight = 1;

	this.repetitions = Infinity; 		// no. of repetitions when looping

	this.paused = false;				// true -> zero effective time scale
	this.enabled = true;				// false -> zero effective weight

	this.clampWhenFinished 	= false;	// keep feeding the last frame?

	this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
	this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

}

Object.assign( AnimationAction.prototype, {

	// State & Scheduling

	play: function() {

		this._mixer._activateAction( this );

		return this;

	},

	stop: function() {

		this._mixer._deactivateAction( this );

		return this.reset();

	},

	reset: function() {

		this.paused = false;
		this.enabled = true;

		this.time = 0;			// restart clip
		this._loopCount = -1;	// forget previous loops
		this._startTime = null;	// forget scheduling

		return this.stopFading().stopWarping();

	},

	isRunning: function() {

		return this.enabled && ! this.paused && this.timeScale !== 0 &&
				this._startTime === null && this._mixer._isActiveAction( this );

	},

	// return true when play has been called
	isScheduled: function() {

		return this._mixer._isActiveAction( this );

	},

	startAt: function( time ) {

		this._startTime = time;

		return this;

	},

	setLoop: function( mode, repetitions ) {

		this.loop = mode;
		this.repetitions = repetitions;

		return this;

	},

	// Weight

	// set the weight stopping any scheduled fading
	// although .enabled = false yields an effective weight of zero, this
	// method does *not* change .enabled, because it would be confusing
	setEffectiveWeight: function( weight ) {

		this.weight = weight;

		// note: same logic as when updated at runtime
		this._effectiveWeight = this.enabled ? weight : 0;

		return this.stopFading();

	},

	// return the weight considering fading and .enabled
	getEffectiveWeight: function() {

		return this._effectiveWeight;

	},

	fadeIn: function( duration ) {

		return this._scheduleFading( duration, 0, 1 );

	},

	fadeOut: function( duration ) {

		return this._scheduleFading( duration, 1, 0 );

	},

	crossFadeFrom: function( fadeOutAction, duration, warp ) {

		fadeOutAction.fadeOut( duration );
		this.fadeIn( duration );

		if( warp ) {

			var fadeInDuration = this._clip.duration,
				fadeOutDuration = fadeOutAction._clip.duration,

				startEndRatio = fadeOutDuration / fadeInDuration,
				endStartRatio = fadeInDuration / fadeOutDuration;

			fadeOutAction.warp( 1.0, startEndRatio, duration );
			this.warp( endStartRatio, 1.0, duration );

		}

		return this;

	},

	crossFadeTo: function( fadeInAction, duration, warp ) {

		return fadeInAction.crossFadeFrom( this, duration, warp );

	},

	stopFading: function() {

		var weightInterpolant = this._weightInterpolant;

		if ( weightInterpolant !== null ) {

			this._weightInterpolant = null;
			this._mixer._takeBackControlInterpolant( weightInterpolant );

		}

		return this;

	},

	// Time Scale Control

	// set the time scale stopping any scheduled warping
	// although .paused = true yields an effective time scale of zero, this
	// method does *not* change .paused, because it would be confusing
	setEffectiveTimeScale: function( timeScale ) {

		this.timeScale = timeScale;
		this._effectiveTimeScale = this.paused ? 0 :timeScale;

		return this.stopWarping();

	},

	// return the time scale considering warping and .paused
	getEffectiveTimeScale: function() {

		return this._effectiveTimeScale;

	},

	setDuration: function( duration ) {

		this.timeScale = this._clip.duration / duration;

		return this.stopWarping();

	},

	syncWith: function( action ) {

		this.time = action.time;
		this.timeScale = action.timeScale;

		return this.stopWarping();

	},

	halt: function( duration ) {

		return this.warp( this._effectiveTimeScale, 0, duration );

	},

	warp: function( startTimeScale, endTimeScale, duration ) {

		var mixer = this._mixer, now = mixer.time,
			interpolant = this._timeScaleInterpolant,

			timeScale = this.timeScale;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._timeScaleInterpolant = interpolant;

		}

		var times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now;
		times[ 1 ] = now + duration;

		values[ 0 ] = startTimeScale / timeScale;
		values[ 1 ] = endTimeScale / timeScale;

		return this;

	},

	stopWarping: function() {

		var timeScaleInterpolant = this._timeScaleInterpolant;

		if ( timeScaleInterpolant !== null ) {

			this._timeScaleInterpolant = null;
			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

		}

		return this;

	},

	// Object Accessors

	getMixer: function() {

		return this._mixer;

	},

	getClip: function() {

		return this._clip;

	},

	getRoot: function() {

		return this._localRoot || this._mixer._root;

	},

	// Interna

	_update: function( time, deltaTime, timeDirection, accuIndex ) {

		// called by the mixer

		if ( ! this.enabled ) {

			// call ._updateWeight() to update ._effectiveWeight

			this._updateWeight( time );
			return;

		}

		var startTime = this._startTime;

		if ( startTime !== null ) {

			// check for scheduled start of action

			var timeRunning = ( time - startTime ) * timeDirection;
			if ( timeRunning < 0 || timeDirection === 0 ) {

				return; // yet to come / don't decide when delta = 0

			}

			// start

			this._startTime = null; // unschedule
			deltaTime = timeDirection * timeRunning;

		}

		// apply time scale and advance time

		deltaTime *= this._updateTimeScale( time );
		var clipTime = this._updateTime( deltaTime );

		// note: _updateTime may disable the action resulting in
		// an effective weight of 0

		var weight = this._updateWeight( time );

		if ( weight > 0 ) {

			var interpolants = this._interpolants;
			var propertyMixers = this._propertyBindings;

			for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

				interpolants[ j ].evaluate( clipTime );
				propertyMixers[ j ].accumulate( accuIndex, weight );

			}

		}

	},

	_updateWeight: function( time ) {

		var weight = 0;

		if ( this.enabled ) {

			weight = this.weight;
			var interpolant = this._weightInterpolant;

			if ( interpolant !== null ) {

				var interpolantValue = interpolant.evaluate( time )[ 0 ];

				weight *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopFading();

					if ( interpolantValue === 0 ) {

						// faded out, disable
						this.enabled = false;

					}

				}

			}

		}

		this._effectiveWeight = weight;
		return weight;

	},

	_updateTimeScale: function( time ) {

		var timeScale = 0;

		if ( ! this.paused ) {

			timeScale = this.timeScale;

			var interpolant = this._timeScaleInterpolant;

			if ( interpolant !== null ) {

				var interpolantValue = interpolant.evaluate( time )[ 0 ];

				timeScale *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopWarping();

					if ( timeScale === 0 ) {

						// motion has halted, pause
						this.paused = true;

					} else {

						// warp done - apply final time scale
						this.timeScale = timeScale;

					}

				}

			}

		}

		this._effectiveTimeScale = timeScale;
		return timeScale;

	},

	_updateTime: function( deltaTime ) {

		var time = this.time + deltaTime;

		if ( deltaTime === 0 ) { return time; }

		var duration = this._clip.duration,

			loop = this.loop,
			loopCount = this._loopCount;

		if ( loop === LoopOnce ) {

			if ( loopCount === -1 ) {
				// just started

				this._loopCount = 0;
				this._setEndings( true, true, false );

			}

			handle_stop: {

				if ( time >= duration ) {

					time = duration;

				} else if ( time < 0 ) {

					time = 0;

				} else { break handle_stop; }

				if ( this.clampWhenFinished ) { this.paused = true; }
				else { this.enabled = false; }

				this._mixer.dispatchEvent( {
					type: 'finished', action: this,
					direction: deltaTime < 0 ? -1 : 1
				} );

			}

		} else { // repetitive Repeat or PingPong

			var pingPong = ( loop === LoopPingPong );

			if ( loopCount === -1 ) {
				// just started

				if ( deltaTime >= 0 ) {

					loopCount = 0;

					this._setEndings(
							true, this.repetitions === 0, pingPong );

				} else {

					// when looping in reverse direction, the initial
					// transition through zero counts as a repetition,
					// so leave loopCount at -1

					this._setEndings(
							this.repetitions === 0, true, pingPong );

				}

			}

			if ( time >= duration || time < 0 ) {
				// wrap around

				var loopDelta = Math.floor( time / duration ); // signed
				time -= duration * loopDelta;

				loopCount += Math.abs( loopDelta );

				var pending = this.repetitions - loopCount;

				if ( pending < 0 ) {
					// have to stop (switch state, clamp time, fire event)

					if ( this.clampWhenFinished ) { this.paused = true; }
					else { this.enabled = false; }

					time = deltaTime > 0 ? duration : 0;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime > 0 ? 1 : -1
					} );

				} else {
					// keep running

					if ( pending === 0 ) {
						// entering the last round

						var atStart = deltaTime < 0;
						this._setEndings( atStart, ! atStart, pingPong );

					} else {

						this._setEndings( false, false, pingPong );

					}

					this._loopCount = loopCount;

					this._mixer.dispatchEvent( {
						type: 'loop', action: this, loopDelta: loopDelta
					} );

				}

			}

			if ( pingPong && ( loopCount & 1 ) === 1 ) {
				// invert time for the "pong round"

				this.time = time;
				return duration - time;

			}

		}

		this.time = time;
		return time;

	},

	_setEndings: function( atStart, atEnd, pingPong ) {

		var settings = this._interpolantSettings;

		if ( pingPong ) {

			settings.endingStart 	= ZeroSlopeEnding;
			settings.endingEnd		= ZeroSlopeEnding;

		} else {

			// assuming for LoopOnce atStart == atEnd == true

			if ( atStart ) {

				settings.endingStart = this.zeroSlopeAtStart ?
						ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingStart = WrapAroundEnding;

			}

			if ( atEnd ) {

				settings.endingEnd = this.zeroSlopeAtEnd ?
						ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingEnd 	 = WrapAroundEnding;

			}

		}

	},

	_scheduleFading: function( duration, weightNow, weightThen ) {

		var mixer = this._mixer, now = mixer.time,
			interpolant = this._weightInterpolant;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._weightInterpolant = interpolant;

		}

		var times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now; 				values[ 0 ] = weightNow;
		times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

		return this;

	}

} );

/**
 *
 * Player for AnimationClips.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function AnimationMixer( root ) {

	this._root = root;
	this._initMemoryManager();
	this._accuIndex = 0;

	this.time = 0;

	this.timeScale = 1.0;

}

Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {

	_bindAction: function ( action, prototypeAction ) {
		var this$1 = this;


		var root = action._localRoot || this._root,
			tracks = action._clip.tracks,
			nTracks = tracks.length,
			bindings = action._propertyBindings,
			interpolants = action._interpolants,
			rootUuid = root.uuid,
			bindingsByRoot = this._bindingsByRootAndName,
			bindingsByName = bindingsByRoot[ rootUuid ];

		if ( bindingsByName === undefined ) {

			bindingsByName = {};
			bindingsByRoot[ rootUuid ] = bindingsByName;

		}

		for ( var i = 0; i !== nTracks; ++ i ) {

			var track = tracks[ i ],
				trackName = track.name,
				binding = bindingsByName[ trackName ];

			if ( binding !== undefined ) {

				bindings[ i ] = binding;

			} else {

				binding = bindings[ i ];

				if ( binding !== undefined ) {

					// existing binding, make sure the cache knows

					if ( binding._cacheIndex === null ) {

						++ binding.referenceCount;
						this$1._addInactiveBinding( binding, rootUuid, trackName );

					}

					continue;

				}

				var path = prototypeAction && prototypeAction.
						_propertyBindings[ i ].binding.parsedPath;

				binding = new PropertyMixer(
					PropertyBinding.create( root, trackName, path ),
					track.ValueTypeName, track.getValueSize() );

				++ binding.referenceCount;
				this$1._addInactiveBinding( binding, rootUuid, trackName );

				bindings[ i ] = binding;

			}

			interpolants[ i ].resultBuffer = binding.buffer;

		}

	},

	_activateAction: function ( action ) {
		var this$1 = this;


		if ( ! this._isActiveAction( action ) ) {

			if ( action._cacheIndex === null ) {

				// this action has been forgotten by the cache, but the user
				// appears to be still using it -> rebind

				var rootUuid = ( action._localRoot || this._root ).uuid,
					clipUuid = action._clip.uuid,
					actionsForClip = this._actionsByClip[ clipUuid ];

				this._bindAction( action,
					actionsForClip && actionsForClip.knownActions[ 0 ] );

				this._addInactiveAction( action, clipUuid, rootUuid );

			}

			var bindings = action._propertyBindings;

			// increment reference counts / sort out state
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( binding.useCount ++ === 0 ) {

					this$1._lendBinding( binding );
					binding.saveOriginalState();

				}

			}

			this._lendAction( action );

		}

	},

	_deactivateAction: function ( action ) {
		var this$1 = this;


		if ( this._isActiveAction( action ) ) {

			var bindings = action._propertyBindings;

			// decrement reference counts / sort out state
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.useCount === 0 ) {

					binding.restoreOriginalState();
					this$1._takeBackBinding( binding );

				}

			}

			this._takeBackAction( action );

		}

	},

	// Memory manager

	_initMemoryManager: function () {

		this._actions = []; // 'nActiveActions' followed by inactive ones
		this._nActiveActions = 0;

		this._actionsByClip = {};
		// inside:
		// {
		// 		knownActions: Array< AnimationAction >	- used as prototypes
		// 		actionByRoot: AnimationAction			- lookup
		// }


		this._bindings = []; // 'nActiveBindings' followed by inactive ones
		this._nActiveBindings = 0;

		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


		this._controlInterpolants = []; // same game as above
		this._nActiveControlInterpolants = 0;

		var scope = this;

		this.stats = {

			actions: {
				get total() { return scope._actions.length; },
				get inUse() { return scope._nActiveActions; }
			},
			bindings: {
				get total() { return scope._bindings.length; },
				get inUse() { return scope._nActiveBindings; }
			},
			controlInterpolants: {
				get total() { return scope._controlInterpolants.length; },
				get inUse() { return scope._nActiveControlInterpolants; }
			}

		};

	},

	// Memory management for AnimationAction objects

	_isActiveAction: function ( action ) {

		var index = action._cacheIndex;
		return index !== null && index < this._nActiveActions;

	},

	_addInactiveAction: function ( action, clipUuid, rootUuid ) {

		var actions = this._actions,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip === undefined ) {

			actionsForClip = {

				knownActions: [ action ],
				actionByRoot: {}

			};

			action._byClipCacheIndex = 0;

			actionsByClip[ clipUuid ] = actionsForClip;

		} else {

			var knownActions = actionsForClip.knownActions;

			action._byClipCacheIndex = knownActions.length;
			knownActions.push( action );

		}

		action._cacheIndex = actions.length;
		actions.push( action );

		actionsForClip.actionByRoot[ rootUuid ] = action;

	},

	_removeInactiveAction: function ( action ) {

		var actions = this._actions,
			lastInactiveAction = actions[ actions.length - 1 ],
			cacheIndex = action._cacheIndex;

		lastInactiveAction._cacheIndex = cacheIndex;
		actions[ cacheIndex ] = lastInactiveAction;
		actions.pop();

		action._cacheIndex = null;


		var clipUuid = action._clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ],
			knownActionsForClip = actionsForClip.knownActions,

			lastKnownAction =
				knownActionsForClip[ knownActionsForClip.length - 1 ],

			byClipCacheIndex = action._byClipCacheIndex;

		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
		knownActionsForClip.pop();

		action._byClipCacheIndex = null;


		var actionByRoot = actionsForClip.actionByRoot,
			rootUuid = ( action._localRoot || this._root ).uuid;

		delete actionByRoot[ rootUuid ];

		if ( knownActionsForClip.length === 0 ) {

			delete actionsByClip[ clipUuid ];

		}

		this._removeInactiveBindingsForAction( action );

	},

	_removeInactiveBindingsForAction: function ( action ) {
		var this$1 = this;


		var bindings = action._propertyBindings;
		for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

			var binding = bindings[ i ];

			if ( -- binding.referenceCount === 0 ) {

				this$1._removeInactiveBinding( binding );

			}

		}

	},

	_lendAction: function ( action ) {

		// [ active actions |  inactive actions  ]
		// [  active actions >| inactive actions ]
		//                 s        a
		//                  <-swap->
		//                 a        s

		var actions = this._actions,
			prevIndex = action._cacheIndex,

			lastActiveIndex = this._nActiveActions ++,

			firstInactiveAction = actions[ lastActiveIndex ];

		action._cacheIndex = lastActiveIndex;
		actions[ lastActiveIndex ] = action;

		firstInactiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = firstInactiveAction;

	},

	_takeBackAction: function ( action ) {

		// [  active actions  | inactive actions ]
		// [ active actions |< inactive actions  ]
		//        a        s
		//         <-swap->
		//        s        a

		var actions = this._actions,
			prevIndex = action._cacheIndex,

			firstInactiveIndex = -- this._nActiveActions,

			lastActiveAction = actions[ firstInactiveIndex ];

		action._cacheIndex = firstInactiveIndex;
		actions[ firstInactiveIndex ] = action;

		lastActiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = lastActiveAction;

	},

	// Memory management for PropertyMixer objects

	_addInactiveBinding: function ( binding, rootUuid, trackName ) {

		var bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ],

			bindings = this._bindings;

		if ( bindingByName === undefined ) {

			bindingByName = {};
			bindingsByRoot[ rootUuid ] = bindingByName;

		}

		bindingByName[ trackName ] = binding;

		binding._cacheIndex = bindings.length;
		bindings.push( binding );

	},

	_removeInactiveBinding: function ( binding ) {

		var bindings = this._bindings,
			propBinding = binding.binding,
			rootUuid = propBinding.rootNode.uuid,
			trackName = propBinding.path,
			bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ],

			lastInactiveBinding = bindings[ bindings.length - 1 ],
			cacheIndex = binding._cacheIndex;

		lastInactiveBinding._cacheIndex = cacheIndex;
		bindings[ cacheIndex ] = lastInactiveBinding;
		bindings.pop();

		delete bindingByName[ trackName ];

		remove_empty_map: {

			for ( var _ in bindingByName ) { break remove_empty_map; }

			delete bindingsByRoot[ rootUuid ];

		}

	},

	_lendBinding: function ( binding ) {

		var bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			lastActiveIndex = this._nActiveBindings ++,

			firstInactiveBinding = bindings[ lastActiveIndex ];

		binding._cacheIndex = lastActiveIndex;
		bindings[ lastActiveIndex ] = binding;

		firstInactiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = firstInactiveBinding;

	},

	_takeBackBinding: function ( binding ) {

		var bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			firstInactiveIndex = -- this._nActiveBindings,

			lastActiveBinding = bindings[ firstInactiveIndex ];

		binding._cacheIndex = firstInactiveIndex;
		bindings[ firstInactiveIndex ] = binding;

		lastActiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = lastActiveBinding;

	},


	// Memory management of Interpolants for weight and time scale

	_lendControlInterpolant: function () {

		var interpolants = this._controlInterpolants,
			lastActiveIndex = this._nActiveControlInterpolants ++,
			interpolant = interpolants[ lastActiveIndex ];

		if ( interpolant === undefined ) {

			interpolant = new LinearInterpolant(
				new Float32Array( 2 ), new Float32Array( 2 ),
				1, this._controlInterpolantsResultBuffer );

			interpolant.__cacheIndex = lastActiveIndex;
			interpolants[ lastActiveIndex ] = interpolant;

		}

		return interpolant;

	},

	_takeBackControlInterpolant: function ( interpolant ) {

		var interpolants = this._controlInterpolants,
			prevIndex = interpolant.__cacheIndex,

			firstInactiveIndex = -- this._nActiveControlInterpolants,

			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

		interpolant.__cacheIndex = firstInactiveIndex;
		interpolants[ firstInactiveIndex ] = interpolant;

		lastActiveInterpolant.__cacheIndex = prevIndex;
		interpolants[ prevIndex ] = lastActiveInterpolant;

	},

	_controlInterpolantsResultBuffer: new Float32Array( 1 ),

	// return an action for a clip optionally using a custom root target
	// object (this method allocates a lot of dynamic memory in case a
	// previously unknown clip/root combination is specified)
	clipAction: function ( clip, optionalRoot ) {

		var root = optionalRoot || this._root,
			rootUuid = root.uuid,

			clipObject = typeof clip === 'string' ?
				AnimationClip.findByName( root, clip ) : clip,

			clipUuid = clipObject !== null ? clipObject.uuid : clip,

			actionsForClip = this._actionsByClip[ clipUuid ],
			prototypeAction = null;

		if ( actionsForClip !== undefined ) {

			var existingAction =
					actionsForClip.actionByRoot[ rootUuid ];

			if ( existingAction !== undefined ) {

				return existingAction;

			}

			// we know the clip, so we don't have to parse all
			// the bindings again but can just copy
			prototypeAction = actionsForClip.knownActions[ 0 ];

			// also, take the clip from the prototype action
			if ( clipObject === null )
				{ clipObject = prototypeAction._clip; }

		}

		// clip must be known when specified via string
		if ( clipObject === null ) { return null; }

		// allocate all resources required to run it
		var newAction = new AnimationAction( this, clipObject, optionalRoot );

		this._bindAction( newAction, prototypeAction );

		// and make the action known to the memory manager
		this._addInactiveAction( newAction, clipUuid, rootUuid );

		return newAction;

	},

	// get an existing action
	existingAction: function ( clip, optionalRoot ) {

		var root = optionalRoot || this._root,
			rootUuid = root.uuid,

			clipObject = typeof clip === 'string' ?
				AnimationClip.findByName( root, clip ) : clip,

			clipUuid = clipObject ? clipObject.uuid : clip,

			actionsForClip = this._actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			return actionsForClip.actionByRoot[ rootUuid ] || null;

		}

		return null;

	},

	// deactivates all previously scheduled actions
	stopAllAction: function () {

		var actions = this._actions,
			nActions = this._nActiveActions,
			bindings = this._bindings,
			nBindings = this._nActiveBindings;

		this._nActiveActions = 0;
		this._nActiveBindings = 0;

		for ( var i = 0; i !== nActions; ++ i ) {

			actions[ i ].reset();

		}

		for ( var i = 0; i !== nBindings; ++ i ) {

			bindings[ i ].useCount = 0;

		}

		return this;

	},

	// advance the time and update apply the animation
	update: function ( deltaTime ) {

		deltaTime *= this.timeScale;

		var actions = this._actions,
			nActions = this._nActiveActions,

			time = this.time += deltaTime,
			timeDirection = Math.sign( deltaTime ),

			accuIndex = this._accuIndex ^= 1;

		// run active actions

		for ( var i = 0; i !== nActions; ++ i ) {

			var action = actions[ i ];

			action._update( time, deltaTime, timeDirection, accuIndex );

		}

		// update scene graph

		var bindings = this._bindings,
			nBindings = this._nActiveBindings;

		for ( var i = 0; i !== nBindings; ++ i ) {

			bindings[ i ].apply( accuIndex );

		}

		return this;

	},

	// return this mixer's root target object
	getRoot: function () {

		return this._root;

	},

	// free all resources specific to a particular clip
	uncacheClip: function ( clip ) {
		var this$1 = this;


		var actions = this._actions,
			clipUuid = clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			// note: just calling _removeInactiveAction would mess up the
			// iteration state and also require updating the state we can
			// just throw away

			var actionsToRemove = actionsForClip.knownActions;

			for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

				var action = actionsToRemove[ i ];

				this$1._deactivateAction( action );

				var cacheIndex = action._cacheIndex,
					lastInactiveAction = actions[ actions.length - 1 ];

				action._cacheIndex = null;
				action._byClipCacheIndex = null;

				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();

				this$1._removeInactiveBindingsForAction( action );

			}

			delete actionsByClip[ clipUuid ];

		}

	},

	// free all resources specific to a particular root target object
	uncacheRoot: function ( root ) {
		var this$1 = this;


		var rootUuid = root.uuid,
			actionsByClip = this._actionsByClip;

		for ( var clipUuid in actionsByClip ) {

			var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
				action = actionByRoot[ rootUuid ];

			if ( action !== undefined ) {

				this$1._deactivateAction( action );
				this$1._removeInactiveAction( action );

			}

		}

		var bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ];

		if ( bindingByName !== undefined ) {

			for ( var trackName in bindingByName ) {

				var binding = bindingByName[ trackName ];
				binding.restoreOriginalState();
				this$1._removeInactiveBinding( binding );

			}

		}

	},

	// remove a targeted clip from the cache
	uncacheAction: function ( clip, optionalRoot ) {

		var action = this.existingAction( clip, optionalRoot );

		if ( action !== null ) {

			this._deactivateAction( action );
			this._removeInactiveAction( action );

		}

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Uniform( value ) {

	if ( typeof value === 'string' ) {

		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
		value = arguments[ 1 ];

	}

	this.value = value;

}

Uniform.prototype.clone = function () {

	return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

};

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedBufferGeometry() {

	BufferGeometry.call( this );

	this.type = 'InstancedBufferGeometry';
	this.maxInstancedCount = undefined;

}

InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

	constructor: InstancedBufferGeometry,

	isInstancedBufferGeometry: true,

	addGroup: function ( start, count, materialIndex ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex

		} );

	},

	copy: function ( source ) {
		var this$1 = this;


		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		var attributes = source.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];
			this$1.addAttribute( name, attribute.clone() );

		}

		var groups = source.groups;

		for ( var i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this$1.addGroup( group.start, group.count, group.materialIndex );

		}

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

	this.uuid = _Math.generateUUID();

	this.data = interleavedBuffer;
	this.itemSize = itemSize;
	this.offset = offset;

	this.normalized = normalized === true;

}

Object.defineProperties( InterleavedBufferAttribute.prototype, {

	count: {

		get: function () {

			return this.data.count;

		}

	},

	array: {

		get: function () {

			return this.data.array;

		}

	}

} );

Object.assign( InterleavedBufferAttribute.prototype, {

	isInterleavedBufferAttribute: true,

	setX: function ( index, x ) {

		this.data.array[ index * this.data.stride + this.offset ] = x;

		return this;

	},

	setY: function ( index, y ) {

		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

		return this;

	},

	setZ: function ( index, z ) {

		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

		return this;

	},

	setW: function ( index, w ) {

		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

		return this;

	},

	getX: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset ];

	},

	getY: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 1 ];

	},

	getZ: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 2 ];

	},

	getW: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 3 ];

	},

	setXY: function ( index, x, y ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;

		return this;

	},

	setXYZ: function ( index, x, y, z ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;

		return this;

	},

	setXYZW: function ( index, x, y, z, w ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;
		this.data.array[ index + 3 ] = w;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBuffer( array, stride ) {

	this.uuid = _Math.generateUUID();

	this.array = array;
	this.stride = stride;
	this.count = array !== undefined ? array.length / stride : 0;

	this.dynamic = false;
	this.updateRange = { offset: 0, count: - 1 };

	this.onUploadCallback = function () {};

	this.version = 0;

}

Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

	set: function ( value ) {

		if ( value === true ) { this.version ++; }

	}

} );

Object.assign( InterleavedBuffer.prototype, {

	isInterleavedBuffer: true,

	setArray: function ( array ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.count = array !== undefined ? array.length / this.stride : 0;
		this.array = array;

	},

	setDynamic: function ( value ) {

		this.dynamic = value;

		return this;

	},

	copy: function ( source ) {

		this.array = new source.array.constructor( source.array );
		this.count = source.count;
		this.stride = source.stride;
		this.dynamic = source.dynamic;

		return this;

	},

	copyAt: function ( index1, attribute, index2 ) {
		var this$1 = this;


		index1 *= this.stride;
		index2 *= attribute.stride;

		for ( var i = 0, l = this.stride; i < l; i ++ ) {

			this$1.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	},

	set: function ( value, offset ) {

		if ( offset === undefined ) { offset = 0; }

		this.array.set( value, offset );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	onUpload: function ( callback ) {

		this.onUploadCallback = callback;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

	InterleavedBuffer.call( this, array, stride );

	this.meshPerAttribute = meshPerAttribute || 1;

}

InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

	constructor: InstancedInterleavedBuffer,

	isInstancedInterleavedBuffer: true,

	copy: function ( source ) {

		InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

	BufferAttribute.call( this, array, itemSize );

	this.meshPerAttribute = meshPerAttribute || 1;

}

InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

	constructor: InstancedBufferAttribute,

	isInstancedBufferAttribute: true,

	copy: function ( source ) {

		BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://clara.io/
 * @author stephomi / http://stephaneginier.com/
 */

function Raycaster( origin, direction, near, far ) {

	this.ray = new Ray( origin, direction );
	// direction is assumed to be normalized (for accurate distance calculations)

	this.near = near || 0;
	this.far = far || Infinity;

	this.params = {
		Mesh: {},
		Line: {},
		LOD: {},
		Points: { threshold: 1 },
		Sprite: {}
	};

	Object.defineProperties( this.params, {
		PointCloud: {
			get: function () {
				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
				return this.Points;
			}
		}
	} );

}

function ascSort( a, b ) {

	return a.distance - b.distance;

}

function intersectObject( object, raycaster, intersects, recursive ) {

	if ( object.visible === false ) { return; }

	object.raycast( raycaster, intersects );

	if ( recursive === true ) {

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			intersectObject( children[ i ], raycaster, intersects, true );

		}

	}

}

Object.assign( Raycaster.prototype, {

	linePrecision: 1,

	set: function ( origin, direction ) {

		// direction is assumed to be normalized (for accurate distance calculations)

		this.ray.set( origin, direction );

	},

	setFromCamera: function ( coords, camera ) {

		if ( ( camera && camera.isPerspectiveCamera ) ) {

			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

		} else if ( ( camera && camera.isOrthographicCamera ) ) {

			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

		} else {

			console.error( 'THREE.Raycaster: Unsupported camera type.' );

		}

	},

	intersectObject: function ( object, recursive ) {

		var intersects = [];

		intersectObject( object, this, intersects, recursive );

		intersects.sort( ascSort );

		return intersects;

	},

	intersectObjects: function ( objects, recursive ) {
		var this$1 = this;


		var intersects = [];

		if ( Array.isArray( objects ) === false ) {

			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
			return intersects;

		}

		for ( var i = 0, l = objects.length; i < l; i ++ ) {

			intersectObject( objects[ i ], this$1, intersects, recursive );

		}

		intersects.sort( ascSort );

		return intersects;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Clock( autoStart ) {

	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

	this.startTime = 0;
	this.oldTime = 0;
	this.elapsedTime = 0;

	this.running = false;

}

Object.assign( Clock.prototype, {

	start: function () {

		this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

		this.oldTime = this.startTime;
		this.elapsedTime = 0;
		this.running = true;

	},

	stop: function () {

		this.getElapsedTime();
		this.running = false;
		this.autoStart = false;

	},

	getElapsedTime: function () {

		this.getDelta();
		return this.elapsedTime;

	},

	getDelta: function () {

		var diff = 0;

		if ( this.autoStart && ! this.running ) {

			this.start();
			return 0;

		}

		if ( this.running ) {

			var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

			diff = ( newTime - this.oldTime ) / 1000;
			this.oldTime = newTime;

			this.elapsedTime += diff;

		}

		return diff;

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The poles (phi) are at the positive and negative y axis.
 * The equator starts at positive z.
 */

function Spherical( radius, phi, theta ) {

	this.radius = ( radius !== undefined ) ? radius : 1.0;
	this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
	this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

	return this;

}

Object.assign( Spherical.prototype, {

	set: function ( radius, phi, theta ) {

		this.radius = radius;
		this.phi = phi;
		this.theta = theta;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( other ) {

		this.radius = other.radius;
		this.phi = other.phi;
		this.theta = other.theta;

		return this;

	},

	// restrict phi to be betwee EPS and PI-EPS
	makeSafe: function() {

		var EPS = 0.000001;
		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

		return this;

	},

	setFromVector3: function( vec3 ) {

		this.radius = vec3.length();

		if ( this.radius === 0 ) {

			this.theta = 0;
			this.phi = 0;

		} else {

			this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
			this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

		}

		return this;

	}

} );

/**
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 *
 */

function Cylindrical( radius, theta, y ) {

	this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
	this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
	this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

	return this;

}

Object.assign( Cylindrical.prototype, {

	set: function ( radius, theta, y ) {

		this.radius = radius;
		this.theta = theta;
		this.y = y;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( other ) {

		this.radius = other.radius;
		this.theta = other.theta;
		this.y = other.y;

		return this;

	},

	setFromVector3: function( vec3 ) {

		this.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );
		this.theta = Math.atan2( vec3.x, vec3.z );
		this.y = vec3.y;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

function VertexNormalsHelper( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xff0000;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	//

	var nNormals = 0;

	var objGeometry = this.object.geometry;

	if ( objGeometry && objGeometry.isGeometry ) {

		nNormals = objGeometry.faces.length * 3;

	} else if ( objGeometry && objGeometry.isBufferGeometry ) {

		nNormals = objGeometry.attributes.normal.count;

	}

	//

	var geometry = new BufferGeometry();

	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

	geometry.addAttribute( 'position', positions );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	//

	this.matrixAutoUpdate = false;

	this.update();

}

VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

VertexNormalsHelper.prototype.update = ( function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var normalMatrix = new Matrix3();

	return function update() {
		var this$1 = this;


		var keys = [ 'a', 'b', 'c' ];

		this.object.updateMatrixWorld( true );

		normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					var vertex = vertices[ face[ keys[ j ] ] ];

					var normal = face.vertexNormals[ j ];

					v1.copy( vertex ).applyMatrix4( matrixWorld );

					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this$1.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			var objPos = objGeometry.attributes.position;

			var objNorm = objGeometry.attributes.normal;

			var idx = 0;

			// for simplicity, ignore index and drawcalls, and render every normal

			for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

				v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

				v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

				v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this$1.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

		}

		position.needsUpdate = true;

	};

}() );

/**
 * @author Sean Griffin / http://twitter.com/sgrif
 * @author Michael Guerrero / http://realitymeltdown.com
 * @author mrdoob / http://mrdoob.com/
 * @author ikerr / http://verold.com
 * @author Mugen87 / https://github.com/Mugen87
 */

function getBoneList( object ) {

	var boneList = [];

	if ( object && object.isBone ) {

		boneList.push( object );

	}

	for ( var i = 0; i < object.children.length; i ++ ) {

		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

	}

	return boneList;

}

function SkeletonHelper( object ) {

	var bones = getBoneList( object );

	var geometry = new BufferGeometry();

	var vertices = [];
	var colors = [];

	var color1 = new Color( 0, 0, 1 );
	var color2 = new Color( 0, 1, 0 );

	for ( var i = 0; i < bones.length; i ++ ) {

		var bone = bones[ i ];

		if ( bone.parent && bone.parent.isBone ) {

			vertices.push( 0, 0, 0 );
			vertices.push( 0, 0, 0 );
			colors.push( color1.r, color1.g, color1.b );
			colors.push( color2.r, color2.g, color2.b );

		}

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

	LineSegments.call( this, geometry, material );

	this.root = object;
	this.bones = bones;

	this.matrix = object.matrixWorld;
	this.matrixAutoUpdate = false;

	this.onBeforeRender();

}

SkeletonHelper.prototype = Object.create( LineSegments.prototype );
SkeletonHelper.prototype.constructor = SkeletonHelper;

SkeletonHelper.prototype.onBeforeRender = function () {

	var vector = new Vector3();

	var boneMatrix = new Matrix4();
	var matrixWorldInv = new Matrix4();

	return function onBeforeRender() {

		var bones = this.bones;

		var geometry = this.geometry;
		var position = geometry.getAttribute( 'position' );

		matrixWorldInv.getInverse( this.root.matrixWorld );

		for ( var i = 0, j = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				vector.setFromMatrixPosition( boneMatrix );
				position.setXYZ( j, vector.x, vector.y, vector.z );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				vector.setFromMatrixPosition( boneMatrix );
				position.setXYZ( j + 1, vector.x, vector.y, vector.z );

				j += 2;

			}

		}

		geometry.getAttribute( 'position' ).needsUpdate = true;

	};

}();

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

function HemisphereLightHelper( light, size ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	var geometry = new OctahedronBufferGeometry( size );
	geometry.rotateY( Math.PI * 0.5 );

	var material = new MeshBasicMaterial( { vertexColors: VertexColors, wireframe: true } );

	var position = geometry.getAttribute( 'position' );
	var colors = new Float32Array( position.count * 3 );

	geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

	this.add( new Mesh( geometry, material ) );

	this.update();

}

HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

HemisphereLightHelper.prototype.dispose = function () {

	this.children[ 0 ].geometry.dispose();
	this.children[ 0 ].material.dispose();

};

HemisphereLightHelper.prototype.update = function () {

	var vector = new Vector3();

	var color1 = new Color();
	var color2 = new Color();

	return function update() {

		var mesh = this.children[ 0 ];

		var colors = mesh.geometry.getAttribute( 'color' );

		color1.copy( this.light.color );
		color2.copy( this.light.groundColor );

		for ( var i = 0, l = colors.count; i < l; i ++ ) {

			var color = ( i < ( l / 2 ) ) ? color1 : color2;

			colors.setXYZ( i, color.r, color.g, color.b );

		}

		mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );

		colors.needsUpdate = true;

	};

}();

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

function FaceNormalsHelper( object, size, hex, linewidth ) {

	// FaceNormalsHelper only supports THREE.Geometry

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	//

	var nNormals = 0;

	var objGeometry = this.object.geometry;

	if ( objGeometry && objGeometry.isGeometry ) {

		nNormals = objGeometry.faces.length;

	} else {

		console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

	}

	//

	var geometry = new BufferGeometry();

	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

	geometry.addAttribute( 'position', positions );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	//

	this.matrixAutoUpdate = false;
	this.update();

}

FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

FaceNormalsHelper.prototype.update = ( function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var normalMatrix = new Matrix3();

	return function update() {
		var this$1 = this;


		this.object.updateMatrixWorld( true );

		normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		var vertices = objGeometry.vertices;

		var faces = objGeometry.faces;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var normal = face.normal;

			v1.copy( vertices[ face.a ] )
				.add( vertices[ face.b ] )
				.add( vertices[ face.c ] )
				.divideScalar( 3 )
				.applyMatrix4( matrixWorld );

			v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this$1.size ).add( v1 );

			position.setXYZ( idx, v1.x, v1.y, v1.z );

			idx = idx + 1;

			position.setXYZ( idx, v2.x, v2.y, v2.z );

			idx = idx + 1;

		}

		position.needsUpdate = true;

	};

}() );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author Mugen87 / https://github.com/Mugen87
 *
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */

function CameraHelper( camera ) {

	var geometry = new BufferGeometry();
	var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

	var vertices = [];
	var colors = [];

	var pointMap = {};

	// colors

	var colorFrustum = new Color( 0xffaa00 );
	var colorCone = new Color( 0xff0000 );
	var colorUp = new Color( 0x00aaff );
	var colorTarget = new Color( 0xffffff );
	var colorCross = new Color( 0x333333 );

	// near

	addLine( "n1", "n2", colorFrustum );
	addLine( "n2", "n4", colorFrustum );
	addLine( "n4", "n3", colorFrustum );
	addLine( "n3", "n1", colorFrustum );

	// far

	addLine( "f1", "f2", colorFrustum );
	addLine( "f2", "f4", colorFrustum );
	addLine( "f4", "f3", colorFrustum );
	addLine( "f3", "f1", colorFrustum );

	// sides

	addLine( "n1", "f1", colorFrustum );
	addLine( "n2", "f2", colorFrustum );
	addLine( "n3", "f3", colorFrustum );
	addLine( "n4", "f4", colorFrustum );

	// cone

	addLine( "p", "n1", colorCone );
	addLine( "p", "n2", colorCone );
	addLine( "p", "n3", colorCone );
	addLine( "p", "n4", colorCone );

	// up

	addLine( "u1", "u2", colorUp );
	addLine( "u2", "u3", colorUp );
	addLine( "u3", "u1", colorUp );

	// target

	addLine( "c", "t", colorTarget );
	addLine( "p", "c", colorCross );

	// cross

	addLine( "cn1", "cn2", colorCross );
	addLine( "cn3", "cn4", colorCross );

	addLine( "cf1", "cf2", colorCross );
	addLine( "cf3", "cf4", colorCross );

	function addLine( a, b, color ) {

		addPoint( a, color );
		addPoint( b, color );

	}

	function addPoint( id, color ) {

		vertices.push( 0, 0, 0 );
		colors.push( color.r, color.g, color.b );

		if ( pointMap[ id ] === undefined ) {

			pointMap[ id ] = [];

		}

		pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	LineSegments.call( this, geometry, material );

	this.camera = camera;
	if ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }

	this.matrix = camera.matrixWorld;
	this.matrixAutoUpdate = false;

	this.pointMap = pointMap;

	this.update();

}

CameraHelper.prototype = Object.create( LineSegments.prototype );
CameraHelper.prototype.constructor = CameraHelper;

CameraHelper.prototype.update = function () {

	var geometry, pointMap;

	var vector = new Vector3();
	var camera = new Camera();

	function setPoint( point, x, y, z ) {

		vector.set( x, y, z ).unproject( camera );

		var points = pointMap[ point ];

		if ( points !== undefined ) {

			var position = geometry.getAttribute( 'position' );

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				position.setXYZ( points[ i ], vector.x, vector.y, vector.z );

			}

		}

	}

	return function update() {

		geometry = this.geometry;
		pointMap = this.pointMap;

		var w = 1, h = 1;

		// we need just camera projection matrix
		// world matrix must be identity

		camera.projectionMatrix.copy( this.camera.projectionMatrix );

		// center / target

		setPoint( "c", 0, 0, - 1 );
		setPoint( "t", 0, 0,  1 );

		// near

		setPoint( "n1", - w, - h, - 1 );
		setPoint( "n2",   w, - h, - 1 );
		setPoint( "n3", - w,   h, - 1 );
		setPoint( "n4",   w,   h, - 1 );

		// far

		setPoint( "f1", - w, - h, 1 );
		setPoint( "f2",   w, - h, 1 );
		setPoint( "f3", - w,   h, 1 );
		setPoint( "f4",   w,   h, 1 );

		// up

		setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
		setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
		setPoint( "u3",         0, h * 2,   - 1 );

		// cross

		setPoint( "cf1", - w,   0, 1 );
		setPoint( "cf2",   w,   0, 1 );
		setPoint( "cf3",   0, - h, 1 );
		setPoint( "cf4",   0,   h, 1 );

		setPoint( "cn1", - w,   0, - 1 );
		setPoint( "cn2",   w,   0, - 1 );
		setPoint( "cn3",   0, - h, - 1 );
		setPoint( "cn4",   0,   h, - 1 );

		geometry.getAttribute( 'position' ).needsUpdate = true;

	};

}();

/**
 * @author zz85 https://github.com/zz85
 *
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */


/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {

	var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

	/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */
	function init( x0, x1, t0, t1 ) {

		c0 = x0;
		c1 = t0;
		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
		c3 = 2 * x0 - 2 * x1 + t0 + t1;

	}

	return {

		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		},

		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			init( x1, x2, t1, t2 );

		},

		calc: function ( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return c0 + c1 * t + c2 * t2 + c3 * t3;

		}

	};

}

//

var tmp = new Vector3();
var px = new CubicPoly();
var py = new CubicPoly();
var pz = new CubicPoly();

function CatmullRomCurve3( points ) {

	Curve.call( this );

	if ( points.length < 2 ) { console.warn( 'THREE.CatmullRomCurve3: Points array needs at least two entries.' ); }

	this.points = points || [];
	this.closed = false;

}

CatmullRomCurve3.prototype = Object.create( Curve.prototype );
CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

CatmullRomCurve3.prototype.getPoint = function ( t ) {

	var points = this.points;
	var l = points.length;

	var point = ( l - ( this.closed ? 0 : 1 ) ) * t;
	var intPoint = Math.floor( point );
	var weight = point - intPoint;

	if ( this.closed ) {

		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

	} else if ( weight === 0 && intPoint === l - 1 ) {

		intPoint = l - 2;
		weight = 1;

	}

	var p0, p1, p2, p3; // 4 points

	if ( this.closed || intPoint > 0 ) {

		p0 = points[ ( intPoint - 1 ) % l ];

	} else {

		// extrapolate first point
		tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
		p0 = tmp;

	}

	p1 = points[ intPoint % l ];
	p2 = points[ ( intPoint + 1 ) % l ];

	if ( this.closed || intPoint + 2 < l ) {

		p3 = points[ ( intPoint + 2 ) % l ];

	} else {

		// extrapolate last point
		tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
		p3 = tmp;

	}

	if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

		// init Centripetal / Chordal Catmull-Rom
		var pow = this.type === 'chordal' ? 0.5 : 0.25;
		var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
		var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
		var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

		// safety check for repeated points
		if ( dt1 < 1e-4 ) { dt1 = 1.0; }
		if ( dt0 < 1e-4 ) { dt0 = dt1; }
		if ( dt2 < 1e-4 ) { dt2 = dt1; }

		px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
		py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
		pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

	} else if ( this.type === 'catmullrom' ) {

		var tension = this.tension !== undefined ? this.tension : 0.5;
		px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
		py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
		pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

	}

	return new Vector3( px.calc( weight ), py.calc( weight ), pz.calc( weight ) );

};

//

Curve.create = function ( construct, getPoint ) {

	console.log( 'THREE.Curve.create() has been deprecated' );

	construct.prototype = Object.create( Curve.prototype );
	construct.prototype.constructor = construct;
	construct.prototype.getPoint = getPoint;

	return construct;

};

//

function Spline( points ) {

	console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

	CatmullRomCurve3.call( this, points );
	this.type = 'catmullrom';

}

Spline.prototype = Object.create( CatmullRomCurve3.prototype );

Object.assign( Spline.prototype, {

	initFromArray: function ( a ) {

		console.error( 'THREE.Spline: .initFromArray() has been removed.' );

	},
	getControlPointsArray: function ( optionalTarget ) {

		console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

	},
	reparametrizeByArcLength: function ( samplingCoef ) {

		console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

	}

} );

SkeletonHelper.prototype.update = function () {

	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

};

//

Object.assign( Box2.prototype, {

	center: function ( optionalTarget ) {

		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	},
	empty: function () {

		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
		return this.isEmpty();

	},
	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	size: function ( optionalTarget ) {

		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
		return this.getSize( optionalTarget );

	}
} );

Object.assign( Box3.prototype, {

	center: function ( optionalTarget ) {

		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	},
	empty: function () {

		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
		return this.isEmpty();

	},
	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	isIntersectionSphere: function ( sphere ) {

		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
		return this.intersectsSphere( sphere );

	},
	size: function ( optionalTarget ) {

		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
		return this.getSize( optionalTarget );

	}
} );

Line3.prototype.center = function ( optionalTarget ) {

	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
	return this.getCenter( optionalTarget );

};

_Math.random16 = function () {

	console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
	return Math.random();

};

Object.assign( Matrix3.prototype, {

	flattenToArrayOffset: function ( array, offset ) {

		console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
		return this.toArray( array, offset );

	},
	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
		return vector.applyMatrix3( this );

	},
	multiplyVector3Array: function ( a ) {

		console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.'  );

	},
	applyToBuffer: function( buffer, offset, length ) {

		console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
		return this.applyToBufferAttribute( buffer );

	},
	applyToVector3Array: function( array, offset, length ) {

		console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

	}

} );

Object.assign( Matrix4.prototype, {

	extractPosition: function ( m ) {

		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
		return this.copyPosition( m );

	},
	flattenToArrayOffset: function ( array, offset ) {

		console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
		return this.toArray( array, offset );

	},
	getPosition: function () {

		var v1;

		return function getPosition() {

			if ( v1 === undefined ) { v1 = new Vector3(); }
			console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
			return v1.setFromMatrixColumn( this, 3 );

		};

	}(),
	setRotationFromQuaternion: function ( q ) {

		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
		return this.makeRotationFromQuaternion( q );

	},
	multiplyToArray: function () {

		console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

	},
	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	multiplyVector4: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	multiplyVector3Array: function ( a ) {

		console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.'  );

	},
	rotateAxis: function ( v ) {

		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
		v.transformDirection( this );

	},
	crossVector: function ( vector ) {

		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	translate: function () {

		console.error( 'THREE.Matrix4: .translate() has been removed.' );

	},
	rotateX: function () {

		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

	},
	rotateY: function () {

		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

	},
	rotateZ: function () {

		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

	},
	rotateByAxis: function () {

		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

	},
	applyToBuffer: function( buffer, offset, length ) {

		console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
		return this.applyToBufferAttribute( buffer );

	},
	applyToVector3Array: function( array, offset, length ) {

		console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

	},
	makeFrustum: function( left, right, bottom, top, near, far ) {

		console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
		return this.makePerspective( left, right, top, bottom, near, far );

	}

} );

Plane.prototype.isIntersectionLine = function ( line ) {

	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
	return this.intersectsLine( line );

};

Quaternion.prototype.multiplyVector3 = function ( vector ) {

	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
	return vector.applyQuaternion( this );

};

Object.assign( Ray.prototype, {

	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	isIntersectionPlane: function ( plane ) {

		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
		return this.intersectsPlane( plane );

	},
	isIntersectionSphere: function ( sphere ) {

		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
		return this.intersectsSphere( sphere );

	}

} );

Object.assign( Shape.prototype, {

	extrude: function ( options ) {

		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
		return new ExtrudeGeometry( this, options );

	},
	makeGeometry: function ( options ) {

		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
		return new ShapeGeometry( this, options );

	}

} );

Object.assign( Vector2.prototype, {

	fromAttribute: function ( attribute, index, offset ) {

		console.error( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	}

} );

Object.assign( Vector3.prototype, {

	setEulerFromRotationMatrix: function () {

		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

	},
	setEulerFromQuaternion: function () {

		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

	},
	getPositionFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
		return this.setFromMatrixPosition( m );

	},
	getScaleFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
		return this.setFromMatrixScale( m );

	},
	getColumnFromMatrix: function ( index, matrix ) {

		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
		return this.setFromMatrixColumn( matrix, index );

	},
	applyProjection: function ( m ) {

		console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
		return this.applyMatrix4( m );

	},
	fromAttribute: function ( attribute, index, offset ) {

		console.error( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	}

} );

Object.assign( Vector4.prototype, {

	fromAttribute: function ( attribute, index, offset ) {

		console.error( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	}

} );

//

Geometry.prototype.computeTangents = function () {

	console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

};

Object.assign( Object3D.prototype, {

	getChildByName: function ( name ) {

		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
		return this.getObjectByName( name );

	},
	renderDepth: function () {

		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

	},
	translate: function ( distance, axis ) {

		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
		return this.translateOnAxis( axis, distance );

	}

} );

Object.defineProperties( Object3D.prototype, {

	eulerOrder: {
		get: function () {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			return this.rotation.order;

		},
		set: function ( value ) {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			this.rotation.order = value;

		}
	},
	useQuaternion: {
		get: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		},
		set: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		}
	}

} );

Object.defineProperties( LOD.prototype, {

	objects: {
		get: function () {

			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
			return this.levels;

		}
	}

} );

Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

	get: function () {

		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

	},
	set: function () {

		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

	}

} );

Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

	get: function () {

		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
		return this.arcLengthDivisions;

	},
	set: function ( value ) {

		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
		this.arcLengthDivisions = value;

	}

} );

//

PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
			"Use .setFocalLength and .filmGauge for a photographic setup." );

	if ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }
	this.setFocalLength( focalLength );

};

//

Object.defineProperties( Light.prototype, {
	onlyShadow: {
		set: function () {

			console.warn( 'THREE.Light: .onlyShadow has been removed.' );

		}
	},
	shadowCameraFov: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
			this.shadow.camera.fov = value;

		}
	},
	shadowCameraLeft: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
			this.shadow.camera.left = value;

		}
	},
	shadowCameraRight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
			this.shadow.camera.right = value;

		}
	},
	shadowCameraTop: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
			this.shadow.camera.top = value;

		}
	},
	shadowCameraBottom: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
			this.shadow.camera.bottom = value;

		}
	},
	shadowCameraNear: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
			this.shadow.camera.near = value;

		}
	},
	shadowCameraFar: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
			this.shadow.camera.far = value;

		}
	},
	shadowCameraVisible: {
		set: function () {

			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

		}
	},
	shadowBias: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
			this.shadow.bias = value;

		}
	},
	shadowDarkness: {
		set: function () {

			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

		}
	},
	shadowMapWidth: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
			this.shadow.mapSize.width = value;

		}
	},
	shadowMapHeight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
			this.shadow.mapSize.height = value;

		}
	}
} );

//

Object.defineProperties( BufferAttribute.prototype, {

	length: {
		get: function () {

			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
			return this.array.length;

		}
	}

} );

Object.assign( BufferGeometry.prototype, {

	addIndex: function ( index ) {

		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
		this.setIndex( index );

	},
	addDrawCall: function ( start, count, indexOffset ) {

		if ( indexOffset !== undefined ) {

			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

		}
		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
		this.addGroup( start, count );

	},
	clearDrawCalls: function () {

		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
		this.clearGroups();

	},
	computeTangents: function () {

		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

	},
	computeOffsets: function () {

		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

	}

} );

Object.defineProperties( BufferGeometry.prototype, {

	drawcalls: {
		get: function () {

			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
			return this.groups;

		}
	},
	offsets: {
		get: function () {

			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
			return this.groups;

		}
	}

} );

//

Object.defineProperties( Uniform.prototype, {

	dynamic: {
		set: function () {

			console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

		}
	},
	onUpdate: {
		value: function () {

			console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
			return this;

		}
	}

} );

//

Object.defineProperties( Material.prototype, {

	wrapAround: {
		get: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		}
	},
	wrapRGB: {
		get: function () {

			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
			return new Color();

		}
	}

} );

Object.defineProperties( MeshPhongMaterial.prototype, {

	metal: {
		get: function () {

			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
			return false;

		},
		set: function () {

			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

		}
	}

} );

Object.defineProperties( ShaderMaterial.prototype, {

	derivatives: {
		get: function () {

			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			return this.extensions.derivatives;

		},
		set: function ( value ) {

			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			this.extensions.derivatives = value;

		}
	}

} );

//

Object.assign( WebGLRenderer.prototype, {

	getCurrentRenderTarget: function () {

		console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
		return this.getRenderTarget();

	},

	supportsFloatTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
		return this.extensions.get( 'OES_texture_float' );

	},
	supportsHalfFloatTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
		return this.extensions.get( 'OES_texture_half_float' );

	},
	supportsStandardDerivatives: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
		return this.extensions.get( 'OES_standard_derivatives' );

	},
	supportsCompressedTextureS3TC: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

	},
	supportsCompressedTexturePVRTC: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

	},
	supportsBlendMinMax: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
		return this.extensions.get( 'EXT_blend_minmax' );

	},
	supportsVertexTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
		return this.capabilities.vertexTextures;

	},
	supportsInstancedArrays: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
		return this.extensions.get( 'ANGLE_instanced_arrays' );

	},
	enableScissorTest: function ( boolean ) {

		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
		this.setScissorTest( boolean );

	},
	initMaterial: function () {

		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

	},
	addPrePlugin: function () {

		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

	},
	addPostPlugin: function () {

		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

	},
	updateShadowMap: function () {

		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

	}

} );

Object.defineProperties( WebGLRenderer.prototype, {

	shadowMapEnabled: {
		get: function () {

			return this.shadowMap.enabled;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
			this.shadowMap.enabled = value;

		}
	},
	shadowMapType: {
		get: function () {

			return this.shadowMap.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
			this.shadowMap.type = value;

		}
	},
	shadowMapCullFace: {
		get: function () {

			return this.shadowMap.cullFace;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
			this.shadowMap.cullFace = value;

		}
	}
} );

Object.defineProperties( WebGLShadowMap.prototype, {

	cullFace: {
		get: function () {

			return this.renderReverseSided ? CullFaceFront : CullFaceBack;

		},
		set: function ( cullFace ) {

			var value = ( cullFace !== CullFaceBack );
			console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
			this.renderReverseSided = value;

		}
	}

} );

//

Object.defineProperties( WebGLRenderTarget.prototype, {

	wrapS: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			return this.texture.wrapS;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			this.texture.wrapS = value;

		}
	},
	wrapT: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			return this.texture.wrapT;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			this.texture.wrapT = value;

		}
	},
	magFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			return this.texture.magFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			this.texture.magFilter = value;

		}
	},
	minFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			return this.texture.minFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			this.texture.minFilter = value;

		}
	},
	anisotropy: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			return this.texture.anisotropy;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			this.texture.anisotropy = value;

		}
	},
	offset: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			return this.texture.offset;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			this.texture.offset = value;

		}
	},
	repeat: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			return this.texture.repeat;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			this.texture.repeat = value;

		}
	},
	format: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			return this.texture.format;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			this.texture.format = value;

		}
	},
	type: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			return this.texture.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			this.texture.type = value;

		}
	},
	generateMipmaps: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			return this.texture.generateMipmaps;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			this.texture.generateMipmaps = value;

		}
	}

} );

//

Audio.prototype.load = function ( file ) {

	console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
	var scope = this;
	var audioLoader = new AudioLoader();
	audioLoader.load( file, function ( buffer ) {

		scope.setBuffer( buffer );

	} );
	return this;

};

AudioAnalyser.prototype.getData = function () {

	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
	return this.getFrequencyData();

};

/**
 * @file Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function getQuery (id) {
  if (typeof window === 'undefined') { return undefined }

  var a = new RegExp(id + '=([^&#=]*)');
  var m = a.exec(window.location.search);

  if (m) {
    return decodeURIComponent(m[1])
  } else {
    return undefined
  }
}

function boolean (value) {
  if (!value) {
    return false
  }

  if (typeof value === 'string') {
    return /^1|true|t|yes|y$/i.test(value)
  }

  return true
}

function defaults (value, defaultValue) {
  return value !== undefined ? value : defaultValue
}

function getProtocol () {
  var protocol = window.location.protocol;
  return protocol.match(/http(s)?:/gi) === null ? 'http:' : protocol
}

function getBrowser () {
  if (typeof window === 'undefined') { return false }

  var ua = window.navigator.userAgent;

  if (/Opera|OPR/.test(ua)) {
    return 'Opera'
  } else if (/Chrome/i.test(ua)) {
    return 'Chrome'
  } else if (/Firefox/i.test(ua)) {
    return 'Firefox'
  } else if (/Mobile(\/.*)? Safari/i.test(ua)) {
    return 'Mobile Safari'
  } else if (/MSIE/i.test(ua)) {
    return 'Internet Explorer'
  } else if (/Safari/i.test(ua)) {
    return 'Safari'
  }

  return false
}

function getAbsolutePath (relativePath) {
  var loc = window.location;
  var pn = loc.pathname;
  var basePath = pn.substring(0, pn.lastIndexOf('/') + 1);

  return loc.origin + basePath + relativePath
}

function download (data, downloadName) {
    // using ideas from https://github.com/eligrey/FileSaver.js/blob/master/FileSaver.js

  if (!data) { return }

  downloadName = downloadName || 'download';

  var isSafari = getBrowser() === 'Safari';
  var isChromeIos = /CriOS\/[\d]+/.test(window.navigator.userAgent);

  var a = document.createElement('a');

  function openUrl (url) {
    var opened = window.open(url, '_blank');
    if (!opened) {
      window.location.href = url;
    }
  }

  function open (str) {
    openUrl(isChromeIos ? str : str.replace(/^data:[^;]*;/, 'data:attachment/file;'));
  }

  if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
        // native saveAs in IE 10+
    navigator.msSaveOrOpenBlob(data, downloadName);
  } else if ((isSafari || isChromeIos) && window.FileReader) {
    if (data instanceof window.Blob) {
            // no downloading of blob urls in Safari
      var reader = new window.FileReader();
      reader.onloadend = function () {
        open(reader.result);
      };
      reader.readAsDataURL(data);
    } else {
      open(data);
    }
  } else {
    if (data instanceof window.Blob) {
      data = window.URL.createObjectURL(data);
    }

    if ('download' in a) {
            // download link available
      a.style.display = 'hidden';
      document.body.appendChild(a);
      a.href = data;
      a.download = downloadName;
      a.target = '_blank';
      a.click();
      document.body.removeChild(a);
    } else {
      openUrl(data);
    }

    if (data instanceof window.Blob) {
      window.URL.revokeObjectURL(data);
    }
  }
}

function getFileInfo (file) {
  var compressedExtList = [ 'gz' ];

  var path, compressed, protocol;

  if ((typeof window !== 'undefined' && file instanceof window.File) ||
        (typeof window !== 'undefined' && file instanceof window.Blob)
    ) {
    path = file.name || '';
  } else {
    path = file;
  }
  var queryIndex = path.lastIndexOf('?');
  path = path.substring(0, queryIndex === -1 ? path.length : queryIndex);

  var name = path.replace(/^.*[\\/]/, '');
  var base = name.substring(0, name.lastIndexOf('.'));

  var nameSplit = name.split('.');
  var ext = nameSplit.length > 1 ? nameSplit.pop().toLowerCase() : '';

  var protocolMatch = path.match(/^(.+):\/\/(.+)$/);
  if (protocolMatch) {
    protocol = protocolMatch[ 1 ].toLowerCase();
    path = protocolMatch[ 2 ];
  }

  var dir = path.substring(0, path.lastIndexOf('/') + 1);

  if (compressedExtList.includes(ext)) {
    compressed = ext;
    var n = path.length - ext.length - 1;
    ext = path.substr(0, n).split('.').pop().toLowerCase();
    var m = base.length - ext.length - 1;
    base = base.substr(0, m);
  } else {
    compressed = false;
  }

  return {
    'path': path,
    'name': name,
    'ext': ext,
    'base': base,
    'dir': dir,
    'compressed': compressed,
    'protocol': protocol,
    'src': file
  }
}

function throttle (func, wait, options) {
    // from http://underscorejs.org/docs/underscore.html

  var context, args, result;
  var timeout = null;
  var previous = 0;

  if (!options) { options = {}; }

  var later = function () {
    previous = options.leading === false ? 0 : Date.now();
    timeout = null;
    result = func.apply(context, args);
    if (!timeout) { context = args = null; }
  };

  return function throttle () {
    var now = Date.now();
    if (!previous && options.leading === false) { previous = now; }
    var remaining = wait - (now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      previous = now;
      result = func.apply(context, args);
      if (!timeout) { context = args = null; }
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }

    return result
  }
}

function lexicographicCompare (elm1, elm2) {
  if (elm1 < elm2) { return -1 }
  if (elm1 > elm2) { return 1 }
  return 0
}

/**
 * Does a binary search to get the index of an element in the input array
 * @function
 * @example
 * var array = [ 1, 2, 3, 4, 5, 6 ];
 * var element = 4;
 * binarySearchIndexOf( array, element );  // returns 3
 *
 * @param {Array} array - sorted array
 * @param {Anything} element - element to search for in the array
 * @param {Function} [compareFunction] - compare function
 * @return {Number} the index of the element or -1 if not in the array
 */
function binarySearchIndexOf (array, element, compareFunction) {
  if ( compareFunction === void 0 ) compareFunction = lexicographicCompare;

  var low = 0;
  var high = array.length - 1;
  while (low <= high) {
    var mid = (low + high) >> 1;
    var cmp = compareFunction(element, array[ mid ]);
    if (cmp > 0) {
      low = mid + 1;
    } else if (cmp < 0) {
      high = mid - 1;
    } else {
      return mid
    }
  }
  return -low - 1
}

function binarySearchForLeftRange (array, leftRange) {
  var high = array.length - 1;
  if (array[ high ] < leftRange) { return -1 }
  var low = 0;
  while (low <= high) {
    var mid = (low + high) >> 1;
    if (array[ mid ] >= leftRange) {
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }
  return high + 1
}

function binarySearchForRightRange (array, rightRange) {
  if (array[ 0 ] > rightRange) { return -1 }
  var low = 0;
  var high = array.length - 1;
  while (low <= high) {
    var mid = (low + high) >> 1;
    if (array[ mid ] > rightRange) {
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }
  return low - 1
}

function rangeInSortedArray (array, min, max) {
  var indexLeft = binarySearchForLeftRange(array, min);
  var indexRight = binarySearchForRightRange(array, max);
  if (indexLeft === -1 || indexRight === -1 || indexLeft > indexRight) {
    return 0
  } else {
    return indexRight - indexLeft + 1
  }
}

function uniqueArray (array) {
  return array.sort().filter(function (value, index, sorted) {
    return (index === 0) || (value !== sorted[ index - 1 ])
  })
}

// String/arraybuffer conversion

function uint8ToString (u8a) {
  var chunkSize = 0x7000;

  if (u8a.length > chunkSize) {
    var c = [];

    for (var i = 0; i < u8a.length; i += chunkSize) {
      c.push(String.fromCharCode.apply(
          null, u8a.subarray(i, i + chunkSize)
        ));
    }

    return c.join('')
  } else {
    return String.fromCharCode.apply(null, u8a)
  }
}

function uint8ToLines (u8a, chunkSize, newline) {
  chunkSize = chunkSize !== undefined ? chunkSize : 1024 * 1024 * 10;
  newline = newline !== undefined ? newline : '\n';

  var partialLine = '';
  var lines = [];

  for (var i = 0; i < u8a.length; i += chunkSize) {
    var str = uint8ToString(u8a.subarray(i, i + chunkSize));
    var idx = str.lastIndexOf(newline);

    if (idx === -1) {
      partialLine += str;
    } else {
      var str2 = partialLine + str.substr(0, idx);
      lines = lines.concat(str2.split(newline));

      if (idx === str.length - newline.length) {
        partialLine = '';
      } else {
        partialLine = str.substr(idx + newline.length);
      }
    }
  }

  if (partialLine !== '') {
    lines.push(partialLine);
  }

  return lines
}

function getTypedArray (arrayType, arraySize) {
  switch (arrayType) {
    case 'int8':
      return new Int8Array(arraySize)
    case 'int16':
      return new Int16Array(arraySize)
    case 'int32':
      return new Int32Array(arraySize)
    case 'uint8':
      return new Uint8Array(arraySize)
    case 'uint16':
      return new Uint16Array(arraySize)
    case 'uint32':
      return new Uint32Array(arraySize)
    case 'float32':
      return new Float32Array(arraySize)
    default:
      throw new Error('arrayType unknown: ' + arrayType)
  }
}

function getUintArray (sizeOrArray, maxUnit) {
  var TypedArray = maxUnit > 65535 ? Uint32Array : Uint16Array;
  return new TypedArray(sizeOrArray)
}

function _ensureClassFromArg (arg, constructor) {
  return arg instanceof constructor ? arg : new constructor(arg)
}

function _ensureClassFromArray (array, constructor) {
  if (array === undefined) {
    array = new constructor();
  } else if (Array.isArray(array)) {
    array = new constructor().fromArray(array);
  }
  return array
}

function ensureVector2 (v) {
  return _ensureClassFromArray(v, Vector2)
}

function ensureVector3 (v) {
  return _ensureClassFromArray(v, Vector3)
}

function ensureMatrix4 (m) {
  return _ensureClassFromArray(m, Matrix4)
}

function ensureQuaternion (q) {
  return _ensureClassFromArray(q, Quaternion)
}

function ensureFloat32Array (a) {
  return _ensureClassFromArg(a, Float32Array)
}

/**
 * @file Registry
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function toLowerCaseString (value) {
  return defaults(value, '').toString().toLowerCase()
}

var Registry = function Registry (name) {
  this.name = name;
  this._dict = {};
};

var prototypeAccessors = { names: {} };

Registry.prototype.add = function add (key, value) {
  this._dict[ toLowerCaseString(key) ] = value;
};

Registry.prototype.get = function get (key) {
  return this._dict[ toLowerCaseString(key) ]
};

prototypeAccessors.names.get = function () {
  return Object.keys(this._dict)
};

Object.defineProperties( Registry.prototype, prototypeAccessors );

/**
 * @file Worker Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function getWorkerDeps (vars) {
  var deps = vars;
  vars.forEach(function (sym) {
    if (sym.__deps) {
      Array.prototype.push.apply(deps, getWorkerDeps(sym.__deps));
    }
  });
  return deps
}

function makeWorkerString (vars) {
  var deps = uniqueArray(getWorkerDeps(vars));
  return deps.map(function (sym) {
    return sym.toString()
  }).join('\n\n\n')
}

function onmessage (e) {
  var name = e.data.__name;
  var postId = e.data.__postId;

  /* global self */
  if (name === undefined) {
    console.error('message __name undefined');
  } else if (self.func === undefined) {
    console.error('worker func undefined', name);
  } else {
    var callback = function (aMessage, transferList) {
      aMessage = aMessage || {};
      if (postId !== undefined) { aMessage.__postId = postId; }

      try {
        self.postMessage(aMessage, transferList);
      } catch (error) {
        console.error('self.postMessage:', error);
        self.postMessage(aMessage);
      }
    };

    self.func(e, callback);
  }
}

function makeWorkerBlob (func, deps) {
  var str = "'use strict';\n\n" + makeWorkerString(deps);
  str += '\n\n\nself.func = ' + func.toString() + ';';
  str += '\n\n\nself.onmessage = ' + onmessage.toString() + ';';
    // console.log( str );
  return new window.Blob([ str ], { type: 'application/javascript' })
}

/**
 * @file Worker Registry
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var WorkerRegistry$1 = function WorkerRegistry () {
  this.activeWorkerCount = 0;

  this._funcDict = {};
  this._depsDict = {};
  this._blobDict = {};
};

WorkerRegistry$1.prototype.add = function add (name, func, deps) {
  this._funcDict[ name ] = func;
  this._depsDict[ name ] = deps;
};

WorkerRegistry$1.prototype.get = function get (name) {
  if (!this._blobDict[ name ]) {
    this._blobDict[ name ] = makeWorkerBlob(
              this._funcDict[ name ], this._depsDict[ name ]
          );
  }
  return this._blobDict[ name ]
};

/**
 * @file Math Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function degToRad (deg) {
  return deg * 0.01745  // deg * Math.PI / 180
}

function radToDeg (rad) {
  return rad * 57.29578  // rad * 180 / Math.PI
}

// http://www.broofa.com/Tools/Math.uuid.htm
var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
var uuid = new Array(36);

function generateUUID () {
  var rnd = 0;
  var r;

  for (var i = 0; i < 36; i++) {
    if (i === 8 || i === 13 || i === 18 || i === 23) {
      uuid[ i ] = '-';
    } else if (i === 14) {
      uuid[ i ] = '4';
    } else {
      if (rnd <= 0x02) { rnd = 0x2000000 + (Math.random() * 0x1000000) | 0; }
      r = rnd & 0xf;
      rnd = rnd >> 4;
      uuid[ i ] = chars[ (i === 19) ? (r & 0x3) | 0x8 : r ];
    }
  }

  return uuid.join('')
}

function countSetBits (i) {
  i = i - ((i >> 1) & 0x55555555);
  i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
  return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24
}

function normalize (value, min, max) {
  return (value - min) / (max - min)
}

function clamp (value, min, max) {
  return Math.max(min, Math.min(max, value))
}

function pclamp (value) {
  return clamp(value, 0, 100)
}

function saturate (value) {
  return clamp(value, 0, 1)
}

function lerp (start, stop, alpha) {
  return start + (stop - start) * alpha
}

function spline (p0, p1, p2, p3, t, tension) {
  var v0 = (p2 - p0) * tension;
  var v1 = (p3 - p1) * tension;
  var t2 = t * t;
  var t3 = t * t2;
  return (2 * p1 - 2 * p2 + v0 + v1) * t3 +
         (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 +
         v0 * t + p1
}

function smoothstep (min, max, x) {
  x = saturate(normalize(x, min, max));
  return x * x * (3 - 2 * x)
}

function almostIdentity (value, start, stop) {
  if (value > start) { return value }
  var a = 2 * stop - start;
  var b = 2 * start - 3 * stop;
  var t = value / start;
  return (a * t + b) * t * t + stop
}

// changed to be usable as an es6 module, ASR

/**
 * @license
 *
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2015, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

  var Color$1;
  var DEG2RAD;
  var LAB_CONSTANTS;
  var PI;
  var PITHIRD;
  var RAD2DEG;
  var TWOPI;
  var _guess_formats;
  var _guess_formats_sorted;
  var _input;
  var _interpolators;
  var abs;
  var atan2;
  var bezier;
  var blend;
  var blend_f;
  var brewer;
  var burn;
  var chroma;
  var clip_rgb;
  var cmyk2rgb;
  var colors;
  var cos;
  var css2rgb;
  var darken;
  var dodge;
  var each;
  var floor;
  var hcg2rgb;
  var hex2rgb;
  var hsi2rgb;
  var hsl2css;
  var hsl2rgb;
  var hsv2rgb;
  var interpolate;
  var interpolate_hsx;
  var interpolate_lab;
  var interpolate_num;
  var interpolate_rgb;
  var lab2lch;
  var lab2rgb;
  var lab_xyz;
  var lch2lab;
  var lch2rgb;
  var lighten;
  var limit;
  var log;
  var luminance_x;
  var m;
  var max;
  var multiply;
  var normal;
  var num2rgb;
  var overlay;
  var pow;
  var rgb2cmyk;
  var rgb2css;
  var rgb2hcg;
  var rgb2hex;
  var rgb2hsi;
  var rgb2hsl;
  var rgb2hsv;
  var rgb2lab;
  var rgb2lch;
  var rgb2luminance;
  var rgb2num;
  var rgb2temperature;
  var rgb2xyz;
  var rgb_xyz;
  var rnd;
  var round;
  var screen;
  var sin;
  var sqrt;
  var temperature2rgb;
  var type;
  var unpack;
  var w3cx11;
  var xyz_lab;
  var xyz_rgb;
  var slice = [].slice;

  type = (function() {

    /*
    for browser-safe type checking+
    ported from jQuery's $.type
     */
    var classToType, len, name, o, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
    for (o = 0, len = ref.length; o < len; o++) {
      name = ref[o];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();

  limit = function(x, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    if (x < min) {
      x = min;
    }
    if (x > max) {
      x = max;
    }
    return x;
  };

  unpack = function(args) {
    if (args.length >= 3) {
      return [].slice.call(args);
    } else {
      return args[0];
    }
  };

  clip_rgb = function(rgb) {
    var i, o;
    rgb._clipped = false;
    rgb._unclipped = rgb.slice(0);
    for (i = o = 0; o < 3; i = ++o) {
      if (i < 3) {
        if (rgb[i] < 0 || rgb[i] > 255) {
          rgb._clipped = true;
        }
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 255) {
          rgb[i] = 255;
        }
      } else if (i === 3) {
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 1) {
          rgb[i] = 1;
        }
      }
    }
    if (!rgb._clipped) {
      delete rgb._unclipped;
    }
    return rgb;
  };

  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;

  TWOPI = PI * 2;

  PITHIRD = PI / 3;

  DEG2RAD = PI / 180;

  RAD2DEG = 180 / PI;

  chroma = function() {
    if (arguments[0] instanceof Color$1) {
      return arguments[0];
    }
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, arguments, function(){});
  };

  _interpolators = [];

  chroma.version = '1.3.3';

  _input = {};

  _guess_formats = [];

  _guess_formats_sorted = false;

  Color$1 = (function() {
    function Color() {
      var arguments$1 = arguments;

      var arg, args, chk, len, len1, me, mode, o, w;
      me = this;
      args = [];
      for (o = 0, len = arguments.length; o < len; o++) {
        arg = arguments$1[o];
        if (arg != null) {
          args.push(arg);
        }
      }
      mode = args[args.length - 1];
      if (_input[mode] != null) {
        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
      } else {
        if (!_guess_formats_sorted) {
          _guess_formats = _guess_formats.sort(function(a, b) {
            return b.p - a.p;
          });
          _guess_formats_sorted = true;
        }
        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {
          chk = _guess_formats[w];
          mode = chk.test.apply(chk, args);
          if (mode) {
            break;
          }
        }
        if (mode) {
          me._rgb = clip_rgb(_input[mode].apply(_input, args));
        }
      }
      if (me._rgb == null) {
        console.warn('unknown format: ' + args);
      }
      if (me._rgb == null) {
        me._rgb = [0, 0, 0];
      }
      if (me._rgb.length === 3) {
        me._rgb.push(1);
      }
    }

    Color.prototype.toString = function() {
      return this.hex();
    };

    return Color;

  })();

  chroma._input = _input;


  /**
    ColorBrewer colors for chroma.js

    Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The
    Pennsylvania State University.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed
    under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for the
    specific language governing permissions and limitations under the License.

      @preserve
   */

  chroma.brewer = brewer = {
    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],
    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
  };

  (function() {
    var key, results;
    results = [];
    for (key in brewer) {
      results.push(brewer[key.toLowerCase()] = brewer[key]);
    }
    return results;
  })();


  /**
    X11 color names

    http://www.w3.org/TR/css3-color/#svg-color
   */

  w3cx11 = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflower: '#6495ed',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    laserlemon: '#ffff54',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrod: '#fafad2',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    maroon2: '#7f0000',
    maroon3: '#b03060',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    purple2: '#7f007f',
    purple3: '#a020f0',
    rebeccapurple: '#663399',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
  };

  chroma.colors = colors = w3cx11;

  lab2rgb = function() {
    var a, args, b, g, l, r, x, y, z;
    args = unpack(arguments);
    l = args[0], a = args[1], b = args[2];
    y = (l + 16) / 116;
    x = isNaN(a) ? y : y + a / 500;
    z = isNaN(b) ? y : y - b / 200;
    y = LAB_CONSTANTS.Yn * lab_xyz(y);
    x = LAB_CONSTANTS.Xn * lab_xyz(x);
    z = LAB_CONSTANTS.Zn * lab_xyz(z);
    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  xyz_rgb = function(r) {
    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);
  };

  lab_xyz = function(t) {
    if (t > LAB_CONSTANTS.t1) {
      return t * t * t;
    } else {
      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
    }
  };

  LAB_CONSTANTS = {
    Kn: 18,
    Xn: 0.950470,
    Yn: 1,
    Zn: 1.088830,
    t0: 0.137931034,
    t1: 0.206896552,
    t2: 0.12841855,
    t3: 0.008856452
  };

  rgb2lab = function() {
    var b, g, r, ref, ref1, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];
    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];
  };

  rgb_xyz = function(r) {
    if ((r /= 255) <= 0.04045) {
      return r / 12.92;
    } else {
      return pow((r + 0.055) / 1.055, 2.4);
    }
  };

  xyz_lab = function(t) {
    if (t > LAB_CONSTANTS.t3) {
      return pow(t, 1 / 3);
    } else {
      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
    }
  };

  rgb2xyz = function() {
    var b, g, r, ref, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = rgb_xyz(r);
    g = rgb_xyz(g);
    b = rgb_xyz(b);
    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);
    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);
    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);
    return [x, y, z];
  };

  chroma.lab = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['lab']), function(){});
  };

  _input.lab = lab2rgb;

  Color$1.prototype.lab = function() {
    return rgb2lab(this._rgb);
  };

  bezier = function(colors) {
    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;
    colors = (function() {
      var len, o, results;
      results = [];
      for (o = 0, len = colors.length; o < len; o++) {
        c = colors[o];
        results.push(chroma(c));
      }
      return results;
    })();
    if (colors.length === 2) {
      ref = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref[0], lab1 = ref[1];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push(lab0[i] + t * (lab1[i] - lab0[i]));
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 3) {
      ref1 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 4) {
      ref2 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 5) {
      I0 = bezier(colors.slice(0, 3));
      I1 = bezier(colors.slice(2, 5));
      I = function(t) {
        if (t < 0.5) {
          return I0(t * 2);
        } else {
          return I1((t - 0.5) * 2);
        }
      };
    }
    return I;
  };

  chroma.bezier = function(colors) {
    var f;
    f = bezier(colors);
    f.scale = function() {
      return chroma.scale(f);
    };
    return f;
  };


  /*
      chroma.js

      Copyright (c) 2011-2013, Gregor Aisch
      All rights reserved.

      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.

      * Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.

      * The name Gregor Aisch may not be used to endorse or promote products
        derived from this software without specific prior written permission.

      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

      @source: https://github.com/gka/chroma.js
   */

  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {
    var dh, dl, f;
    if (start == null) {
      start = 300;
    }
    if (rotations == null) {
      rotations = -1.5;
    }
    if (hue == null) {
      hue = 1;
    }
    if (gamma == null) {
      gamma = 1;
    }
    if (lightness == null) {
      lightness = [0, 1];
    }
    dh = 0;
    if (type(lightness) === 'array') {
      dl = lightness[1] - lightness[0];
    } else {
      dl = 0;
      lightness = [lightness, lightness];
    }
    f = function(fract) {
      var a, amp, b, cos_a, g, h, l, r, sin_a;
      a = TWOPI * ((start + 120) / 360 + rotations * fract);
      l = pow(lightness[0] + dl * fract, gamma);
      h = dh !== 0 ? hue[0] + fract * dh : hue;
      amp = h * l * (1 - l) / 2;
      cos_a = cos(a);
      sin_a = sin(a);
      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
      b = l + amp * (+1.97294 * cos_a);
      return chroma(clip_rgb([r * 255, g * 255, b * 255]));
    };
    f.start = function(s) {
      if (s == null) {
        return start;
      }
      start = s;
      return f;
    };
    f.rotations = function(r) {
      if (r == null) {
        return rotations;
      }
      rotations = r;
      return f;
    };
    f.gamma = function(g) {
      if (g == null) {
        return gamma;
      }
      gamma = g;
      return f;
    };
    f.hue = function(h) {
      if (h == null) {
        return hue;
      }
      hue = h;
      if (type(hue) === 'array') {
        dh = hue[1] - hue[0];
        if (dh === 0) {
          hue = hue[1];
        }
      } else {
        dh = 0;
      }
      return f;
    };
    f.lightness = function(h) {
      if (h == null) {
        return lightness;
      }
      if (type(h) === 'array') {
        lightness = h;
        dl = h[1] - h[0];
      } else {
        lightness = [h, h];
        dl = 0;
      }
      return f;
    };
    f.scale = function() {
      return chroma.scale(f);
    };
    f.hue(hue);
    return f;
  };

  chroma.random = function() {
    var code, digits, i, o;
    digits = '0123456789abcdef';
    code = '#';
    for (i = o = 0; o < 6; i = ++o) {
      code += digits.charAt(floor(Math.random() * 16));
    }
    return new Color$1(code);
  };

  chroma.average = function(colors, mode) {
    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;
    if (mode == null) {
      mode = 'rgb';
    }
    l = colors.length;
    colors = colors.map(function(c) {
      return chroma(c);
    });
    first = colors.splice(0, 1)[0];
    xyz = first.get(mode);
    cnt = [];
    dx = 0;
    dy = 0;
    for (i in xyz) {
      xyz[i] = xyz[i] || 0;
      cnt.push(!isNaN(xyz[i]) ? 1 : 0);
      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
        A = xyz[i] / 180 * PI;
        dx += cos(A);
        dy += sin(A);
      }
    }
    alpha = first.alpha();
    for (o = 0, len = colors.length; o < len; o++) {
      c = colors[o];
      xyz2 = c.get(mode);
      alpha += c.alpha();
      for (i in xyz) {
        if (!isNaN(xyz2[i])) {
          xyz[i] += xyz2[i];
          cnt[i] += 1;
          if (mode.charAt(i) === 'h') {
            A = xyz[i] / 180 * PI;
            dx += cos(A);
            dy += sin(A);
          }
        }
      }
    }
    for (i in xyz) {
      xyz[i] = xyz[i] / cnt[i];
      if (mode.charAt(i) === 'h') {
        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;
        while (A < 0) {
          A += 360;
        }
        while (A >= 360) {
          A -= 360;
        }
        xyz[i] = A;
      }
    }
    return chroma(xyz, mode).alpha(alpha / l);
  };

  _input.rgb = function() {
    var k, ref, results, v;
    ref = unpack(arguments);
    results = [];
    for (k in ref) {
      v = ref[k];
      results.push(v);
    }
    return results;
  };

  chroma.rgb = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['rgb']), function(){});
  };

  Color$1.prototype.rgb = function(round) {
    if (round == null) {
      round = true;
    }
    if (round) {
      return this._rgb.map(Math.round).slice(0, 3);
    } else {
      return this._rgb.slice(0, 3);
    }
  };

  Color$1.prototype.rgba = function(round) {
    if (round == null) {
      round = true;
    }
    if (!round) {
      return this._rgb.slice(0);
    }
    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
  };

  _guess_formats.push({
    p: 3,
    test: function(n) {
      var a;
      a = unpack(arguments);
      if (type(a) === 'array' && a.length === 3) {
        return 'rgb';
      }
      if (a.length === 4 && type(a[3]) === "number" && a[3] >= 0 && a[3] <= 1) {
        return 'rgb';
      }
    }
  });

  hex2rgb = function(hex) {
    var a, b, g, r, rgb, u;
    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
      if (hex.length === 4 || hex.length === 7) {
        hex = hex.substr(1);
      }
      if (hex.length === 3) {
        hex = hex.split("");
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      }
      u = parseInt(hex, 16);
      r = u >> 16;
      g = u >> 8 & 0xFF;
      b = u & 0xFF;
      return [r, g, b, 1];
    }
    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
      if (hex.length === 9) {
        hex = hex.substr(1);
      }
      u = parseInt(hex, 16);
      r = u >> 24 & 0xFF;
      g = u >> 16 & 0xFF;
      b = u >> 8 & 0xFF;
      a = round((u & 0xFF) / 0xFF * 100) / 100;
      return [r, g, b, a];
    }
    if ((_input.css != null) && (rgb = _input.css(hex))) {
      return rgb;
    }
    throw "unknown color: " + hex;
  };

  rgb2hex = function(channels, mode) {
    var a, b, g, hxa, r, str, u;
    if (mode == null) {
      mode = 'rgb';
    }
    r = channels[0], g = channels[1], b = channels[2], a = channels[3];
    r = Math.round(r);
    g = Math.round(g);
    b = Math.round(b);
    u = r << 16 | g << 8 | b;
    str = "000000" + u.toString(16);
    str = str.substr(str.length - 6);
    hxa = '0' + round(a * 255).toString(16);
    hxa = hxa.substr(hxa.length - 2);
    return "#" + (function() {
      switch (mode.toLowerCase()) {
        case 'rgba':
          return str + hxa;
        case 'argb':
          return hxa + str;
        default:
          return str;
      }
    })();
  };

  _input.hex = function(h) {
    return hex2rgb(h);
  };

  chroma.hex = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['hex']), function(){});
  };

  Color$1.prototype.hex = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2hex(this._rgb, mode);
  };

  _guess_formats.push({
    p: 4,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "string") {
        return 'hex';
      }
    }
  });

  hsl2rgb = function() {
    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;
    args = unpack(arguments);
    h = args[0], s = args[1], l = args[2];
    if (s === 0) {
      r = g = b = l * 255;
    } else {
      t3 = [0, 0, 0];
      c = [0, 0, 0];
      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
      t1 = 2 * l - t2;
      h /= 360;
      t3[0] = h + 1 / 3;
      t3[1] = h;
      t3[2] = h - 1 / 3;
      for (i = o = 0; o <= 2; i = ++o) {
        if (t3[i] < 0) {
          t3[i] += 1;
        }
        if (t3[i] > 1) {
          t3[i] -= 1;
        }
        if (6 * t3[i] < 1) {
          c[i] = t1 + (t2 - t1) * 6 * t3[i];
        } else if (2 * t3[i] < 1) {
          c[i] = t2;
        } else if (3 * t3[i] < 2) {
          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;
        } else {
          c[i] = t1;
        }
      }
      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];
    }
    if (args.length > 3) {
      return [r, g, b, args[3]];
    } else {
      return [r, g, b];
    }
  };

  rgb2hsl = function(r, g, b) {
    var h, l, min, ref, s;
    if (r !== void 0 && r.length >= 3) {
      ref = r, r = ref[0], g = ref[1], b = ref[2];
    }
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    l = (max + min) / 2;
    if (max === min) {
      s = 0;
      h = Number.NaN;
    } else {
      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
    }
    if (r === max) {
      h = (g - b) / (max - min);
    } else if (g === max) {
      h = 2 + (b - r) / (max - min);
    } else if (b === max) {
      h = 4 + (r - g) / (max - min);
    }
    h *= 60;
    if (h < 0) {
      h += 360;
    }
    return [h, s, l];
  };

  chroma.hsl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['hsl']), function(){});
  };

  _input.hsl = hsl2rgb;

  Color$1.prototype.hsl = function() {
    return rgb2hsl(this._rgb);
  };

  hsv2rgb = function() {
    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;
    args = unpack(arguments);
    h = args[0], s = args[1], v = args[2];
    v *= 255;
    if (s === 0) {
      r = g = b = v;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = v * (1 - s);
      q = v * (1 - s * f);
      t = v * (1 - s * (1 - f));
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hsv = function() {
    var b, delta, g, h, min, r, ref, s, v;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    v = max / 255.0;
    if (max === 0) {
      h = Number.NaN;
      s = 0;
    } else {
      s = delta / max;
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, s, v];
  };

  chroma.hsv = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['hsv']), function(){});
  };

  _input.hsv = hsv2rgb;

  Color$1.prototype.hsv = function() {
    return rgb2hsv(this._rgb);
  };

  num2rgb = function(num) {
    var b, g, r;
    if (type(num) === "number" && num >= 0 && num <= 0xFFFFFF) {
      r = num >> 16;
      g = (num >> 8) & 0xFF;
      b = num & 0xFF;
      return [r, g, b, 1];
    }
    console.warn("unknown num color: " + num);
    return [0, 0, 0, 1];
  };

  rgb2num = function() {
    var b, g, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    return (r << 16) + (g << 8) + b;
  };

  chroma.num = function(num) {
    return new Color$1(num, 'num');
  };

  Color$1.prototype.num = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2num(this._rgb, mode);
  };

  _input.num = num2rgb;

  _guess_formats.push({
    p: 1,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "number" && n >= 0 && n <= 0xFFFFFF) {
        return 'num';
      }
    }
  });

  hcg2rgb = function() {
    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;
    args = unpack(arguments);
    h = args[0], c = args[1], _g = args[2];
    c = c / 100;
    g = g / 100 * 255;
    _c = c * 255;
    if (c === 0) {
      r = g = b = _g;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = _g * (1 - c);
      q = p + _c * (1 - f);
      t = p + _c * f;
      v = p + _c;
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hcg = function() {
    var _g, b, c, delta, g, h, min, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    c = delta * 100 / 255;
    _g = min / (255 - delta) * 100;
    if (delta === 0) {
      h = Number.NaN;
    } else {
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, c, _g];
  };

  chroma.hcg = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['hcg']), function(){});
  };

  _input.hcg = hcg2rgb;

  Color$1.prototype.hcg = function() {
    return rgb2hcg(this._rgb);
  };

  css2rgb = function(css) {
    var aa, ab, hsl, i, m, o, rgb, w;
    css = css.toLowerCase();
    if ((chroma.colors != null) && chroma.colors[css]) {
      return hex2rgb(chroma.colors[css]);
    }
    if (m = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = o = 0; o <= 2; i = ++o) {
        rgb[i] = +rgb[i];
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = w = 0; w <= 3; i = ++w) {
        rgb[i] = +rgb[i];
      }
    } else if (m = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = aa = 0; aa <= 2; i = ++aa) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = ab = 0; ab <= 2; i = ++ab) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = +rgb[3];
    } else if (m = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = 1;
    } else if (m = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = +m[4];
    }
    return rgb;
  };

  rgb2css = function(rgba) {
    var mode;
    mode = rgba[3] < 1 ? 'rgba' : 'rgb';
    if (mode === 'rgb') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';
    } else if (mode === 'rgba') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';
    } else {

    }
  };

  rnd = function(a) {
    return round(a * 100) / 100;
  };

  hsl2css = function(hsl, alpha) {
    var mode;
    mode = alpha < 1 ? 'hsla' : 'hsl';
    hsl[0] = rnd(hsl[0] || 0);
    hsl[1] = rnd(hsl[1] * 100) + '%';
    hsl[2] = rnd(hsl[2] * 100) + '%';
    if (mode === 'hsla') {
      hsl[3] = alpha;
    }
    return mode + '(' + hsl.join(',') + ')';
  };

  _input.css = function(h) {
    return css2rgb(h);
  };

  chroma.css = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['css']), function(){});
  };

  Color$1.prototype.css = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    if (mode.slice(0, 3) === 'rgb') {
      return rgb2css(this._rgb);
    } else if (mode.slice(0, 3) === 'hsl') {
      return hsl2css(this.hsl(), this.alpha());
    }
  };

  _input.named = function(name) {
    return hex2rgb(w3cx11[name]);
  };

  _guess_formats.push({
    p: 5,
    test: function(n) {
      if (arguments.length === 1 && (w3cx11[n] != null)) {
        return 'named';
      }
    }
  });

  Color$1.prototype.name = function(n) {
    var h, k;
    if (arguments.length) {
      if (w3cx11[n]) {
        this._rgb = hex2rgb(w3cx11[n]);
      }
      this._rgb[3] = 1;
      this;
    }
    h = this.hex();
    for (k in w3cx11) {
      if (h === w3cx11[k]) {
        return k;
      }
    }
    return h;
  };

  lch2lab = function() {

    /*
    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
    These formulas were invented by David Dalrymple to obtain maximum contrast without going
    out of gamut if the parameters are in the range 0-1.

    A saturation multiplier was added by Gregor Aisch
     */
    var c, h, l, ref;
    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];
    h = h * DEG2RAD;
    return [l, cos(h) * c, sin(h) * c];
  };

  lch2rgb = function() {
    var L, a, args, b, c, g, h, l, r, ref, ref1;
    args = unpack(arguments);
    l = args[0], c = args[1], h = args[2];
    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];
    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  lab2lch = function() {
    var a, b, c, h, l, ref;
    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];
    c = sqrt(a * a + b * b);
    h = (atan2(b, a) * RAD2DEG + 360) % 360;
    if (round(c * 10000) === 0) {
      h = Number.NaN;
    }
    return [l, c, h];
  };

  rgb2lch = function() {
    var a, b, g, l, r, ref, ref1;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];
    return lab2lch(l, a, b);
  };

  chroma.lch = function() {
    var args;
    args = unpack(arguments);
    return new Color$1(args, 'lch');
  };

  chroma.hcl = function() {
    var args;
    args = unpack(arguments);
    return new Color$1(args, 'hcl');
  };

  _input.lch = lch2rgb;

  _input.hcl = function() {
    var c, h, l, ref;
    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];
    return lch2rgb([l, c, h]);
  };

  Color$1.prototype.lch = function() {
    return rgb2lch(this._rgb);
  };

  Color$1.prototype.hcl = function() {
    return rgb2lch(this._rgb).reverse();
  };

  rgb2cmyk = function(mode) {
    var b, c, f, g, k, m, r, ref, y;
    if (mode == null) {
      mode = 'rgb';
    }
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = r / 255;
    g = g / 255;
    b = b / 255;
    k = 1 - Math.max(r, Math.max(g, b));
    f = k < 1 ? 1 / (1 - k) : 0;
    c = (1 - r - k) * f;
    m = (1 - g - k) * f;
    y = (1 - b - k) * f;
    return [c, m, y, k];
  };

  cmyk2rgb = function() {
    var alpha, args, b, c, g, k, m, r, y;
    args = unpack(arguments);
    c = args[0], m = args[1], y = args[2], k = args[3];
    alpha = args.length > 4 ? args[4] : 1;
    if (k === 1) {
      return [0, 0, 0, alpha];
    }
    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);
    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);
    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);
    return [r, g, b, alpha];
  };

  _input.cmyk = function() {
    return cmyk2rgb(unpack(arguments));
  };

  chroma.cmyk = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['cmyk']), function(){});
  };

  Color$1.prototype.cmyk = function() {
    return rgb2cmyk(this._rgb);
  };

  _input.gl = function() {
    var i, k, o, rgb, v;
    rgb = (function() {
      var ref, results;
      ref = unpack(arguments);
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(v);
      }
      return results;
    }).apply(this, arguments);
    for (i = o = 0; o <= 2; i = ++o) {
      rgb[i] *= 255;
    }
    return rgb;
  };

  chroma.gl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['gl']), function(){});
  };

  Color$1.prototype.gl = function() {
    var rgb;
    rgb = this._rgb;
    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
  };

  rgb2luminance = function(r, g, b) {
    var ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = luminance_x(r);
    g = luminance_x(g);
    b = luminance_x(b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
  };

  luminance_x = function(x) {
    x /= 255;
    if (x <= 0.03928) {
      return x / 12.92;
    } else {
      return pow((x + 0.055) / 1.055, 2.4);
    }
  };

  _interpolators = [];

  interpolate = function(col1, col2, f, m) {
    var interpol, len, o, res;
    if (f == null) {
      f = 0.5;
    }
    if (m == null) {
      m = 'rgb';
    }

    /*
    interpolates between colors
    f = 0 --> me
    f = 1 --> col
     */
    if (type(col1) !== 'object') {
      col1 = chroma(col1);
    }
    if (type(col2) !== 'object') {
      col2 = chroma(col2);
    }
    for (o = 0, len = _interpolators.length; o < len; o++) {
      interpol = _interpolators[o];
      if (m === interpol[0]) {
        res = interpol[1](col1, col2, f, m);
        break;
      }
    }
    if (res == null) {
      throw "color mode " + m + " is not supported";
    }
    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
  };

  chroma.interpolate = interpolate;

  Color$1.prototype.interpolate = function(col2, f, m) {
    return interpolate(this, col2, f, m);
  };

  chroma.mix = interpolate;

  Color$1.prototype.mix = Color$1.prototype.interpolate;

  interpolate_rgb = function(col1, col2, f, m) {
    var xyz0, xyz1;
    xyz0 = col1._rgb;
    xyz1 = col2._rgb;
    return new Color$1(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['rgb', interpolate_rgb]);

  Color$1.prototype.luminance = function(lum, mode) {
    var cur_lum, eps, max_iter, test;
    if (mode == null) {
      mode = 'rgb';
    }
    if (!arguments.length) {
      return rgb2luminance(this._rgb);
    }
    if (lum === 0) {
      this._rgb = [0, 0, 0, this._rgb[3]];
    } else if (lum === 1) {
      this._rgb = [255, 255, 255, this._rgb[3]];
    } else {
      eps = 1e-7;
      max_iter = 20;
      test = function(l, h) {
        var lm, m;
        m = l.interpolate(h, 0.5, mode);
        lm = m.luminance();
        if (Math.abs(lum - lm) < eps || !max_iter--) {
          return m;
        }
        if (lm > lum) {
          return test(l, m);
        }
        return test(m, h);
      };
      cur_lum = rgb2luminance(this._rgb);
      this._rgb = (cur_lum > lum ? test(chroma('black'), this) : test(this, chroma('white'))).rgba();
    }
    return this;
  };

  temperature2rgb = function(kelvin) {
    var b, g, r, temp;
    temp = kelvin / 100;
    if (temp < 66) {
      r = 255;
      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
    } else {
      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
      b = 255;
    }
    return [r, g, b];
  };

  rgb2temperature = function() {
    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    minTemp = 1000;
    maxTemp = 40000;
    eps = 0.4;
    while (maxTemp - minTemp > eps) {
      temp = (maxTemp + minTemp) * 0.5;
      rgb = temperature2rgb(temp);
      if ((rgb[2] / rgb[0]) >= (b / r)) {
        maxTemp = temp;
      } else {
        minTemp = temp;
      }
    }
    return round(temp);
  };

  chroma.temperature = chroma.kelvin = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['temperature']), function(){});
  };

  _input.temperature = _input.kelvin = _input.K = temperature2rgb;

  Color$1.prototype.temperature = function() {
    return rgb2temperature(this._rgb);
  };

  Color$1.prototype.kelvin = Color$1.prototype.temperature;

  chroma.contrast = function(a, b) {
    var l1, l2, ref, ref1;
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color$1(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color$1(b);
    }
    l1 = a.luminance();
    l2 = b.luminance();
    if (l1 > l2) {
      return (l1 + 0.05) / (l2 + 0.05);
    } else {
      return (l2 + 0.05) / (l1 + 0.05);
    }
  };

  chroma.distance = function(a, b, mode) {
    var d, i, l1, l2, ref, ref1, sum_sq;
    if (mode == null) {
      mode = 'lab';
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color$1(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color$1(b);
    }
    l1 = a.get(mode);
    l2 = b.get(mode);
    sum_sq = 0;
    for (i in l1) {
      d = (l1[i] || 0) - (l2[i] || 0);
      sum_sq += d * d;
    }
    return Math.sqrt(sum_sq);
  };

  chroma.deltaE = function(a, b, L, C) {
    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;
    if (L == null) {
      L = 1;
    }
    if (C == null) {
      C = 1;
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color$1(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color$1(b);
    }
    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];
    c1 = sqrt(a1 * a1 + b1 * b1);
    c2 = sqrt(a2 * a2 + b2 * b2);
    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);
    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;
    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;
    while (h1 < 0) {
      h1 += 360;
    }
    while (h1 >= 360) {
      h1 -= 360;
    }
    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));
    c4 = c1 * c1 * c1 * c1;
    f = sqrt(c4 / (c4 + 1900.0));
    sh = sc * (f * t + 1.0 - f);
    delL = L1 - L2;
    delC = c1 - c2;
    delA = a1 - a2;
    delB = b1 - b2;
    dH2 = delA * delA + delB * delB - delC * delC;
    v1 = delL / (L * sl);
    v2 = delC / (C * sc);
    v3 = sh;
    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));
  };

  Color$1.prototype.get = function(modechan) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    src = me[mode]();
    if (channel) {
      i = mode.indexOf(channel);
      if (i > -1) {
        return src[i];
      } else {
        return console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      return src;
    }
  };

  Color$1.prototype.set = function(modechan, value) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    if (channel) {
      src = me[mode]();
      i = mode.indexOf(channel);
      if (i > -1) {
        if (type(value) === 'string') {
          switch (value.charAt(0)) {
            case '+':
              src[i] += +value;
              break;
            case '-':
              src[i] += +value;
              break;
            case '*':
              src[i] *= +(value.substr(1));
              break;
            case '/':
              src[i] /= +(value.substr(1));
              break;
            default:
              src[i] = +value;
          }
        } else {
          src[i] = value;
        }
      } else {
        console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      src = value;
    }
    return chroma(src, mode).alpha(me.alpha());
  };

  Color$1.prototype.clipped = function() {
    return this._rgb._clipped || false;
  };

  Color$1.prototype.alpha = function(a) {
    if (arguments.length) {
      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);
    }
    return this._rgb[3];
  };

  Color$1.prototype.darken = function(amount) {
    var lab, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lab = me.lab();
    lab[0] -= LAB_CONSTANTS.Kn * amount;
    return chroma.lab(lab).alpha(me.alpha());
  };

  Color$1.prototype.brighten = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.darken(-amount);
  };

  Color$1.prototype.darker = Color$1.prototype.darken;

  Color$1.prototype.brighter = Color$1.prototype.brighten;

  Color$1.prototype.saturate = function(amount) {
    var lch, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lch = me.lch();
    lch[1] += amount * LAB_CONSTANTS.Kn;
    if (lch[1] < 0) {
      lch[1] = 0;
    }
    return chroma.lch(lch).alpha(me.alpha());
  };

  Color$1.prototype.desaturate = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.saturate(-amount);
  };

  Color$1.prototype.premultiply = function() {
    var a, rgb;
    rgb = this.rgb();
    a = this.alpha();
    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
  };

  blend = function(bottom, top, mode) {
    if (!blend[mode]) {
      throw 'unknown blend mode ' + mode;
    }
    return blend[mode](bottom, top);
  };

  blend_f = function(f) {
    return function(bottom, top) {
      var c0, c1;
      c0 = chroma(top).rgb();
      c1 = chroma(bottom).rgb();
      return chroma(f(c0, c1), 'rgb');
    };
  };

  each = function(f) {
    return function(c0, c1) {
      var i, o, out;
      out = [];
      for (i = o = 0; o <= 3; i = ++o) {
        out[i] = f(c0[i], c1[i]);
      }
      return out;
    };
  };

  normal = function(a, b) {
    return a;
  };

  multiply = function(a, b) {
    return a * b / 255;
  };

  darken = function(a, b) {
    if (a > b) {
      return b;
    } else {
      return a;
    }
  };

  lighten = function(a, b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  };

  screen = function(a, b) {
    return 255 * (1 - (1 - a / 255) * (1 - b / 255));
  };

  overlay = function(a, b) {
    if (b < 128) {
      return 2 * a * b / 255;
    } else {
      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
    }
  };

  burn = function(a, b) {
    return 255 * (1 - (1 - b / 255) / (a / 255));
  };

  dodge = function(a, b) {
    if (a === 255) {
      return 255;
    }
    a = 255 * (b / 255) / (1 - a / 255);
    if (a > 255) {
      return 255;
    } else {
      return a;
    }
  };

  blend.normal = blend_f(each(normal));

  blend.multiply = blend_f(each(multiply));

  blend.screen = blend_f(each(screen));

  blend.overlay = blend_f(each(overlay));

  blend.darken = blend_f(each(darken));

  blend.lighten = blend_f(each(lighten));

  blend.dodge = blend_f(each(dodge));

  blend.burn = blend_f(each(burn));

  chroma.blend = blend;

  chroma.analyze = function(data) {
    var len, o, r, val;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    for (o = 0, len = data.length; o < len; o++) {
      val = data[o];
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.scale = function(colors, positions) {
    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;
    _mode = 'rgb';
    _nacol = chroma('#ccc');
    _spread = 0;
    _fixed = false;
    _domain = [0, 1];
    _pos = [];
    _padding = [0, 0];
    _classes = false;
    _colors = [];
    _out = false;
    _min = 0;
    _max = 1;
    _correctLightness = false;
    _colorCache = {};
    _useCache = true;
    setColors = function(colors) {
      var c, col, o, ref, ref1, w;
      if (colors == null) {
        colors = ['#fff', '#000'];
      }
      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {
        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;
      }
      if (type(colors) === 'array') {
        colors = colors.slice(0);
        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {
          col = colors[c];
          if (type(col) === "string") {
            colors[c] = chroma(col);
          }
        }
        _pos.length = 0;
        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {
          _pos.push(c / (colors.length - 1));
        }
      }
      resetCache();
      return _colors = colors;
    };
    getClass = function(value) {
      var i, n;
      if (_classes != null) {
        n = _classes.length - 1;
        i = 0;
        while (i < n && value >= _classes[i]) {
          i++;
        }
        return i - 1;
      }
      return 0;
    };
    tmap = function(t) {
      return t;
    };
    classifyValue = function(value) {
      var i, maxc, minc, n, val;
      val = value;
      if (_classes.length > 2) {
        n = _classes.length - 1;
        i = getClass(value);
        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);
        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);
        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);
      }
      return val;
    };
    getColor = function(val, bypassMap) {
      var c, col, i, k, o, p, ref, t;
      if (bypassMap == null) {
        bypassMap = false;
      }
      if (isNaN(val)) {
        return _nacol;
      }
      if (!bypassMap) {
        if (_classes && _classes.length > 2) {
          c = getClass(val);
          t = c / (_classes.length - 2);
          t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
        } else if (_max !== _min) {
          t = (val - _min) / (_max - _min);
          t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
          t = Math.min(1, Math.max(0, t));
        } else {
          t = 1;
        }
      } else {
        t = val;
      }
      if (!bypassMap) {
        t = tmap(t);
      }
      k = Math.floor(t * 10000);
      if (_useCache && _colorCache[k]) {
        col = _colorCache[k];
      } else {
        if (type(_colors) === 'array') {
          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {
            p = _pos[i];
            if (t <= p) {
              col = _colors[i];
              break;
            }
            if (t >= p && i === _pos.length - 1) {
              col = _colors[i];
              break;
            }
            if (t > p && t < _pos[i + 1]) {
              t = (t - p) / (_pos[i + 1] - p);
              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);
              break;
            }
          }
        } else if (type(_colors) === 'function') {
          col = _colors(t);
        }
        if (_useCache) {
          _colorCache[k] = col;
        }
      }
      return col;
    };
    resetCache = function() {
      return _colorCache = {};
    };
    setColors(colors);
    f = function(v) {
      var c;
      c = chroma(getColor(v));
      if (_out && c[_out]) {
        return c[_out]();
      } else {
        return c;
      }
    };
    f.classes = function(classes) {
      var d;
      if (classes != null) {
        if (type(classes) === 'array') {
          _classes = classes;
          _domain = [classes[0], classes[classes.length - 1]];
        } else {
          d = chroma.analyze(_domain);
          if (classes === 0) {
            _classes = [d.min, d.max];
          } else {
            _classes = chroma.limits(d, 'e', classes);
          }
        }
        return f;
      }
      return _classes;
    };
    f.domain = function(domain) {
      var c, d, k, len, o, ref, w;
      if (!arguments.length) {
        return _domain;
      }
      _min = domain[0];
      _max = domain[domain.length - 1];
      _pos = [];
      k = _colors.length;
      if (domain.length === k && _min !== _max) {
        for (o = 0, len = domain.length; o < len; o++) {
          d = domain[o];
          _pos.push((d - _min) / (_max - _min));
        }
      } else {
        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {
          _pos.push(c / (k - 1));
        }
      }
      _domain = [_min, _max];
      return f;
    };
    f.mode = function(_m) {
      if (!arguments.length) {
        return _mode;
      }
      _mode = _m;
      resetCache();
      return f;
    };
    f.range = function(colors, _pos) {
      setColors(colors, _pos);
      return f;
    };
    f.out = function(_o) {
      _out = _o;
      return f;
    };
    f.spread = function(val) {
      if (!arguments.length) {
        return _spread;
      }
      _spread = val;
      return f;
    };
    f.correctLightness = function(v) {
      if (v == null) {
        v = true;
      }
      _correctLightness = v;
      resetCache();
      if (_correctLightness) {
        tmap = function(t) {
          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
          L0 = getColor(0, true).lab()[0];
          L1 = getColor(1, true).lab()[0];
          pol = L0 > L1;
          L_actual = getColor(t, true).lab()[0];
          L_ideal = L0 + (L1 - L0) * t;
          L_diff = L_actual - L_ideal;
          t0 = 0;
          t1 = 1;
          max_iter = 20;
          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {
            (function() {
              if (pol) {
                L_diff *= -1;
              }
              if (L_diff < 0) {
                t0 = t;
                t += (t1 - t) * 0.5;
              } else {
                t1 = t;
                t += (t0 - t) * 0.5;
              }
              L_actual = getColor(t, true).lab()[0];
              return L_diff = L_actual - L_ideal;
            })();
          }
          return t;
        };
      } else {
        tmap = function(t) {
          return t;
        };
      }
      return f;
    };
    f.padding = function(p) {
      if (p != null) {
        if (type(p) === 'number') {
          p = [p, p];
        }
        _padding = p;
        return f;
      } else {
        return _padding;
      }
    };
    f.colors = function(numColors, out) {
      var dd, dm, i, o, ref, results, samples, w;
      if (out == null) {
        out = 'hex';
      }
      if (arguments.length === 0) {
        return _colors.map(function(c) {
          return c[out]();
        });
      }
      if (numColors) {
        if (numColors === 1) {
          return f(0.5)[out]();
        }
        dm = _domain[0];
        dd = _domain[1] - dm;
        return (function() {
          results = [];
          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }
          return results;
        }).apply(this).map(function(i) {
          return f(dm + i / (numColors - 1) * dd)[out]();
        });
      }
      colors = [];
      samples = [];
      if (_classes && _classes.length > 2) {
        for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {
          samples.push((_classes[i - 1] + _classes[i]) * 0.5);
        }
      } else {
        samples = _domain;
      }
      return samples.map(function(v) {
        return f(v)[out]();
      });
    };
    f.cache = function(c) {
      if (c != null) {
        return _useCache = c;
      } else {
        return _useCache;
      }
    };
    return f;
  };

  if (chroma.scales == null) {
    chroma.scales = {};
  }

  chroma.scales.cool = function() {
    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);
  };

  chroma.scales.hot = function() {
    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');
  };

  chroma.analyze = function(data, key, filter) {
    var add, k, len, o, r, val, visit;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    if (filter == null) {
      filter = function() {
        return true;
      };
    }
    add = function(val) {
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    };
    visit = function(val, k) {
      if (filter(val, k)) {
        if ((key != null) && type(key) === 'function') {
          return add(key(val));
        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {
          return add(val[key]);
        } else {
          return add(val);
        }
      }
    };
    if (type(data) === 'array') {
      for (o = 0, len = data.length; o < len; o++) {
        val = data[o];
        visit(val);
      }
    } else {
      for (k in data) {
        val = data[k];
        visit(val, k);
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.limits = function(data, mode, num) {
    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;
    if (mode == null) {
      mode = 'equal';
    }
    if (num == null) {
      num = 7;
    }
    if (type(data) === 'array') {
      data = chroma.analyze(data);
    }
    min = data.min;
    max = data.max;
    sum = data.sum;
    values = data.values.sort(function(a, b) {
      return a - b;
    });
    if (num === 1) {
      return [min, max];
    }
    limits = [];
    if (mode.substr(0, 1) === 'c') {
      limits.push(min);
      limits.push(max);
    }
    if (mode.substr(0, 1) === 'e') {
      limits.push(min);
      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {
        limits.push(min + (i / num) * (max - min));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'l') {
      if (min <= 0) {
        throw 'Logarithmic scales are only possible for values > 0';
      }
      min_log = Math.LOG10E * log(min);
      max_log = Math.LOG10E * log(max);
      limits.push(min);
      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {
        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'q') {
      limits.push(min);
      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {
        p = (values.length - 1) * i / num;
        pb = floor(p);
        if (pb === p) {
          limits.push(values[pb]);
        } else {
          pr = p - pb;
          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
        }
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'k') {

      /*
      implementation based on
      http://code.google.com/p/figue/source/browse/trunk/figue.js#336
      simplified for 1-d input values
       */
      n = values.length;
      assignments = new Array(n);
      clusterSizes = new Array(num);
      repeat = true;
      nb_iters = 0;
      centroids = null;
      centroids = [];
      centroids.push(min);
      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {
        centroids.push(min + (i / num) * (max - min));
      }
      centroids.push(max);
      while (repeat) {
        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {
          clusterSizes[j] = 0;
        }
        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {
          value = values[i];
          mindist = Number.MAX_VALUE;
          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {
            dist = abs(centroids[j] - value);
            if (dist < mindist) {
              mindist = dist;
              best = j;
            }
          }
          clusterSizes[best]++;
          assignments[i] = best;
        }
        newCentroids = new Array(num);
        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {
          newCentroids[j] = null;
        }
        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {
          cluster = assignments[i];
          if (newCentroids[cluster] === null) {
            newCentroids[cluster] = values[i];
          } else {
            newCentroids[cluster] += values[i];
          }
        }
        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {
          newCentroids[j] *= 1 / clusterSizes[j];
        }
        repeat = false;
        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {
          if (newCentroids[j] !== centroids[i]) {
            repeat = true;
            break;
          }
        }
        centroids = newCentroids;
        nb_iters++;
        if (nb_iters > 200) {
          repeat = false;
        }
      }
      kClusters = {};
      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {
        kClusters[j] = [];
      }
      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {
        cluster = assignments[i];
        kClusters[cluster].push(values[i]);
      }
      tmpKMeansBreaks = [];
      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {
        tmpKMeansBreaks.push(kClusters[j][0]);
        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
      }
      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
        return a - b;
      });
      limits.push(tmpKMeansBreaks[0]);
      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {
        v = tmpKMeansBreaks[i];
        if (!isNaN(v) && limits.indexOf(v) === -1) {
          limits.push(v);
        }
      }
    }
    return limits;
  };

  hsi2rgb = function(h, s, i) {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
     */
    var args, b, g, r;
    args = unpack(arguments);
    h = args[0], s = args[1], i = args[2];
    if (isNaN(h)) {
      h = 0;
    }
    h /= 360;
    if (h < 1 / 3) {
      b = (1 - s) / 3;
      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      g = 1 - (b + r);
    } else if (h < 2 / 3) {
      h -= 1 / 3;
      r = (1 - s) / 3;
      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      b = 1 - (r + g);
    } else {
      h -= 2 / 3;
      g = (1 - s) / 3;
      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      r = 1 - (g + b);
    }
    r = limit(i * r * 3);
    g = limit(i * g * 3);
    b = limit(i * b * 3);
    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
  };

  rgb2hsi = function() {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
     */
    var b, g, h, i, min, r, ref, s;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    TWOPI = Math.PI * 2;
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    i = (r + g + b) / 3;
    s = 1 - min / i;
    if (s === 0) {
      h = 0;
    } else {
      h = ((r - g) + (r - b)) / 2;
      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
      h = Math.acos(h);
      if (b > g) {
        h = TWOPI - h;
      }
      h /= TWOPI;
    }
    return [h * 360, s, i];
  };

  chroma.hsi = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color$1, slice.call(arguments).concat(['hsi']), function(){});
  };

  _input.hsi = hsi2rgb;

  Color$1.prototype.hsi = function() {
    return rgb2hsi(this._rgb);
  };

  interpolate_hsx = function(col1, col2, f, m) {
    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
    if (m === 'hsl') {
      xyz0 = col1.hsl();
      xyz1 = col2.hsl();
    } else if (m === 'hsv') {
      xyz0 = col1.hsv();
      xyz1 = col2.hsv();
    } else if (m === 'hcg') {
      xyz0 = col1.hcg();
      xyz1 = col2.hcg();
    } else if (m === 'hsi') {
      xyz0 = col1.hsi();
      xyz1 = col2.hsi();
    } else if (m === 'lch' || m === 'hcl') {
      m = 'hcl';
      xyz0 = col1.hcl();
      xyz1 = col2.hcl();
    }
    if (m.substr(0, 1) === 'h') {
      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
    }
    if (!isNaN(hue0) && !isNaN(hue1)) {
      if (hue1 > hue0 && hue1 - hue0 > 180) {
        dh = hue1 - (hue0 + 360);
      } else if (hue1 < hue0 && hue0 - hue1 > 180) {
        dh = hue1 + 360 - hue0;
      } else {
        dh = hue1 - hue0;
      }
      hue = hue0 + f * dh;
    } else if (!isNaN(hue0)) {
      hue = hue0;
      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {
        sat = sat0;
      }
    } else if (!isNaN(hue1)) {
      hue = hue1;
      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {
        sat = sat1;
      }
    } else {
      hue = Number.NaN;
    }
    if (sat == null) {
      sat = sat0 + f * (sat1 - sat0);
    }
    lbv = lbv0 + f * (lbv1 - lbv0);
    return res = chroma[m](hue, sat, lbv);
  };

  _interpolators = _interpolators.concat((function() {
    var len, o, ref, results;
    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];
    results = [];
    for (o = 0, len = ref.length; o < len; o++) {
      m = ref[o];
      results.push([m, interpolate_hsx]);
    }
    return results;
  })());

  interpolate_num = function(col1, col2, f, m) {
    var n1, n2;
    n1 = col1.num();
    n2 = col2.num();
    return chroma.num(n1 + (n2 - n1) * f, 'num');
  };

  _interpolators.push(['num', interpolate_num]);

  interpolate_lab = function(col1, col2, f, m) {
    var res, xyz0, xyz1;
    xyz0 = col1.lab();
    xyz1 = col2.lab();
    return res = new Color$1(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['lab', interpolate_lab]);


var chroma$1 = chroma;

/**
 * @file Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Colormaker parameter object.
 * @typedef {Object} ColormakerParameters - colormaker parameters
 * @property {String|Array} [scale] - color scale, either a string for a
 *                                    predefined scale or an array of
 *                                    colors to be used as the scale
 * @property {String} [mode] - color mode, one of rgb, hsv, hsl, hsi, lab, hcl
 * @property {Integer[]} [colorDomain] - scale value range
 * @property {Integer} colorDomain.0 - min value
 * @property {Integer} colorDomain.1 - max value
 * @property {Color|String|Integer} [value] - color value
 * @property {Structure} [structure] - structure object
 * @property {Volume} [volume] - volume object
 * @property {Surface} [surface] - surface object
 */

/**
 * Class for making colors.
 * @interface
 */
var Colormaker = function Colormaker (params) {
  var p = params || {};

  this.scale = defaults(p.scale, 'uniform');
  this.mode = defaults(p.mode, 'hcl');
  this.domain = defaults(p.domain, [ 0, 1 ]);
  this.value = new Color(defaults(p.value, 0xFFFFFF)).getHex();
  this.reverse = defaults(p.reverse, false);

  this.structure = p.structure;
  this.volume = p.volume;
  this.surface = p.surface;

  if (this.structure) {
    this.atomProxy = this.structure.getAtomProxy();
  }
};

Colormaker.prototype.getScale = function getScale (params) {
  var p = params || {};

  var scale = defaults(p.scale, this.scale);
  if (scale === 'rainbow') {
    scale = [ 'red', 'orange', 'yellow', 'green', 'blue' ];
  } else if (scale === 'rwb') {
    scale = [ 'red', 'white', 'blue' ];
  }

  var domain = defaults(p.domain, this.domain);
  if (this.reverse) {
    domain = domain.slice().reverse();
  }

  return chroma$1
          .scale(scale)
          .mode(defaults(p.mode, this.mode))
          .domain(domain)
          .out('num')
};

  /**
   * safe a color to an array
   * @param{Integer} color - hex color value
   * @param{Array|TypedArray} array - destination
   * @param{Integer} offset - index into the array
   * @return {Array} the destination array
   */
Colormaker.prototype.colorToArray = function colorToArray (color, array, offset) {
  if (array === undefined) { array = []; }
  if (offset === undefined) { offset = 0; }

  array[ offset + 0 ] = (color >> 16 & 255) / 255;
  array[ offset + 1 ] = (color >> 8 & 255) / 255;
  array[ offset + 2 ] = (color & 255) / 255;

  return array
};

  /**
   * safe a atom color to an array
   * @param{AtomProxy} atom - atom to get color for
   * @param{Array|TypedArray} array - destination
   * @param{Integer} offset - index into the array
   * @return {Array} the destination array
   */
Colormaker.prototype.atomColorToArray = function atomColorToArray (atom, array, offset) {
  return this.colorToArray(
          this.atomColor(atom), array, offset
      )
};

  /**
   * return the color for an bond
   * @param{BondProxy} bond - bond to get color for
   * @param{Boolean} fromTo - whether to use the first or second atom of the bond
   * @return {Integer} hex bond color
   */
Colormaker.prototype.bondColor = function bondColor (bond, fromTo) {
  this.atomProxy.index = fromTo ? bond.atomIndex1 : bond.atomIndex2;
  return this.atomColor(this.atomProxy)
};

  /**
   * safe a bond color to an array
   * @param{BondProxy} bond - bond to get color for
   * @param{Boolean} fromTo - whether to use the first or second atom of the bond
   * @param{Array|TypedArray} array - destination
   * @param{Integer} offset - index into the array
   * @return {Array} the destination array
   */
Colormaker.prototype.bondColorToArray = function bondColorToArray (bond, fromTo, array, offset) {
  return this.colorToArray(
          this.bondColor(bond, fromTo), array, offset
      )
};

  /**
   * safe a volume cell color to an array
   * @param{Integer} index - volume cell index
   * @param{Array|TypedArray} array - destination
   * @param{Integer} offset - index into the array
   * @return {Array} the destination array
   */
Colormaker.prototype.volumeColorToArray = function volumeColorToArray (index, array, offset) {
  return this.colorToArray(
          this.volumeColor(index), array, offset
      )
};

  /**
   * safe a color for coordinates in space to an array
   * @param{Vector3} coords - xyz coordinates
   * @param{Array|TypedArray} array - destination
   * @param{Integer} offset - index into the array
   * @return {Array} the destination array
   */
Colormaker.prototype.positionColorToArray = function positionColorToArray (coords, array, offset) {
  return this.colorToArray(
          this.positionColor(coords), array, offset
      )
};

// changed to be usable as an es6 module, ASR

/*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */
/*global define:false, require:false, exports:false, module:false, signals:false */

/** @license
 * JS Signals <http://millermedeiros.github.com/js-signals/>
 * Released under the MIT license
 * Author: Miller Medeiros
 * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
 */


    // SignalBinding -------------------------------------------------
    //================================================================

    /**
     * Object that represents a binding between a Signal and a listener function.
     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>
     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.
     * @author Miller Medeiros
     * @constructor
     * @internal
     * @name SignalBinding
     * @param {Signal} signal Reference to Signal object that listener is currently bound to.
     * @param {Function} listener Handler function bound to the signal.
     * @param {boolean} isOnce If binding should be executed just once.
     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
     * @param {Number} [priority] The priority level of the event listener. (default = 0).
     */
    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {

        /**
         * Handler function bound to the signal.
         * @type Function
         * @private
         */
        this._listener = listener;

        /**
         * If binding should be executed just once.
         * @type boolean
         * @private
         */
        this._isOnce = isOnce;

        /**
         * Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @memberOf SignalBinding.prototype
         * @name context
         * @type Object|undefined|null
         */
        this.context = listenerContext;

        /**
         * Reference to Signal object that listener is currently bound to.
         * @type Signal
         * @private
         */
        this._signal = signal;

        /**
         * Listener priority
         * @type Number
         * @private
         */
        this._priority = priority || 0;
    }

    SignalBinding.prototype = {

        /**
         * If binding is active and should be executed.
         * @type boolean
         */
        active : true,

        /**
         * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)
         * @type Array|null
         */
        params : null,

        /**
         * Call listener passing arbitrary parameters.
         * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>
         * @param {Array} [paramsArr] Array of parameters that should be passed to the listener
         * @return {*} Value returned by the listener.
         */
        execute : function (paramsArr) {
            var handlerReturn, params;
            if (this.active && !!this._listener) {
                params = this.params? this.params.concat(paramsArr) : paramsArr;
                handlerReturn = this._listener.apply(this.context, params);
                if (this._isOnce) {
                    this.detach();
                }
            }
            return handlerReturn;
        },

        /**
         * Detach binding from signal.
         * - alias to: mySignal.remove(myBinding.getListener());
         * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.
         */
        detach : function () {
            return this.isBound()? this._signal.remove(this._listener, this.context) : null;
        },

        /**
         * @return {Boolean} `true` if binding is still bound to the signal and have a listener.
         */
        isBound : function () {
            return (!!this._signal && !!this._listener);
        },

        /**
         * @return {boolean} If SignalBinding will only be executed once.
         */
        isOnce : function () {
            return this._isOnce;
        },

        /**
         * @return {Function} Handler function bound to the signal.
         */
        getListener : function () {
            return this._listener;
        },

        /**
         * @return {Signal} Signal that listener is currently bound to.
         */
        getSignal : function () {
            return this._signal;
        },

        /**
         * Delete instance properties
         * @private
         */
        _destroy : function () {
            delete this._signal;
            delete this._listener;
            delete this.context;
        },

        /**
         * @return {string} String representation of the object.
         */
        toString : function () {
            return '[SignalBinding isOnce:' + this._isOnce +', isBound:'+ this.isBound() +', active:' + this.active + ']';
        }

    };


/*global SignalBinding:false*/

    // Signal --------------------------------------------------------
    //================================================================

    function validateListener(listener, fnName) {
        if (typeof listener !== 'function') {
            throw new Error( 'listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName) );
        }
    }

    /**
     * Custom event broadcaster
     * <br />- inspired by Robert Penner's AS3 Signals.
     * @name Signal
     * @author Miller Medeiros
     * @constructor
     */
    function Signal() {
        /**
         * @type Array.<SignalBinding>
         * @private
         */
        this._bindings = [];
        this._prevParams = null;

        // enforce dispatch to aways work on same context (#47)
        var self = this;
        this.dispatch = function(){
            Signal.prototype.dispatch.apply(self, arguments);
        };
    }

    Signal.prototype = {

        /**
         * Signals Version Number
         * @type String
         * @const
         */
        VERSION : '1.0.0',

        /**
         * If Signal should keep record of previously dispatched parameters and
         * automatically execute listener during `add()`/`addOnce()` if Signal was
         * already dispatched before.
         * @type boolean
         */
        memorize : false,

        /**
         * @type boolean
         * @private
         */
        _shouldPropagate : true,

        /**
         * If Signal is active and should broadcast events.
         * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>
         * @type boolean
         */
        active : true,

        /**
         * @param {Function} listener
         * @param {boolean} isOnce
         * @param {Object} [listenerContext]
         * @param {Number} [priority]
         * @return {SignalBinding}
         * @private
         */
        _registerListener : function (listener, isOnce, listenerContext, priority) {

            var prevIndex = this._indexOfListener(listener, listenerContext),
                binding;

            if (prevIndex !== -1) {
                binding = this._bindings[prevIndex];
                if (binding.isOnce() !== isOnce) {
                    throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');
                }
            } else {
                binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);
                this._addBinding(binding);
            }

            if(this.memorize && this._prevParams){
                binding.execute(this._prevParams);
            }

            return binding;
        },

        /**
         * @param {SignalBinding} binding
         * @private
         */
        _addBinding : function (binding) {
            //simplified insertion sort
            var n = this._bindings.length;
            do { --n; } while (this._bindings[n] && binding._priority <= this._bindings[n]._priority);
            this._bindings.splice(n + 1, 0, binding);
        },

        /**
         * @param {Function} listener
         * @return {number}
         * @private
         */
        _indexOfListener : function (listener, context) {
            var this$1 = this;

            var n = this._bindings.length,
                cur;
            while (n--) {
                cur = this$1._bindings[n];
                if (cur._listener === listener && cur.context === context) {
                    return n;
                }
            }
            return -1;
        },

        /**
         * Check if listener was attached to Signal.
         * @param {Function} listener
         * @param {Object} [context]
         * @return {boolean} if Signal has the specified listener.
         */
        has : function (listener, context) {
            return this._indexOfListener(listener, context) !== -1;
        },

        /**
         * Add a listener to the signal.
         * @param {Function} listener Signal handler function.
         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
         */
        add : function (listener, listenerContext, priority) {
            validateListener(listener, 'add');
            return this._registerListener(listener, false, listenerContext, priority);
        },

        /**
         * Add listener to the signal that should be removed after first execution (will be executed only once).
         * @param {Function} listener Signal handler function.
         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
         */
        addOnce : function (listener, listenerContext, priority) {
            validateListener(listener, 'addOnce');
            return this._registerListener(listener, true, listenerContext, priority);
        },

        /**
         * Remove a single listener from the dispatch queue.
         * @param {Function} listener Handler function that should be removed.
         * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).
         * @return {Function} Listener handler function.
         */
        remove : function (listener, context) {
            validateListener(listener, 'remove');

            var i = this._indexOfListener(listener, context);
            if (i !== -1) {
                this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal
                this._bindings.splice(i, 1);
            }
            return listener;
        },

        /**
         * Remove all listeners from the Signal.
         */
        removeAll : function () {
            var this$1 = this;

            var n = this._bindings.length;
            while (n--) {
                this$1._bindings[n]._destroy();
            }
            this._bindings.length = 0;
        },

        /**
         * @return {number} Number of listeners attached to the Signal.
         */
        getNumListeners : function () {
            return this._bindings.length;
        },

        /**
         * Stop propagation of the event, blocking the dispatch to next listeners on the queue.
         * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>
         * @see Signal.prototype.disable
         */
        halt : function () {
            this._shouldPropagate = false;
        },

        /**
         * Dispatch/Broadcast Signal to all listeners added to the queue.
         * @param {...*} [params] Parameters that should be passed to each handler.
         */
        dispatch : function (params) {
            if (! this.active) {
                return;
            }

            var paramsArr = Array.prototype.slice.call(arguments),
                n = this._bindings.length,
                bindings;

            if (this.memorize) {
                this._prevParams = paramsArr;
            }

            if (! n) {
                //should come after memorize
                return;
            }

            bindings = this._bindings.slice(); //clone array in case add/remove items during dispatch
            this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.

            //execute all callbacks until end of the list or until a callback returns `false` or stops propagation
            //reverse loop since listeners with higher priority will be added at the end of the list
            do { n--; } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);
        },

        /**
         * Forget memorized arguments.
         * @see Signal.memorize
         */
        forget : function(){
            this._prevParams = null;
        },

        /**
         * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).
         * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>
         */
        dispose : function () {
            this.removeAll();
            delete this._bindings;
            delete this._prevParams;
        },

        /**
         * @return {string} String representation of the object.
         */
        toString : function () {
            return '[Signal active:'+ this.active +' numListeners:'+ this.getNumListeners() +']';
        }

    };

/**
 * @file Selection
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var kwd = {
  PROTEIN: 1,
  NUCLEIC: 2,
  RNA: 3,
  DNA: 4,
  POLYMER: 5,
  WATER: 6,
  HELIX: 7,
  SHEET: 8,
  TURN: 9,
  BACKBONE: 10,
  SIDECHAIN: 11,
  ALL: 12,
  HETERO: 13,
  ION: 14,
  SACCHARIDE: 15,
  SUGAR: 15,
  BONDED: 16,
  RING: 17
};

var SelectAllKeyword = [ '*', '', 'ALL' ];

var AtomOnlyKeywords = [
  kwd.BACKBONE, kwd.SIDECHAIN, kwd.BONDED, kwd.RING
];

var ChainKeywords = [
  kwd.POLYMER, kwd.WATER
];

var SmallResname = [ 'ALA', 'GLY', 'SER' ];
var NucleophilicResname = [ 'CYS', 'SER', 'THR' ];
var HydrophobicResname = [ 'ALA', 'ILE', 'LEU', 'MET', 'PHE', 'PRO', 'TRP', 'VAL' ];
var AromaticResname = [ 'PHE', 'TRP', 'TYR', 'HIS' ];
var AmideResname = [ 'ASN', 'GLN' ];
var AcidicResname = [ 'ASP', 'GLU' ];
var BasicResname = [ 'ARG', 'HIS', 'LYS' ];
var ChargedResname = [ 'ARG', 'ASP', 'GLU', 'HIS', 'LYS' ];
var PolarResname = [ 'ASN', 'ARG', 'ASP', 'CYS', 'GLY', 'GLN', 'GLU', 'HIS', 'LYS', 'SER', 'THR', 'TYR' ];
var NonpolarResname = [ 'ALA', 'ILE', 'LEU', 'MET', 'PHE', 'PRO', 'TRP', 'VAL' ];
var CyclicResname = [ 'HIS', 'PHE', 'PRO', 'TRP', 'TYR' ];
var AliphaticResname = [ 'ALA', 'GLY', 'ILE', 'LEU', 'VAL' ];

function atomTestFn (a, s) {
    // returning -1 means the rule is not applicable
  if (s.atomname === undefined && s.element === undefined &&
            s.altloc === undefined && s.atomindex === undefined &&
            s.keyword === undefined && s.inscode === undefined &&
            s.resname === undefined && s.sstruc === undefined &&
            s.resno === undefined && s.chainname === undefined &&
            s.model === undefined
    ) { return -1 }

  if (s.keyword !== undefined) {
    if (s.keyword === kwd.BACKBONE && !a.isBackbone()) { return false }
    if (s.keyword === kwd.SIDECHAIN && !a.isSidechain()) { return false }
    if (s.keyword === kwd.BONDED && !a.isBonded()) { return false }
    if (s.keyword === kwd.RING && !a.isRing()) { return false }

    if (s.keyword === kwd.HETERO && !a.isHetero()) { return false }
    if (s.keyword === kwd.PROTEIN && !a.isProtein()) { return false }
    if (s.keyword === kwd.NUCLEIC && !a.isNucleic()) { return false }
    if (s.keyword === kwd.RNA && !a.isRna()) { return false }
    if (s.keyword === kwd.DNA && !a.isDna()) { return false }
    if (s.keyword === kwd.POLYMER && !a.isPolymer()) { return false }
    if (s.keyword === kwd.WATER && !a.isWater()) { return false }
    if (s.keyword === kwd.HELIX && !a.isHelix()) { return false }
    if (s.keyword === kwd.SHEET && !a.isSheet()) { return false }
    if (s.keyword === kwd.TURN && !a.isTurn()) { return false }
    if (s.keyword === kwd.ION && !a.isIon()) { return false }
    if (s.keyword === kwd.SACCHARIDE && !a.isSaccharide()) { return false }
  }

  if (s.atomname !== undefined && s.atomname !== a.atomname) { return false }
  if (s.element !== undefined && s.element !== a.element) { return false }
  if (s.altloc !== undefined && s.altloc !== a.altloc) { return false }

  if (s.atomindex !== undefined &&
            binarySearchIndexOf(s.atomindex, a.index) < 0
    ) { return false }

  if (s.resname !== undefined) {
    if (Array.isArray(s.resname)) {
      if (!s.resname.includes(a.resname)) { return false }
    } else {
      if (s.resname !== a.resname) { return false }
    }
  }
  if (s.sstruc !== undefined && s.sstruc !== a.sstruc) { return false }
  if (s.resno !== undefined) {
    if (Array.isArray(s.resno) && s.resno.length === 2) {
      if (s.resno[0] > a.resno || s.resno[1] < a.resno) { return false }
    } else {
      if (s.resno !== a.resno) { return false }
    }
  }
  if (s.inscode !== undefined && s.inscode !== a.inscode) { return false }

  if (s.chainname !== undefined && s.chainname !== a.chainname) { return false }
  if (s.model !== undefined && s.model !== a.modelIndex) { return false }

  return true
}

function residueTestFn (r, s) {
    // returning -1 means the rule is not applicable
  if (s.resname === undefined && s.resno === undefined && s.inscode === undefined &&
            s.sstruc === undefined && s.model === undefined && s.chainname === undefined &&
            s.atomindex === undefined &&
            (s.keyword === undefined || AtomOnlyKeywords.includes(s.keyword))
    ) { return -1 }

  if (s.keyword !== undefined) {
    if (s.keyword === kwd.HETERO && !r.isHetero()) { return false }
    if (s.keyword === kwd.PROTEIN && !r.isProtein()) { return false }
    if (s.keyword === kwd.NUCLEIC && !r.isNucleic()) { return false }
    if (s.keyword === kwd.RNA && !r.isRna()) { return false }
    if (s.keyword === kwd.DNA && !r.isDna()) { return false }
    if (s.keyword === kwd.POLYMER && !r.isPolymer()) { return false }
    if (s.keyword === kwd.WATER && !r.isWater()) { return false }
    if (s.keyword === kwd.HELIX && !r.isHelix()) { return false }
    if (s.keyword === kwd.SHEET && !r.isSheet()) { return false }
    if (s.keyword === kwd.TURN && !r.isTurn()) { return false }
    if (s.keyword === kwd.ION && !r.isIon()) { return false }
    if (s.keyword === kwd.SACCHARIDE && !r.isSaccharide()) { return false }
  }

  if (s.atomindex !== undefined &&
            rangeInSortedArray(s.atomindex, r.atomOffset, r.atomEnd) === 0
    ) { return false }

  if (s.resname !== undefined) {
    if (Array.isArray(s.resname)) {
      if (!s.resname.includes(r.resname)) { return false }
    } else {
      if (s.resname !== r.resname) { return false }
    }
  }
  if (s.sstruc !== undefined && s.sstruc !== r.sstruc) { return false }
  if (s.resno !== undefined) {
    if (Array.isArray(s.resno) && s.resno.length === 2) {
      if (s.resno[0] > r.resno || s.resno[1] < r.resno) { return false }
    } else {
      if (s.resno !== r.resno) { return false }
    }
  }
  if (s.inscode !== undefined && s.inscode !== r.inscode) { return false }

  if (s.chainname !== undefined && s.chainname !== r.chainname) { return false }
  if (s.model !== undefined && s.model !== r.modelIndex) { return false }

  return true
}

function chainTestFn (c, s) {
    // returning -1 means the rule is not applicable
  if (s.chainname === undefined && s.model === undefined && s.atomindex === undefined &&
            (s.keyword === undefined || !ChainKeywords.includes(s.keyword) || !c.entity)
    ) { return -1 }

  if (s.keyword !== undefined) {
    if (s.keyword === kwd.POLYMER && !c.entity.isPolymer()) { return false }
    if (s.keyword === kwd.WATER && !c.entity.isWater()) { return false }
  }

  if (s.atomindex !== undefined &&
            rangeInSortedArray(s.atomindex, c.atomOffset, c.atomEnd) === 0
    ) { return false }

  if (s.chainname !== undefined && s.chainname !== c.chainname) { return false }

  if (s.model !== undefined && s.model !== c.modelIndex) { return false }

  return true
}

function modelTestFn (m, s) {
    // returning -1 means the rule is not applicable
  if (s.model === undefined && s.atomindex === undefined) { return -1 }

  if (s.atomindex !== undefined &&
            rangeInSortedArray(s.atomindex, m.atomOffset, m.atomEnd) === 0
    ) { return false }

  if (s.model !== undefined && s.model !== m.index) { return false }

  return true
}

/**
 * Selection
 */
var Selection = function Selection (string) {
  this.signals = {
    stringChanged: new Signal()
  };

  this.setString(string);
};

var prototypeAccessors$1 = { type: {} };

prototypeAccessors$1.type.get = function () { return 'selection' };

Selection.prototype.setString = function setString (string, silent) {
  if (string === undefined) { string = this.string || ''; }
  if (string === this.string) { return }

      //

  try {
    this.parse(string);
  } catch (e) {
          // Log.error( e.stack );
    this.selection = { 'error': e.message };
  }

  this.string = string;

  this.test = this.makeAtomTest();
  this.residueTest = this.makeResidueTest();
  this.chainTest = this.makeChainTest();
  this.modelTest = this.makeModelTest();

  this.atomOnlyTest = this.makeAtomTest(true);
  this.residueOnlyTest = this.makeResidueTest(true);
  this.chainOnlyTest = this.makeChainTest(true);
  this.modelOnlyTest = this.makeModelTest(true);

  if (!silent) {
    this.signals.stringChanged.dispatch(this.string);
  }
};

Selection.prototype.parse = function parse (string) {
    var this$1 = this;

  this.selection = {
    operator: undefined,
    rules: []
  };

  if (!string) { return }

  var selection = this.selection;
  var newSelection, oldSelection;
  var selectionStack = [];

  string = string.replace(/\(/g, ' ( ').replace(/\)/g, ' ) ').trim();
  if (string.charAt(0) === '(' && string.substr(-1) === ')') {
    string = string.slice(1, -1).trim();
  }
  var chunks = string.split(/\s+/);

      // Log.log( string, chunks )

  var createNewContext = function (operator) {
    newSelection = {
      operator: operator,
      rules: []
    };
    if (selection === undefined) {
      selection = newSelection;
      this$1.selection = newSelection;
    } else {
      selection.rules.push(newSelection);
      selectionStack.push(selection);
      selection = newSelection;
    }
  };

  var getPrevContext = function (operator) {
    oldSelection = selection;
    selection = selectionStack.pop();
    if (selection === undefined) {
      createNewContext(operator);
      pushRule(oldSelection);
    }
  };

  var pushRule = function (rule) {
    selection.rules.push(rule);
  };

  var not;

  for (var i = 0; i < chunks.length; ++i) {
    var c = chunks[ i ];
    var cu = c.toUpperCase();

          // handle parens

    if (c === '(') {
              // Log.log( "(" );

      not = false;
      createNewContext();
      continue
    } else if (c === ')') {
              // Log.log( ")" );

      getPrevContext();
      if (selection.negate) {
        getPrevContext();
      }
      continue
    }

          // leave 'not' context

    if (not > 0) {
      if (cu === 'NOT') {
        not = 1;
      } else if (not === 1) {
        not = 2;
      } else if (not === 2) {
        not = false;
        getPrevContext();
      } else {
        throw new Error("something went wrong with 'not'")
      }
    }

          // handle logic operators

    if (cu === 'AND') {
              // Log.log( "AND" );

      if (selection.operator === 'OR') {
        var lastRule = selection.rules.pop();
        createNewContext('AND');
        pushRule(lastRule);
      } else {
        selection.operator = 'AND';
      }
      continue
    } else if (cu === 'OR') {
              // Log.log( "OR" );

      if (selection.operator === 'AND') {
        getPrevContext('OR');
      } else {
        selection.operator = 'OR';
      }
      continue
    } else if (c.toUpperCase() === 'NOT') {
              // Log.log( "NOT", j );

      not = 1;
      createNewContext();
      selection.negate = true;
      continue
    } else {

              // Log.log( "chunk", c, j, selection );

    }

          // handle keyword attributes

    var keyword = kwd[ cu ];
    if (keyword !== undefined) {
      pushRule({ keyword: keyword });
      continue
    }

    if (cu === 'HYDROGEN') {
      pushRule({ element: 'H' });
      continue
    }

    if (cu === 'SMALL') {
      pushRule({ resname: SmallResname });
      continue
    }

    if (cu === 'NUCLEOPHILIC') {
      pushRule({ resname: NucleophilicResname });
      continue
    }

    if (cu === 'HYDROPHOBIC') {
      pushRule({ resname: HydrophobicResname });
      continue
    }

    if (cu === 'AROMATIC') {
      pushRule({ resname: AromaticResname });
      continue
    }

    if (cu === 'AMIDE') {
      pushRule({ resname: AmideResname });
      continue
    }

    if (cu === 'ACIDIC') {
      pushRule({ resname: AcidicResname });
      continue
    }

    if (cu === 'BASIC') {
      pushRule({ resname: BasicResname });
      continue
    }

    if (cu === 'CHARGED') {
      pushRule({ resname: ChargedResname });
      continue
    }

    if (cu === 'POLAR') {
      pushRule({ resname: PolarResname });
      continue
    }

    if (cu === 'NONPOLAR') {
      pushRule({ resname: NonpolarResname });
      continue
    }

    if (cu === 'CYCLIC') {
      pushRule({ resname: CyclicResname });
      continue
    }

    if (cu === 'ALIPHATIC') {
      pushRule({ resname: AliphaticResname });
      continue
    }

    if (cu === 'SIDECHAINATTACHED') {
      pushRule({
        operator: 'OR',
        rules: [
                      { keyword: kwd.SIDECHAIN },
          {
            operator: 'AND',
            negate: false,
            rules: [
                              { keyword: kwd.PROTEIN },
              {
                operator: 'OR',
                negate: false,
                rules: [
                                      { atomname: 'CA' },
                                      { atomname: 'BB' }
                ]
              }
            ]
          },
          {
            operator: 'AND',
            negate: false,
            rules: [
                              { resname: 'PRO' },
                              { atomname: 'N' }
            ]
          },
          {
            operator: 'AND',
            negate: false,
            rules: [
                              { keyword: kwd.NUCLEIC },
              {
                operator: 'OR',
                negate: true,
                rules: [
                                      { atomname: 'P' },
                                      { atomname: 'OP1' },
                                      { atomname: 'OP2' },
                                      { atomname: "O3'" },
                                      { atomname: 'O3*' },
                                      { atomname: "O5'" },
                                      { atomname: 'O5*' },
                                      { atomname: "C5'" },
                                      { atomname: 'C5*' }
                ]
              }
            ]
          }
        ]
      });
      continue
    }

    if (cu === 'LIGAND') {
      pushRule({
        operator: 'AND',
        rules: [
          {
            operator: 'OR',
            rules: [
                              { keyword: kwd.HETERO },
              {
                negate: true,
                operator: undefined,
                rules: [
                                      { keyword: kwd.POLYMER }
                ]
              }
            ]
          },
          {
            negate: true,
            operator: undefined,
            rules: [
              {
                operator: 'OR',
                rules: [
                                      { keyword: kwd.WATER },
                                      { keyword: kwd.ION }
                ]
              }
            ]
          }
        ]
      });
      continue
    }

    if (SelectAllKeyword.indexOf(cu) !== -1) {
      pushRule({ keyword: kwd.ALL });
      continue
    }

          // handle atom expressions

    if (c.charAt(0) === '@') {
      var indexList = c.substr(1).split(',');
      for (var k = 0, kl = indexList.length; k < kl; ++k) {
        indexList[ k ] = parseInt(indexList[ k ]);
      }
      indexList.sort(function (a, b) { return a - b });
      pushRule({ atomindex: indexList });
      continue
    }

    if (c.charAt(0) === '#') {
      console.error('# for element selection deprecated, use _');
      pushRule({ element: cu.substr(1) });
      continue
    }
    if (c.charAt(0) === '_') {
      pushRule({ element: cu.substr(1) });
      continue
    }

    if (c[0] === '[' && c[c.length - 1] === ']') {
      var resnameList = cu.substr(1, c.length - 2).split(',');
      var resname = resnameList.length > 1 ? resnameList : resnameList[ 0 ];
      pushRule({ resname: resname });
      continue
    } else if (
              (c.length >= 1 && c.length <= 4) &&
              c[0] !== '^' && c[0] !== ':' && c[0] !== '.' && c[0] !== '%' && c[0] !== '/' &&
              isNaN(parseInt(c))
          ) {
      pushRule({ resname: cu });
      continue
    }

          // there must be only one constraint per rule
          // otherwise a test quickly becomes not applicable
          // e.g. chainTest for chainname when resno is present too

    var sele = {
      operator: 'AND',
      rules: []
    };

    var model = c.split('/');
    if (model.length > 1 && model[1]) {
      if (isNaN(parseInt(model[1]))) {
        throw new Error('model must be an integer')
      }
      sele.rules.push({
        model: parseInt(model[1])
      });
    }

    var altloc = model[0].split('%');
    if (altloc.length > 1) {
      sele.rules.push({
        altloc: altloc[1]
      });
    }

    var atomname = altloc[0].split('.');
    if (atomname.length > 1 && atomname[1]) {
      if (atomname[1].length > 4) {
        throw new Error('atomname must be one to four characters')
      }
      sele.rules.push({
        atomname: atomname[1].substring(0, 4).toUpperCase()
      });
    }

    var chain = atomname[0].split(':');
    if (chain.length > 1 && chain[1]) {
      sele.rules.push({
        chainname: chain[1]
      });
    }

    var inscode = chain[0].split('^');
    if (inscode.length > 1) {
      sele.rules.push({
        inscode: inscode[1]
      });
    }

    if (inscode[0]) {
      var negate = (void 0), negate2 = (void 0);
      if (inscode[0][0] === '-') {
        inscode[0] = inscode[0].substr(1);
        negate = true;
      }
      if (inscode[0].includes('--')) {
        inscode[0] = inscode[0].replace('--', '-');
        negate2 = true;
      }
      var resi = inscode[0].split('-');
      if (resi.length === 1) {
        resi = parseInt(resi[0]);
        if (isNaN(resi)) {
          throw new Error('resi must be an integer')
        }
        if (negate) { resi *= -1; }
        sele.rules.push({
          resno: resi
        });
      } else if (resi.length === 2) {
        if (negate) { resi[0] *= -1; }
        if (negate2) { resi[1] *= -1; }
        sele.rules.push({
          resno: [ parseInt(resi[0]), parseInt(resi[1]) ]
        });
      } else {
        throw new Error("resi range must contain one '-'")
      }
    }

          // round up

    if (sele.rules.length === 1) {
      pushRule(sele.rules[ 0 ]);
    } else if (sele.rules.length > 1) {
      pushRule(sele);
    } else {
      throw new Error('empty selection chunk')
    }
  }

      // cleanup

  if (
          this.selection.operator === undefined &&
          this.selection.rules.length === 1 &&
          this.selection.rules[ 0 ].hasOwnProperty('operator')
      ) {
    this.selection = this.selection.rules[ 0 ];
  }
};

Selection.prototype._makeTest = function _makeTest (fn, selection) {
    var this$1 = this;

  if (selection === undefined) { selection = this.selection; }
  if (selection === null) { return false }
  if (selection.error) { return false }

  var n = selection.rules.length;
  if (n === 0) { return false }

  var t = !selection.negate;
  var f = !!selection.negate;

  var subTests = [];
  for (var i = 0; i < n; ++i) {
    var s = selection.rules[ i ];
    if (s.hasOwnProperty('operator')) {
      subTests[ i ] = this$1._makeTest(fn, s);
    }
  }

      // ( x and y ) can short circuit on false
      // ( x or y ) can short circuit on true
      // not ( x and y )

  return function test (entity) {
    var and = selection.operator === 'AND';
    var na = false;

    for (var i = 0; i < n; ++i) {
      var s = selection.rules[ i ];
      var ret = (void 0);

      if (s.hasOwnProperty('operator')) {
        if (subTests[ i ]) {
          ret = subTests[ i ](entity);
        } else {
          ret = -1;
        }

        if (ret === -1) {
          na = true;
          continue
        } else if (ret === true) {
          if (and) { continue } else { return t }
        } else {
          if (and) { return f } else { continue }
        }
      } else {
        if (s.keyword === kwd.ALL) {
          if (and) { continue } else { return t }
        }

        ret = fn(entity, s);

                  // console.log( entity.qualifiedName(), ret, s, selection.negate, "t", t, "f", f )

        if (ret === -1) {
          na = true;
          continue
        } else if (ret === true) {
          if (and) { continue } else { return t }
        } else {
          if (and) { return f } else { continue }
        }
      }
    }

    if (na) {
      return -1
    } else {
      if (and) { return t } else { return f }
    }
  }
};

Selection.prototype._filter = function _filter (fn, selection) {
    var this$1 = this;

  if (selection === undefined) { selection = this.selection; }
  if (selection.error) { return selection }

  var n = selection.rules.length;
  if (n === 0) { return selection }

  var filtered = {
    operator: selection.operator,
    rules: []
  };
  if (selection.hasOwnProperty('negate')) {
    filtered.negate = selection.negate;
  }

  for (var i = 0; i < n; ++i) {
    var s = selection.rules[ i ];
    if (s.hasOwnProperty('operator')) {
      var fs = this$1._filter(fn, s);
      if (fs !== null) { filtered.rules.push(fs); }
    } else if (!fn(s)) {
      filtered.rules.push(s);
    }
  }

  if (filtered.rules.length > 0) {
          // TODO maybe the filtered rules could be returned
          // in some case, but the way how tests are applied
          // e.g. when traversing a structure would also need
          // to change
    return selection
          // return filtered;
  } else {
    return null
  }
};

Selection.prototype.makeAtomTest = function makeAtomTest (atomOnly) {
  var selection;

  if (atomOnly) {
          // console.log( this.selection )

    selection = this._filter(function (s) {
      if (s.keyword !== undefined && !AtomOnlyKeywords.includes(s.keyword)) { return true }
      if (s.model !== undefined) { return true }
      if (s.chainname !== undefined) { return true }
      if (s.resname !== undefined) { return true }
      if (s.resno !== undefined) { return true }
      if (s.sstruc !== undefined) { return true }
      return false
    });
  } else {
    selection = this.selection;
  }

  return this._makeTest(atomTestFn, selection)
};

Selection.prototype.makeResidueTest = function makeResidueTest (residueOnly) {
  var selection;

  if (residueOnly) {
          // console.log( this.selection )

    selection = this._filter(function (s) {
      if (s.keyword !== undefined && AtomOnlyKeywords.includes(s.keyword)) { return true }
      if (s.model !== undefined) { return true }
      if (s.chainname !== undefined) { return true }
      if (s.atomname !== undefined) { return true }
      if (s.element !== undefined) { return true }
      if (s.altloc !== undefined) { return true }
      return false
    });
  } else {
    selection = this.selection;
  }

  return this._makeTest(residueTestFn, selection)
};

Selection.prototype.makeChainTest = function makeChainTest (chainOnly) {
  var selection;

  if (chainOnly) {
          // console.log( this.selection )

    selection = this._filter(function (s) {
      if (s.keyword !== undefined && !ChainKeywords.includes(s.keyword)) { return true }
              // if( s.model!==undefined ) return true;
      if (s.resname !== undefined) { return true }
      if (s.resno !== undefined) { return true }
      if (s.atomname !== undefined) { return true }
      if (s.element !== undefined) { return true }
      if (s.altloc !== undefined) { return true }
      if (s.sstruc !== undefined) { return true }
      if (s.inscode !== undefined) { return true }
      return false
    });
  } else {
    selection = this.selection;
  }

  return this._makeTest(chainTestFn, selection)
};

Selection.prototype.makeModelTest = function makeModelTest (modelOnly) {
  var selection;

  if (modelOnly) {
          // console.log( this.selection )

    selection = this._filter(function (s) {
      if (s.keyword !== undefined) { return true }
      if (s.chainname !== undefined) { return true }
      if (s.resname !== undefined) { return true }
      if (s.resno !== undefined) { return true }
      if (s.atomname !== undefined) { return true }
      if (s.element !== undefined) { return true }
      if (s.altloc !== undefined) { return true }
      if (s.sstruc !== undefined) { return true }
      if (s.inscode !== undefined) { return true }
      return false
    });
  } else {
    selection = this.selection;
  }

  return this._makeTest(modelTestFn, selection)
};

Object.defineProperties( Selection.prototype, prototypeAccessors$1 );

/**
 * @file Selection Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color based on {@link Selection}
 */
var SelectionColormaker = (function (Colormaker$$1) {
  function SelectionColormaker (params) {
    var this$1 = this;

    Colormaker$$1.call(this, params);

    var dataList = params.dataList || [];

    this.colormakerList = [];
    this.selectionList = [];

    dataList.forEach(function (pair) {
      var scheme = pair[0];
      var sele = pair[1];
      var params = pair[2]; if ( params === void 0 ) params = {};

      if (ColormakerRegistry.hasScheme(scheme)) {
        Object.assign(params, {
          scheme: scheme,
          structure: this$1.structure
        });
      } else {
        Object.assign(params, {
          scheme: 'uniform',
          value: new Color(scheme).getHex()
        });
      }

      this$1.colormakerList.push(ColormakerRegistry.getScheme(params));
      this$1.selectionList.push(new Selection(sele));
    });
  }

  if ( Colormaker$$1 ) SelectionColormaker.__proto__ = Colormaker$$1;
  SelectionColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  SelectionColormaker.prototype.constructor = SelectionColormaker;

  SelectionColormaker.prototype.atomColor = function atomColor (a) {
    var this$1 = this;

    for (var i = 0, n = this.selectionList.length; i < n; ++i) {
      if (this$1.selectionList[ i ].test(a)) {
        return this$1.colormakerList[ i ].atomColor(a)
      }
    }

    return 0xFFFFFF
  };

  return SelectionColormaker;
}(Colormaker));

/**
 * @file Colormaker Registry
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var ColormakerScales = {

  '': '',

    // Sequential
  OrRd: '[S] Orange-Red',
  PuBu: '[S] Purple-Blue',
  BuPu: '[S] Blue-Purple',
  Oranges: '[S] Oranges',
  BuGn: '[S] Blue-Green',
  YlOrBr: '[S] Yellow-Orange-Brown',
  YlGn: '[S] Yellow-Green',
  Reds: '[S] Reds',
  RdPu: '[S] Red-Purple',
  Greens: '[S] Greens',
  YlGnBu: '[S] Yellow-Green-Blue',
  Purples: '[S] Purples',
  GnBu: '[S] Green-Blue',
  Greys: '[S] Greys',
  YlOrRd: '[S] Yellow-Orange-Red',
  PuRd: '[S] Purple-Red',
  Blues: '[S] Blues',
  PuBuGn: '[S] Purple-Blue-Green',

    // Diverging
  Viridis: '[D] Viridis',
  Spectral: '[D] Spectral',
  RdYlGn: '[D] Red-Yellow-Green',
  RdBu: '[D] Red-Blue',
  PiYG: '[D] Pink-Yellowgreen',
  PRGn: '[D] Purplered-Green',
  RdYlBu: '[D] Red-Yellow-Blue',
  BrBG: '[D] Brown-Bluegreen',
  RdGy: '[D] Red-Grey',
  PuOr: '[D] Purple-Orange',

    // Qualitative
  Set1: '[Q] Set1',
  Set2: '[Q] Set2',
  Set3: '[Q] Set3',
  Dark2: '[Q] Dark2',
  Paired: '[Q] Paired',
  Pastel1: '[Q] Pastel1',
  Pastel2: '[Q] Pastel2',
  Accent: '[Q] Accent',

    // Other
  rainbow: '[?] Rainbow',
  rwb: '[?] Red-White-Blue'

};

var ColormakerModes = {

  '': '',

  rgb: 'Red Green Blue',
  hsv: 'Hue Saturation Value',
  hsl: 'Hue Saturation Lightness',
  hsi: 'Hue Saturation Intensity',
  lab: 'CIE L*a*b*',
  hcl: 'Hue Chroma Lightness'

};

/**
 * Class for registering {@link Colormaker}s. Generally use the
 * global {@link src/globals.js~ColormakerRegistry} instance.
 */
var ColormakerRegistry$1 = function ColormakerRegistry () {
  this.schemes = {};
  this.userSchemes = {};
};

ColormakerRegistry$1.prototype.getScheme = function getScheme (params) {
  var p = params || {};
  var id = p.scheme || '';

  var SchemeClass;

  if (id in this.schemes) {
    SchemeClass = this.schemes[ id ];
  } else if (id in this.userSchemes) {
    SchemeClass = this.userSchemes[ id ];
  } else {
    SchemeClass = Colormaker;
  }

  return new SchemeClass(params)
};

/**
 * Get an description of available schemes as an
 * object with id-label as key-value pairs
 * @return {Object} available schemes
 */
ColormakerRegistry$1.prototype.getSchemes = function getSchemes () {
  var types = {};

  Object.keys(this.schemes).forEach(function (k) {
    types[ k ] = k;
  });

  Object.keys(this.userSchemes).forEach(function (k) {
    types[ k ] = k.split('|')[ 1 ];
  });

  return types
};

/**
 * Get an description of available scales as an
 * object with id-label as key-value pairs
 * @return {Object} available scales
 */
ColormakerRegistry$1.prototype.getScales = function getScales () {
  return ColormakerScales
};

ColormakerRegistry$1.prototype.getModes = function getModes () {
  return ColormakerModes
};

/**
 * Add a scheme with a hardcoded id
 * @param {String} id - the id
 * @param {Colormaker} scheme - the colormaker
 * @return {undefined}
 */
ColormakerRegistry$1.prototype.add = function add (id, scheme) {
  this.schemes[ id ] = scheme;
};

/**
 * Register a custom scheme
 *
 * @example
 * // Create a class with a `atomColor` method that returns a hex color.
 * var schemeId = NGL.ColormakerRegistry.addScheme( function( params ){
 *   this.atomColor = function( atom ){
 *       if( atom.serial < 1000 ){
 *           return 0x0000FF;// blue
 *       }else if( atom.serial > 2000 ){
 *           return 0xFF0000;// red
 *       }else{
 *           return 0x00FF00;// green
 *       }
 *   };
 * } );
 *
 * stage.loadFile( "rcsb://3dqb.pdb" ).then( function( o ){
 *   o.addRepresentation( "cartoon", { color: schemeId } );// pass schemeId here
 *   o.autoView();
 * } );
 *
 * @param {Function|Colormaker} scheme - constructor or {@link Colormaker} instance
 * @param {String} label - scheme label
 * @return {String} id to refer to the registered scheme
 */
ColormakerRegistry$1.prototype.addScheme = function addScheme (scheme, label) {
  if (!(scheme instanceof Colormaker)) {
    scheme = this._createScheme(scheme, label);
  }

  return this._addUserScheme(scheme, label)
};

/**
 * Add a user-defined scheme
 * @param {Colormaker} scheme - the user-defined scheme
 * @param {String} [label] - scheme label
 * @return {String} id to refer to the registered scheme
 */
ColormakerRegistry$1.prototype._addUserScheme = function _addUserScheme (scheme, label) {
  label = label || '';
  var id = '' + generateUUID() + '|' + label;
  this.userSchemes[ id ] = scheme;

  return id
};

/**
 * Remove the scheme with the given id
 * @param{String} id - scheme to remove
 * @return {undefined}
 */
ColormakerRegistry$1.prototype.removeScheme = function removeScheme (id) {
  delete this.userSchemes[ id ];
};

ColormakerRegistry$1.prototype._createScheme = function _createScheme (constructor, label) {
  var _Colormaker = function (params) {
    Colormaker.call(this, params);
    this.label = label || '';
    constructor.call(this, params);
  };

  _Colormaker.prototype = Colormaker.prototype;
  _Colormaker.prototype.constructor = Colormaker;

  return _Colormaker
};

/**
 * Create and a selection-based coloring scheme. Supply a list with pairs
 * of colorname and selection for coloring by selections. Use the last
 * entry as a default (catch all) coloring definition.
 *
 * @example
 * var schemeId = NGL.ColormakerRegistry.addSelectionScheme( [
 *   [ "red", "64-74 or 134-154 or 222-254 or 310-310 or 322-326" ],
 *   [ "green", "311-322" ],
 *   [ "yellow", "40-63 or 75-95 or 112-133 or 155-173 or 202-221 or 255-277 or 289-309" ],
 *   [ "blue", "1-39 or 96-112 or 174-201 or 278-288" ],
 *   [ "white", "*" ]
 * ], "Transmembrane 3dqb" );
 *
 * stage.loadFile( "rcsb://3dqb.pdb" ).then( function( o ){
 *   o.addRepresentation( "cartoon", { color: schemeId } );// pass schemeId here
 *   o.autoView();
 * } );
 *
 * @param {Array} dataList - cloror-selection pairs
 * @param {String} label - scheme name
 * @return {String} id to refer to the registered scheme
 */
ColormakerRegistry$1.prototype.addSelectionScheme = function addSelectionScheme (dataList, label) {
  var MySelectionColormaker = (function (SelectionColormaker$$1) {
      function MySelectionColormaker (params) {
      SelectionColormaker$$1.call(this, Object.assign({ dataList: dataList }, params));
    }

      if ( SelectionColormaker$$1 ) MySelectionColormaker.__proto__ = SelectionColormaker$$1;
      MySelectionColormaker.prototype = Object.create( SelectionColormaker$$1 && SelectionColormaker$$1.prototype );
      MySelectionColormaker.prototype.constructor = MySelectionColormaker;

      return MySelectionColormaker;
    }(SelectionColormaker));

  return this._addUserScheme(MySelectionColormaker, label)
};

/**
 * Check if a scheme with the given id exists
 * @param{String}id - the id to check
 * @return {Boolean} flag indicating if the scheme exists
 */
ColormakerRegistry$1.prototype.hasScheme = function hasScheme (id) {
  return id in this.schemes || id in this.userSchemes
};

/**
 * @file Globals
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * The browser name: "Opera", "Chrome", "Firefox", "Mobile Safari",
 * "Internet Explorer", "Safari" or false.
 * @type {String|false}
 */
var Browser = getBrowser();

/**
 * Flag indicating a mobile browser
 * @type {Boolean}
 */
var Mobile = typeof window !== 'undefined' ? typeof window.orientation !== 'undefined' : false;

var SupportsReadPixelsFloat = false;
function setSupportsReadPixelsFloat (value) {
  SupportsReadPixelsFloat = value;
}

/**
 * Flag indicating support for the `EXT_frag_depth` WebGL extension
 * @type {Boolean}
 */
var ExtensionFragDepth = false;
function setExtensionFragDepth (value) {
  ExtensionFragDepth = value;
}

var Log = {
  log: Function.prototype.bind.call(console.log, console),
  info: Function.prototype.bind.call(console.info, console),
  warn: Function.prototype.bind.call(console.warn, console),
  error: Function.prototype.bind.call(console.error, console),
  time: Function.prototype.bind.call(console.time, console),
  timeEnd: Function.prototype.bind.call(console.timeEnd, console)
};

var Debug = boolean(getQuery('debug'));
function setDebug (value) {
  Debug = value;
}

var WebglErrorMessage = '<div style="display:flex;align-items:center;justify-content:center;height:100%;"><p style="padding:15px;text-align:center;">Your browser/graphics card does not seem to support <a target="_blank" href="https://en.wikipedia.org/wiki/WebGL">WebGL</a>.<br/><br/>Find out how to get it <a target="_blank" href="http://get.webgl.org/">here</a>.</p></div>';

var WorkerRegistry = new WorkerRegistry$1();
/**
 * Global instance of {@link src/color/colormaker-registry.js~ColormakerRegistry}
 * @type {src/color/colormaker-registry.js~ColormakerRegistry}
 */
var ColormakerRegistry = new ColormakerRegistry$1();
var DatasourceRegistry = new Registry('datasource');
var RepresentationRegistry = new Registry('representatation');
var ParserRegistry = new Registry('parser');
var ShaderRegistry = new Registry('shader');
var DecompressorRegistry = new Registry('decompressor');
var ComponentRegistry = new Registry('component');

/**
 * @file Streamer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var Streamer = function Streamer (src, params) {
  var p = params || {};

  this.compressed = defaults(p.compressed, false);
  this.binary = defaults(p.binary, false);
  this.json = defaults(p.json, false);
  this.xml = defaults(p.xml, false);

  this.src = src;
  this.chunkSize = 1024 * 1024 * 10;
  this.newline = '\n';

  this.__pointer = 0;
  this.__partialLine = '';

  if (this.__srcName) {
    this[ this.__srcName ] = src;
  }
};

var prototypeAccessors$2 = { type: {},__srcName: {} };

prototypeAccessors$2.type.get = function () { return '' };

prototypeAccessors$2.__srcName.get = function () { return undefined };

Streamer.prototype.isBinary = function isBinary () {
  return this.binary || this.compressed
};

Streamer.prototype.onload = function onload () {};

Streamer.prototype.onprogress = function onprogress () {};

Streamer.prototype.onerror = function onerror () {};

Streamer.prototype.read = function read () {
    var this$1 = this;

  return new Promise(function (resolve, reject) {
    try {
      this$1._read(function (data) {
        var decompressFn = DecompressorRegistry.get(this$1.compressed);

        if (this$1.compressed && decompressFn) {
          this$1.data = decompressFn(data);
        } else {
          if ((this$1.binary || this$1.compressed) && data instanceof ArrayBuffer) {
            data = new Uint8Array(data);
          }
          this$1.data = data;
        }

        resolve(this$1.data);
      });
    } catch (e) {
      reject(e);
    }
  })
};

Streamer.prototype._read = function _read (callback) {
  // overwrite this method when this.src does not contain the data
  callback(this.src);
};

Streamer.prototype._chunk = function _chunk (start, end) {
  end = Math.min(this.data.length, end);

  if (start === 0 && this.data.length === end) {
    return this.data
  } else {
    if (this.isBinary()) {
      return this.data.subarray(start, end)
    } else {
      return this.data.substring(start, end)
    }
  }
};

Streamer.prototype.chunk = function chunk (start) {
  var end = start + this.chunkSize;

  return this._chunk(start, end)
};

Streamer.prototype.peekLines = function peekLines (m) {
  var data = this.data;
  var n = data.length;

  // FIXME does not work for multi-char newline
  var newline = this.isBinary() ? this.newline.charCodeAt(0) : this.newline;

  var i;
  var count = 0;
  for (i = 0; i < n; ++i) {
    if (data[ i ] === newline) { ++count; }
    if (count === m) { break }
  }

  var chunk = this._chunk(0, i + 1);
  var d = this.chunkToLines(chunk, '', i > n);

  return d.lines
};

Streamer.prototype.chunkCount = function chunkCount () {
  return Math.floor(this.data.length / this.chunkSize) + 1
};

Streamer.prototype.asText = function asText () {
  return this.isBinary() ? uint8ToString(this.data) : this.data
};

Streamer.prototype.chunkToLines = function chunkToLines (chunk, partialLine, isLast) {
  var newline = this.newline;

  if (!this.isBinary() && chunk.length === this.data.length) {
    return {
      lines: chunk.split(newline),
      partialLine: ''
    }
  }

  var lines = [];
  var str = this.isBinary() ? uint8ToString(chunk) : chunk;
  var idx = str.lastIndexOf(newline);

  if (idx === -1) {
    partialLine += str;
  } else {
    var str2 = partialLine + str.substr(0, idx);
    lines = lines.concat(str2.split(newline));

    if (idx === str.length - newline.length) {
      partialLine = '';
    } else {
      partialLine = str.substr(idx + newline.length);
    }
  }

  if (isLast && partialLine !== '') {
    lines.push(partialLine);
  }

  return {
    lines: lines,
    partialLine: partialLine
  }
};

Streamer.prototype.nextChunk = function nextChunk () {
  var start = this.__pointer;

  if (start > this.data.length) {
    return undefined
  }

  this.__pointer += this.chunkSize;
  return this.chunk(start)
};

Streamer.prototype.nextChunkOfLines = function nextChunkOfLines () {
  var chunk = this.nextChunk();

  if (chunk === undefined) {
    return undefined
  }

  var isLast = this.__pointer > this.data.length;
  var d = this.chunkToLines(chunk, this.__partialLine, isLast);

  this.__partialLine = d.partialLine;

  return d.lines
};

Streamer.prototype.eachChunk = function eachChunk (callback) {
    var this$1 = this;

  var chunkSize = this.chunkSize;
  var n = this.data.length;
  var chunkCount = this.chunkCount();

  for (var i = 0; i < n; i += chunkSize) {
    var chunk = this$1.chunk(i);
    var chunkNo = Math.round(i / chunkSize);

    callback(chunk, chunkNo, chunkCount);
  }
};

Streamer.prototype.eachChunkOfLines = function eachChunkOfLines (callback) {
    var this$1 = this;

  this.eachChunk(function (chunk, chunkNo, chunkCount) {
    var isLast = chunkNo === chunkCount + 1;
    var d = this$1.chunkToLines(chunk, this$1.__partialLine, isLast);

    this$1.__partialLine = d.partialLine;

    callback(d.lines, chunkNo, chunkCount);
  });
};

Streamer.prototype.dispose = function dispose () {
  delete this.src;

  if (this.__srcName) {
    delete this[ this.__srcName ];
  }
};

Object.defineProperties( Streamer.prototype, prototypeAccessors$2 );

/**
 * @file File Streamer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var FileStreamer = (function (Streamer$$1) {
  function FileStreamer () {
    Streamer$$1.apply(this, arguments);
  }

  if ( Streamer$$1 ) FileStreamer.__proto__ = Streamer$$1;
  FileStreamer.prototype = Object.create( Streamer$$1 && Streamer$$1.prototype );
  FileStreamer.prototype.constructor = FileStreamer;

  var prototypeAccessors = { type: {},__srcName: {} };

  prototypeAccessors.type.get = function () { return 'file' };

  prototypeAccessors.__srcName.get = function () { return 'file' };

  FileStreamer.prototype._read = function _read (callback) {
    var this$1 = this;

    var reader;

    if (typeof importScripts === 'function') {
      // Use FileReaderSync within Worker

      reader = new window.FileReaderSync();
      var data;
      if (this.binary || this.compressed) {
        data = reader.readAsArrayBuffer(this.file);
      } else {
        data = reader.readAsText(this.file);
      }

        //

      callback(data);
    } else {
      reader = new window.FileReader();

      //

      reader.onload = function (event) {
        callback(event.target.result);
      };

      //

      if (typeof this.onprogress === 'function') {
        reader.onprogress = function (event) {
          this$1.onprogress(event);
        };
      }

      //

      if (typeof this.onerror === 'function') {
        reader.onerror = function (event) {
          this$1.onerror(event);
        };
      }

      //

      if (this.binary || this.compressed) {
        reader.readAsArrayBuffer(this.file);
      } else {
        reader.readAsText(this.file);
      }
    }
  };

  Object.defineProperties( FileStreamer.prototype, prototypeAccessors );

  return FileStreamer;
}(Streamer));

/**
 * @file Network Streamer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var NetworkStreamer = (function (Streamer$$1) {
  function NetworkStreamer () {
    Streamer$$1.apply(this, arguments);
  }

  if ( Streamer$$1 ) NetworkStreamer.__proto__ = Streamer$$1;
  NetworkStreamer.prototype = Object.create( Streamer$$1 && Streamer$$1.prototype );
  NetworkStreamer.prototype.constructor = NetworkStreamer;

  var prototypeAccessors = { type: {},__srcName: {} };

  prototypeAccessors.type.get = function () { return 'network' };

  prototypeAccessors.__srcName.get = function () { return 'url' };

  NetworkStreamer.prototype._read = function _read (callback) {
    var url = this.src;

    if (typeof importScripts === 'function') {
        // FIXME
        // adjust relative path when inside a web worker
      if (url.substr(0, 3) === '../') { url = '../' + url; }
    }

    var xhr = new window.XMLHttpRequest();
    xhr.open('GET', url, true);

    //

    xhr.addEventListener('load', function () {
      if (xhr.status === 200 || xhr.status === 304 ||
            // when requesting from local file system
            // the status in Google Chrome/Chromium is 0
            xhr.status === 0
        ) {
        try {
          callback(xhr.response);
        } catch (e) {
          this.onerror(e);
        }
      } else {
        if (typeof this.onerror === 'function') {
          this.onerror(xhr.status);
        }

        throw new Error('NetworkStreamer._read: status code ' + xhr.status)
      }
    }.bind(this), false);

    //

    // if( typeof this.onprogress === "function" ){

    //     xhr.addEventListener( 'progress', function ( event ) {

    //         this.onprogress( event );

    //     }.bind( this ), false );

    // }

    //

    if (typeof this.onerror === 'function') {
      xhr.addEventListener('error', function (event) {
        this.onerror(event);
      }.bind(this), false);
    }

    //

    if (this.isBinary()) {
      xhr.responseType = 'arraybuffer';
    } else if (this.json) {
      xhr.responseType = 'json';
    } else if (this.xml) {
      xhr.responseType = 'document';
    } else {
      xhr.responseType = 'text';
    }
    // xhr.crossOrigin = true;

    xhr.send(null);

    // try {
    //     xhr.send( null );
    // }catch( e ){
    //     if( typeof this.onerror === "function" ){
    //         this.onerror( e.message );
    //     }
    // }
  };

  Object.defineProperties( NetworkStreamer.prototype, prototypeAccessors );

  return NetworkStreamer;
}(Streamer));

/**
 * @file Loader
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Loader parameter object.
 * @typedef {Object} LoaderParameters - loader parameters
 * @property {String} ext - file extension, determines file type
 * @property {Boolean} compressed - flag data as compressed
 * @property {Boolean} binary - flag data as binary
 * @property {String} name - set data name
 */

var binaryFileExtensions = [
  'mmtf', 'dcd', 'mrc', 'ccp4', 'map', 'dsn6', 'brix', 'dxbin'
];

var jsonFileTypes = [
  'json'
];

var xmlFileTypes = [
  'xml', 'validation'
];

/**
 * Loader base class
 */
var Loader$1 = function Loader (src, params) {
  var p = Object.assign({}, params);

  var binary = binaryFileExtensions.includes(p.ext);

  this.compressed = defaults(p.compressed, false);
  this.binary = defaults(p.binary, binary);
  this.name = defaults(p.name, '');
  this.ext = defaults(p.ext, '');
  this.dir = defaults(p.dir, '');
  this.path = defaults(p.path, '');
  this.protocol = defaults(p.protocol, '');

  this.params = params;

      //

  var streamerParams = {
    compressed: this.compressed,
    binary: this.binary,
    json: jsonFileTypes.includes(this.ext),
    xml: xmlFileTypes.includes(this.ext)
  };

  if ((typeof File !== 'undefined' && src instanceof window.File) ||
      (typeof Blob !== 'undefined' && src instanceof window.Blob)
  ) {
    this.streamer = new FileStreamer(src, streamerParams);
  } else {
    this.streamer = new NetworkStreamer(src, streamerParams);
  }

  if (typeof p.onProgress === 'function') {
    this.streamer.onprogress = p.onprogress;
  }
};

  /**
   * Load data
   * @abstract
   * @return {Promise} resolves to the loaded data {@link Object}
   */
Loader$1.prototype.load = function load () {
  return Promise.reject(new Error('not implemented'))
};

/**
 * @file Parser Loader
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Parser loader class
 * @extends Loader
 */
var ParserLoader = (function (Loader) {
  function ParserLoader () {
    Loader.apply(this, arguments);
  }

  if ( Loader ) ParserLoader.__proto__ = Loader;
  ParserLoader.prototype = Object.create( Loader && Loader.prototype );
  ParserLoader.prototype.constructor = ParserLoader;

  ParserLoader.prototype.load = function load () {
    var ParserClass = ParserRegistry.get(this.ext);
    var parser = new ParserClass(this.streamer, this.params);

    return parser.parse()
  };

  return ParserLoader;
}(Loader$1));

/**
 * @file Script
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Script class
 */
var Script = function Script (functionBody, name, path) {
  this.signals = {
    elementAdded: new Signal(),
    elementRemoved: new Signal(),
    nameChanged: new Signal()
  };

  this.name = name;
  this.path = path;
  this.dir = path.substring(0, path.lastIndexOf('/') + 1);

  try {
    /* eslint-disable no-new-func */
    this.fn = new Function(
      'stage', 'panel',
      '__name__', '__path__', '__dir__',
      functionBody
    );
  } catch (e) {
    Log.error('Script compilation failed', e);
    this.fn = function () {};
  }
};

var prototypeAccessors$3 = { type: {} };

/**
 * Object type
 * @readonly
 */
prototypeAccessors$3.type.get = function () { return 'Script' };

/**
 * Execute the script
 * @param{Stage} stage - the stage context
 * @return {Promise} - resolve when script finished running
 */
Script.prototype.call = function call (stage) {
    var this$1 = this;

  var panel = {
    add: function (/* element */) {
      this.signals.elementAdded.dispatch(arguments);
    }.bind(this),

    remove: function (/* element */) {
      this.signals.elementRemoved.dispatch(arguments);
    }.bind(this),

    setName: function (value) {
      this.signals.nameChanged.dispatch(value);
    }.bind(this)
  };

  return new Promise(function (resolve, reject) {
    var args = [
      stage, panel,
      this$1.name, this$1.path, this$1.dir
    ];

    try {
      this$1.fn.apply(null, args);
      resolve();
    } catch (e) {
      Log.error('Script.fn', e);
      reject(e);
    }
  })
};

Object.defineProperties( Script.prototype, prototypeAccessors$3 );

/**
 * @file Script Loader
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Script loader class
 * @extends Loader
 */
var ScriptLoader = (function (Loader) {
  function ScriptLoader () {
    Loader.apply(this, arguments);
  }

  if ( Loader ) ScriptLoader.__proto__ = Loader;
  ScriptLoader.prototype = Object.create( Loader && Loader.prototype );
  ScriptLoader.prototype.constructor = ScriptLoader;

  ScriptLoader.prototype.load = function load () {
    var this$1 = this;

    return this.streamer.read().then(function () {
      return new Script(
                this$1.streamer.asText(), this$1.name, this$1.path
            )
    })
  };

  return ScriptLoader;
}(Loader$1));

/**
 * @file Plugin Loader
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Plugin loader class
 * @extends Loader
 */
var PluginLoader = (function (Loader) {
  function PluginLoader () {
    Loader.apply(this, arguments);
  }

  if ( Loader ) PluginLoader.__proto__ = Loader;
  PluginLoader.prototype = Object.create( Loader && Loader.prototype );
  PluginLoader.prototype.constructor = PluginLoader;

  PluginLoader.prototype.load = function load () {
    var this$1 = this;

    var basePath;
    if (this.protocol) {
      basePath = this.protocol + '://' + this.dir;
    } else {
      basePath = this.dir;
    }

    return this.streamer.read().then(function () {
      var manifest = JSON.parse(this$1.streamer.asText());
      var promiseList = [];

      manifest.files.map(function (name) {
        promiseList.push(
                    autoLoad(basePath + name, {
                      ext: 'text', useWorker: false
                    })
                );
      });

      return Promise.all(promiseList).then(function (dataList) {
        var text = dataList.reduce(function (text, value) {
          return text + '\n\n' + value.data
        }, '');
        text += manifest.source || '';

        return new Script(text, this$1.name, this$1.path)
      })
    })
  };

  return PluginLoader;
}(Loader$1));

/**
 * @file Loader Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function getDataInfo (src) {
  var info = getFileInfo(src);
  var datasource = DatasourceRegistry.get(info.protocol);
  if (datasource) {
    info = getFileInfo(datasource.getUrl(info.src));
    if (!info.ext && datasource.getExt) {
      info.ext = datasource.getExt(src);
    }
  }
  return info
}

/**
 * Load a file
 *
 * @example
 * // load from URL
 * NGL.autoLoad( "http://files.rcsb.org/download/5IOS.cif" );
 *
 * @example
 * // load binary data in CCP4 format via a Blob
 * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
 * NGL.autoLoad( binaryBlob, { ext: "ccp4" } );
 *
 * @example
 * // load string data in PDB format via a Blob
 * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
 * NGL.autoLoad( stringBlob, { ext: "pdb" } );
 *
 * @example
 * // load a File object
 * NGL.autoLoad( file );
 *
 * @param  {String|File|Blob} file - either a URL or an object containing the file data
 * @param  {LoaderParameters} params - loading parameters
 * @return {Promise} Promise resolves to the loaded data
 */
function autoLoad (file, params) {
  var p = Object.assign(getDataInfo(file), params);

  var LoaderClass;
  if (ParserRegistry.names.includes(p.ext)) {
    LoaderClass = ParserLoader;
  } else if ([ 'ngl', 'js' ].includes(p.ext)) {
    LoaderClass = ScriptLoader;
  } else if (p.ext === 'plugin') {
    LoaderClass = PluginLoader;
  }

  if (LoaderClass) {
    var loader = new LoaderClass(p.src, p);
    return loader.load()
  } else {
    return Promise.reject(new Error("autoLoad: ext '" + p.ext + "' unknown"))
  }
}

// changed to be usable as an es6 module, ASR

/*! sprintf-js v1.0.3 | Copyright (c) 2007-present, Alexandru Marasteanu <hello@alexei.ro> | BSD-3-Clause */

    var re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /bcdiefguxX/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[\+\-]/
    };

    function sprintf() {
        var key = arguments[0], cache = sprintf.cache;
        if (!(cache[key] && cache.hasOwnProperty(key))) {
            cache[key] = sprintf.parse(key);
        }
        return sprintf.format.call(null, cache[key], arguments)
    }

    sprintf.format = function(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = '';
        for (i = 0; i < tree_length; i++) {
            node_type = get_type(parse_tree[i]);
            if (node_type === 'string') {
                output[output.length] = parse_tree[i];
            }
            else if (node_type === 'array') {
                match = parse_tree[i]; // convenience purposes only
                if (match[2]) { // keyword argument
                    arg = argv[cursor];
                    for (k = 0; k < match[2].length; k++) {
                        if (!arg.hasOwnProperty(match[2][k])) {
                            throw new Error(sprintf('[sprintf] property "%s" does not exist', match[2][k]))
                        }
                        arg = arg[match[2][k]];
                    }
                }
                else if (match[1]) { // positional argument (explicit)
                    arg = argv[match[1]];
                }
                else { // positional argument (implicit)
                    arg = argv[cursor++];
                }

                if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && get_type(arg) == 'function') {
                    arg = arg();
                }

                if (re.numeric_arg.test(match[8]) && (get_type(arg) != 'number' && isNaN(arg))) {
                    throw new TypeError(sprintf("[sprintf] expecting number but found %s", get_type(arg)))
                }

                if (re.number.test(match[8])) {
                    is_positive = arg >= 0;
                }

                switch (match[8]) {
                    case 'b':
                        arg = parseInt(arg, 10).toString(2);
                    break
                    case 'c':
                        arg = String.fromCharCode(parseInt(arg, 10));
                    break
                    case 'd':
                    case 'i':
                        arg = parseInt(arg, 10);
                    break
                    case 'j':
                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0);
                    break
                    case 'e':
                        arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential();
                    break
                    case 'f':
                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg);
                    break
                    case 'g':
                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg);
                    break
                    case 'o':
                        arg = arg.toString(8);
                    break
                    case 's':
                        arg = String(arg);
                        arg = (match[7] ? arg.substring(0, match[7]) : arg);
                    break
                    case 't':
                        arg = String(!!arg);
                        arg = (match[7] ? arg.substring(0, match[7]) : arg);
                    break
                    case 'T':
                        arg = get_type(arg);
                        arg = (match[7] ? arg.substring(0, match[7]) : arg);
                    break
                    case 'u':
                        arg = parseInt(arg, 10) >>> 0;
                    break
                    case 'v':
                        arg = arg.valueOf();
                        arg = (match[7] ? arg.substring(0, match[7]) : arg);
                    break
                    case 'x':
                        arg = parseInt(arg, 10).toString(16);
                    break
                    case 'X':
                        arg = parseInt(arg, 10).toString(16).toUpperCase();
                    break
                }
                if (re.json.test(match[8])) {
                    output[output.length] = arg;
                }
                else {
                    if (re.number.test(match[8]) && (!is_positive || match[3])) {
                        sign = is_positive ? '+' : '-';
                        arg = arg.toString().replace(re.sign, '');
                    }
                    else {
                        sign = '';
                    }
                    pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' ';
                    pad_length = match[6] - (sign + arg).length;
                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : '') : '';
                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg);
                }
            }
        }
        return output.join('')
    };

    sprintf.cache = {};

    sprintf.parse = function(fmt) {
        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
        while (_fmt) {
            if ((match = re.text.exec(_fmt)) !== null) {
                parse_tree[parse_tree.length] = match[0];
            }
            else if ((match = re.modulo.exec(_fmt)) !== null) {
                parse_tree[parse_tree.length] = '%';
            }
            else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1;
                    var field_list = [], replacement_field = match[2], field_match = [];
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list[field_list.length] = field_match[1];
                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                field_list[field_list.length] = field_match[1];
                            }
                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                field_list[field_list.length] = field_match[1];
                            }
                            else {
                                throw new SyntaxError("[sprintf] failed to parse named argument key")
                            }
                        }
                    }
                    else {
                        throw new SyntaxError("[sprintf] failed to parse named argument key")
                    }
                    match[2] = field_list;
                }
                else {
                    arg_names |= 2;
                }
                if (arg_names === 3) {
                    throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported")
                }
                parse_tree[parse_tree.length] = match;
            }
            else {
                throw new SyntaxError("[sprintf] unexpected placeholder")
            }
            _fmt = _fmt.substring(match[0].length);
        }
        return parse_tree
    };

    /**
     * helpers
     */
    function get_type(variable) {
        if (typeof variable === 'number') {
            return 'number'
        }
        else if (typeof variable === 'string') {
            return 'string'
        }
        else {
            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()
        }
    }

    var preformattedPadding = {
        '0': ['', '0', '00', '000', '0000', '00000', '000000', '0000000'],
        ' ': ['', ' ', '  ', '   ', '    ', '     ', '      ', '       '],
        '_': ['', '_', '__', '___', '____', '_____', '______', '_______'],
    };
    function str_repeat(input, multiplier) {
        if (multiplier >= 0 && multiplier <= 7 && preformattedPadding[input]) {
            return preformattedPadding[input][multiplier]
        }
        return Array(multiplier + 1).join(input)
    }

/**
 * @file Pdb Writer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function PdbWriter (structure, params) {
  var p = Object.assign({}, params);

  var renumberSerial = p.renumberSerial !== undefined ? p.renumberSerial : true;
  var remarks = p.remarks || [];
  if (!Array.isArray(remarks)) { remarks = [ remarks ]; }

  var records;

  function writeRecords () {
    records = [];

    writeTitle();
    writeRemarks();
    writeAtoms();
  }

  // http://www.wwpdb.org/documentation/file-format

  // Sample PDB line, the coords X,Y,Z are fields 5,6,7 on each line.
  // ATOM      1  N   ARG     1      29.292  13.212 -12.751  1.00 33.78      1BPT 108

  function DEF (x, y) {
    return x !== undefined ? x : y
  }

  var atomFormat =
    'ATOM  %5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s';

  var hetatmFormat =
    'HETATM%5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s';

  function writeTitle () {
    // FIXME multiline if title line longer than 80 chars
    records.push(sprintf('TITEL %-74s', structure.name));
  }

  function writeRemarks () {
    remarks.forEach(function (str) {
      records.push(sprintf('REMARK %-73s', str));
    });

    if (structure.trajectory) {
      records.push(sprintf(
        'REMARK %-73s',
        "Trajectory '" + structure.trajectory.name + "'"
      ));
      records.push(sprintf(
        'REMARK %-73s',
        'Frame ' + structure.trajectory.frame + ''
      ));
    }
  }

  function writeAtoms () {
    var ia = 1;
    var im = 1;

    structure.eachModel(function (m) {
      records.push(sprintf('MODEL %-74d', im++));

      m.eachAtom(function (a) {
        var formatString = a.hetero ? hetatmFormat : atomFormat;
        var serial = renumberSerial ? ia : a.serial;

        // Alignment of one-letter atom name such as C starts at column 14,
        // while two-letter atom name such as FE starts at column 13.
        var atomname = a.atomname;
        if (atomname.length === 1) { atomname = ' ' + atomname; }

        records.push(sprintf(
          formatString,

          serial,
          atomname,
          a.resname,
          DEF(a.chainname, ' '),
          a.resno,
          a.x, a.y, a.z,
          DEF(a.occurence, 1.0),
          DEF(a.bfactor, 0.0),
          DEF(a.segid, ''),
          DEF(a.element, '')
        ));
        ia += 1;
      });

      records.push(sprintf('%-80s', 'ENDMDL'));
      im += 1;
    });

    records.push(sprintf('%-80s', 'END'));
  }

  function getString () {
    writeRecords();
    return records.join('\n')
  }

  function getBlob () {
    return new window.Blob([ getString() ], { type: 'text/plain' })
  }

  function _download (name, ext) {
    name = name || 'structure';
    ext = ext || 'pdb';

    var file = name + '.' + ext;
    var blob = getBlob();

    download(blob, file);
  }

  // API

  this.getString = getString;
  this.getBlob = getBlob;
  this.download = _download;
}

/**
 * @file Counter
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * {@link Signal}, dispatched when the `count` changes
 * @example
 * counter.signals.countChanged.add( function( delta ){ ... } );
 * @event Counter#countChanged
 * @type {Integer}
 */

/**
 * Counter class for keeping track of counts
 */
var Counter = function Counter () {
      /**
       * The `count`
       * @member {Integer}
       */
  this.count = 0;

  this.signals = {
    countChanged: new Signal()
  };
};

  /**
   * Set the `count` to zero
   * @return {undefined}
   */
Counter.prototype.clear = function clear () {
  this.change(-this.count);
};

  /**
   * Change the `count`
   * @fires Counter#countChanged
   * @param {Integer} delta - count change
   * @return {undefined}
   */
Counter.prototype.change = function change (delta) {
  this.count += delta;
  this.signals.countChanged.dispatch(delta, this.count);

  if (this.count < 0) {
    Log.warn('Counter.count below zero', this.count);
  }
};

  /**
   * Increments the `count` by one.
   * @return {undefined}
   */
Counter.prototype.increment = function increment () {
  this.change(1);
};

  /**
   * Decrements the `count` by one.
   * @return {undefined}
   */
Counter.prototype.decrement = function decrement () {
  this.change(-1);
};

  /**
   * Listen to another counter object and change this `count` by the
   * same amount
   * @param{Counter} counter - the counter object to listen to
   * @return {undefined}
   */
Counter.prototype.listen = function listen (counter) {
  this.change(counter.count);
  counter.signals.countChanged.add(this.change, this);
};

  /**
   * Stop listening to the other counter object
   * @param{Counter} counter - the counter object to stop listening to
   * @return {undefined}
   */
Counter.prototype.unlisten = function unlisten (counter) {
  var countChanged = counter.signals.countChanged;
  if (countChanged.has(this.change, this)) {
    countChanged.remove(this.change, this);
  }
};

  /**
   * Invole the callback function once, when the `count` becomes zero
   * @param{Function} callback - the callback function
   * @param{Object} context - the context for the callback function
   * @return {undefined}
   */
Counter.prototype.onZeroOnce = function onZeroOnce (callback, context) {
  if (this.count === 0) {
    callback.call(context, 0, 0);
  } else {
    var fn = function () {
      if (this.count === 0) {
        this.signals.countChanged.remove(fn, this);
        callback.apply(context, arguments);
      }
    };
    this.signals.countChanged.add(fn, this);
  }
};

Counter.prototype.dispose = function dispose () {
  this.clear();
  this.signals.countChanged.dispose();
};

ShaderRegistry.add('shader/BasicLine.vert', "void main(){\n#include begin_vertex\n#include project_vertex\n}");

ShaderRegistry.add('shader/BasicLine.frag', "uniform vec3 uColor;\n#include common\n#include fog_pars_fragment\nvoid main(){\ngl_FragColor = vec4( uColor, 1.0 );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n}");

ShaderRegistry.add('shader/Quad.vert', "varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}");

ShaderRegistry.add('shader/Quad.frag', "varying vec2 vUv;\nuniform sampler2D tForeground;\nuniform float scale;\nvoid main() {\nvec4 foreground = texture2D( tForeground, vUv );\ngl_FragColor = foreground * scale;\n}");

/**
 * @file Stats
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function Stats () {
  this.signals = {
    updated: new Signal()
  };

  this.begin();

  this.maxDuration = -Infinity;
  this.minDuration = Infinity;
  this.avgDuration = 14;
  this.lastDuration = Infinity;

  this.prevFpsTime = 0;
  this.lastFps = Infinity;
  this.lastFrames = 1;
  this.frames = 0;
  this.count = 0;
}

Stats.prototype = {

  update: function () {
    this.startTime = this.end();
    this.currentTime = this.startTime;
    this.signals.updated.dispatch();
  },

  begin: function () {
    this.startTime = window.performance.now();
    this.lastFrames = this.frames;
  },

  end: function () {
    var time = window.performance.now();

    this.count += 1;
    this.frames += 1;

    this.lastDuration = time - this.startTime;
    this.minDuration = Math.min(this.minDuration, this.lastDuration);
    this.maxDuration = Math.max(this.maxDuration, this.lastDuration);
    this.avgDuration -= this.avgDuration / 30;
    this.avgDuration += this.lastDuration / 30;

    if (time > this.prevFpsTime + 1000) {
      this.lastFps = this.frames;
      this.prevFpsTime = time;
      this.frames = 0;
    }

    return time
  }

};

ShaderRegistry.add('shader/chunk/dull_interior_fragment.glsl', "#ifdef DULL_INTERIOR\nif( gl_FrontFacing == false ){\nnormal = vec3( 0.0, 0.0, 0.4 );\n}\n#endif");

ShaderRegistry.add('shader/chunk/fog_fragment.glsl', "#ifdef USE_FOG\nfloat depth = length( vViewPosition );\n#ifdef FOG_EXP2\nfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif");

ShaderRegistry.add('shader/chunk/matrix_scale.glsl', "float matrixScale( in mat4 m ){\nvec4 r = m[ 0 ];\nreturn sqrt( r[ 0 ] * r[ 0 ] + r[ 1 ] * r[ 1 ] + r[ 2 ] * r[ 2 ] );\n}");

ShaderRegistry.add('shader/chunk/nearclip_vertex.glsl', "#ifdef NEAR_CLIP\nif( vViewPosition.z < nearClip - 5.0 )\ngl_Position.z = 2.0 * gl_Position.w;\n#endif");

ShaderRegistry.add('shader/chunk/nearclip_fragment.glsl', "#ifdef NEAR_CLIP\nif( vViewPosition.z < nearClip )\ndiscard;\n#endif");

ShaderRegistry.add('shader/chunk/opaque_back_fragment.glsl', "#ifdef OPAQUE_BACK\n#ifdef FLIP_SIDED\nif( gl_FrontFacing == true ){\ngl_FragColor.a = 1.0;\n}\n#else\nif( gl_FrontFacing == false ){\ngl_FragColor.a = 1.0;\n}\n#endif\n#endif");

ShaderRegistry.add('shader/chunk/radiusclip_vertex.glsl', "#ifdef RADIUS_CLIP\nif( distance( vViewPosition, vClipCenter ) > clipRadius + 5.0 )\ngl_Position.z = 2.0 * gl_Position.w;\n#endif");

ShaderRegistry.add('shader/chunk/radiusclip_fragment.glsl', "#ifdef RADIUS_CLIP\nif( distance( vViewPosition, vClipCenter ) > clipRadius )\ndiscard;\n#endif");

ShaderRegistry.add('shader/chunk/unpack_color.glsl', "vec3 unpackColor(float f) {\nvec3 color;\ncolor.r = floor(f / 256.0 / 256.0);\ncolor.g = floor((f - color.r * 256.0 * 256.0) / 256.0);\ncolor.b = floor(f - color.r * 256.0 * 256.0 - color.g * 256.0);\nreturn color / 255.0;\n}");

/**
 * @file Shader Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function getDefines (defines) {
  if (defines === undefined) { return '' }

  var lines = [];

  for (var name in defines) {
    var value = defines[ name ];

    if (value === false) { continue }

    lines.push('#define ' + name + ' ' + value);
  }

  return lines.join('\n') + '\n'
}

var reInclude = /^(?!\/\/)\s*#include\s+(\S+)/gmi;
var shaderCache = {};

function getShader (name, defines) {
  defines = defines || {};

  var hash = name + '|';
  for (var key in defines) {
    hash += key + ':' + defines[ key ];
  }

  if (!shaderCache[ hash ]) {
    var definesText = getDefines(defines);

    var shaderText = ShaderRegistry.get('shader/' + name);
    if (!shaderText) {
      throw new Error("empty shader, '" + name + "'")
    }
    shaderText = shaderText.replace(reInclude, function (match, p1) {
      var path = 'shader/chunk/' + p1 + '.glsl';
      var chunk = ShaderRegistry.get(path) || ShaderChunk[ p1 ];

      return chunk || ''
    });

    shaderCache[ hash ] = definesText + shaderText;
  }

  return shaderCache[ hash ]
}

/**
 * @file Viewer Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

if (typeof window !== 'undefined' && window.WebGLRenderingContext) {
  var wrcp = window.WebGLRenderingContext.prototype;

  // wrap WebGL debug function used by three.js and
  // ignore calls to them when the debug flag is not set

  var _getShaderParameter = wrcp.getShaderParameter;
  wrcp.getShaderParameter = function getShaderParameter () {
    if (Debug) {
      return _getShaderParameter.apply(this, arguments)
    } else {
      return true
    }
  };

  var _getShaderInfoLog = wrcp.getShaderInfoLog;
  wrcp.getShaderInfoLog = function getShaderInfoLog () {
    if (Debug) {
      return _getShaderInfoLog.apply(this, arguments)
    } else {
      return ''
    }
  };

  var _getProgramParameter = wrcp.getProgramParameter;
  wrcp.getProgramParameter = function getProgramParameter (program, pname) {
    if (Debug || pname !== wrcp.LINK_STATUS) {
      return _getProgramParameter.apply(this, arguments)
    } else {
      return true
    }
  };

  var _getProgramInfoLog = wrcp.getProgramInfoLog;
  wrcp.getProgramInfoLog = function getProgramInfoLog () {
    if (Debug) {
      return _getProgramInfoLog.apply(this, arguments)
    } else {
      return ''
    }
  };
}

var JitterVectors = [
  [
    [ 0, 0 ]
  ],
  [
    [ 4, 4 ], [ -4, -4 ]
  ],
  [
    [ -2, -6 ], [ 6, -2 ], [ -6, 2 ], [ 2, 6 ]
  ],
  [
    [ 1, -3 ], [ -1, 3 ], [ 5, 1 ], [ -3, -5 ],
    [ -5, 5 ], [ -7, -1 ], [ 3, 7 ], [ 7, -7 ]
  ],
  [
    [ 1, 1 ], [ -1, -3 ], [ -3, 2 ], [ 4, -1 ],
    [ -5, -2 ], [ 2, 5 ], [ 5, 3 ], [ 3, -5 ],
    [ -2, 6 ], [ 0, -7 ], [ -4, -6 ], [ -6, 4 ],
    [ -8, 0 ], [ 7, -4 ], [ 6, 7 ], [ -7, -8 ]
  ],
  [
    [ -4, -7 ], [ -7, -5 ], [ -3, -5 ], [ -5, -4 ],
    [ -1, -4 ], [ -2, -2 ], [ -6, -1 ], [ -4, 0 ],
    [ -7, 1 ], [ -1, 2 ], [ -6, 3 ], [ -3, 3 ],
    [ -7, 6 ], [ -3, 6 ], [ -5, 7 ], [ -1, 7 ],
    [ 5, -7 ], [ 1, -6 ], [ 6, -5 ], [ 4, -4 ],
    [ 2, -3 ], [ 7, -2 ], [ 1, -1 ], [ 4, -1 ],
    [ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],
    [ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]
  ]
];

JitterVectors.forEach(function (offsetList) {
  offsetList.forEach(function (offset) {
    // 0.0625 = 1 / 16
    offset[ 0 ] *= 0.0625;
    offset[ 1 ] *= 0.0625;
  });
});

/**
 * @file Tiled Renderer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function TiledRenderer (renderer, camera, viewer, params) {
  var p = params || {};

  var factor = p.factor !== undefined ? p.factor : 2;
  var antialias = p.antialias !== undefined ? p.antialias : false;

  var onProgress = p.onProgress;
  var onFinish = p.onFinish;

    //

  if (antialias) { factor *= 2; }
  var n = factor * factor;

    // canvas

  var canvas = document.createElement('canvas');
  var width = viewer.width;
  var height = viewer.height;

  if (antialias) {
    canvas.width = width * factor / 2;
    canvas.height = height * factor / 2;
  } else {
    canvas.width = width * factor;
    canvas.height = height * factor;
  }

  var ctx = canvas.getContext('2d');

  var viewerSampleLevel = viewer.sampleLevel;
  viewer.setSampling(-1);

  function renderTile (i) {
    var x = i % factor;
    var y = Math.floor(i / factor);

    var offsetX = x * width;
    var offsetY = y * height;

    viewer.camera.setViewOffset(
            width * factor,
            height * factor,
            offsetX,
            offsetY,
            width,
            height
        );

    viewer.render();

    if (antialias) {
      ctx.drawImage(
                renderer.domElement,
                Math.floor(offsetX / 2),
                Math.floor(offsetY / 2),
                Math.ceil(width / 2),
                Math.ceil(height / 2)
            );
    } else {
      ctx.drawImage(
                renderer.domElement,
                Math.floor(offsetX),
                Math.floor(offsetY),
                Math.ceil(width),
                Math.ceil(height)
            );
    }

    if (typeof onProgress === 'function') {
      onProgress(i + 1, n, false);
    }
  }

  function finalize () {
    viewer.setSampling(viewerSampleLevel);
    viewer.camera.view = null;

    if (typeof onFinish === 'function') {
      onFinish(n + 1, n, false);
    }
  }

  function render () {
    for (var i = 0; i <= n; ++i) {
      if (i === n) {
        finalize();
      } else {
        renderTile(i);
      }
    }
  }

  function renderAsync () {
    var count = 0;

    function fn () {
      if (count === n) {
        finalize();
      } else {
        renderTile(count);
      }
      count += 1;
    }

    for (var i = 0; i <= n; ++i) {
      setTimeout(fn, 0, i);
    }
  }

    // API

  this.render = render;
  this.renderAsync = renderAsync;

  this.canvas = canvas;
}

TiledRenderer.prototype.constructor = TiledRenderer;

/**
 * @file Math Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var TwoPI = 2 * Math.PI;

/**
 * @file Array Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function circularMean (array, max, stride, offset, indices) {
  // http://en.wikipedia.org/wiki/Center_of_mass#Systems_with_periodic_boundary_conditions

  // Bai, Linge; Breen, David (2008). Calculating Center of Mass in an Unbounded 2D Environment. Journal of Graphics, GPU, and Game Tools 13 (4): 53–60.

  // http://stackoverflow.com/questions/18166507/using-fft-to-find-the-center-of-mass-under-periodic-boundary-conditions

  stride = stride || 1;
  offset = offset || 0;

  var n = indices ? indices.length : array.length / stride;
  var angle, i, c;

  var cosMean = 0;
  var sinMean = 0;

  if (indices) {
    for (i = 0; i < n; ++i) {
      c = (array[ indices[ i ] * stride + offset ] + max) % max;

      angle = (c / max) * TwoPI - Math.PI;

      cosMean += Math.cos(angle);
      sinMean += Math.sin(angle);
    }
  } else {
    for (i = offset; i < n; i += stride) {
      c = (array[ i ] + max) % max;

      angle = (c / max) * TwoPI - Math.PI;

      cosMean += Math.cos(angle);
      sinMean += Math.sin(angle);
    }
  }

  cosMean /= n;
  sinMean /= n;

  var meanAngle = Math.atan2(sinMean, cosMean);

  var mean = (meanAngle + Math.PI) / TwoPI * max;

  return mean
}

function calculateCenterArray (array1, array2, center, offset) {
  var n = array1.length;
  center = center || new Float32Array(n);
  offset = offset || 0;

  for (var i = 0; i < n; i += 3) {
    center[ offset + i + 0 ] = (array1[ i + 0 ] + array2[ i + 0 ]) / 2.0;
    center[ offset + i + 1 ] = (array1[ i + 1 ] + array2[ i + 1 ]) / 2.0;
    center[ offset + i + 2 ] = (array1[ i + 2 ] + array2[ i + 2 ]) / 2.0;
  }

  return center
}

function uniformArray (n, a, optionalTarget) {
  var array = optionalTarget || new Float32Array(n);

  for (var i = 0; i < n; ++i) {
    array[ i ] = a;
  }

  return array
}

function uniformArray3 (n, a, b, c, optionalTarget) {
  var array = optionalTarget || new Float32Array(n * 3);

  var j;

  for (var i = 0; i < n; ++i) {
    j = i * 3;

    array[ j + 0 ] = a;
    array[ j + 1 ] = b;
    array[ j + 2 ] = c;
  }

  return array
}

function centerArray3 (array, center) {
  var n = array.length;
  center = center || new Vector3();

  for (var i = 0; i < n; i += 3) {
    center.x += array[ i ];
    center.y += array[ i + 1 ];
    center.z += array[ i + 2 ];
  }

  center.divideScalar(n / 3);

  return center
}

function serialArray (n) {
  var array = new Float32Array(n);

  for (var i = 0; i < n; ++i) {
    array[ i ] = i;
  }

  return array
}

function serialBlockArray (n, b, offset, optionalTarget) {
  if ( offset === void 0 ) offset = 0;

  var array = optionalTarget || new Float32Array(n * b);

  for (var i = 0; i < n; ++i) {
    var k = offset + i * b;

    for (var j = 0; j < b; ++j) {
      array[ k + j ] = i;
    }
  }

  return array
}

function calculateMinArray (array1, array2) {
  var n = array1.length;
  var min = new Float32Array(n);

  for (var i = 0; i < n; i++) {
    min[ i ] = Math.min(array1[ i ], array2[ i ]);
  }

  return min
}

function copyArray (src, dst, srcOffset, dstOffset, length) {
  for (var i = 0; i < length; ++i) {
    dst[ dstOffset + i ] = src[ srcOffset + i ];
  }
}

function copyWithin (array, srcOffset, dstOffset, length) {
  copyArray(array, array, srcOffset, dstOffset, length);
}

var swap = new Float32Array(4);
var temp = new Float32Array(4);
function quicksortCmp (arr, cmp, begin, end) {
  cmp = cmp || function cmp (a, b) {
    if (a > b) { return 1 }
    if (a < b) { return -1 }
    return 0
  };
  begin = begin || 0;
  end = (end || arr.length) - 1;

  var stack = [];
  var sp = -1;
  var left = begin;
  var right = end;
  var tmp = 0.0;
  var tmp2 = 0.0;

  function swap (a, b) {
    tmp2 = arr[ a ];
    arr[ a ] = arr[ b ];
    arr[ b ] = tmp2;
  }

  var i, j;

  while (true) {
    if (right - left <= 25) {
      for (j = left + 1; j <= right; ++j) {
        tmp = arr[ j ];
        i = j - 1;

        while (i >= left && cmp(arr[ i ], tmp) > 0) {
          arr[ i + 1 ] = arr[ i ];
          --i;
        }

        arr[ i + 1 ] = tmp;
      }

      if (sp === -1) { break }

      right = stack[ sp-- ]; // ?
      left = stack[ sp-- ];
    } else {
      var median = (left + right) >> 1;

      i = left + 1;
      j = right;

      swap(median, i);

      if (cmp(arr[ left ], arr[ right ]) > 0) {
        swap(left, right);
      }

      if (cmp(arr[ i ], arr[ right ]) > 0) {
        swap(i, right);
      }

      if (cmp(arr[ left ], arr[ i ]) > 0) {
        swap(left, i);
      }

      tmp = arr[ i ];

      while (true) {
        do { i++; } while (cmp(arr[ i ], tmp) < 0)
        do { j--; } while (cmp(arr[ j ], tmp) > 0)
        if (j < i) { break }
        swap(i, j);
      }

      arr[ left + 1 ] = arr[ j ];
      arr[ j ] = tmp;

      if (right - i + 1 >= j - left) {
        stack[ ++sp ] = i;
        stack[ ++sp ] = right;
        right = j - 1;
      } else {
        stack[ ++sp ] = left;
        stack[ ++sp ] = j - 1;
        left = i;
      }
    }
  }

  return arr
}

function arrayMax$1 (array) {
  var max = -Infinity;
  for (var i = 0, il = array.length; i < il; ++i) {
    if (array[ i ] > max) { max = array[ i ]; }
  }
  return max
}

function arrayMin (array) {
  var min = Infinity;
  for (var i = 0, il = array.length; i < il; ++i) {
    if (array[ i ] < min) { min = array[ i ]; }
  }
  return min
}

function arraySum (array) {
  var n = array.length;
  var sum = 0;
  for (var i = 0; i < n; ++i) {
    sum += array[ i ];
  }
  return sum
}

function arrayMean (array) {
  return arraySum(array) / array.length
}

function arrayRms (array) {
  var n = array.length;
  var sumSq = 0;
  for (var i = 0; i < n; ++i) {
    var di = array[ i ];
    sumSq += di * di;
  }
  return Math.sqrt(sumSq / n)
}

/**
 * @file Viewer Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function _trimCanvas (canvas, r, g, b, a) {
  var canvasHeight = canvas.height;
  var canvasWidth = canvas.width;

  var ctx = canvas.getContext('2d');
  var pixels = ctx.getImageData(0, 0, canvasWidth, canvasHeight).data;

  var x, y, doBreak, off;

  doBreak = false;
  for (y = 0; y < canvasHeight; y++) {
    for (x = 0; x < canvasWidth; x++) {
      off = (y * canvasWidth + x) * 4;
      if (pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
                    pixels[ off + 2 ] !== b || pixels[ off + 3 ] !== a) {
        doBreak = true;
        break
      }
    }
    if (doBreak) {
      break
    }
  }
  var topY = y;

  doBreak = false;
  for (x = 0; x < canvasWidth; x++) {
    for (y = 0; y < canvasHeight; y++) {
      off = (y * canvasWidth + x) * 4;
      if (pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
                    pixels[ off + 2 ] !== b || pixels[ off + 3 ] !== a) {
        doBreak = true;
        break
      }
    }
    if (doBreak) {
      break
    }
  }
  var topX = x;

  doBreak = false;
  for (y = canvasHeight - 1; y >= 0; y--) {
    for (x = canvasWidth - 1; x >= 0; x--) {
      off = (y * canvasWidth + x) * 4;
      if (pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
                    pixels[ off + 2 ] !== b || pixels[ off + 3 ] !== a) {
        doBreak = true;
        break
      }
    }
    if (doBreak) {
      break
    }
  }
  var bottomY = y;

  doBreak = false;
  for (x = canvasWidth - 1; x >= 0; x--) {
    for (y = canvasHeight - 1; y >= 0; y--) {
      off = (y * canvasWidth + x) * 4;
      if (pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
                    pixels[ off + 2 ] !== b || pixels[ off + 3 ] !== a) {
        doBreak = true;
        break
      }
    }
    if (doBreak) {
      break
    }
  }
  var bottomX = x;

  var trimedCanvas = document.createElement('canvas');
  trimedCanvas.width = bottomX - topX;
  trimedCanvas.height = bottomY - topY;

  var trimedCtx = trimedCanvas.getContext('2d');
  trimedCtx.drawImage(
        canvas,
        topX, topY,
        trimedCanvas.width, trimedCanvas.height,
        0, 0,
        trimedCanvas.width, trimedCanvas.height
    );

  return trimedCanvas
}

/**
 * Image parameter object.
 * @typedef {Object} ImageParameters - image generation parameters
 * @property {Boolean} trim - trim the image
 * @property {Integer} factor - scaling factor to apply to the viewer canvas
 * @property {Boolean} antialias - antialias the image
 * @property {Boolean} transparent - transparent image background
 */

/**
 * Make image from what is shown in a viewer canvas
 * @param  {Viewer} viewer - the viewer
 * @param  {ImageParameters} params - parameters object
 * @return {Promise} A Promise object that resolves to an image {@link Blob}.
 */
function makeImage (viewer, params) {
  var p = params || {};

  var trim = defaults(p.trim, false);
  var factor = defaults(p.factor, 1);
  var antialias = defaults(p.antialias, false);
  var transparent = defaults(p.transparent, false);

  var renderer = viewer.renderer;
  var camera = viewer.camera;

  var originalClearAlpha = renderer.getClearAlpha();
  var backgroundColor = renderer.getClearColor();

  function setLineWidthAndPixelSize (invert) {
    var _factor = factor;
    if (antialias) { _factor *= 2; }
    if (invert) { _factor = 1 / _factor; }
    viewer.scene.traverse(function (o) {
      var m = o.material;
      if (m && m.linewidth) {
        m.linewidth *= _factor;
      }
      if (m && m.uniforms && m.uniforms.size) {
        if (m.uniforms.size.__seen === undefined) {
          m.uniforms.size.value *= _factor;
          m.uniforms.size.__seen = true;
        }
      }
    });
    viewer.scene.traverse(function (o) {
      var m = o.material;
      if (m && m.uniforms && m.uniforms.size) {
        delete m.uniforms.size.__seen;
      }
    });
  }

  function trimCanvas (canvas) {
    if (trim) {
      var bg = backgroundColor;
      var r = transparent ? 0 : bg.r * 255;
      var g = transparent ? 0 : bg.g * 255;
      var b = transparent ? 0 : bg.b * 255;
      var a = transparent ? 0 : 255;
      return _trimCanvas(canvas, r, g, b, a)
    } else {
      return canvas
    }
  }

  function onProgress (i, n, finished) {
    if (typeof p.onProgress === 'function') {
      p.onProgress(i, n, finished);
    }
  }

  return new Promise(function (resolve) {
    var tiledRenderer = new TiledRenderer(
            renderer, camera, viewer,
      {
        factor: factor,
        antialias: antialias,
        onProgress: onProgress,
        onFinish: onFinish
      }
        );

    renderer.setClearAlpha(transparent ? 0 : 1);
    setLineWidthAndPixelSize();
    tiledRenderer.renderAsync();

    function onFinish (i, n) {
      var canvas = trimCanvas(tiledRenderer.canvas);
      canvas.toBlob(
                function (blob) {
                  renderer.setClearAlpha(originalClearAlpha);
                  setLineWidthAndPixelSize(true);
                  viewer.requestRender();
                  onProgress(n, n, true);
                  resolve(blob);
                },
                'image/png'
            );
    }
  })
}

var vertex = new Vector3();
var matrix = new Matrix4();
var modelViewProjectionMatrix = new Matrix4();

function sortProjectedPosition (scene, camera) {
    // console.time( "sort" );

  scene.traverseVisible(function (o) {
    if (!(o instanceof Points) || !o.sortParticles) {
      return
    }

    var attributes = o.geometry.attributes;
    var n = attributes.position.count;

    if (n === 0) { return }

    matrix.multiplyMatrices(
            camera.matrixWorldInverse, o.matrixWorld
        );
    modelViewProjectionMatrix.multiplyMatrices(
            camera.projectionMatrix, matrix
        );

    var sortData, sortArray, zArray, cmpFn;

    if (!o.userData.sortData) {
      zArray = new Float32Array(n);
      sortArray = new Uint32Array(n);
      cmpFn = function (ai, bi) {
        var a = zArray[ ai ];
        var b = zArray[ bi ];
        if (a > b) { return 1 }
        if (a < b) { return -1 }
        return 0
      };

      sortData = {
        __zArray: zArray,
        __sortArray: sortArray,
        __cmpFn: cmpFn
      };

      o.userData.sortData = sortData;
    } else {
      sortData = o.userData.sortData;
      zArray = sortData.__zArray;
      sortArray = sortData.__sortArray;
      cmpFn = sortData.__cmpFn;
    }

    for (var i = 0; i < n; ++i) {
      vertex.fromArray(attributes.position.array, i * 3);
      vertex.applyMatrix4(modelViewProjectionMatrix);

            // negate, so that sorting order is reversed
      zArray[ i ] = -vertex.z;
      sortArray[ i ] = i;
    }

    quicksortCmp(sortArray, cmpFn);

    var index, indexSrc, indexDst, tmpTab;

    for (var name in attributes) {
      var attr = attributes[ name ];
      var array = attr.array;
      var itemSize = attr.itemSize;

      if (!sortData[ name ]) {
        sortData[ name ] = new Float32Array(
                    itemSize * n
                );
      }

      tmpTab = sortData[ name ];
      sortData[ name ] = array;

      for (var i$1 = 0; i$1 < n; ++i$1) {
        index = sortArray[ i$1 ];

        for (var j = 0; j < itemSize; ++j) {
          indexSrc = index * itemSize + j;
          indexDst = i$1 * itemSize + j;
          tmpTab[ indexDst ] = array[ indexSrc ];
        }
      }

      attributes[ name ].array = tmpTab;
      attributes[ name ].needsUpdate = true;
    }
  });

    // console.timeEnd( "sort" );
}

var projectionMatrixInverse = new Matrix4();
var projectionMatrixTranspose = new Matrix4();

function updateMaterialUniforms (group, camera, renderer, cDist, bRadius) {
  var canvasHeight = renderer.getSize().height;
  var pixelRatio = renderer.getPixelRatio();
  var ortho = camera.type === 'OrthographicCamera';

  projectionMatrixInverse.getInverse(camera.projectionMatrix);
  projectionMatrixTranspose.copy(camera.projectionMatrix).transpose();

  group.traverse(function (o) {
    var m = o.material;
    if (!m) { return }

    var u = o.material.uniforms;
    if (!u) { return }

    if (m.clipNear) {
      var nearFactor = (50 - m.clipNear) / 50;
      var nearClip = cDist - (bRadius * nearFactor);
      u.nearClip.value = nearClip;
    }

    if (u.canvasHeight) {
      u.canvasHeight.value = canvasHeight;
    }

    if (u.pixelRatio) {
      u.pixelRatio.value = pixelRatio;
    }

    if (u.projectionMatrixInverse) {
      u.projectionMatrixInverse.value.copy(
                projectionMatrixInverse
            );
    }

    if (u.projectionMatrixTranspose) {
      u.projectionMatrixTranspose.value.copy(
                projectionMatrixTranspose
            );
    }

    if (u.ortho) {
      u.ortho.value = ortho;
    }
  });
}

/**
 * @file Viewer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var pixelBufferFloat = new Float32Array(4);
var pixelBufferUint = new Uint8Array(4);

var tmpMatrix = new Matrix4();

function onBeforeRender (renderer, scene, camera, geometry, material/*, group */) {
  var u = material.uniforms;
  var updateList = [];

  if (u.objectId) {
    u.objectId.value = SupportsReadPixelsFloat ? this.id : this.id / 255;
    updateList.push('objectId');
  }

  if (u.modelViewMatrixInverse || u.modelViewMatrixInverseTranspose ||
        u.modelViewProjectionMatrix || u.modelViewProjectionMatrixInverse
    ) {
    this.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, this.matrixWorld);
  }

  if (u.modelViewMatrixInverse) {
    u.modelViewMatrixInverse.value.getInverse(this.modelViewMatrix);
    updateList.push('modelViewMatrixInverse');
  }

  if (u.modelViewMatrixInverseTranspose) {
    if (u.modelViewMatrixInverse) {
      u.modelViewMatrixInverseTranspose.value.copy(
                u.modelViewMatrixInverse.value
            ).transpose();
    } else {
      u.modelViewMatrixInverseTranspose.value
                .getInverse(this.modelViewMatrix)
                .transpose();
    }
    updateList.push('modelViewMatrixInverseTranspose');
  }

  if (u.modelViewProjectionMatrix) {
    camera.updateProjectionMatrix();
    u.modelViewProjectionMatrix.value.multiplyMatrices(
            camera.projectionMatrix, this.modelViewMatrix
        );
    updateList.push('modelViewProjectionMatrix');
  }

  if (u.modelViewProjectionMatrixInverse) {
    if (u.modelViewProjectionMatrix) {
      tmpMatrix.copy(
                u.modelViewProjectionMatrix.value
            );
      u.modelViewProjectionMatrixInverse.value.getInverse(
                tmpMatrix
            );
    } else {
      camera.updateProjectionMatrix();
      tmpMatrix.multiplyMatrices(
                camera.projectionMatrix, this.modelViewMatrix
            );
      u.modelViewProjectionMatrixInverse.value.getInverse(
                tmpMatrix
            );
    }
    updateList.push('modelViewProjectionMatrixInverse');
  }

  if (updateList.length) {
    var materialProperties = renderer.properties.get(material);

    if (materialProperties.program) {
      var gl = renderer.getContext();
      var p = materialProperties.program;
      gl.useProgram(p.program);
      var pu = p.getUniforms();

      updateList.forEach(function (name) {
        pu.setValue(gl, name, u[ name ].value);
      });
    }
  }
}

/**
 * Viewer class
 * @class
 * @param {String|Element} [idOrElement] - dom id or element
 */
function Viewer (idOrElement) {
  var signals = {
    ticked: new Signal()
  };

  var container;
  if (typeof idOrElement === 'string') {
    container = document.getElementById(idOrElement);
  } else if (idOrElement instanceof window.Element) {
    container = idOrElement;
  } else {
    container = document.createElement('div');
  }

  var width, height;
  if (container === document.body) {
    width = window.innerWidth || 1;
    height = window.innerHeight || 1;
  } else {
    var box = container.getBoundingClientRect();
    width = box.width || 1;
    height = box.height || 1;
  }

  var rendering, renderPending, lastRenderedPicking, isStill;
  var sampleLevel, cDist, bRadius;

  var parameters;
  initParams();

  var stats;
  initStats();

  var perspectiveCamera, orthographicCamera, camera;
  initCamera();

  var scene, pointLight, ambientLight;
  var rotationGroup, translationGroup, modelGroup, pickingGroup, backgroundGroup, helperGroup;
  initScene();

  var renderer, supportsHalfFloat;
  var pickingTarget, sampleTarget, holdTarget;
  var compositeUniforms, compositeMaterial, compositeCamera, compositeScene;
  if (initRenderer() === false) {
    this.container = container;
    Log.error('Viewer: could not initialize renderer');
    return
  }

  var boundingBoxMesh;
  var boundingBox = new Box3();
  var boundingBoxSize = new Vector3();
  var boundingBoxLength = 0;
  initHelper();

    // fog & background
  setBackground();
  setFog();

  var distVector = new Vector3();

  var info = {
    memory: {
      programs: 0,
      geometries: 0,
      textures: 0
    },
    render: {
      calls: 0,
      vertices: 0,
      faces: 0,
      points: 0
    }
  };

  function initParams () {
    parameters = {

      fogColor: new Color(0x000000),
      fogNear: 50,
      fogFar: 100,

      backgroundColor: new Color(0x000000),

      cameraType: 'perspective',
      cameraFov: 40,
      cameraZ: -80, // FIXME initial value should be automatically determined

      clipNear: 0,
      clipFar: 100,
      clipDist: 10,

      lightColor: new Color(0xdddddd),
      lightIntensity: 1.0,
      ambientColor: new Color(0xdddddd),
      ambientIntensity: 0.2,

      sampleLevel: 0

    };
  }

  function initCamera () {
    var lookAt = new Vector3(0, 0, 0);

    perspectiveCamera = new PerspectiveCamera(
            parameters.cameraFov, width / height
        );
    perspectiveCamera.position.z = parameters.cameraZ;
    perspectiveCamera.lookAt(lookAt);

    orthographicCamera = new OrthographicCamera(
            width / -2, width / 2,
            height / 2, height / -2
        );
    orthographicCamera.position.z = parameters.cameraZ;
    orthographicCamera.lookAt(lookAt);

    if (parameters.cameraType === 'orthographic') {
      camera = orthographicCamera;
    } else {  // parameters.cameraType === "perspective"
      camera = perspectiveCamera;
    }
    camera.updateProjectionMatrix();
  }

  function initRenderer () {
    var dpr = window.devicePixelRatio;

    try {
      renderer = new WebGLRenderer({
        preserveDrawingBuffer: true,
        alpha: true,
        antialias: true
      });
    } catch (e) {
      container.innerHTML = WebglErrorMessage;
      return false
    }
    renderer.setPixelRatio(dpr);
    renderer.setSize(width, height);
    renderer.autoClear = false;
    renderer.sortObjects = true;

        // var gl = renderer.getContext();
        // console.log( gl.getContextAttributes().antialias );
        // console.log( gl.getParameter(gl.SAMPLES) );

    setExtensionFragDepth(renderer.extensions.get('EXT_frag_depth'));
    renderer.extensions.get('OES_element_index_uint');

    setSupportsReadPixelsFloat(
            (renderer.extensions.get('OES_texture_float') &&
                renderer.extensions.get('WEBGL_color_buffer_float')) ||
            (Browser === 'Chrome' &&
                renderer.extensions.get('OES_texture_float'))
        );

    container.appendChild(renderer.domElement);

    var dprWidth = width * dpr;
    var dprHeight = height * dpr;

        // picking texture

    renderer.extensions.get('OES_texture_float');
    supportsHalfFloat = renderer.extensions.get('OES_texture_half_float');
    renderer.extensions.get('WEBGL_color_buffer_float');

    pickingTarget = new WebGLRenderTarget(
            dprWidth, dprHeight,
      {
        minFilter: NearestFilter,
        magFilter: NearestFilter,
        stencilBuffer: false,
        format: RGBAFormat,
        type: SupportsReadPixelsFloat ? FloatType : UnsignedByteType
      }
        );
    pickingTarget.texture.generateMipmaps = false;

        // ssaa textures

    sampleTarget = new WebGLRenderTarget(
            dprWidth, dprHeight,
      {
        minFilter: LinearFilter,
        magFilter: LinearFilter,
        format: RGBAFormat
      }
        );

    holdTarget = new WebGLRenderTarget(
            dprWidth, dprHeight,
      {
        minFilter: NearestFilter,
        magFilter: NearestFilter,
        format: RGBAFormat,
                // problems on mobile so use UnsignedByteType there
                // see https://github.com/arose/ngl/issues/191
        type: Mobile ? UnsignedByteType : (
                    supportsHalfFloat ? HalfFloatType
                        : (SupportsReadPixelsFloat ? FloatType : UnsignedByteType)
                )

      }
        );

    compositeUniforms = {
      'tForeground': { type: 't', value: null },
      'scale': { type: 'f', value: 1.0 }
    };

    compositeMaterial = new ShaderMaterial({
      uniforms: compositeUniforms,
      vertexShader: getShader('Quad.vert'),
      fragmentShader: getShader('Quad.frag'),
      premultipliedAlpha: true,
      transparent: true,
      blending: AdditiveBlending,
      depthTest: false,
      depthWrite: false
    });

    compositeCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
    compositeScene = new Scene().add(new Mesh(
            new PlaneGeometry(2, 2), compositeMaterial
        ));
  }

  function initScene () {
    if (!scene) {
      scene = new Scene();
    }

    rotationGroup = new Group();
    rotationGroup.name = 'rotationGroup';
    scene.add(rotationGroup);

    translationGroup = new Group();
    translationGroup.name = 'translationGroup';
    rotationGroup.add(translationGroup);

    modelGroup = new Group();
    modelGroup.name = 'modelGroup';
    translationGroup.add(modelGroup);

    pickingGroup = new Group();
    pickingGroup.name = 'pickingGroup';
    translationGroup.add(pickingGroup);

    backgroundGroup = new Group();
    backgroundGroup.name = 'backgroundGroup';
    translationGroup.add(backgroundGroup);

    helperGroup = new Group();
    helperGroup.name = 'helperGroup';
    translationGroup.add(helperGroup);

        // fog

    scene.fog = new Fog();

        // light

    pointLight = new SpotLight(
            parameters.lightColor, parameters.lightIntensity
        );
    scene.add(pointLight);

    ambientLight = new AmbientLight(
            parameters.ambientLight, parameters.ambientIntensity
        );
    scene.add(ambientLight);
  }

  function initHelper () {
    var indices = new Uint16Array([
      0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,
      6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7
    ]);
    var positions = new Float32Array(8 * 3);

    var bbGeometry = new BufferGeometry();
    bbGeometry.setIndex(new BufferAttribute(indices, 1));
    bbGeometry.addAttribute('position', new BufferAttribute(positions, 3));
    var bbMaterial = new ShaderMaterial({
      uniforms: { 'uColor': { value: new Color('skyblue') } },
      vertexShader: getShader('BasicLine.vert'),
      fragmentShader: getShader('BasicLine.frag'),
      linewidth: 2
    });

    boundingBoxMesh = new LineSegments(bbGeometry, bbMaterial);
    helperGroup.add(boundingBoxMesh);
  }

  function updateHelper () {
    var position = boundingBoxMesh.geometry.attributes.position;
    var array = position.array;

    var min = boundingBox.min;
    var max = boundingBox.max;

    array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
    array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
    array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
    array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
    array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
    array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
    array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
    array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

    position.needsUpdate = true;

    if (!boundingBox.isEmpty()) {
      boundingBoxMesh.geometry.computeBoundingSphere();
    }
  }

  function initStats () {
    stats = new Stats();
  }

  function add (buffer, instanceList) {
        // Log.time( "Viewer.add" );

    if (instanceList) {
      instanceList.forEach(function (instance) {
        addBuffer(buffer, instance);
      });
    } else {
      addBuffer(buffer);
    }

    if (buffer.background) {
      backgroundGroup.add(buffer.group);
      backgroundGroup.add(buffer.wireframeGroup);
    } else {
      modelGroup.add(buffer.group);
      modelGroup.add(buffer.wireframeGroup);
    }

    if (buffer.pickable) {
      pickingGroup.add(buffer.pickingGroup);
    }

    if (Debug) { updateHelper(); }

        // Log.timeEnd( "Viewer.add" );
  }

  function addBuffer (buffer, instance) {
        // Log.time( "Viewer.addBuffer" );

    function setUserData (object) {
      if (object instanceof Group) {
        object.children.forEach(setUserData);
      } else {
        object.userData.buffer = buffer;
        object.userData.instance = instance;
        object.onBeforeRender = onBeforeRender;
      }
    }

    var mesh = buffer.getMesh();
    if (instance) {
      mesh.applyMatrix(instance.matrix);
    }
    setUserData(mesh);
    buffer.group.add(mesh);

    var wireframeMesh = buffer.getWireframeMesh();
    if (instance) {
            // wireframeMesh.applyMatrix( instance.matrix );
      wireframeMesh.matrix.copy(mesh.matrix);
      wireframeMesh.position.copy(mesh.position);
      wireframeMesh.quaternion.copy(mesh.quaternion);
      wireframeMesh.scale.copy(mesh.scale);
    }
    setUserData(wireframeMesh);
    buffer.wireframeGroup.add(wireframeMesh);

    if (buffer.pickable) {
      var pickingMesh = buffer.getPickingMesh();
      if (instance) {
                // pickingMesh.applyMatrix( instance.matrix );
        pickingMesh.matrix.copy(mesh.matrix);
        pickingMesh.position.copy(mesh.position);
        pickingMesh.quaternion.copy(mesh.quaternion);
        pickingMesh.scale.copy(mesh.scale);
      }
      setUserData(pickingMesh);
      buffer.pickingGroup.add(pickingMesh);
    }

    if (instance) {
      updateBoundingBox(buffer.geometry, buffer.matrix, instance.matrix);
    } else {
      updateBoundingBox(buffer.geometry, buffer.matrix);
    }

        // Log.timeEnd( "Viewer.addBuffer" );
  }

  function remove (buffer) {
    translationGroup.children.forEach(function (group) {
      group.remove(buffer.group);
      group.remove(buffer.wireframeGroup);
    });

    if (buffer.pickable) {
      pickingGroup.remove(buffer.pickingGroup);
    }

    updateBoundingBox();
    if (Debug) { updateHelper(); }

        // requestRender();
  }

  function updateBoundingBox (geometry, matrix, instanceMatrix) {
    function updateGeometry (geometry, matrix, instanceMatrix) {
      if (!geometry.boundingBox) {
        geometry.computeBoundingBox();
      }

      var geoBoundingBox = geometry.boundingBox.clone();

      if (matrix) {
        geoBoundingBox.applyMatrix4(matrix);
      }
      if (instanceMatrix) {
        geoBoundingBox.applyMatrix4(instanceMatrix);
      }

      if (geoBoundingBox.min.equals(geoBoundingBox.max)) {
                // mainly to give a single impostor geometry some volume
                // as it is only expanded in the shader on the GPU
        geoBoundingBox.expandByScalar(5);
      }

      boundingBox.union(geoBoundingBox);
    }

    function updateNode (node) {
      if (node.geometry !== undefined) {
        var matrix, instanceMatrix;
        if (node.userData.buffer) {
          matrix = node.userData.buffer.matrix;
        }
        if (node.userData.instance) {
          instanceMatrix = node.userData.instance.matrix;
        }
        updateGeometry(node.geometry, matrix, instanceMatrix);
      }
    }

    if (geometry) {
      updateGeometry(geometry, matrix, instanceMatrix);
    } else {
      boundingBox.makeEmpty();
      modelGroup.traverse(updateNode);
      backgroundGroup.traverse(updateNode);
    }

    boundingBox.getSize(boundingBoxSize);
    boundingBoxLength = boundingBoxSize.length();
  }

  function getPickingPixels () {
    var n = width * height * 4;
    var imgBuffer = SupportsReadPixelsFloat ? new Float32Array(n) : new Uint8Array(n);

    render(true);
    renderer.readRenderTargetPixels(
            pickingTarget, 0, 0, width, height, imgBuffer
        );

    return imgBuffer
  }

  function getImage (picking) {
    return new Promise(function (resolve) {
      if (picking) {
        var n = width * height * 4;
        var imgBuffer = getPickingPixels();

        if (SupportsReadPixelsFloat) {
          var imgBuffer2 = new Uint8Array(n);
          for (var i = 0; i < n; ++i) {
            imgBuffer2[ i ] = Math.round(imgBuffer[ i ] * 255);
          }
          imgBuffer = imgBuffer2;
        }

        var canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        var ctx = canvas.getContext('2d');
        var imgData = ctx.getImageData(0, 0, width, height);
        imgData.data.set(imgBuffer);
        ctx.putImageData(imgData, 0, 0);
        canvas.toBlob(resolve, 'image/png');
      } else {
        renderer.domElement.toBlob(resolve, 'image/png');
      }
    })
  }

  function makeImage$$1 (params) {
    return makeImage(this, params)
  }

  function setLight (color, intensity, ambientColor, ambientIntensity) {
    var p = parameters;

    if (color !== undefined) { p.lightColor.set(color); }
    if (intensity !== undefined) { p.lightIntensity = intensity; }
    if (ambientColor !== undefined) { p.ambientColor.set(ambientColor); }
    if (ambientIntensity !== undefined) { p.ambientIntensity = ambientIntensity; }

    requestRender();
  }

  function setFog (color, near, far) {
    var p = parameters;

    if (color !== undefined) { p.fogColor.set(color); }
    if (near !== undefined) { p.fogNear = near; }
    if (far !== undefined) { p.fogFar = far; }

    requestRender();
  }

  function setBackground (color) {
    var p = parameters;

    if (color) { p.backgroundColor.set(color); }

    setFog(p.backgroundColor);
    renderer.setClearColor(p.backgroundColor, 0);
    renderer.domElement.style.backgroundColor = p.backgroundColor.getStyle();

    requestRender();
  }

  function setSampling (level) {
    if (level !== undefined) {
      parameters.sampleLevel = level;
      sampleLevel = level;
    }

    requestRender();
  }

  function setCamera (type, fov) {
    var p = parameters;

    if (type) { p.cameraType = type; }
    if (fov) { p.cameraFov = fov; }

    if (p.cameraType === 'orthographic') {
      if (camera !== orthographicCamera) {
        camera = orthographicCamera;
        camera.position.copy(perspectiveCamera.position);
        camera.up.copy(perspectiveCamera.up);
        updateZoom();
      }
    } else {  // p.cameraType === "perspective"
      if (camera !== perspectiveCamera) {
        camera = perspectiveCamera;
        camera.position.copy(orthographicCamera.position);
        camera.up.copy(orthographicCamera.up);
      }
    }

    perspectiveCamera.fov = p.cameraFov;
    camera.updateProjectionMatrix();

    requestRender();
  }

  function setClip (near, far, dist) {
    var p = parameters;

    if (near !== undefined) { p.clipNear = near; }
    if (far !== undefined) { p.clipFar = far; }
    if (dist !== undefined) { p.clipDist = dist; }

    requestRender();
  }

  function setSize (_width, _height) {
    width = _width || 1;
    height = _height || 1;

    perspectiveCamera.aspect = width / height;
    orthographicCamera.left = -width / 2;
    orthographicCamera.right = width / 2;
    orthographicCamera.top = height / 2;
    orthographicCamera.bottom = -height / 2;
    camera.updateProjectionMatrix();

    var dpr = window.devicePixelRatio;

    renderer.setPixelRatio(dpr);
    renderer.setSize(width, height);

    var dprWidth = width * dpr;
    var dprHeight = height * dpr;

    pickingTarget.setSize(dprWidth, dprHeight);
    sampleTarget.setSize(dprWidth, dprHeight);
    holdTarget.setSize(dprWidth, dprHeight);

    requestRender();
  }

  function handleResize () {
    if (container === document.body) {
      setSize(window.innerWidth, window.innerHeight);
    } else {
      var box = container.getBoundingClientRect();
      setSize(box.width, box.height);
    }
  }

  function updateInfo (reset) {
    var memory = info.memory;
    var render = info.render;

    if (reset) {
      memory.programs = 0;
      memory.geometries = 0;
      memory.textures = 0;

      render.calls = 0;
      render.vertices = 0;
      render.faces = 0;
      render.points = 0;
    } else {
      var rInfo = renderer.info;
      var rMemory = rInfo.memory;
      var rRender = rInfo.render;

      memory.programs = rMemory.programs;
      memory.geometries = rMemory.geometries;
      memory.textures = rMemory.textures;

      render.calls += rRender.calls;
      render.vertices += rRender.vertices;
      render.faces += rRender.faces;
      render.points += rRender.points;
    }
  }

  function animate () {
    signals.ticked.dispatch(stats);
    var delta = window.performance.now() - stats.startTime;

    if (delta > 500 && !isStill && sampleLevel < 3 && sampleLevel !== -1) {
      var currentSampleLevel = sampleLevel;
      sampleLevel = 3;
      renderPending = true;
      render();
      isStill = true;
      sampleLevel = currentSampleLevel;
      if (Debug) { Log.log('rendered still frame'); }
    }

    window.requestAnimationFrame(animate);
  }

  function pick (x, y) {
    x *= window.devicePixelRatio;
    y *= window.devicePixelRatio;

    var pid, instance, picker;
    var pixelBuffer = SupportsReadPixelsFloat ? pixelBufferFloat : pixelBufferUint;

    render(true);
    renderer.readRenderTargetPixels(
            pickingTarget, x, y, 1, 1, pixelBuffer
        );

    if (SupportsReadPixelsFloat) {
      pid =
                ((Math.round(pixelBuffer[0] * 255) << 16) & 0xFF0000) |
                ((Math.round(pixelBuffer[1] * 255) << 8) & 0x00FF00) |
                ((Math.round(pixelBuffer[2] * 255)) & 0x0000FF);
    } else {
      pid =
                (pixelBuffer[0] << 16) |
                (pixelBuffer[1] << 8) |
                (pixelBuffer[2]);
    }

    var oid = Math.round(pixelBuffer[ 3 ]);
    var object = pickingGroup.getObjectById(oid);
    if (object) {
      instance = object.userData.instance;
      picker = object.userData.buffer.picking;
    }

        // if( Debug ){
        //     const rgba = Array.apply( [], pixelBuffer );
        //     Log.log( pixelBuffer );
        //     Log.log(
        //         "picked color",
        //         rgba.map( c => { return c.toPrecision( 2 ) } )
        //     );
        //     Log.log( "picked pid", pid );
        //     Log.log( "picked oid", oid );
        //     Log.log( "picked object", object );
        //     Log.log( "picked instance", instance );
        //     Log.log( "picked position", x, y );
        //     Log.log( "devicePixelRatio", window.devicePixelRatio );
        // }

    return {
      'pid': pid,
      'instance': instance,
      'picker': picker
    }
  }

  function requestRender () {
    if (renderPending) {
            // Log.info( "there is still a 'render' call pending" );
      return
    }

        // start gathering stats anew after inactivity
    if (window.performance.now() - stats.startTime > 22) {
      stats.begin();
      isStill = false;
    }

    renderPending = true;

    window.requestAnimationFrame(function requestRenderAnimation () {
      render();
      stats.update();
    });
  }

  function updateZoom () {
    var fov = degToRad(perspectiveCamera.fov);
    var _height = 2 * Math.tan(fov / 2) * -camera.position.z;
    orthographicCamera.zoom = height / _height;
  }

  function __updateClipping () {
    var p = parameters;

        // clipping

        // cDist = distVector.copy( camera.position )
        //             .sub( controls.target ).length();
    cDist = distVector.copy(camera.position).length();
        // console.log( "cDist", cDist )
    if (!cDist) {
            // recover from a broken (NaN) camera position
      camera.position.set(0, 0, p.cameraZ);
      cDist = Math.abs(p.cameraZ);
    }

    bRadius = Math.max(10, boundingBoxLength * 0.5);
    bRadius += boundingBox.getCenter(distVector).length();
        // console.log( "bRadius", bRadius )
    if (bRadius === Infinity || bRadius === -Infinity || isNaN(bRadius)) {
            // console.warn( "something wrong with bRadius" );
      bRadius = 50;
    }

    var nearFactor = (50 - p.clipNear) / 50;
    var farFactor = -(50 - p.clipFar) / 50;
    camera.near = cDist - (bRadius * nearFactor);
    camera.far = cDist + (bRadius * farFactor);

        // fog

    var fogNearFactor = (50 - p.fogNear) / 50;
    var fogFarFactor = -(50 - p.fogFar) / 50;
    var fog = scene.fog;
    fog.color.set(p.fogColor);
    fog.near = cDist - (bRadius * fogNearFactor);
    fog.far = cDist + (bRadius * fogFarFactor);

    if (camera.type === 'PerspectiveCamera') {
      camera.near = Math.max(0.1, p.clipDist, camera.near);
      camera.far = Math.max(1, camera.far);
      fog.near = Math.max(0.1, fog.near);
      fog.far = Math.max(1, fog.far);
    } else if (camera.type === 'OrthographicCamera') {
      if (p.clipNear === 0 && p.clipDist > 0 && cDist + camera.zoom > 2 * -p.clipDist) {
        camera.near += camera.zoom + p.clipDist;
      }
    }
  }

  function __updateCamera () {
    camera.updateMatrix();
    camera.updateMatrixWorld(true);
    camera.matrixWorldInverse.getInverse(camera.matrixWorld);
    camera.updateProjectionMatrix();

    updateMaterialUniforms(scene, camera, renderer, cDist, bRadius);
    sortProjectedPosition(scene, camera);
  }

  function __setVisibility (model, picking, background, helper) {
    modelGroup.visible = model;
    pickingGroup.visible = picking;
    backgroundGroup.visible = background;
    helperGroup.visible = helper;
  }

  function __updateLights () {
        // distVector.copy( camera.position ).sub( controls.target )
        //     .setLength( boundingBoxLength * 100 );
    distVector.copy(camera.position).setLength(boundingBoxLength * 100);

    pointLight.position.copy(camera.position).add(distVector);
    pointLight.color.set(parameters.lightColor);
    pointLight.intensity = parameters.lightIntensity;

    ambientLight.color.set(parameters.ambientColor);
    ambientLight.intensity = parameters.ambientIntensity;
  }

  function __renderPickingGroup () {
    renderer.clearTarget(pickingTarget);
    __setVisibility(false, true, false, false);
    renderer.render(scene, camera, pickingTarget);
    updateInfo();
    renderer.setRenderTarget(null);  // back to standard render target

        // if( Debug ){
        //     __setVisibility( false, true, false, true );

        //     renderer.clear();
        //     renderer.render( scene, camera );
        // }
  }

  function __renderModelGroup (renderTarget) {
    if (renderTarget) {
      renderer.clearTarget(renderTarget);
    } else {
      renderer.clear();
    }

    __setVisibility(false, false, true, false);
    renderer.render(scene, camera, renderTarget);
    if (renderTarget) {
      renderer.clearTarget(renderTarget, false, true, false);
    } else {
      renderer.clearDepth();
    }
    updateInfo();

    __setVisibility(true, false, false, Debug);
    renderer.render(scene, camera, renderTarget);
    updateInfo();
  }

  function __renderSuperSample () {
        // based on the Supersample Anti-Aliasing Render Pass
        // contributed to three.js by bhouston / http://clara.io/
        //
        // This manual approach to SSAA re-renders the scene ones for
        // each sample with camera jitter and accumulates the results.
        // References: https://en.wikipedia.org/wiki/Supersampling

    var offsetList = JitterVectors[ Math.max(0, Math.min(sampleLevel, 5)) ];

    var baseSampleWeight = 1.0 / offsetList.length;
    var roundingRange = 1 / 32;

    compositeUniforms.tForeground.value = sampleTarget.texture;

    var _width = sampleTarget.width;
    var _height = sampleTarget.height;

        // render the scene multiple times, each slightly jitter offset
        // from the last and accumulate the results.
    for (var i = 0; i < offsetList.length; ++i) {
      var offset = offsetList[ i ];
      camera.setViewOffset(
                _width, _height, offset[ 0 ], offset[ 1 ], _width, _height
            );
      __updateCamera();

      var sampleWeight = baseSampleWeight;
            // the theory is that equal weights for each sample lead to an
            // accumulation of rounding errors.
            // The following equation varies the sampleWeight per sample
            // so that it is uniformly distributed across a range of values
            // whose rounding errors cancel each other out.
      var uniformCenteredDistribution = (-0.5 + (i + 0.5) / offsetList.length);
      sampleWeight += roundingRange * uniformCenteredDistribution;
      compositeUniforms.scale.value = sampleWeight;

      __renderModelGroup(sampleTarget);
      renderer.render(
                compositeScene, compositeCamera, holdTarget, (i === 0)
            );
    }

    compositeUniforms.scale.value = 1.0;
    compositeUniforms.tForeground.value = holdTarget.texture;

    renderer.render(compositeScene, compositeCamera, null, true);

    camera.view = null;
  }

  function render (picking) {
    if (rendering) {
      Log.warn("tried to call 'render' from within 'render'");
      return
    }

        // Log.time( "Viewer.render" );

    rendering = true;

    __updateClipping();
    __updateCamera();
    __updateLights();

        // render

    updateInfo(true);

    if (picking) {
      if (!lastRenderedPicking) { __renderPickingGroup(); }
    } else if (sampleLevel > 0) {
      __renderSuperSample();
    } else {
      __renderModelGroup();
    }
    lastRenderedPicking = picking;

    rendering = false;
    renderPending = false;

        // Log.timeEnd( "Viewer.render" );
        // Log.log( info.memory, info.render );
  }

  function clear () {
    Log.log('scene cleared');
    scene.remove(rotationGroup);
    initScene();
    renderer.clear();
  }

    // API

  this.container = container;
  this.stats = stats;
  this.signals = signals;

  this.rotationGroup = rotationGroup;
  this.translationGroup = translationGroup;

  this.add = add;
  this.remove = remove;
  this.clear = clear;

  this.getPickingPixels = getPickingPixels;
  this.getImage = getImage;
  this.makeImage = makeImage$$1;

  this.setLight = setLight;
  this.setFog = setFog;
  this.setBackground = setBackground;
  this.setSampling = setSampling;
  this.setCamera = setCamera;
  this.setClip = setClip;
  this.setSize = setSize;
  this.handleResize = handleResize;

  this.pick = pick;
  this.requestRender = requestRender;
  this.render = render;
  this.animate = animate;
  this.updateZoom = updateZoom;
  this.updateHelper = updateHelper;

  this.renderer = renderer;
  this.scene = scene;
  this.perspectiveCamera = perspectiveCamera;
  this.boundingBox = boundingBox;
  this.updateBoundingBox = function () {
    updateBoundingBox();
    if (Debug) { updateHelper(); }
  };

  Object.defineProperties(this, {
    camera: { get: function () { return camera } },
    width: { get: function () { return width } },
    height: { get: function () { return height } },
    sampleLevel: { get: function () { return sampleLevel } }
  });
}

Viewer.prototype.constructor = Viewer;

/**
 * @file Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var LeftMouseButton = 1;
var MiddleMouseButton = 2;
var RightMouseButton = 3;

/**
 * @file Mouse Observer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * @example
 * mouseObserver.signals.scrolled.add( function( delta ){ ... } );
 *
 * @typedef {Object} MouseSignals
 * @property {Signal<Integer, Integer>} moved - on move: deltaX, deltaY
 * @property {Signal<Number>} scrolled - on scroll: delta
 * @property {Signal<Integer, Integer>} dragged - on drag: deltaX, deltaY
 * @property {Signal} dropped - on drop
 * @property {Signal} clicked - on click
 * @property {Signal} hovered - on hover
 */

function getTouchDistance (event) {
  var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
  var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
  return Math.sqrt(dx * dx + dy * dy)
}

function getMouseButtons (event) {
  if (typeof event === 'object') {
    if ('buttons' in event) {
      return event.buttons
    } else if ('which' in event) {
      var b = event.which;
      if (b === 2) {
        return 4
      } else if (b === 3) {
        return 2
      } else if (b > 0) {
        return 1 << (b - 1)
      }
    } else if ('button' in event) {
      var b$1 = event.button;
      if (b$1 === 1) {
        return 4
      } else if (b$1 === 2) {
        return 2
      } else if (b$1 >= 0) {
        return 1 << b$1
      }
    }
  }
  return 0
}

/**
 * Mouse observer
 *
 * @example
 * // listen to mouse moving (and touch-moving) events
 * mouseObserver.moved.moved.add( function( deltaX, deltaY ){ ... } );
 *
 * @example
 * // listen to scrolling (and pinching) events
 * mouseObserver.signals.scrolled.add( function( delta ){ ... } );
 *
 * @example
 * // listen to dragging (and touch-dragging) events
 * mouseObserver.signals.dragged.add( function( deltaX, deltaY ){ ... } );
 *
 * @example
 * // listen to clicking (and touch-clicking) events
 * mouseObserver.signals.clicked.add( function(){ ... } );
 *
 * @example
 * // listen to hovering events
 * mouseObserver.signals.hovered.add( function(){ ... } );
 */
var MouseObserver = function MouseObserver (domElement, params) {
      /**
       * Events emitted by the mouse observer
       * @type {MouseSignals}
       */
  this.signals = {
    moved: new Signal(),
    scrolled: new Signal(),
    dragged: new Signal(),
    dropped: new Signal(),
    clicked: new Signal(),
    hovered: new Signal()
  };

  var p = Object.assign({}, params);

  this.hoverTimeout = defaults(p.hoverTimeout, 50);
  this.handleScroll = defaults(p.handleScroll, true);

  this.domElement = domElement;

      /**
       * Position on page
       * @type {Vector2}
       */
  this.position = new Vector2();
      /**
       * Previous position on page
       * @type {Vector2}
       */
  this.prevPosition = new Vector2();
      /**
       * Position on page when clicked
       * @type {Vector2}
       */
  this.down = new Vector2();
      /**
       * Position on dom element
       * @type {Vector2}
       */
  this.canvasPosition = new Vector2();
      /**
       * Flag indicating if the mouse is moving
       * @type {Boolean}
       */
  this.moving = false;
      /**
       * Flag indicating if the mouse is hovering
       * @type {Boolean}
       */
  this.hovering = true;
      /**
       * Flag indicating if there was a scolling event
       * since the last mouse move
       * @type {Boolean}
       */
  this.scrolled = false;
      /**
       * Timestamp of last mouse move
       * @type {Number}
       */
  this.lastMoved = Infinity;
      /**
       * Indicates which mouse button was pressed:
       * 0: No button; 1: Left button; 2: Middle button; 3: Right button
       * @type {Integer}
       */
  this.which = undefined;
      /**
       * Indicates which mouse buttons were pressed:
       * 0: No button; 1: Left button; 2: Right button; 4: Middle button
       * @type {Integer}
       */
  this.buttons = undefined;
      /**
       * Flag indicating if the mouse is pressed down
       * @type {Boolean}
       */
  this.pressed = undefined;
      /**
       * Flag indicating if the alt key is pressed
       * @type {Boolean}
       */
  this.altKey = undefined;
      /**
       * Flag indicating if the ctrl key is pressed
       * @type {Boolean}
       */
  this.ctrlKey = undefined;
      /**
       * Flag indicating if the meta key is pressed
       * @type {Boolean}
       */
  this.metaKey = undefined;
      /**
       * Flag indicating if the shift key is pressed
       * @type {Boolean}
       */
  this.shiftKey = undefined;

  this._listen = this._listen.bind(this);
  this._onMousewheel = this._onMousewheel.bind(this);
  this._onMousemove = this._onMousemove.bind(this);
  this._onMousedown = this._onMousedown.bind(this);
  this._onMouseup = this._onMouseup.bind(this);
  this._onContextmenu = this._onContextmenu.bind(this);
  this._onTouchstart = this._onTouchstart.bind(this);
  this._onTouchend = this._onTouchend.bind(this);
  this._onTouchmove = this._onTouchmove.bind(this);

  this._listen();

  document.addEventListener('mousewheel', this._onMousewheel);
  document.addEventListener('wheel', this._onMousewheel);
  document.addEventListener('MozMousePixelScroll', this._onMousewheel);
  document.addEventListener('mousemove', this._onMousemove);
  document.addEventListener('mousedown', this._onMousedown);
  document.addEventListener('mouseup', this._onMouseup);
  document.addEventListener('contextmenu', this._onContextmenu);
  document.addEventListener('touchstart', this._onTouchstart);
  document.addEventListener('touchend', this._onTouchend);
  document.addEventListener('touchmove', this._onTouchmove);
};

var prototypeAccessors$4 = { key: {} };

prototypeAccessors$4.key.get = function () {
  var key = 0;
  if (this.altKey) { key += 1; }
  if (this.ctrlKey) { key += 2; }
  if (this.metaKey) { key += 4; }
  if (this.shiftKey) { key += 8; }
  return key
};

MouseObserver.prototype.setParameters = function setParameters (params) {
  var p = Object.assign({}, params);
  this.hoverTimeout = defaults(p.hoverTimeout, this.hoverTimeout);
};

  /**
   * listen to mouse actions
   * @emits {MouseSignals.hovered} when hovered
   * @return {undefined}
   */
MouseObserver.prototype._listen = function _listen () {
  if (window.performance.now() - this.lastMoved > this.hoverTimeout) {
    this.moving = false;
  }
  if (this.scrolled || (!this.moving && !this.hovering)) {
    this.scrolled = false;
    if (this.hoverTimeout !== -1 && this.overElement) {
      this.hovering = true;
      var cp = this.canvasPosition;
      this.signals.hovered.dispatch(cp.x, cp.y);
    }
  }
  window.requestAnimationFrame(this._listen);
};

  /**
   * handle mouse scroll
   * @emits {MouseSignals.scrolled} when scrolled
   * @param{Event} event - mouse event
   * @return {undefined}
   */
MouseObserver.prototype._onMousewheel = function _onMousewheel (event) {
    var this$1 = this;

  if (event.target !== this.domElement || !this.handleScroll) {
    return
  }
  event.preventDefault();
  this._setKeys(event);

  var delta = 0;
  if (event.wheelDelta) {
          // WebKit / Opera / Explorer 9
    delta = event.wheelDelta / 40;
  } else if (event.detail) {
          // Firefox
    delta = -event.detail / 3;
  } else {
          // Firefox or IE 11
    delta = -event.deltaY / (event.deltaMode ? 0.33 : 30);
  }
  this.signals.scrolled.dispatch(delta);

  setTimeout(function () {
    this$1.scrolled = true;
  }, this.hoverTimeout);
};

  /**
   * handle mouse move
   * @emits {MouseSignals.moved} when moved
   * @emits {MouseSignals.dragged} when dragged
   * @param{Event} event - mouse event
   * @return {undefined}
   */
MouseObserver.prototype._onMousemove = function _onMousemove (event) {
  if (event.target === this.domElement) {
    event.preventDefault();
    this.overElement = true;
  } else {
    this.overElement = false;
  }
  this._setKeys(event);
  this.moving = true;
  this.hovering = false;
  this.lastMoved = window.performance.now();
  this.prevPosition.copy(this.position);
  this.position.set(event.clientX, event.clientY);
  this._setCanvasPosition(event);
  var dx = this.prevPosition.x - this.position.x;
  var dy = this.prevPosition.y - this.position.y;
  this.signals.moved.dispatch(dx, dy);
  if (this.pressed) {
    this.signals.dragged.dispatch(dx, dy);
  }
};

MouseObserver.prototype._onMousedown = function _onMousedown (event) {
  if (event.target !== this.domElement) {
    return
  }
  event.preventDefault();
  this._setKeys(event);
  this.moving = false;
  this.hovering = false;
  this.down.set(event.clientX, event.clientY);
  this.position.set(event.clientX, event.clientY);
  this.which = event.which;
  this.buttons = getMouseButtons(event);
  this.pressed = true;
  this._setCanvasPosition(event);
};

  /**
   * handle mouse up
   * @emits {MouseSignals.clicked} when clicked
   * @emits {MouseSignals.dropped} when dropped
   * @param{Event} event - mouse event
   * @return {undefined}
   */
MouseObserver.prototype._onMouseup = function _onMouseup (event) {
  if (event.target === this.domElement) {
    event.preventDefault();
  }
  this._setKeys(event);
  var cp = this.canvasPosition;
  this.signals.clicked.dispatch(cp.x, cp.y);
      // if( this.distance() > 3 || event.which === RightMouseButton ){
      //   this.signals.dropped.dispatch();
      // }
  this.which = undefined;
  this.buttons = undefined;
  this.pressed = undefined;
};

MouseObserver.prototype._onContextmenu = function _onContextmenu (event) {
  if (event.target === this.domElement) {
    event.preventDefault();
  }
};

MouseObserver.prototype._onTouchstart = function _onTouchstart (event) {
  if (event.target !== this.domElement) {
    return
  }
  event.preventDefault();
  this.pressed = true;
  switch (event.touches.length) {
    case 1: {
      this.moving = false;
      this.hovering = false;
      this.down.set(
                  event.touches[ 0 ].pageX,
                  event.touches[ 0 ].pageY
              );
      this.position.set(
                  event.touches[ 0 ].pageX,
                  event.touches[ 0 ].pageY
              );
      this._setCanvasPosition(event.touches[ 0 ]);
      break
    }

    case 2: {
      this.down.set(
                  (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2,
                  (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2
              );
      this.position.set(
                  (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2,
                  (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2
              );
      this.lastTouchDistance = getTouchDistance(event);
    }
  }
};

MouseObserver.prototype._onTouchend = function _onTouchend (event) {
  if (event.target === this.domElement) {
    event.preventDefault();
  }
  this.pressed = false;
};

MouseObserver.prototype._onTouchmove = function _onTouchmove (event) {
  if (event.target === this.domElement) {
    event.preventDefault();
    this.overElement = true;
  } else {
    this.overElement = false;
  }
  switch (event.touches.length) {
    case 1: {
      this._setKeys(event);
      this.which = undefined;
      this.buttons = undefined;
      this.moving = true;
      this.hovering = false;
      this.lastMoved = window.performance.now();
      this.prevPosition.copy(this.position);
      this.position.set(
                  event.touches[ 0 ].pageX,
                  event.touches[ 0 ].pageY
              );
      this._setCanvasPosition(event.touches[ 0 ]);
      var dx = this.prevPosition.x - this.position.x;
      var dy = this.prevPosition.y - this.position.y;
      this.signals.moved.dispatch(dx, dy);
      if (this.pressed) {
        this.signals.dragged.dispatch(dx, dy);
      }
      break
    }

    case 2: {
      this.which = RightMouseButton;
      this.buttons = 2;
      var touchDistance = getTouchDistance(event);
      var delta = touchDistance - this.lastTouchDistance;
      this.lastTouchDistance = touchDistance;
      if (Math.abs(delta) > 1) {
        this.signals.scrolled.dispatch(delta / 2);
      } else {
        this.prevPosition.copy(this.position);
        this.position.set(
                      (event.touches[ 0 ].pageX + event.touches[ 1 ].pageX) / 2,
                      (event.touches[ 0 ].pageY + event.touches[ 1 ].pageY) / 2
                  );
        var dx$1 = this.prevPosition.x - this.position.x;
        var dy$1 = this.prevPosition.y - this.position.y;
        this.signals.moved.dispatch(dx$1, dy$1);
        if (this.pressed) {
          this.signals.dragged.dispatch(dx$1, dy$1);
        }
      }
    }
  }
};

MouseObserver.prototype._distance = function _distance () {
  return this.position.distanceTo(this.down)
};

MouseObserver.prototype._setCanvasPosition = function _setCanvasPosition (event) {
  var box = this.domElement.getBoundingClientRect();
  var offsetX, offsetY;
  if ('offsetX' in event && 'offsetY' in event) {
    offsetX = event.offsetX;
    offsetY = event.offsetY;
  } else {
    offsetX = event.clientX - box.left;
    offsetY = event.clientY - box.top;
  }
  this.canvasPosition.set(offsetX, box.height - offsetY);
};

MouseObserver.prototype._setKeys = function _setKeys (event) {
  this.altKey = event.altKey;
  this.ctrlKey = event.ctrlKey;
  this.metaKey = event.metaKey;
  this.shiftKey = event.shiftKey;
};

MouseObserver.prototype.dispose = function dispose () {
  document.removeEventListener('mousewheel', this._onMousewheel);
  document.removeEventListener('wheel', this._onMousewheel);
  document.removeEventListener('MozMousePixelScroll', this._onMousewheel);
  document.removeEventListener('mousemove', this._onMousemove);
  document.removeEventListener('mousedown', this._onMousedown);
  document.removeEventListener('mouseup', this._onMouseup);
  document.removeEventListener('contextmenu', this._onContextmenu);
  document.removeEventListener('touchstart', this._onTouchstart);
  document.removeEventListener('touchend', this._onTouchend);
  document.removeEventListener('touchmove', this._onTouchmove);
};

Object.defineProperties( MouseObserver.prototype, prototypeAccessors$4 );

/**
 * @file Trackball Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var tmpRotateXMatrix = new Matrix4();
var tmpRotateYMatrix = new Matrix4();
var tmpRotateMatrix = new Matrix4();
var tmpRotateVector = new Vector3();
var tmpRotateQuaternion = new Quaternion();
var tmpPanMatrix = new Matrix4();
var tmpPanVector = new Vector3();

/**
 * Trackball controls
 */
var TrackballControls = function TrackballControls (stage, params) {
  var p = params || {};

  this.rotateSpeed = defaults(p.rotateSpeed, 2.0);
  this.zoomSpeed = defaults(p.zoomSpeed, 1.2);
  this.panSpeed = defaults(p.panSpeed, 1.0);

  this.stage = stage;
  this.viewer = stage.viewer;
  this.mouse = stage.mouseObserver;
  this.controls = stage.viewerControls;
};

var prototypeAccessors$5 = { component: {} };

prototypeAccessors$5.component.get = function () {
  return this.stage.transformComponent
};

TrackballControls.prototype._setPanVector = function _setPanVector (x, y) {
  var scaleFactor;
  var camera = this.viewer.camera;

  if (camera.type === 'OrthographicCamera') {
    scaleFactor = 1 / camera.zoom;
  } else {
    var fov = degToRad(camera.fov);
    var unitHeight = -2.0 * camera.position.z * Math.tan(fov / 2);
    scaleFactor = unitHeight / this.viewer.height;
  }

  tmpPanVector.set(x, y, 0);
  tmpPanVector.multiplyScalar(this.panSpeed * scaleFactor);
};

TrackballControls.prototype._getRotateXY = function _getRotateXY (x, y) {
  return [
    this.rotateSpeed * -x * 0.01,
    this.rotateSpeed * y * 0.01
  ]
};

TrackballControls.prototype.zoom = function zoom (delta) {
  this.controls.zoom(this.zoomSpeed * delta * 0.02);
};

TrackballControls.prototype.pan = function pan (x, y) {
  this._setPanVector(x, y);

  tmpPanMatrix.getInverse(this.viewer.rotationGroup.matrix);
  tmpPanVector.applyMatrix4(tmpPanMatrix);
  this.controls.translate(tmpPanVector);
};

TrackballControls.prototype.panComponent = function panComponent (x, y) {
  if (!this.component) { return }

  this._setPanVector(x, y);

  tmpPanMatrix.extractRotation(this.component.transform);
  tmpPanMatrix.premultiply(this.viewer.rotationGroup.matrix);
  tmpPanMatrix.getInverse(tmpPanMatrix);
  tmpPanVector.applyMatrix4(tmpPanMatrix);
  this.component.position.add(tmpPanVector);
  this.component.updateMatrix();
};

TrackballControls.prototype.rotate = function rotate (x, y) {
  var ref = this._getRotateXY(x, y);
    var dx = ref[0];
    var dy = ref[1];

  tmpRotateXMatrix.makeRotationX(dy);
  tmpRotateYMatrix.makeRotationY(dx);
  tmpRotateXMatrix.multiply(tmpRotateYMatrix);
  this.controls.applyMatrix(tmpRotateXMatrix);
};

TrackballControls.prototype.rotateComponent = function rotateComponent (x, y) {
  if (!this.component) { return }

  var ref = this._getRotateXY(x, y);
    var dx = ref[0];
    var dy = ref[1];

  tmpRotateMatrix.extractRotation(this.component.transform);
  tmpRotateMatrix.premultiply(this.viewer.rotationGroup.matrix);
  tmpRotateMatrix.getInverse(tmpRotateMatrix);
  tmpRotateVector.set(1, 0, 0);
  tmpRotateVector.applyMatrix4(tmpRotateMatrix);
  tmpRotateXMatrix.makeRotationAxis(tmpRotateVector, dy);
  tmpRotateVector.set(0, 1, 0);
  tmpRotateVector.applyMatrix4(tmpRotateMatrix);
  tmpRotateYMatrix.makeRotationAxis(tmpRotateVector, dx);
  tmpRotateXMatrix.multiply(tmpRotateYMatrix);
  tmpRotateQuaternion.setFromRotationMatrix(tmpRotateXMatrix);
  this.component.quaternion.premultiply(tmpRotateQuaternion);
  this.component.updateMatrix();
};

Object.defineProperties( TrackballControls.prototype, prototypeAccessors$5 );

/**
 * @file Picking Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function closer (x, a, b) {
  return x.distanceTo(a) < x.distanceTo(b)
}

/**
 * Picking data object.
 * @typedef {Object} PickingData - picking data
 * @property {Number} [pid] - picking id
 * @property {Object} [instance] - instance data
 * @property {Integer} instance.id - instance id
 * @property {String|Integer} instance.name - instance name
 * @property {Matrix4} instance.matrix - transformation matrix of the instance
 * @property {Picker} [picker] - picker object
 */

/**
 * Picking proxy class.
 */
var PickingProxy = function PickingProxy (pickingData, stage) {
  this.pid = pickingData.pid;
  this.picker = pickingData.picker;

  /**
   * @member {Object}
   */
  this.instance = pickingData.instance;

  /**
   * @member {Stage}
   */
  this.stage = stage;
  /**
   * @member {ViewerControls}
   */
  this.controls = stage.viewerControls;
  /**
   * @member {MouseObserver}
   */
  this.mouse = stage.mouseObserver;
};

var prototypeAccessors$6 = { type: {},altKey: {},ctrlKey: {},metaKey: {},shiftKey: {},canvasPosition: {},component: {},object: {},position: {},closestBondAtom: {},arrow: {},atom: {},axes: {},bond: {},cone: {},clash: {},contact: {},cylinder: {},distance: {},ellipsoid: {},mesh: {},slice: {},sphere: {},surface: {},unitcell: {},unknown: {},volume: {} };

/**
 * Kind of the picked data
 * @member {String}
 */
prototypeAccessors$6.type.get = function () { return this.picker.type };

/**
 * If the `alt` key was pressed
 * @member {Boolean}
 */
prototypeAccessors$6.altKey.get = function () { return this.mouse.altKey };
/**
 * If the `ctrl` key was pressed
 * @member {Boolean}
 */
prototypeAccessors$6.ctrlKey.get = function () { return this.mouse.ctrlKey };
/**
 * If the `meta` key was pressed
 * @member {Boolean}
 */
prototypeAccessors$6.metaKey.get = function () { return this.mouse.metaKey };
/**
 * If the `shift` key was pressed
 * @member {Boolean}
 */
prototypeAccessors$6.shiftKey.get = function () { return this.mouse.shiftKey };

/**
 * Position of the mouse on the canvas
 * @member {Vector2}
 */
prototypeAccessors$6.canvasPosition.get = function () { return this.mouse.canvasPosition };

/**
 * The component the picked data is part of
 * @member {Component}
 */
prototypeAccessors$6.component.get = function () {
  return this.stage.getComponentsByObject(this.picker.data).list[ 0 ]
};

/**
 * The picked object data
 * @member {Object}
 */
prototypeAccessors$6.object.get = function () {
  return this.picker.getObject(this.pid)
};

/**
 * The 3d position in the scene of the picked object
 * @member {Vector3}
 */
prototypeAccessors$6.position.get = function () {
  return this.picker.getPosition(this.pid, this.instance, this.component)
};

/**
 * The atom of a picked bond that is closest to the mouse
 * @member {AtomProxy}
 */
prototypeAccessors$6.closestBondAtom.get = function () {
  if (this.type !== 'bond') { return undefined }

  var bond = this.bond;
  var controls = this.controls;
  var cp = this.canvasPosition;

  var acp1 = controls.getPositionOnCanvas(bond.atom1);
  var acp2 = controls.getPositionOnCanvas(bond.atom2);

  return closer(cp, acp1, acp2) ? bond.atom1 : bond.atom2
};

/**
 * @member {Object}
 */
prototypeAccessors$6.arrow.get = function () { return this._objectIfType('arrow') };
/**
 * @member {AtomProxy}
 */
prototypeAccessors$6.atom.get = function () { return this._objectIfType('atom') };
/**
 * @member {Object}
 */
prototypeAccessors$6.axes.get = function () { return this._objectIfType('axes') };
/**
 * @member {BondProxy}
 */
prototypeAccessors$6.bond.get = function () { return this._objectIfType('bond') };
/**
 * @member {Object}
 */
prototypeAccessors$6.cone.get = function () { return this._objectIfType('cone') };
/**
 * @member {Object}
 */
prototypeAccessors$6.clash.get = function () { return this._objectIfType('clash') };
/**
 * @member {BondProxy}
 */
prototypeAccessors$6.contact.get = function () { return this._objectIfType('contact') };
/**
 * @member {Object}
 */
prototypeAccessors$6.cylinder.get = function () { return this._objectIfType('cylinder') };
/**
 * @member {BondProxy}
 */
prototypeAccessors$6.distance.get = function () { return this._objectIfType('distance') };
/**
 * @member {Object}
 */
prototypeAccessors$6.ellipsoid.get = function () { return this._objectIfType('ellipsoid') };
/**
 * @member {Object}
 */
prototypeAccessors$6.mesh.get = function () { return this._objectIfType('mesh') };
/**
 * @member {Object}
 */
prototypeAccessors$6.slice.get = function () { return this._objectIfType('slice') };
/**
 * @member {Object}
 */
prototypeAccessors$6.sphere.get = function () { return this._objectIfType('sphere') };
/**
 * @member {Object}
 */
prototypeAccessors$6.surface.get = function () { return this._objectIfType('surface') };
/**
 * @member {Object}
 */
prototypeAccessors$6.unitcell.get = function () { return this._objectIfType('unitcell') };
/**
 * @member {Object}
 */
prototypeAccessors$6.unknown.get = function () { return this._objectIfType('unknown') };
/**
 * @member {Object}
 */
prototypeAccessors$6.volume.get = function () { return this._objectIfType('volume') };

PickingProxy.prototype._objectIfType = function _objectIfType (type) {
  return this.type === type ? this.object : undefined
};

PickingProxy.prototype.getLabel = function getLabel () {
  var msg = 'nothing';
  if (this.arrow) {
    msg = 'arrow: ' + (this.arrow.name || this.pid) + ' (' + this.arrow.shape.name + ')';
  } else if (this.atom) {
    msg = 'atom: ' +
            this.atom.qualifiedName() +
            ' (' + this.atom.structure.name + ')';
  } else if (this.axes) {
    msg = 'axes';
  } else if (this.bond) {
    msg = 'bond: ' +
            this.bond.atom1.qualifiedName() + ' - ' + this.bond.atom2.qualifiedName() +
            ' (' + this.bond.structure.name + ')';
  } else if (this.cone) {
    msg = 'cone: ' + (this.cone.name || this.pid) + ' (' + this.cone.shape.name + ')';
  } else if (this.clash) {
    msg = 'clash: ' + this.clash.clash.sele1 + ' - ' + this.clash.clash.sele2;
  } else if (this.contact) {
    msg = 'contact: ' +
            this.contact.atom1.qualifiedName() + ' - ' + this.contact.atom2.qualifiedName() +
            ' (' + this.contact.structure.name + ')';
  } else if (this.cylinder) {
    msg = 'cylinder: ' + (this.cylinder.name || this.pid) + ' (' + this.cylinder.shape.name + ')';
  } else if (this.distance) {
    msg = 'distance: ' +
            this.distance.atom1.qualifiedName() + ' - ' + this.distance.atom2.qualifiedName() +
            ' (' + this.distance.structure.name + ')';
  } else if (this.ellipsoid) {
    msg = 'ellipsoid: ' + (this.ellipsoid.name || this.pid) + ' (' + this.ellipsoid.shape.name + ')';
  } else if (this.mesh) {
    msg = 'mesh: ' + (this.mesh.name || this.mesh.serial) + ' (' + this.mesh.shape.name + ')';
  } else if (this.slice) {
    msg = 'slice: ' +
            this.slice.value.toPrecision(3) +
            ' (' + this.slice.volume.name + ')';
  } else if (this.sphere) {
    msg = 'sphere: ' + (this.sphere.name || this.pid) + ' (' + this.sphere.shape.name + ')';
  } else if (this.surface) {
    msg = 'surface: ' + this.surface.surface.name;
  } else if (this.unitcell) {
    msg = 'unitcell: ' +
            this.unitcell.unitcell.spacegroup +
            ' (' + this.unitcell.structure.name + ')';
  } else if (this.unknown) {
    msg = 'unknown';
  } else if (this.volume) {
    msg = 'volume: ' +
            this.volume.value.toPrecision(3) +
            ' (' + this.volume.volume.name + ')';
  }
  return msg
};

Object.defineProperties( PickingProxy.prototype, prototypeAccessors$6 );

/**
 * @file Picking Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Picking controls
 */
var PickingControls = function PickingControls (stage/*, params */) {
  this.stage = stage;
  this.viewer = stage.viewer;
};

  /**
   * get picking data
   * @param {Number} x - canvas x coordinate
   * @param {Number} y - canvas y coordinate
   * @return {PickingProxy|undefined} picking proxy
   */
PickingControls.prototype.pick = function pick (x, y) {
  var pickingData = this.viewer.pick(x, y);

  if (pickingData.picker &&
          pickingData.picker.type !== 'ignore' &&
          pickingData.pid !== undefined
      ) {
    var pickerArray = pickingData.picker.array;
    if (pickerArray && pickingData.pid >= pickerArray.length) {
      console.error('pid >= picker.array.length');
    } else {
      return new PickingProxy(pickingData, this.stage)
    }
  }
};

/**
 * @file Viewer Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Orientation matrix, a 4x4 transformation matrix with rotation part
 * used for scene rotation, scale part for scene camera distance and
 * position part for scene translation
 * @typedef {Matrix4} OrientationMatrix - orientation matrix
 */

var tmpQ = new Quaternion();
var tmpP = new Vector3();
var tmpS = new Vector3();

var tmpCanvasVector = new Vector3();
var tmpScaleVector = new Vector3();
var tmpRotateMatrix$1 = new Matrix4();
var tmpRotateVector$1 = new Vector3();
var tmpAlignMatrix = new Matrix4();

/**
 * Viewer controls
 */
var ViewerControls = function ViewerControls (stage) {
  this.stage = stage;
  this.viewer = stage.viewer;

  /**
   * @type {{changed: Signal}}
   */
  this.signals = {
    changed: new Signal()
  };
};

var prototypeAccessors$7 = { position: {},rotation: {} };

/**
 * scene center position
 * @type {Vector3}
 */
prototypeAccessors$7.position.get = function () {
  return this.viewer.translationGroup.position
};

/**
 * scene rotation
 * @type {Quaternion}
 */
prototypeAccessors$7.rotation.get = function () {
  return this.viewer.rotationGroup.quaternion
};

/**
 * Trigger render and emit changed event
 * @emits {ViewerControls.signals.changed}
 * @return {undefined}
 */
ViewerControls.prototype.changed = function changed () {
  this.viewer.requestRender();
  this.signals.changed.dispatch();
};

ViewerControls.prototype.getPositionOnCanvas = function getPositionOnCanvas (position, optionalTarget) {
  var canvasPosition = ensureVector2(optionalTarget);
  var viewer = this.viewer;

  tmpCanvasVector.copy(position)
    .add(viewer.translationGroup.position)
    .applyMatrix4(viewer.rotationGroup.matrix)
    .project(viewer.camera);

  return canvasPosition.set(
    (tmpCanvasVector.x + 1) * viewer.width / 2,
    (tmpCanvasVector.y + 1) * viewer.height / 2
  )
};

/**
 * get scene orientation
 * @param {Matrix4} optionalTarget - pre-allocated target matrix
 * @return {OrientationMatrix} scene orientation
 */
ViewerControls.prototype.getOrientation = function getOrientation (optionalTarget) {
  var m = ensureMatrix4(optionalTarget);

  m.copy(this.viewer.rotationGroup.matrix);
  var z = -this.viewer.camera.position.z;
  m.scale(tmpScaleVector.set(z, z, z));
  m.setPosition(this.viewer.translationGroup.position);

  return m
};

/**
 * set scene orientation
 * @param {OrientationMatrix|Array} orientation - scene orientation
 * @return {undefined}
 */
ViewerControls.prototype.orient = function orient (orientation) {
  ensureMatrix4(orientation).decompose(tmpP, tmpQ, tmpS);

  var v = this.viewer;
  v.rotationGroup.setRotationFromQuaternion(tmpQ);
  v.translationGroup.position.copy(tmpP);
  v.camera.position.z = -tmpS.z;
  v.updateZoom();
  this.changed();
};

/**
 * translate scene
 * @param{Vector3|Array} vector - translation vector
 * @return {undefined}
 */
ViewerControls.prototype.translate = function translate (vector) {
  this.viewer.translationGroup.position
    .add(ensureVector3(vector));
  this.changed();
};

/**
 * center scene
 * @param{Vector3|Array} position - center position
 * @return {undefined}
 */
ViewerControls.prototype.center = function center (position) {
  this.viewer.translationGroup.position
    .copy(ensureVector3(position)).negate();
  this.changed();
};

/**
 * zoom scene
 * @param{Number} delta - zoom change
 * @return {undefined}
 */
ViewerControls.prototype.zoom = function zoom (delta) {
  this.distance(this.viewer.camera.position.z * (1 - delta));
};

/**
 * camera distance
 * @param{Number} z - distance
 * @return {undefined}
 */
ViewerControls.prototype.distance = function distance (z) {
  this.viewer.camera.position.z = z;
  this.viewer.updateZoom();
  this.changed();
};

/**
 * spin scene on axis
 * @param{Vector3|Array} axis - rotation axis
 * @param{Number} angle - amount to spin
 * @return {undefined}
 */
ViewerControls.prototype.spin = function spin (axis, angle) {
  tmpRotateMatrix$1.getInverse(this.viewer.rotationGroup.matrix);
  tmpRotateVector$1
    .copy(ensureVector3(axis)).applyMatrix4(tmpRotateMatrix$1);

  this.viewer.rotationGroup.rotateOnAxis(tmpRotateVector$1, angle);
  this.changed();
};

/**
 * rotate scene
 * @param{Quaternion|Array} quaternion - rotation quaternion
 * @return {undefined}
 */
ViewerControls.prototype.rotate = function rotate (quaternion) {
  this.viewer.rotationGroup
    .setRotationFromQuaternion(ensureQuaternion(quaternion));
  this.changed();
};

/**
 * align scene to basis matrix
 * @param{Matrix4|Array} basis - basis matrix
 * @return {undefined}
 */
ViewerControls.prototype.align = function align (basis) {
  tmpAlignMatrix.getInverse(ensureMatrix4(basis));

  this.viewer.rotationGroup.setRotationFromMatrix(tmpAlignMatrix);
  this.changed();
};

/**
 * apply rotation matrix to scene
 * @param{Matrix4|Array} matrix - rotation matrix
 * @return {undefined}
 */
ViewerControls.prototype.applyMatrix = function applyMatrix (matrix) {
  this.viewer.rotationGroup.applyMatrix(ensureMatrix4(matrix));
  this.changed();
};

Object.defineProperties( ViewerControls.prototype, prototypeAccessors$7 );

/**
 * @file Animation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Animation. Base animation class.
 * @interface
 */
var Animation = function Animation (duration, controls) {
  var args = [], len = arguments.length - 2;
  while ( len-- > 0 ) args[ len ] = arguments[ len + 2 ];

  this.duration = defaults(duration, 1000);
  this.controls = controls;

  this.startTime = window.performance.now();
  this.pausedTime = -1;
  this.elapsedDuration = 0;
  this.pausedDuration = 0;
  this.ignoreGlobalToggle = false;

  this._paused = false;
  this._resolveList = []

  ;(ref = this)._init.apply(ref, args);
  var ref;
};

var prototypeAccessors$9 = { done: {},paused: {} };

  /**
   * True when animation has finished
   * @type {Boolean}
   */
prototypeAccessors$9.done.get = function () {
  return this.alpha === 1
};

  /**
   * True when animation is paused
   * @type {Boolean}
   */
prototypeAccessors$9.paused.get = function () {
  return this._paused
};

  /**
   * init animation
   * @abstract
   * @return {undefined}
   */
Animation.prototype._init = function _init () {};

  /**
   * called on every tick
   * @abstract
   * @return {undefined}
   */
Animation.prototype._tick = function _tick () {};

Animation.prototype.tick = function tick (stats) {
  if (this._paused) { return }

  this.elapsedDuration = stats.currentTime - this.startTime - this.pausedDuration;

  if (this.duration === 0) {
    this.alpha = 1;
  } else {
    this.alpha = smoothstep(0, 1, this.elapsedDuration / this.duration);
  }

  this._tick(stats);

  if (this.done) {
    this._resolveList.forEach(function (resolve) { return resolve(); });
  }

  return this.done
};

  /**
   * Pause animation
   * @param {Boolean} [hold] - put animation on a hold which
   *                         must be release before it can be resumed
   * @return {undefined}
   */
Animation.prototype.pause = function pause (hold) {
  if (hold) { this._hold = true; }

  if (this.pausedTime === -1) {
    this.pausedTime = window.performance.now();
  }
  this._paused = true;
};

  /**
   * Resume animation
   * @param {Boolean} [releaseHold] - release a hold on the animation
   * @return {undefined}
   */
Animation.prototype.resume = function resume (releaseHold) {
  if (!releaseHold && this._hold) { return }

  this.pausedDuration += window.performance.now() - this.pausedTime;
  this._paused = false;
  this._hold = false;
  this.pausedTime = -1;
};

  /**
   * Toggle animation
   * @return {undefined}
   */
Animation.prototype.toggle = function toggle () {
  if (this._paused) {
    this.resume();
  } else {
    this.pause();
  }
};

  /**
   * Promise-like interface
   * @param{Function} callback - a callback
   * @return {Promise} a promise
   */
Animation.prototype.then = function then (callback) {
    var this$1 = this;

  var p;

  if (this.done) {
    p = Promise.resolve();
  } else {
    p = new Promise(function (resolve) { return this$1._resolveList.push(resolve); });
  }

  return p.then(callback)
};

Object.defineProperties( Animation.prototype, prototypeAccessors$9 );

/**
 * Spin animation. Spin around an axis.
 */
var SpinAnimation = (function (Animation) {
  function SpinAnimation (duration) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    Animation.apply(this, [ defaults(duration, Infinity) ].concat( args ));
  }

  if ( Animation ) SpinAnimation.__proto__ = Animation;
  SpinAnimation.prototype = Object.create( Animation && Animation.prototype );
  SpinAnimation.prototype.constructor = SpinAnimation;

  SpinAnimation.prototype._init = function _init (axis, angle) {
    if (Array.isArray(axis)) {
      this.axis = new Vector3().fromArray(axis);
    } else {
      this.axis = defaults(axis, new Vector3(0, 1, 0));
    }
    this.angle = defaults(angle, 0.01);
  };

  SpinAnimation.prototype._tick = function _tick (stats) {
    if (!this.axis || !this.angle) { return }

    this.controls.spin(
      this.axis, this.angle * stats.lastDuration / 16
    );
  };

  return SpinAnimation;
}(Animation));

/**
 * Rock animation. Rock around an axis.
 */
var RockAnimation = (function (Animation) {
  function RockAnimation (duration) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    Animation.apply(this, [ defaults(duration, Infinity) ].concat( args ));
  }

  if ( Animation ) RockAnimation.__proto__ = Animation;
  RockAnimation.prototype = Object.create( Animation && Animation.prototype );
  RockAnimation.prototype.constructor = RockAnimation;

  RockAnimation.prototype._init = function _init (axis, angleStep, angleEnd) {
    if (Array.isArray(axis)) {
      this.axis = new Vector3().fromArray(axis);
    } else {
      this.axis = defaults(axis, new Vector3(0, 1, 0));
    }
    this.angleStep = defaults(angleStep, 0.01);
    this.angleEnd = defaults(angleEnd, 0.2);

    this.angleSum = 0;
    this.direction = 1;
  };

  RockAnimation.prototype._tick = function _tick (stats) {
    if (!this.axis || !this.angleStep || !this.angleEnd) { return }

    var alpha = smoothstep(
      0, 1, Math.abs(this.angleSum) / this.angleEnd
    );
    var angle = this.angleStep * this.direction * (1.1 - alpha);

    this.controls.spin(
      this.axis, angle * stats.lastDuration / 16
    );

    this.angleSum += this.angleStep;

    if (this.angleSum >= this.angleEnd) {
      this.direction *= -1;
      this.angleSum = -this.angleEnd;
    }
  };

  return RockAnimation;
}(Animation));

/**
 * Move animation. Move from one position to another.
 */
var MoveAnimation = (function (Animation) {
  function MoveAnimation () {
    Animation.apply(this, arguments);
  }

  if ( Animation ) MoveAnimation.__proto__ = Animation;
  MoveAnimation.prototype = Object.create( Animation && Animation.prototype );
  MoveAnimation.prototype.constructor = MoveAnimation;

  MoveAnimation.prototype._init = function _init (moveFrom, moveTo) {
    this.moveFrom = ensureVector3(defaults(moveFrom, new Vector3()));
    this.moveTo = ensureVector3(defaults(moveTo, new Vector3()));
  };

  MoveAnimation.prototype._tick = function _tick (/* stats */) {
    this.controls.position.lerpVectors(
      this.moveFrom, this.moveTo, this.alpha
    ).negate();
    this.controls.changed();
  };

  return MoveAnimation;
}(Animation));

/**
 * Zoom animation. Gradually change the zoom level.
 */
var ZoomAnimation = (function (Animation) {
  function ZoomAnimation () {
    Animation.apply(this, arguments);
  }

  if ( Animation ) ZoomAnimation.__proto__ = Animation;
  ZoomAnimation.prototype = Object.create( Animation && Animation.prototype );
  ZoomAnimation.prototype.constructor = ZoomAnimation;

  ZoomAnimation.prototype._init = function _init (zoomFrom, zoomTo) {
    this.zoomFrom = zoomFrom;
    this.zoomTo = zoomTo;
  };

  ZoomAnimation.prototype._tick = function _tick (/* stats */) {
    this.controls.distance(lerp(this.zoomFrom, this.zoomTo, this.alpha));
  };

  return ZoomAnimation;
}(Animation));

/**
 * Rotate animation. Rotate from one orientation to another.
 */
var RotateAnimation = (function (Animation) {
  function RotateAnimation () {
    Animation.apply(this, arguments);
  }

  if ( Animation ) RotateAnimation.__proto__ = Animation;
  RotateAnimation.prototype = Object.create( Animation && Animation.prototype );
  RotateAnimation.prototype.constructor = RotateAnimation;

  RotateAnimation.prototype._init = function _init (rotateFrom, rotateTo) {
    this.rotateFrom = ensureQuaternion(rotateFrom);
    this.rotateTo = ensureQuaternion(rotateTo);

    this._currentRotation = new Quaternion();
  };

  RotateAnimation.prototype._tick = function _tick (/* stats */) {
    this._currentRotation
        .copy(this.rotateFrom)
        .slerp(this.rotateTo, this.alpha);

    this.controls.rotate(this._currentRotation);
  };

  return RotateAnimation;
}(Animation));

/**
 * Value animation. Call callback with interpolated value.
 */
var ValueAnimation = (function (Animation) {
  function ValueAnimation () {
    Animation.apply(this, arguments);
  }

  if ( Animation ) ValueAnimation.__proto__ = Animation;
  ValueAnimation.prototype = Object.create( Animation && Animation.prototype );
  ValueAnimation.prototype.constructor = ValueAnimation;

  ValueAnimation.prototype._init = function _init (valueFrom, valueTo, callback) {
    this.valueFrom = valueFrom;
    this.valueTo = valueTo;

    this.callback = callback;
  };

  ValueAnimation.prototype._tick = function _tick (/* stats */) {
    this.callback(lerp(this.valueFrom, this.valueTo, this.alpha));
  };

  return ValueAnimation;
}(Animation));

/**
 * Timeout animation. Call callback after duration.
 */
var TimeoutAnimation = (function (Animation) {
  function TimeoutAnimation () {
    Animation.apply(this, arguments);
  }

  if ( Animation ) TimeoutAnimation.__proto__ = Animation;
  TimeoutAnimation.prototype = Object.create( Animation && Animation.prototype );
  TimeoutAnimation.prototype.constructor = TimeoutAnimation;

  TimeoutAnimation.prototype._init = function _init (callback) {
    this.callback = callback;
  };

  TimeoutAnimation.prototype._tick = function _tick (/* stats */) {
    if (this.alpha === 1) { this.callback(); }
  };

  return TimeoutAnimation;
}(Animation));

/**
 * Animation list.
 */
var AnimationList = function AnimationList (list) {
  this._list = list || [];
  this._resolveList = [];
};

var prototypeAccessors$1$1 = { done: {} };

  /**
   * True when all animations have finished
   * @type {Boolean}
   */
prototypeAccessors$1$1.done.get = function () {
  return this._list.every(function (animation) {
    return animation.done
  })
};

  /**
   * Promise-like interface
   * @param{Function} callback - a callback
   * @return {Promise} a promise
   */
AnimationList.prototype.then = function then (callback) {
    var this$1 = this;

  var p;

  if (this.done) {
    p = Promise.resolve();
  } else {
    p = new Promise(function (resolve) {
      this$1._resolveList.push(resolve);
      this$1._list.forEach(function (animation) {
        animation.then(function () {
          this$1._resolveList.forEach(function (callback) {
            callback();
          });
          this$1._resolveList.length = 0;
        });
      });
    });
  }

  return p.then(callback)
};

Object.defineProperties( AnimationList.prototype, prototypeAccessors$1$1 );

/**
 * @file Animation Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Animation controls
 */
var AnimationControls = function AnimationControls (stage) {
  this.stage = stage;
  this.viewer = stage.viewer;
  this.controls = stage.viewerControls;

  this.animationList = [];
  this.finishedList = [];
};

var prototypeAccessors$8 = { paused: {} };

  /**
   * True when all animations are paused
   * @type {Boolean}
   */
prototypeAccessors$8.paused.get = function () {
  return this.animationList.every(function (animation) { return animation.paused; })
};

  /**
   * Add an animation
   * @param {Animation} animation - the animation
   * @return {Animation} the animation
   */
AnimationControls.prototype.add = function add (animation) {
  if (animation.duration === 0) {
    animation.tick(this.viewer.stats);
  } else {
    this.animationList.push(animation);
  }

  return animation
};

  /**
   * Remove an animation
   * @param {Animation} animation - the animation
   * @return {undefined}
   */
AnimationControls.prototype.remove = function remove (animation) {
  var list = this.animationList;
  var index = list.indexOf(animation);

  if (index > -1) {
    list.splice(index, 1);
  }
};

  /**
   * Run all animations
   * @param{Stats} stats - a viewer stats objects
   * @return {undefined}
   */
AnimationControls.prototype.run = function run (stats) {
    var this$1 = this;

  var finishedList = this.finishedList;
  var animationList = this.animationList;

  var n = animationList.length;
  for (var i = 0; i < n; ++i) {
    var animation = animationList[ i ];
          // tick returns true when finished
    if (animation.tick(stats)) {
      finishedList.push(animation);
    }
  }

  var m = finishedList.length;
  if (m) {
    for (var j = 0; j < m; ++j) {
      this$1.remove(finishedList[ j ]);
    }
    finishedList.length = 0;
  }
};

  /**
   * Add a spin animation
   * @param{Vector3} axis - axis to spin around
   * @param{Number} angle - amount to spin per frame, radians
   * @param{Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
AnimationControls.prototype.spin = function spin (axis, angle, duration) {
  return this.add(
          new SpinAnimation(duration, this.controls, axis, angle)
      )
};

  /**
   * Add a rock animation
   * @param{Vector3} axis - axis to rock around
   * @param{Number} angle - amount to spin per frame, radians
   * @param{Number} end - maximum extend of motion, radians
   * @param{Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
AnimationControls.prototype.rock = function rock (axis, angle, end, duration) {
  return this.add(
          new RockAnimation(duration, this.controls, axis, angle, end)
      )
};

  /**
   * Add a rotate animation
   * @param{Quaternion} rotateTo - target rotation
   * @param{Number} duration - animation time in milliseconds
   * @return {RotateAnimation} the animation
   */
AnimationControls.prototype.rotate = function rotate (rotateTo, duration) {
  var rotateFrom = this.viewer.rotationGroup.quaternion.clone();

  return this.add(
          new RotateAnimation(duration, this.controls, rotateFrom, rotateTo)
      )
};

  /**
   * Add a move animation
   * @param{Vector3} moveTo - target position
   * @param{Number} duration - animation time in milliseconds
   * @return {MoveAnimation} the animation
   */
AnimationControls.prototype.move = function move (moveTo, duration) {
  var moveFrom = this.controls.position.clone().negate();

  return this.add(
          new MoveAnimation(duration, this.controls, moveFrom, moveTo)
      )
};

  /**
   * Add a zoom animation
   * @param{Number} zoomTo - target distance
   * @param{Number} duration - animation time in milliseconds
   * @return {ZoomAnimation} the animation
   */
AnimationControls.prototype.zoom = function zoom (zoomTo, duration) {
  var zoomFrom = this.viewer.camera.position.z;

  return this.add(
          new ZoomAnimation(duration, this.controls, zoomFrom, zoomTo)
      )
};

  /**
   * Add a zoom and a move animation
   * @param{Vector3} moveTo - target position
   * @param{Number} zoomTo - target distance
   * @param{Number} duration - animation time in milliseconds
   * @return {Array} the animations
   */
AnimationControls.prototype.zoomMove = function zoomMove (moveTo, zoomTo, duration) {
  return new AnimationList([
    this.move(moveTo, duration),
    this.zoom(zoomTo, duration)
  ])
};

  /**
   * Add an orient animation
   * @param{OrientationMatrix|Array} orientTo - target orientation
   * @param{Number} duration - animation time in milliseconds
   * @return {Array} the animations
   */
AnimationControls.prototype.orient = function orient (orientTo, duration) {
  var p = new Vector3();
  var q = new Quaternion();
  var s = new Vector3();

  ensureMatrix4(orientTo).decompose(p, q, s);

  return new AnimationList([
    this.move(p.negate(), duration),
    this.rotate(q, duration),
    this.zoom(-s.x, duration)
  ])
};

  /**
   * Add a value animation
   * @param{Number} valueFrom - start value
   * @param{Number} valueTo - target value
   * @param{Function} callback - called on every tick
   * @param{Number} duration - animation time in milliseconds
   * @return {ValueAnimation} the animation
   */
AnimationControls.prototype.value = function value (valueFrom, valueTo, callback, duration) {
  return this.add(
          new ValueAnimation(duration, this.controls, valueFrom, valueTo, callback)
      )
};

  /**
   * Add a timeout animation
   * @param{Function} callback - called after duration
   * @param{Number} duration - timeout in milliseconds
   * @return {TimeoutAnimation} the animation
   */
AnimationControls.prototype.timeout = function timeout (callback, duration) {
  return this.add(
          new TimeoutAnimation(duration, this.controls, callback)
      )
};

  /**
   * Add a component spin animation
   * @param{Component} component - object to move
   * @param{Vector3} axis - axis to spin around
   * @param{Number} angle - amount to spin per frame, radians
   * @param{Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
AnimationControls.prototype.spinComponent = function spinComponent (component, axis, angle, duration) {
  return this.add(
          new SpinAnimation(duration, component.controls, axis, angle)
      )
};

  /**
   * Add a component rock animation
   * @param{Component} component - object to move
   * @param{Vector3} axis - axis to rock around
   * @param{Number} angle - amount to spin per frame, radians
   * @param{Number} end - maximum extend of motion, radians
   * @param{Number} duration - animation time in milliseconds
   * @return {SpinAnimation} the animation
   */
AnimationControls.prototype.rockComponent = function rockComponent (component, axis, angle, end, duration) {
  return this.add(
          new RockAnimation(duration, component.controls, axis, angle, end)
      )
};

  /**
   * Add a component move animation
   * @param{Component} component - object to move
   * @param{Vector3} moveTo - target position
   * @param{Number} duration - animation time in milliseconds
   * @return {MoveAnimation} the animation
   */
AnimationControls.prototype.moveComponent = function moveComponent (component, moveTo, duration) {
  var moveFrom = component.controls.position.clone().negate();

  return this.add(
          new MoveAnimation(duration, component.controls, moveFrom, moveTo)
      )
};

  /**
   * Pause all animations
   * @return {undefined}
   */
AnimationControls.prototype.pause = function pause () {
  this.animationList.forEach(function (animation) { return animation.pause(); });
};

  /**
   * Resume all animations
   * @return {undefined}
   */
AnimationControls.prototype.resume = function resume () {
  this.animationList.forEach(function (animation) { return animation.resume(); });
};

  /**
   * Toggle all animations
   * @return {undefined}
   */
AnimationControls.prototype.toggle = function toggle () {
  if (this.paused) {
    this.resume();
  } else {
    this.pause();
  }
};

  /**
   * Clear all animations
   * @return {undefined}
   */
AnimationControls.prototype.clear = function clear () {
  this.animationList.length = 0;
};

AnimationControls.prototype.dispose = function dispose () {
  this.clear();
};

Object.defineProperties( AnimationControls.prototype, prototypeAccessors$8 );

/**
 * @file Mouse Actions
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Mouse actions provided as static methods
 */
var MouseActions = function MouseActions () {};

MouseActions.zoomScroll = function zoomScroll (stage, delta) {
  stage.trackballControls.zoom(delta);
};

  /**
   * Move near clipping plane based on scroll-delta
   * @param {Stage} stage - the stage
   * @param {Number} delta - amount to move clipping plane
   * @return {undefined}
   */
MouseActions.clipNearScroll = function clipNearScroll (stage, delta) {
  var sp = stage.getParameters();
  stage.setParameters({ clipNear: sp.clipNear + delta / 10 });
};

  /**
   * Move focus planes based on scroll-delta
   * @param {Stage} stage - the stage
   * @param {Number} delta - amount to move focus planes
   * @return {undefined}
   */
MouseActions.focusScroll = function focusScroll (stage, delta) {
  var sp = stage.getParameters();
  var focus = sp.clipNear * 2;
  var sign = Math.sign(delta);
  var step = sign * almostIdentity((100 - focus) / 10, 5, 0.2);
  stage.setFocus(focus + step);
};

  /**
   * Change isolevel of volume surfaces based on scroll-delta
   * @param {Stage} stage - the stage
   * @param {Number} delta - amount to change isolevel
   * @return {undefined}
   */
MouseActions.isolevelScroll = function isolevelScroll (stage, delta) {
  var d = Math.sign(delta) / 5;
  stage.eachRepresentation(function (reprComp) {
    if (reprComp.repr.type !== 'surface') { return }
    var l = reprComp.getParameters().isolevel;
    reprComp.setParameters({ isolevel: l + d });
  }, 'volume');
};

  /**
   * Pan scene based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to pan in x direction
   * @param {Number} dy - amount to pan in y direction
   * @return {undefined}
   */
MouseActions.panDrag = function panDrag (stage, dx, dy) {
  stage.trackballControls.pan(dx, dy);
};

  /**
   * Rotate scene based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to rotate in x direction
   * @param {Number} dy - amount to rotate in y direction
   * @return {undefined}
   */
MouseActions.rotateDrag = function rotateDrag (stage, dx, dy) {
  stage.trackballControls.rotate(dx, dy);
};

  /**
   * Zoom scene based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to zoom
   * @param {Number} dy - amount to zoom
   * @return {undefined}
   */
MouseActions.zoomDrag = function zoomDrag (stage, dx, dy) {
  stage.trackballControls.zoom((dx + dy) / -2);
};

  /**
   * Zoom scene based on mouse coordinate changes and
   * move focus planes based on camera position (zoom)
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to zoom
   * @param {Number} dy - amount to zoom
   * @return {undefined}
   */
MouseActions.zoomFocusDrag = function zoomFocusDrag (stage, dx, dy) {
  stage.trackballControls.zoom((dx + dy) / -2);
  var z = stage.viewer.camera.position.z;
  stage.setFocus(100 - Math.abs(z / 8));
};

  /**
   * Pan picked component based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to pan in x direction
   * @param {Number} dy - amount to pan in y direction
   * @return {undefined}
   */
MouseActions.panComponentDrag = function panComponentDrag (stage, dx, dy) {
  stage.trackballControls.panComponent(dx, dy);
};

  /**
   * Rotate picked component based on mouse coordinate changes
   * @param {Stage} stage - the stage
   * @param {Number} dx - amount to rotate in x direction
   * @param {Number} dy - amount to rotate in y direction
   * @return {undefined}
   */
MouseActions.rotateComponentDrag = function rotateComponentDrag (stage, dx, dy) {
  stage.trackballControls.rotateComponent(dx, dy);
};

  /**
   * Move picked element to the center of the screen
   * @param {Stage} stage - the stage
   * @param {PickingProxy} pickingProxy - the picking data object
   * @return {undefined}
   */
MouseActions.movePick = function movePick (stage, pickingProxy) {
  if (pickingProxy) {
    stage.animationControls.move(pickingProxy.position.clone());
  }
};

  /**
   * Show tooltip with information of picked element
   * @param {Stage} stage - the stage
   * @param {PickingProxy} pickingProxy - the picking data object
   * @return {undefined}
   */
MouseActions.tooltipPick = function tooltipPick (stage, pickingProxy) {
  var tt = stage.tooltip;
  var sp = stage.getParameters();
  if (sp.tooltip && pickingProxy) {
    var mp = pickingProxy.mouse.position;
    tt.innerText = pickingProxy.getLabel();
    tt.style.bottom = window.innerHeight - mp.y + 3 + 'px';
    tt.style.left = mp.x + 3 + 'px';
    tt.style.display = 'block';
  } else {
    tt.style.display = 'none';
  }
};

var ActionPresets = {
  default: [
        [ 'scroll', MouseActions.zoomScroll ],
        [ 'scroll-ctrl', MouseActions.clipNearScroll ],
        [ 'scroll-shift', MouseActions.focusScroll ],
        [ 'scroll-alt', MouseActions.isolevelScroll ],

        [ 'drag-right', MouseActions.panDrag ],
        [ 'drag-left', MouseActions.rotateDrag ],
        [ 'drag-middle', MouseActions.zoomDrag ],
        [ 'drag-shift-right', MouseActions.zoomDrag ],
        [ 'drag-left+right', MouseActions.zoomDrag ],
        [ 'drag-ctrl-right', MouseActions.panComponentDrag ],
        [ 'drag-ctrl-left', MouseActions.rotateComponentDrag ],

        [ 'clickPick-middle', MouseActions.movePick ],
        [ 'hoverPick', MouseActions.tooltipPick ]
  ],
  pymol: [
        [ 'drag-left', MouseActions.rotateDrag ],
        [ 'drag-middle', MouseActions.panDrag ],
        [ 'drag-right', MouseActions.zoomDrag ],
        [ 'drag-shift-right', MouseActions.focusScroll ],

        [ 'clickPick-ctrl+shift-middle', MouseActions.movePick ],
        [ 'hoverPick', MouseActions.tooltipPick ]
  ],
  coot: [
        [ 'scroll', MouseActions.isolevelScroll ],

        [ 'drag-left', MouseActions.rotateDrag ],
        [ 'drag-middle', MouseActions.panDrag ],
        [ 'drag-ctrl-left', MouseActions.panDrag ],
        [ 'drag-right', MouseActions.zoomFocusDrag ],
        [ 'drag-ctrl-right', MouseActions.focusScroll ],

        [ 'clickPick-middle', MouseActions.movePick ],
        [ 'hoverPick', MouseActions.tooltipPick ]
  ]
};

/**
 * @file Mouse Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Strings to describe mouse events (including optional keyboard modifiers).
 * Must contain an event type: "scroll", "drag", "click", "hover", "clickPick"
 * or "hoverPick". Optionally contain one or more (seperated by plus signs)
 * keyboard modifiers: "alt", "ctrl", "meta" or "shift". Can contain the mouse
 * button performing the event: "left", "middle" or "right". The type, key and
 * button parts must be seperated by dashes.
 *
 * @example
 * // triggered on scroll event (no key or button)
 * "scroll"
 *
 * @example
 * // triggered on scroll event while shift key is pressed
 * "scroll-shift"
 *
 * @example
 * // triggered on drag event with left mouse button
 * "drag-left"
 *
 * @example
 * // triggered on drag event with right mouse button
 * // while ctrl and shift keys are pressed
 * "drag-right-ctrl+shift"
 *
 * @typedef {String} TriggerString
 */

/**
 * Get event type, key and button
 * @param  {TriggerString} str - input trigger string
 * @return {Array} event type, key and button
 */
function triggerFromString (str) {
  var tokens = str.split(/[-+]/);

  var type = '';
  if (tokens.includes('scroll')) { type = 'scroll'; }
  if (tokens.includes('drag')) { type = 'drag'; }
  if (tokens.includes('click')) { type = 'click'; }
  if (tokens.includes('hover')) { type = 'hover'; }
  if (tokens.includes('clickPick')) { type = 'clickPick'; }
  if (tokens.includes('hoverPick')) { type = 'hoverPick'; }

  var key = 0;
  if (tokens.includes('alt')) { key += 1; }
  if (tokens.includes('ctrl')) { key += 2; }
  if (tokens.includes('meta')) { key += 4; }
  if (tokens.includes('shift')) { key += 8; }

  var button = 0;
  if (tokens.includes('left')) { button += 1; }
  if (tokens.includes('right')) { button += 2; }
  if (tokens.includes('middle')) { button += 4; }

  return [ type, key, button ]
}

/**
 * Mouse controls
 */
var MouseControls = function MouseControls (stage, params) {
  var p = params || {};

  this.stage = stage;
  this.mouse = stage.mouseObserver;

  this.actionList = [];

  this.preset(p.preset || 'default');
};

MouseControls.prototype.run = function run (type) {
    var this$1 = this;
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var key = this.mouse.key || 0;
  var button = this.mouse.buttons || 0;

  this.actionList.forEach(function (a) {
    if (a.type === type && a.key === key && a.button === button) {
      a.callback.apply(a, [ this$1.stage ].concat( args ));
    }
  });
};

  /**
   * Add a new mouse action triggered by an event, key and button combination.
   * The {@link MouseActions} class provides a number of static methods for
   * use as callback functions.
   *
   * @example
   * // change ambient light intensity on mouse scroll
   * // while the ctrl and shift keys are pressed
   * stage.mouseControls.add( "scroll-ctrl+shift", function( stage, delta ){
   *   var ai = stage.getParameters().ambientIntensity;
   *   stage.setParameters( { ambientIntensity: Math.max( 0, ai + delta / 50 ) } );
   * } );
   *
   * @example
   * // Call the MouseActions.zoomDrag method on mouse drag events
   * // with left and right mouse buttons simultaneous
   * stage.mouseControls.add( "drag-left+right", MouseActions.zoomDrag );
   *
   * @param {TriggerString} triggerStr - the trigger for the action
   * @param {function(stage: Stage, ...args: Any)} callback - the callback function for the action
   * @return {undefined}
   */
MouseControls.prototype.add = function add (triggerStr, callback) {
  var ref = triggerFromString(triggerStr);
    var type = ref[0];
    var key = ref[1];
    var button = ref[2];

  this.actionList.push({ type: type, key: key, button: button, callback: callback });
};

  /**
   * Remove a mouse action. The trigger string can contain an asterix (*)
   * as a wildcard for any key or mouse button. When the callback function
   * is given, only actions that call that function are removed.
   *
   * @example
   * // remove actions triggered solely by a scroll event
   * stage.mouseControls.remove( "scroll" );
   *
   * @example
   * // remove actions triggered by a scroll event, including
   * // those requiring a key pressed or mouse button used
   * stage.mouseControls.remove( "scroll-*" );
   *
   * @example
   * // remove actions triggered by a scroll event
   * // while the shift key is pressed
   * stage.mouseControls.remove( "scroll-shift" );
   *
   * @param {TriggerString} triggerStr - the trigger for the action
   * @param {Function} [callback] - the callback function for the action
   * @return {undefined}
   */
MouseControls.prototype.remove = function remove (triggerStr, callback) {
  var wildcard = triggerStr.includes('*');
  var ref = triggerFromString(triggerStr);
    var type = ref[0];
    var key = ref[1];
    var button = ref[2];

  var actionList = this.actionList.filter(function (a) {
    return !(
              (a.type === type || (wildcard && type === '')) &&
              (a.key === key || (wildcard && key === 0)) &&
              (a.button === button || (wildcard && button === 0)) &&
              (a.callback === callback || callback === undefined)
          )
  });

  this.actionList = actionList;
};

  /**
   * Set mouse action preset
   * @param{String} name - one of "default", "pymol", "coot"
   * @return {undefined}
   */
MouseControls.prototype.preset = function preset (name) {
    var this$1 = this;

  this.clear();

  var list = ActionPresets[ name ] || [];

  list.forEach(function (action) {
    (ref = this$1).add.apply(ref, action);
      var ref;
  });
};

  /**
   * Remove all mouse actions
   * @return {undefined}
   */
MouseControls.prototype.clear = function clear () {
  this.actionList.length = 0;
};

/**
 * @file Picking Behavior
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var PickingBehavior = function PickingBehavior (stage) {
  this.stage = stage;
  this.mouse = stage.mouseObserver;
  this.controls = stage.mouseControls;

  this.mouse.signals.clicked.add(this._onClick, this);
  this.mouse.signals.hovered.add(this._onHover, this);
};

PickingBehavior.prototype._onClick = function _onClick (x, y) {
  var pickingProxy = this.stage.pickingControls.pick(x, y);
  this.stage.signals.clicked.dispatch(pickingProxy);
  this.controls.run('clickPick', pickingProxy);
};

PickingBehavior.prototype._onHover = function _onHover (x, y) {
  var pickingProxy = this.stage.pickingControls.pick(x, y);
  if (pickingProxy && this.mouse.down.equals(this.mouse.position)) {
    this.stage.transformComponent = pickingProxy.component;
  }
  this.stage.signals.hovered.dispatch(pickingProxy);
  this.controls.run('hoverPick', pickingProxy);
};

PickingBehavior.prototype.dispose = function dispose () {
  this.mouse.signals.clicked.remove(this._onClick, this);
  this.mouse.signals.hovered.remove(this._onHover, this);
};

/**
 * @file Mouse Behavior
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var MouseBehavior = function MouseBehavior (stage/*, params */) {
  this.stage = stage;
  this.mouse = stage.mouseObserver;
  this.controls = stage.mouseControls;

  this.mouse.signals.moved.add(this._onMove, this);
  this.mouse.signals.scrolled.add(this._onScroll, this);
  this.mouse.signals.dragged.add(this._onDrag, this);
  this.mouse.signals.clicked.add(this._onClick, this);
  this.mouse.signals.hovered.add(this._onHover, this);
};

MouseBehavior.prototype._onMove = function _onMove (/* x, y */) {
  this.stage.tooltip.style.display = 'none';
};

MouseBehavior.prototype._onScroll = function _onScroll (delta) {
  this.controls.run('scroll', delta);
};

MouseBehavior.prototype._onDrag = function _onDrag (dx, dy) {
  this.controls.run('drag', dx, dy);
};

MouseBehavior.prototype._onClick = function _onClick (x, y) {
  this.controls.run('click', x, y);
};

MouseBehavior.prototype._onHover = function _onHover (x, y) {
  this.controls.run('hover', x, y);
};

MouseBehavior.prototype.dispose = function dispose () {
  this.mouse.signals.moved.remove(this._onMove, this);
  this.mouse.signals.scrolled.remove(this._onScroll, this);
  this.mouse.signals.dragged.remove(this._onDrag, this);
  this.mouse.signals.clicked.remove(this._onClick, this);
  this.mouse.signals.hovered.remove(this._onHover, this);
};

/**
 * @file Animation Behavior
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var AnimationBehavior = function AnimationBehavior (stage) {
  this.viewer = stage.viewer;
  this.animationControls = stage.animationControls;

  this.viewer.signals.ticked.add(this._onTick, this);
};

AnimationBehavior.prototype._onTick = function _onTick (stats) {
  this.animationControls.run(stats);
};

AnimationBehavior.prototype.dispose = function dispose () {
  this.viewer.signals.ticked.remove(this._onTick, this);
};

/**
 * @file Key Behavior
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var KeyBehavior = function KeyBehavior (stage) {
  this.stage = stage;

  this._onKeydown = this._onKeydown.bind(this);
  this._onKeyup = this._onKeyup.bind(this);
  this._onKeypress = this._onKeypress.bind(this);

  document.addEventListener('keydown', this._onKeydown);
  document.addEventListener('keyup', this._onKeyup);
  document.addEventListener('keypress', this._onKeypress);
};

  /**
   * handle key down
   * @param{Event} event - key event
   * @return {undefined}
   */
KeyBehavior.prototype._onKeydown = function _onKeydown (/* event */) {

      // console.log( "down", event.keyCode, String.fromCharCode( event.keyCode ) );

};

  /**
   * handle key up
   * @param{Event} event - key event
   * @return {undefined}
   */
KeyBehavior.prototype._onKeyup = function _onKeyup (/* event */) {

      // console.log( "up", event.keyCode, String.fromCharCode( event.keyCode ) );

};

  /**
   * handle key press
   * @param{Event} event - key event
   * @return {undefined}
   */
KeyBehavior.prototype._onKeypress = function _onKeypress (event) {
      // console.log( "press", event.keyCode, String.fromCharCode( event.keyCode ) );

  switch (event.keyCode) {
    case 73: case 105:// I i
      this.stage.toggleSpin();
      break
    case 75: case 107:// K k
      this.stage.toggleRock();
      break
    case 80: case 112:// P p
      this.stage.animationControls.toggle();
      break
  }
};

KeyBehavior.prototype.dispose = function dispose () {
  document.removeEventListener('keydown', this._onKeypress);
  document.removeEventListener('keyup', this._onKeypress);
  document.removeEventListener('keypress', this._onKeypress);
};

/**
 * @file Annotation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Annotation HTML element floating on top of a position rendered in 3d
 */
var Annotation = function Annotation (component, position, content, params) {
  var p = params || {};

  this.offsetX = defaults(p.offsetX, 0);
  this.offsetY = defaults(p.offsetY, 0);
  this.visible = defaults(p.visible, true);

  this.component = component;
  this.stage = component.stage;
  this.viewer = this.stage.viewer;
  this.position = position;

  this._viewerPosition = new Vector3();
  this._updateViewerPosition();
  this._canvasPosition = new Vector3();
  this._cameraPosition = new Vector3();

  this.element = document.createElement('div');
  Object.assign(this.element.style, {
    display: 'block',
    position: 'fixed',
    zIndex: 1 + (parseInt(this.viewer.container.style.zIndex) || 0),
    pointerEvents: 'none',
    backgroundColor: 'rgba( 0, 0, 0, 0.6 )',
    color: 'lightgrey',
    padding: '8px',
    fontFamily: 'sans-serif',
    left: '-10000px'
  });

  this.viewer.container.appendChild(this.element);
  this.setContent(content);
  this.updateVisibility();
  this.viewer.signals.ticked.add(this._update, this);
  this.component.signals.matrixChanged.add(this._updateViewerPosition, this);
};

  /**
   * Set HTML content of the annotation
   * @param {String|Element} value - HTML content
   * @return {undefined}
   */
Annotation.prototype.setContent = function setContent (value) {
  var displayValue = this.element.style.display;
  if (displayValue === 'none') {
    this.element.style.left = '-10000px';
    this.element.style.display = 'block';
  }

  if (value instanceof window.Element) {
    this.element.innerHTML = '';
    this.element.appendChild(value);
  } else {
    this.element.innerHTML = value;
  }

  this._clientRect = this.element.getBoundingClientRect();

  if (displayValue === 'none') {
    this.element.style.display = displayValue;
  }
};

  /**
   * Set visibility of the annotation
   * @param {Boolean} value - visibility flag
   * @return {undefined}
   */
Annotation.prototype.setVisibility = function setVisibility (value) {
  this.visible = value;
  this.updateVisibility();
};

Annotation.prototype.getVisibility = function getVisibility () {
  return this.visible && this.component.visible
};

Annotation.prototype.updateVisibility = function updateVisibility () {
  this.element.style.display = this.getVisibility() ? 'block' : 'none';
};

Annotation.prototype._updateViewerPosition = function _updateViewerPosition () {
  this._viewerPosition
          .copy(this.position)
          .applyMatrix4(this.component.matrix);
};

Annotation.prototype._update = function _update () {
  if (!this.getVisibility()) { return }

  var s = this.element.style;
  var cp = this._canvasPosition;
  var vp = this._viewerPosition;
  var cr = this._clientRect;

  this._cameraPosition.copy(vp)
          .add(this.viewer.translationGroup.position)
          .applyMatrix4(this.viewer.rotationGroup.matrix)
          .sub(this.viewer.camera.position);

  if (this._cameraPosition.z < 0) {
    s.display = 'none';
    return
  } else {
    s.display = 'block';
  }

  s.opacity = 1 - smoothstep(
          this.viewer.scene.fog.near,
          this.viewer.scene.fog.far,
          this._cameraPosition.length()
      );

  this.stage.viewerControls.getPositionOnCanvas(vp, cp);

  s.bottom = (this.offsetX + cp.y + cr.height / 2) + 'px';
  s.left = (this.offsetY + cp.x - cr.width / 2) + 'px';
};

  /**
   * Safely remove the annotation
   * @return {undefined}
   */
Annotation.prototype.dispose = function dispose () {
  this.viewer.container.removeChild(this.element);
  this.viewer.signals.ticked.remove(this._update, this);
  this.component.signals.matrixChanged.remove(this._updateViewerPosition, this);
};

/**
 * @file Component Controls
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var tmpRotateMatrix$2 = new Matrix4();
var tmpRotateVector$2 = new Vector3();
var tmpRotateQuaternion$1 = new Quaternion();

/**
 * Component controls
 */
var ComponentControls = function ComponentControls (component) {
  this.component = component;
  this.stage = component.stage;
  this.viewer = component.stage.viewer;

      /**
       * @type {{changed: Signal}}
       */
  this.signals = {
    changed: new Signal()
  };
};

var prototypeAccessors$11 = { position: {},rotation: {} };

  /**
   * component center position
   * @type {Vector3}
   */
prototypeAccessors$11.position.get = function () {
  return this.component.position
};

  /**
   * component rotation
   * @type {Quaternion}
   */
prototypeAccessors$11.rotation.get = function () {
  return this.component.quaternion
};

  /**
   * Trigger render and emit changed event
   * @emits {ComponentControls.signals.changed}
   * @return {undefined}
   */
ComponentControls.prototype.changed = function changed () {
  this.component.updateMatrix();
  this.viewer.requestRender();
  this.signals.changed.dispatch();
};

  /**
   * spin component on axis
   * @param{Vector3|Array} axis - rotation axis
   * @param{Number} angle - amount to spin
   * @return {undefined}
   */
ComponentControls.prototype.spin = function spin (axis, angle) {
  tmpRotateMatrix$2.getInverse(this.viewer.rotationGroup.matrix);
  tmpRotateVector$2
          .copy(ensureVector3(axis)).applyMatrix4(tmpRotateMatrix$2);

  tmpRotateMatrix$2.extractRotation(this.component.transform);
  tmpRotateMatrix$2.premultiply(this.viewer.rotationGroup.matrix);
  tmpRotateMatrix$2.getInverse(tmpRotateMatrix$2);

  tmpRotateVector$2.copy(ensureVector3(axis));
  tmpRotateVector$2.applyMatrix4(tmpRotateMatrix$2);
  tmpRotateMatrix$2.makeRotationAxis(tmpRotateVector$2, angle);
  tmpRotateQuaternion$1.setFromRotationMatrix(tmpRotateMatrix$2);

  this.component.quaternion.premultiply(tmpRotateQuaternion$1);
  this.changed();
};

Object.defineProperties( ComponentControls.prototype, prototypeAccessors$11 );

/**
 * @file Vector Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function calculateMeanVector3 (array) {
  var n = array.length;
  var m = array.length / 3;

  var x = 0;
  var y = 0;
  var z = 0;

  var i;

  for (i = 0; i < n; i += 3) {
    x += array[ i + 0 ];
    y += array[ i + 1 ];
    z += array[ i + 2 ];
  }

  return new Vector3(x / m, y / m, z / m)
}

function projectPointOnVector (point, vector, origin) {
  if (origin) {
    point.sub(origin).projectOnVector(vector).add(origin);
  } else {
    point.projectOnVector(vector);
  }

  return point
}

function computeBoundingBox (array) {
  var minX = +Infinity;
  var minY = +Infinity;
  var minZ = +Infinity;
  var maxX = -Infinity;
  var maxY = -Infinity;
  var maxZ = -Infinity;
  for (var i = 0, l = array.length; i < l; i += 3) {
    var x = array[ i ];
    var y = array[ i + 1 ];
    var z = array[ i + 2 ];
    if (x < minX) { minX = x; }
    if (y < minY) { minY = y; }
    if (z < minZ) { minZ = z; }
    if (x > maxX) { maxX = x; }
    if (y > maxY) { maxY = y; }
    if (z > maxZ) { maxZ = z; }
  }
  return [
    v3new([ minX, minY, minZ ]),
    v3new([ maxX, maxY, maxZ ])
  ]
}
function applyMatrix4toVector3array (m, a) {
  for (var i = 0, il = a.length; i < il; i += 3) {
    var x = a[ i ];
    var y = a[ i + 1 ];
    var z = a[ i + 2 ];
    a[ i ] = m[ 0 ] * x + m[ 4 ] * y + m[ 8 ] * z + m[ 12 ];
    a[ i + 1 ] = m[ 1 ] * x + m[ 5 ] * y + m[ 9 ] * z + m[ 13 ];
    a[ i + 2 ] = m[ 2 ] * x + m[ 6 ] * y + m[ 10 ] * z + m[ 14 ];
  }
}

function applyMatrix3toVector3array (m, a) {
  for (var i = 0, il = a.length; i < il; i += 3) {
    var x = a[ i ];
    var y = a[ i + 1 ];
    var z = a[ i + 2 ];
    a[ i ] = m[ 0 ] * x + m[ 3 ] * y + m[ 6 ] * z;
    a[ i + 1 ] = m[ 1 ] * x + m[ 4 ] * y + m[ 7 ] * z;
    a[ i + 2 ] = m[ 2 ] * x + m[ 5 ] * y + m[ 8 ] * z;
  }
}

function normalizeVector3array (a) {
  for (var i = 0, il = a.length; i < il; i += 3) {
    var x = a[ i ];
    var y = a[ i + 1 ];
    var z = a[ i + 2 ];
    var s = 1 / Math.sqrt(x * x + y * y + z * z);
    a[ i ] = x * s;
    a[ i + 1 ] = y * s;
    a[ i + 2 ] = z * s;
  }
}

function v3new (array) {
  return new Float32Array(array || 3)
}

function v3cross (out, a, b) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var bx = b[0];
  var by = b[1];
  var bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
}

function v3sub (out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
}

function v3fromArray (out, array, offset) {
  out[0] = array[offset];
  out[1] = array[offset + 1];
  out[2] = array[offset + 2];
}

function v3length (a) {
  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2])
}

function v3divideScalar (out, a, s) {
  v3multiplyScalar(out, a, 1 / s);
}
v3divideScalar.__deps = [ v3multiplyScalar ];

function v3multiplyScalar (out, a, s) {
  out[0] = a[0] * s;
  out[1] = a[1] * s;
  out[2] = a[2] * s;
}

function v3normalize (out, a) {
  v3multiplyScalar(out, a, 1 / v3length(a));
}
v3normalize.__deps = [ v3multiplyScalar, v3length ];

function v3subScalar (out, a, s) {
  out[0] = a[0] - s;
  out[1] = a[1] - s;
  out[2] = a[2] - s;
}

function v3addScalar (out, a, s) {
  out[0] = a[0] + s;
  out[1] = a[1] + s;
  out[2] = a[2] + s;
}

function v3floor (out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
}

function v3ceil (out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
}

function v3negate (out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
}

/**
 * @file Picker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Picker class
 * @interface
 */
var Picker = function Picker (array) {
  this.array = array;
};

  /**
   * Get the index for the given picking id
   * @param{Integer} pid - the picking id
   * @return {Integer} the index
   */
Picker.prototype.getIndex = function getIndex (pid) {
  return this.array ? this.array[ pid ] : pid
};

  /**
   * Get object data
   * @abstract
   * @param{Integer} pid - the picking id
   * @return {Object} the object data
   */
Picker.prototype.getObject = function getObject (/* pid */) {
  return {}
};

Picker.prototype._applyTransformations = function _applyTransformations (vector, instance, component) {
  if (instance) {
    vector.applyMatrix4(instance.matrix);
  }
  if (component) {
    vector.applyMatrix4(component.matrix);
  }
  return vector
};

  /**
   * Get object position
   * @abstract
   * @param{Integer} pid - the picking id
   * @return {Vector3} the object position
   */
Picker.prototype._getPosition = function _getPosition (/* pid */) {
  return new Vector3()
};

  /**
   * Get position for the given picking id
   * @param{Integer} pid - the picking id
   * @param{Object} instance - the instance that should be applied
   * @param{Component} component - the component of the picked object
   * @return {Vector3} the position
   */
Picker.prototype.getPosition = function getPosition (pid, instance, component) {
  return this._applyTransformations(
          this._getPosition(pid), instance, component
      )
};

/**
 * Shape picker class
 * @interface
 */
var ShapePicker = (function (Picker) {
  function ShapePicker (shape) {
    Picker.call(this);
    this.shape = shape;
  }

  if ( Picker ) ShapePicker.__proto__ = Picker;
  ShapePicker.prototype = Object.create( Picker && Picker.prototype );
  ShapePicker.prototype.constructor = ShapePicker;

  var prototypeAccessors = { data: {} };

  prototypeAccessors.data.get = function () { return this.shape };

  Object.defineProperties( ShapePicker.prototype, prototypeAccessors );

  return ShapePicker;
}(Picker));

//

var CylinderPicker = (function (ShapePicker) {
  function CylinderPicker () {
    ShapePicker.apply(this, arguments);
  }

  if ( ShapePicker ) CylinderPicker.__proto__ = ShapePicker;
  CylinderPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
  CylinderPicker.prototype.constructor = CylinderPicker;

  var prototypeAccessors$1 = { type: {} };

  prototypeAccessors$1.type.get = function () { return 'cylinder' };

  CylinderPicker.prototype.getObject = function getObject (pid) {
    var s = this.shape;
    return {
      shape: s,
      color: new Color().fromArray(s.cylinderColor, 3 * pid),
      radius: s.cylinderRadius[ pid ],
      position1: new Vector3().fromArray(s.cylinderPosition1, 3 * pid),
      position2: new Vector3().fromArray(s.cylinderPosition2, 3 * pid),
      name: s.cylinderName[ pid ]
    }
  };

  CylinderPicker.prototype._getPosition = function _getPosition (pid) {
    var s = this.shape;
    var p1 = new Vector3().fromArray(s.cylinderPosition1, 3 * pid);
    var p2 = new Vector3().fromArray(s.cylinderPosition2, 3 * pid);
    return p1.add(p2).multiplyScalar(0.5)
  };

  Object.defineProperties( CylinderPicker.prototype, prototypeAccessors$1 );

  return CylinderPicker;
}(ShapePicker));

var ArrowPicker = (function (ShapePicker) {
  function ArrowPicker () {
    ShapePicker.apply(this, arguments);
  }

  if ( ShapePicker ) ArrowPicker.__proto__ = ShapePicker;
  ArrowPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
  ArrowPicker.prototype.constructor = ArrowPicker;

  var prototypeAccessors$2 = { type: {} };

  prototypeAccessors$2.type.get = function () { return 'arrow' };

  ArrowPicker.prototype.getObject = function getObject (pid) {
    var s = this.shape;
    return {
      shape: s,
      position: this._getPosition(pid),
      position1: new Vector3().fromArray(s.arrowPosition1, 3 * pid),
      position2: new Vector3().fromArray(s.arrowPosition2, 3 * pid),
      color: new Color().fromArray(s.arrowColor, 3 * pid),
      radius: s.arrowRadius[ pid ],
      name: s.arrowName[ pid ]
    }
  };

  ArrowPicker.prototype._getPosition = function _getPosition (pid) {
    var s = this.shape;
    var p1 = new Vector3().fromArray(s.arrowPosition1, 3 * pid);
    var p2 = new Vector3().fromArray(s.arrowPosition2, 3 * pid);
    return p1.add(p2).multiplyScalar(0.5)
  };

  Object.defineProperties( ArrowPicker.prototype, prototypeAccessors$2 );

  return ArrowPicker;
}(ShapePicker));

var AtomPicker = (function (Picker) {
  function AtomPicker (array, structure) {
    Picker.call(this, array);
    this.structure = structure;
  }

  if ( Picker ) AtomPicker.__proto__ = Picker;
  AtomPicker.prototype = Object.create( Picker && Picker.prototype );
  AtomPicker.prototype.constructor = AtomPicker;

  var prototypeAccessors$3 = { type: {},data: {} };

  prototypeAccessors$3.type.get = function () { return 'atom' };
  prototypeAccessors$3.data.get = function () { return this.structure };

  AtomPicker.prototype.getObject = function getObject (pid) {
    return this.structure.getAtomProxy(this.getIndex(pid))
  };

  AtomPicker.prototype._getPosition = function _getPosition (pid) {
    return new Vector3().copy(this.getObject(pid))
  };

  Object.defineProperties( AtomPicker.prototype, prototypeAccessors$3 );

  return AtomPicker;
}(Picker));

var AxesPicker = (function (Picker) {
  function AxesPicker (axes) {
    Picker.call(this);
    this.axes = axes;
  }

  if ( Picker ) AxesPicker.__proto__ = Picker;
  AxesPicker.prototype = Object.create( Picker && Picker.prototype );
  AxesPicker.prototype.constructor = AxesPicker;

  var prototypeAccessors$4 = { type: {},data: {} };

  prototypeAccessors$4.type.get = function () { return 'axes' };
  prototypeAccessors$4.data.get = function () { return this.axes };

  AxesPicker.prototype.getObject = function getObject (/* pid */) {
    return {
      axes: this.axes
    }
  };

  AxesPicker.prototype._getPosition = function _getPosition (/* pid */) {
    return this.axes.center.clone()
  };

  Object.defineProperties( AxesPicker.prototype, prototypeAccessors$4 );

  return AxesPicker;
}(Picker));

var BondPicker = (function (Picker) {
  function BondPicker (array, structure, bondStore) {
    Picker.call(this, array);
    this.structure = structure;
    this.bondStore = bondStore || structure.bondStore;
  }

  if ( Picker ) BondPicker.__proto__ = Picker;
  BondPicker.prototype = Object.create( Picker && Picker.prototype );
  BondPicker.prototype.constructor = BondPicker;

  var prototypeAccessors$5 = { type: {},data: {} };

  prototypeAccessors$5.type.get = function () { return 'bond' };
  prototypeAccessors$5.data.get = function () { return this.structure };

  BondPicker.prototype.getObject = function getObject (pid) {
    var bp = this.structure.getBondProxy(this.getIndex(pid));
    bp.bondStore = this.bondStore;
    return bp
  };

  BondPicker.prototype._getPosition = function _getPosition (pid) {
    var b = this.getObject(pid);
    return new Vector3()
            .copy(b.atom1)
            .add(b.atom2)
            .multiplyScalar(0.5)
  };

  Object.defineProperties( BondPicker.prototype, prototypeAccessors$5 );

  return BondPicker;
}(Picker));

var ContactPicker = (function (BondPicker) {
  function ContactPicker () {
    BondPicker.apply(this, arguments);
  }

  if ( BondPicker ) ContactPicker.__proto__ = BondPicker;
  ContactPicker.prototype = Object.create( BondPicker && BondPicker.prototype );
  ContactPicker.prototype.constructor = ContactPicker;

  var prototypeAccessors$6 = { type: {} };

  prototypeAccessors$6.type.get = function () { return 'contact' };

  Object.defineProperties( ContactPicker.prototype, prototypeAccessors$6 );

  return ContactPicker;
}(BondPicker));

var ConePicker = (function (ShapePicker) {
  function ConePicker () {
    ShapePicker.apply(this, arguments);
  }

  if ( ShapePicker ) ConePicker.__proto__ = ShapePicker;
  ConePicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
  ConePicker.prototype.constructor = ConePicker;

  var prototypeAccessors$7 = { type: {} };

  prototypeAccessors$7.type.get = function () { return 'cone' };

  ConePicker.prototype.getObject = function getObject (pid) {
    var s = this.shape;
    return {
      shape: s,
      position: this._getPosition(pid),
      position1: new Vector3().fromArray(s.conePosition1, 3 * pid),
      position2: new Vector3().fromArray(s.conePosition2, 3 * pid),
      color: new Color().fromArray(s.coneColor, 3 * pid),
      radius: s.coneRadius[ pid ],
      name: s.coneName[ pid ]
    }
  };

  ConePicker.prototype._getPosition = function _getPosition (pid) {
    var s = this.shape;
    var p1 = new Vector3().fromArray(s.conePosition1, 3 * pid);
    var p2 = new Vector3().fromArray(s.conePosition2, 3 * pid);
    return p1.add(p2).multiplyScalar(0.5)
  };

  Object.defineProperties( ConePicker.prototype, prototypeAccessors$7 );

  return ConePicker;
}(ShapePicker));

var ClashPicker = (function (Picker) {
  function ClashPicker (array, validation, structure) {
    Picker.call(this, array);
    this.validation = validation;
    this.structure = structure;
  }

  if ( Picker ) ClashPicker.__proto__ = Picker;
  ClashPicker.prototype = Object.create( Picker && Picker.prototype );
  ClashPicker.prototype.constructor = ClashPicker;

  var prototypeAccessors$8 = { type: {},data: {} };

  prototypeAccessors$8.type.get = function () { return 'clash' };
  prototypeAccessors$8.data.get = function () { return this.validation };

  ClashPicker.prototype.getObject = function getObject (pid) {
    var val = this.validation;
    var idx = this.getIndex(pid);
    return {
      validation: val,
      index: idx,
      clash: val.clashArray[ idx ]
    }
  };

  ClashPicker.prototype._getAtomProxyFromSele = function _getAtomProxyFromSele (sele) {
    var selection = new Selection(sele);
    var idx = this.structure.getAtomIndices(selection)[ 0 ];
    return this.structure.getAtomProxy(idx)
  };

  ClashPicker.prototype._getPosition = function _getPosition (pid) {
    var clash = this.getObject(pid).clash;
    var ap1 = this._getAtomProxyFromSele(clash.sele1);
    var ap2 = this._getAtomProxyFromSele(clash.sele2);
    return new Vector3().copy(ap1).add(ap2).multiplyScalar(0.5)
  };

  Object.defineProperties( ClashPicker.prototype, prototypeAccessors$8 );

  return ClashPicker;
}(Picker));

var DistancePicker = (function (BondPicker) {
  function DistancePicker () {
    BondPicker.apply(this, arguments);
  }

  if ( BondPicker ) DistancePicker.__proto__ = BondPicker;
  DistancePicker.prototype = Object.create( BondPicker && BondPicker.prototype );
  DistancePicker.prototype.constructor = DistancePicker;

  var prototypeAccessors$9 = { type: {} };

  prototypeAccessors$9.type.get = function () { return 'distance' };

  Object.defineProperties( DistancePicker.prototype, prototypeAccessors$9 );

  return DistancePicker;
}(BondPicker));

var EllipsoidPicker = (function (ShapePicker) {
  function EllipsoidPicker () {
    ShapePicker.apply(this, arguments);
  }

  if ( ShapePicker ) EllipsoidPicker.__proto__ = ShapePicker;
  EllipsoidPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
  EllipsoidPicker.prototype.constructor = EllipsoidPicker;

  var prototypeAccessors$10 = { type: {} };

  prototypeAccessors$10.type.get = function () { return 'ellipsoid' };

  EllipsoidPicker.prototype.getObject = function getObject (pid) {
    var s = this.shape;
    return {
      shape: s,
      position: this._getPosition(pid),
      color: new Color().fromArray(s.ellipsoidColor, 3 * pid),
      radius: s.ellipsoidRadius[ pid ],
      majorAxis: new Vector3().fromArray(s.ellipsoidMajorAxis, 3 * pid),
      minorAxis: new Vector3().fromArray(s.ellipsoidMinorAxis, 3 * pid),
      name: s.ellipsoidName[ pid ]
    }
  };

  EllipsoidPicker.prototype._getPosition = function _getPosition (pid) {
    return new Vector3().fromArray(this.shape.ellipsoidPosition, 3 * pid)
  };

  Object.defineProperties( EllipsoidPicker.prototype, prototypeAccessors$10 );

  return EllipsoidPicker;
}(ShapePicker));

var IgnorePicker = (function (Picker) {
  function IgnorePicker () {
    Picker.apply(this, arguments);
  }

  if ( Picker ) IgnorePicker.__proto__ = Picker;
  IgnorePicker.prototype = Object.create( Picker && Picker.prototype );
  IgnorePicker.prototype.constructor = IgnorePicker;

  var prototypeAccessors$11 = { type: {} };

  prototypeAccessors$11.type.get = function () { return 'ignore' };

  Object.defineProperties( IgnorePicker.prototype, prototypeAccessors$11 );

  return IgnorePicker;
}(Picker));

var MeshPicker = (function (ShapePicker) {
  function MeshPicker (shape, mesh) {
    ShapePicker.call(this, shape);
    this.mesh = mesh;
  }

  if ( ShapePicker ) MeshPicker.__proto__ = ShapePicker;
  MeshPicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
  MeshPicker.prototype.constructor = MeshPicker;

  var prototypeAccessors$12 = { type: {} };

  prototypeAccessors$12.type.get = function () { return 'mesh' };

  MeshPicker.prototype.getObject = function getObject (/* pid */) {
    var m = this.mesh;
    return {
      shape: this.shape,
      name: m.name,
      serial: m.serial
    }
  };

  MeshPicker.prototype._getPosition = function _getPosition (/* pid */) {
    if (!this.__position) {
      this.__position = calculateMeanVector3(this.mesh.position);
    }
    return this.__position
  };

  Object.defineProperties( MeshPicker.prototype, prototypeAccessors$12 );

  return MeshPicker;
}(ShapePicker));

var SpherePicker = (function (ShapePicker) {
  function SpherePicker () {
    ShapePicker.apply(this, arguments);
  }

  if ( ShapePicker ) SpherePicker.__proto__ = ShapePicker;
  SpherePicker.prototype = Object.create( ShapePicker && ShapePicker.prototype );
  SpherePicker.prototype.constructor = SpherePicker;

  var prototypeAccessors$13 = { type: {} };

  prototypeAccessors$13.type.get = function () { return 'sphere' };

  SpherePicker.prototype.getObject = function getObject (pid) {
    var s = this.shape;
    return {
      shape: s,
      position: this._getPosition(pid),
      color: new Color().fromArray(s.sphereColor, 3 * pid),
      radius: s.sphereRadius[ pid ],
      name: s.sphereName[ pid ]
    }
  };

  SpherePicker.prototype._getPosition = function _getPosition (pid) {
    return new Vector3().fromArray(this.shape.spherePosition, 3 * pid)
  };

  Object.defineProperties( SpherePicker.prototype, prototypeAccessors$13 );

  return SpherePicker;
}(ShapePicker));

var SurfacePicker = (function (Picker) {
  function SurfacePicker (array, surface) {
    Picker.call(this, array);
    this.surface = surface;
  }

  if ( Picker ) SurfacePicker.__proto__ = Picker;
  SurfacePicker.prototype = Object.create( Picker && Picker.prototype );
  SurfacePicker.prototype.constructor = SurfacePicker;

  var prototypeAccessors$14 = { type: {},data: {} };

  prototypeAccessors$14.type.get = function () { return 'surface' };
  prototypeAccessors$14.data.get = function () { return this.surface };

  SurfacePicker.prototype.getObject = function getObject (pid) {
    return {
      surface: this.surface,
      index: this.getIndex(pid)
    }
  };

  SurfacePicker.prototype._getPosition = function _getPosition (/* pid */) {
    return this.surface.center.clone()
  };

  Object.defineProperties( SurfacePicker.prototype, prototypeAccessors$14 );

  return SurfacePicker;
}(Picker));

var UnitcellPicker = (function (Picker) {
  function UnitcellPicker (unitcell, structure) {
    Picker.call(this);
    this.unitcell = unitcell;
    this.structure = structure;
  }

  if ( Picker ) UnitcellPicker.__proto__ = Picker;
  UnitcellPicker.prototype = Object.create( Picker && Picker.prototype );
  UnitcellPicker.prototype.constructor = UnitcellPicker;

  var prototypeAccessors$15 = { type: {},data: {} };

  prototypeAccessors$15.type.get = function () { return 'unitcell' };
  prototypeAccessors$15.data.get = function () { return this.unitcell };

  UnitcellPicker.prototype.getObject = function getObject (/* pid */) {
    return {
      unitcell: this.unitcell,
      structure: this.structure
    }
  };

  UnitcellPicker.prototype._getPosition = function _getPosition (/* pid */) {
    return this.unitcell.getCenter(this.structure)
  };

  Object.defineProperties( UnitcellPicker.prototype, prototypeAccessors$15 );

  return UnitcellPicker;
}(Picker));

var UnknownPicker = (function (Picker) {
  function UnknownPicker () {
    Picker.apply(this, arguments);
  }

  if ( Picker ) UnknownPicker.__proto__ = Picker;
  UnknownPicker.prototype = Object.create( Picker && Picker.prototype );
  UnknownPicker.prototype.constructor = UnknownPicker;

  var prototypeAccessors$16 = { type: {} };

  prototypeAccessors$16.type.get = function () { return 'unknown' };

  Object.defineProperties( UnknownPicker.prototype, prototypeAccessors$16 );

  return UnknownPicker;
}(Picker));

var VolumePicker = (function (Picker) {
  function VolumePicker (array, volume) {
    Picker.call(this, array);
    this.volume = volume;
  }

  if ( Picker ) VolumePicker.__proto__ = Picker;
  VolumePicker.prototype = Object.create( Picker && Picker.prototype );
  VolumePicker.prototype.constructor = VolumePicker;

  var prototypeAccessors$17 = { type: {},data: {} };

  prototypeAccessors$17.type.get = function () { return 'volume' };
  prototypeAccessors$17.data.get = function () { return this.volume };

  VolumePicker.prototype.getObject = function getObject (pid) {
    var vol = this.volume;
    var idx = this.getIndex(pid);
    return {
      volume: vol,
      index: idx,
      value: vol.data[ idx ]
    }
  };

  VolumePicker.prototype._getPosition = function _getPosition (pid) {
    var dp = this.volume.position;
    var idx = this.getIndex(pid);
    return new Vector3(
            dp[ idx * 3 ],
            dp[ idx * 3 + 1 ],
            dp[ idx * 3 + 2 ]
        )
  };

  Object.defineProperties( VolumePicker.prototype, prototypeAccessors$17 );

  return VolumePicker;
}(Picker));

var SlicePicker = (function (VolumePicker) {
  function SlicePicker () {
    VolumePicker.apply(this, arguments);
  }

  if ( VolumePicker ) SlicePicker.__proto__ = VolumePicker;
  SlicePicker.prototype = Object.create( VolumePicker && VolumePicker.prototype );
  SlicePicker.prototype.constructor = SlicePicker;

  var prototypeAccessors$18 = { type: {} };

  prototypeAccessors$18.type.get = function () { return 'slice' };

  Object.defineProperties( SlicePicker.prototype, prototypeAccessors$18 );

  return SlicePicker;
}(VolumePicker));

/**
 * @file Bit array
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Paul Pillot <paulpillot@gmail.com>
 * @private
 */

/**
 * Compute the Hamming weight of a 32-bit unsigned integer
 * @param  {Integer} v - a 32-bit unsigned integer
 * @return {Integer} the Hamming weight
 */
function hammingWeight (v) {
    // works with signed or unsigned shifts
  v -= ((v >>> 1) & 0x55555555);
  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24
}

/**
 * Bit array
 *
 * Based heavily on https://github.com/lemire/FastBitSet.js
 * which is licensed under the Apache License, Version 2.0.
 */
var BitArray = function BitArray (length, setAll) {
  this.length = length;
  this._words = new Uint32Array((length + 32) >>> 5);
  if (setAll === true) {
    this.setAll();
  }
};

  /**
   * Get value at index
   * @param{Integer} index - the index
   * @return {Boolean} value
   */
BitArray.prototype.get = function get (index) {
  return (this._words[ index >>> 5 ] & (1 << index)) !== 0
};

  /**
   * Set value at index to true
   * @param{Integer} index - the index
   * @return {undefined}
   */
BitArray.prototype.set = function set (index) {
  this._words[ index >>> 5 ] |= 1 << index;
};

  /**
   * Set value at index to false
   * @param{Integer} index - the index
   * @return {undefined}
   */
BitArray.prototype.clear = function clear (index) {
  this._words[ index >>> 5 ] &= ~(1 << index);
};

  /**
   * Flip value at index
   * @param{Integer} index - the index
   * @return {undefined}
   */
BitArray.prototype.flip = function flip (index) {
  this._words[ index >>> 5 ] ^= 1 << index;
};

BitArray.prototype._assignRange = function _assignRange (start, end, value) {
  var words = this._words;
  var wordValue = value === true ? 0xFFFFFFFF : 0;
  var wordStart = start >>> 5;
  var wordEnd = end >>> 5;
      // set complete words when applicable
  for (var k = wordStart; k < wordEnd; ++k) {
    words[ k ] = wordValue;
  }
      // set parts of the range not spanning complete words
  var startWord = wordStart << 5;
  var endWord = wordEnd << 5;
  if (value === true) {
    if (end - start < 32) {
      for (var i = start, n = end + 1; i < n; ++i) {
        words[ i >>> 5 ] |= 1 << i;
      }
    } else {
      for (var i$1 = start, n$1 = startWord; i$1 < n$1; ++i$1) {
        words[ i$1 >>> 5 ] |= 1 << i$1;
      }
      for (var i$2 = endWord, n$2 = end + 1; i$2 < n$2; ++i$2) {
        words[ i$2 >>> 5 ] |= 1 << i$2;
      }
    }
  } else {
    if (end - start < 32) {
      for (var i$3 = start, n$3 = end + 1; i$3 < n$3; ++i$3) {
        words[ i$3 >>> 5 ] &= ~(1 << i$3);
      }
    } else {
      for (var i$4 = start, n$4 = startWord; i$4 < n$4; ++i$4) {
        words[ i$4 >>> 5 ] &= ~(1 << i$4);
      }
      for (var i$5 = endWord, n$5 = end + 1; i$5 < n$5; ++i$5) {
        words[ i$5 >>> 5 ] &= ~(1 << i$5);
      }
    }
  }
  return this
};

  /**
   * Set bits of the given range
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
BitArray.prototype.setRange = function setRange (start, end) {
  return this._assignRange(start, end, true)
};

  /**
   * Clear bits of the given range
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
BitArray.prototype.clearRange = function clearRange (start, end) {
  return this._assignRange(start, end, false)
};

  /**
   * Set bits at all given indices
   * @param {...Integer} arguments - indices
   * @return {Boolean} this object
   */
BitArray.prototype.setBits = function setBits () {
    var arguments$1 = arguments;

  var words = this._words;
  var n = arguments.length;
  for (var i = 0; i < n; ++i) {
    var index = arguments$1[ i ];
    words[ index >>> 5 ] |= 1 << index;
  }
  return this
};

  /**
   * Clear bits at all given indices
   * @param {...Integer} arguments - indices
   * @return {Boolean} this object
   */
BitArray.prototype.clearBits = function clearBits () {
    var arguments$1 = arguments;

  var words = this._words;
  var n = arguments.length;
  for (var i = 0; i < n; ++i) {
    var index = arguments$1[ i ];
    words[ index >>> 5 ] &= ~(1 << index);
  }
  return this
};

  /**
   * Set all bits of the array
   * @return {BitArray} this object
   */
BitArray.prototype.setAll = function setAll () {
  return this._assignRange(0, this.length - 1, true)
};

  /**
   * Clear all bits of the array
   * @return {BitArray} this object
   */
BitArray.prototype.clearAll = function clearAll () {
  return this._assignRange(0, this.length - 1, false)
};

  /**
   * Flip all the values in the array
   * @return {BitArray} this object
   */
BitArray.prototype.flipAll = function flipAll () {
  var count = this._words.length;
  var words = this._words;
  var bs = 32 - this.length % 32;
  for (var k = 0; k < count - 1; ++k) {
    words[k] = ~words[ k ];
  }
  words[ count - 1 ] = (~(words[ count - 1 ] << bs)) >>> bs;
  return this
};

BitArray.prototype._isRangeValue = function _isRangeValue (start, end, value) {
  var words = this._words;
  var wordValue = value === true ? 0xFFFFFFFF : 0;
  var wordStart = start >>> 5;
  var wordEnd = end >>> 5;
      // set complete words when applicable
  for (var k = wordStart; k < wordEnd; ++k) {
    if (words[ k ] !== wordValue) { return false }
  }
      // set parts of the range not spanning complete words
  if (end - start < 32) {
    for (var i = start, n = end + 1; i < n; ++i) {
      if (!!(words[ i >>> 5 ] & (1 << i)) !== value) { return false }
    }
  } else {
    var startWord = wordStart << 5;
    var endWord = wordEnd << 5;
    for (var i$1 = start, n$1 = startWord << 5; i$1 < n$1; ++i$1) {
      if (!!(words[ i$1 >>> 5 ] & (1 << i$1)) !== value) { return false }
    }
    for (var i$2 = endWord, n$2 = end + 1; i$2 < n$2; ++i$2) {
      if (!!(words[ i$2 >>> 5 ] & (1 << i$2)) !== value) { return false }
    }
  }
  return true
};

  /**
   * Test if bits in given range are set
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
BitArray.prototype.isRangeSet = function isRangeSet (start, end) {
  return this._isRangeValue(start, end, true)
};

  /**
   * Test if bits in given range are clear
   * @param {Integer} start - start index
   * @param {Integer} end - end index
   * @return {BitArray} this object
   */
BitArray.prototype.isRangeClear = function isRangeClear (start, end) {
  return this._isRangeValue(start, end, false)
};

  /**
   * Test if all bits in the array are set
   * @return {Boolean} test result
   */
BitArray.prototype.isAllSet = function isAllSet () {
  return this._isRangeValue(0, this.length - 1, true)
};

  /**
   * Test if all bits in the array are clear
   * @return {Boolean} test result
   */
BitArray.prototype.isAllClear = function isAllClear () {
  return this._isRangeValue(0, this.length - 1, false)
};

  /**
   * Test if bits at all given indices are set
   * @param {...Integer} arguments - indices
   * @return {Boolean} test result
   */
BitArray.prototype.isSet = function isSet () {
    var arguments$1 = arguments;

  var words = this._words;
  var n = arguments.length;
  for (var i = 0; i < n; ++i) {
    var index = arguments$1[ i ];
    if ((words[ index >>> 5 ] & (1 << index)) === 0) { return false }
  }
  return true
};

  /**
   * Test if bits at all given indices are clear
   * @param {...Integer} arguments - indices
   * @return {Boolean} test result
   */
BitArray.prototype.isClear = function isClear () {
    var arguments$1 = arguments;

  var words = this._words;
  var n = arguments.length;
  for (var i = 0; i < n; ++i) {
    var index = arguments$1[ i ];
    if ((words[ index >>> 5 ] & (1 << index)) !== 0) { return false }
  }
  return true
};

  /**
   * Test if two BitArrays are identical in all their values
   * @param {BitArray} otherBitarray - the other BitArray
   * @return {Boolean} test result
   */
BitArray.prototype.isEqualTo = function isEqualTo (otherBitarray) {
  var words1 = this._words;
  var words2 = otherBitarray._words;
  var count = Math.min(words1.length, words2.length);
  for (var k = 0; k < count; ++k) {
    if (words1[ k ] !== words2[ k ]) {
      return false
    }
  }
  return true
};

  /**
   * How many set bits?
   * @return {Integer} number of set bits
   */
BitArray.prototype.getSize = function getSize () {
  var count = this._words.length;
  var words = this._words;
  var size = 0;
  for (var i = 0; i < count; ++i) {
    size += hammingWeight(words[ i ]);
  }
  return size
};

  /**
   * Calculate difference betwen this and another bit array.
   * Store result in this object.
   * @param{BitArray} otherBitarray - the other bit array
   * @return {BitArray} this object
   */
BitArray.prototype.difference = function difference (otherBitarray) {
  var words1 = this._words;
  var words2 = otherBitarray._words;
  var count = Math.min(words1.length, words2.length);
  for (var k = 0; k < count; ++k) {
    words1[ k ] = words1[ k ] & ~words2[ k ];
  }
  for (var k$1 = words1.length; k$1 < count; ++k$1) {
    words1[ k$1 ] = 0;
  }
  return this
};

  /**
   * Calculate union betwen this and another bit array.
   * Store result in this object.
   * @param{BitArray} otherBitarray - the other bit array
   * @return {BitArray} this object
   */
BitArray.prototype.union = function union (otherBitarray) {
  var words1 = this._words;
  var words2 = otherBitarray._words;
  var count = Math.min(words1.length, words2.length);
  for (var k = 0; k < count; ++k) {
    words1[ k ] |= words2[ k ];
  }
  for (var k$1 = words1.length; k$1 < count; ++k$1) {
    words1[ k$1 ] = 0;
  }
  return this
};

  /**
   * Calculate intersection betwen this and another bit array.
   * Store result in this object.
   * @param{BitArray} otherBitarray - the other bit array
   * @return {BitArray} this object
   */
BitArray.prototype.intersection = function intersection (otherBitarray) {
  var words1 = this._words;
  var words2 = otherBitarray._words;
  var count = Math.min(words1.length, words2.length);
  for (var k = 0; k < count; ++k) {
    words1[ k ] &= words2[ k ];
  }
  for (var k$1 = words1.length; k$1 < count; ++k$1) {
    words1[ k$1 ] = 0;
  }
  return this
};

  /**
   * Test if there is any intersection betwen this and another bit array.
   * @param{BitArray} otherBitarray - the other bit array
   * @return {Boolean} test result
   */
BitArray.prototype.intersects = function intersects (otherBitarray) {
  var words1 = this._words;
  var words2 = otherBitarray._words;
  var count = Math.min(words1.length, words2.length);
  for (var k = 0; k < count; ++k) {
    if ((words1[ k ] & words2[ k ]) !== 0) {
      return true
    }
  }
  return false
};

  /**
   * Calculate the number of bits in common betwen this and another bit array.
   * @param{BitArray} otherBitarray - the other bit array
   * @return {Integer} size
   */
BitArray.prototype.getIntersectionSize = function getIntersectionSize (otherBitarray) {
  var words1 = this._words;
  var words2 = otherBitarray._words;
  var count = Math.min(words1.length, words2.length);
  var size = 0;
  for (var k = 0; k < count; ++k) {
    size += hammingWeight(words1[ k ] & words2[ k ]);
  }
  return size
};

  /**
   * Calculate intersection betwen this and another bit array.
   * Store result in a new bit array.
   * @param{BitArray} otherBitarray - the other bit array
   * @return {BitArray} the new bit array
   */
BitArray.prototype.makeIntersection = function makeIntersection (otherBitarray) {
  var words1 = this._words;
  var words2 = otherBitarray._words;
  var count = Math.min(words1.length, words2.length);
  var wordsA = new Uint32Array(count);
  var intersection = Object.create(BitArray.prototype);
  intersection._words = wordsA;
  intersection.length = Math.min(this.length, otherBitarray.length);
  for (var k = 0; k < count; ++k) {
    wordsA[ k ] = words1[ k ] & words2[ k ];
  }
  return intersection
};

  /**
   * Iterate over all set bits in the array
   * @param{function( index: Integer, i: Integer )} callback - the callback
   * @return {undefined}
   */
BitArray.prototype.forEach = function forEach (callback) {
  var count = this._words.length;
  var words = this._words;
  var i = 0;
  for (var k = 0; k < count; ++k) {
    var w = words[ k ];
    while (w !== 0) {
      var t = w & -w;
      var index = (k << 5) + hammingWeight(t - 1);
      callback(index, i);
      w ^= t;
      ++i;
    }
  }
};

  /**
   * Get an array with the set bits
   * @return {Array} bit indices
   */
BitArray.prototype.toArray = function toArray () {
  var words = this._words;
  var answer = new Array(this.getSize());
  var count = this._words.length;
  var pos = 0;
  for (var k = 0; k < count; ++k) {
    var w = words[ k ];
    while (w !== 0) {
      var t = w & -w;
      answer[ pos++ ] = (k << 5) + hammingWeight(t - 1);
      w ^= t;
    }
  }
  return answer
};

BitArray.prototype.toString = function toString () {
  return '{' + this.toArray().join(',') + '}'
};

BitArray.prototype.toSeleString = function toSeleString () {
  var sele = this.toArray().join(',');
  return sele ? '@' + sele : 'NONE'
};

  /**
   * Clone this object
   * @return {BitArray} the cloned object
   */
BitArray.prototype.clone = function clone () {
  var clone = Object.create(BitArray.prototype);
  clone.length = this.length;
  clone._words = new Uint32Array(this._words);
  return clone
};

/**
 * @file Structure Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// entity types
var UnknownEntity = 0;
var PolymerEntity = 1;
var NonPolymerEntity = 2;
var MacrolideEntity = 3;
var WaterEntity = 4;

// molecule types
var UnknownType = 0;
var WaterType = 1;
var IonType = 2;
var ProteinType = 3;
var RnaType = 4;
var DnaType = 5;
var SaccharideType = 6;

// backbone types
var UnknownBackboneType = 0;
var ProteinBackboneType = 1;
var RnaBackboneType = 2;
var DnaBackboneType = 3;
var CgProteinBackboneType = 4;
var CgRnaBackboneType = 5;
var CgDnaBackboneType = 6;

// chemical component types
var ChemCompProtein = [
  'D-BETA-PEPTIDE, C-GAMMA LINKING', 'D-GAMMA-PEPTIDE, C-DELTA LINKING',
  'D-PEPTIDE COOH CARBOXY TERMINUS', 'D-PEPTIDE NH3 AMINO TERMINUS', 'D-PEPTIDE LINKING',
  'L-BETA-PEPTIDE, C-GAMMA LINKING', 'L-GAMMA-PEPTIDE, C-DELTA LINKING',
  'L-PEPTIDE COOH CARBOXY TERMINUS', 'L-PEPTIDE NH3 AMINO TERMINUS', 'L-PEPTIDE LINKING',
  'PEPTIDE LINKING', 'PEPTIDE-LIKE'
];
var ChemCompRna = [
  'RNA OH 3 PRIME TERMINUS', 'RNA OH 5 PRIME TERMINUS', 'RNA LINKING'
];
var ChemCompDna = [
  'DNA OH 3 PRIME TERMINUS', 'DNA OH 5 PRIME TERMINUS', 'DNA LINKING',
  'L-DNA LINKING', 'L-RNA LINKING'
];
var ChemCompSaccharide = [
  'D-SACCHARIDE', 'D-SACCHARIDE 1,4 AND 1,4 LINKING', 'D-SACCHARIDE 1,4 AND 1,6 LINKING',
  'L-SACCHARIDE', 'L-SACCHARIDE 1,4 AND 1,4 LINKING', 'L-SACCHARIDE 1,4 AND 1,6 LINKING',
  'SACCHARIDE'
];
var ChemCompOther = [
  'OTHER'
];
var ChemCompNonPolymer = [
  'NON-POLYMER'
];
var ChemCompHetero = ChemCompNonPolymer.concat(ChemCompOther, ChemCompSaccharide);

// secondary structure
var SecStrucHelix = [ 'h', 'g', 'i' ];
var SecStrucSheet = [ 'e', 'b' ];
var SecStrucTurn = [ 's', 't', 'l', '' ];

// http://dx.doi.org/10.1021/jp8111556 (or 2.0)
var VdwRadii = {
  'H': 1.1,
  'HE': 1.4,
  'LI': 1.81,
  'BE': 1.53,
  'B': 1.92,
  'C': 1.7,
  'N': 1.55,
  'O': 1.52,
  'F': 1.47,
  'NE': 1.54,
  'NA': 2.27,
  'MG': 1.73,
  'AL': 1.84,
  'SI': 2.1,
  'P': 1.8,
  'S': 1.8,
  'CL': 1.75,
  'AR': 1.88,
  'K': 2.75,
  'CA': 2.31,
  'SC': 2.3,
  'TI': 2.15,
  'V': 2.05,
  'CR': 2.05,
  'MN': 2.05,
  'FE': 2.05,
  'CO': 2.0,
  'NI': 2.0,
  'CU': 2.0,
  'ZN': 2.1,
  'GA': 1.87,
  'GE': 2.11,
  'AS': 1.85,
  'SE': 1.9,
  'BR': 1.83,
  'KR': 2.02,
  'RB': 3.03,
  'SR': 2.49,
  'Y': 2.4,
  'ZR': 2.3,
  'NB': 2.15,
  'MO': 2.1,
  'TC': 2.05,
  'RU': 2.05,
  'RH': 2.0,
  'PD': 2.05,
  'AG': 2.1,
  'CD': 2.2,
  'IN': 2.2,
  'SN': 1.93,
  'SB': 2.17,
  'TE': 2.06,
  'I': 1.98,
  'XE': 2.16,
  'CS': 3.43,
  'BA': 2.68,
  'LA': 2.5,
  'CE': 2.48,
  'PR': 2.47,
  'ND': 2.45,
  'PM': 2.43,
  'SM': 2.42,
  'EU': 2.4,
  'GD': 2.38,
  'TB': 2.37,
  'DY': 2.35,
  'HO': 2.33,
  'ER': 2.32,
  'TM': 2.3,
  'YB': 2.28,
  'LU': 2.27,
  'HF': 2.25,
  'TA': 2.2,
  'W': 2.1,
  'RE': 2.05,
  'OS': 2.0,
  'IR': 2.0,
  'PT': 2.05,
  'AU': 2.1,
  'HG': 2.05,
  'TL': 1.96,
  'PB': 2.02,
  'BI': 2.07,
  'PO': 1.97,
  'AT': 2.02,
  'RN': 2.2,
  'FR': 3.48,
  'RA': 2.83,
  'AC': 2.0,
  'TH': 2.4,
  'PA': 2.0,
  'U': 2.3,
  'NP': 2.0,
  'PU': 2.0,
  'AM': 2.0,
  'CM': 2.0,
  'BK': 2.0,
  'CF': 2.0,
  'ES': 2.0,
  'FM': 2.0,
  'MD': 2.0,
  'NO': 2.0,
  'LR': 2.0,
  'RF': 2.0,
  'DB': 2.0,
  'SG': 2.0,
  'BH': 2.0,
  'HS': 2.0,
  'MT': 2.0,
  'DS': 2.0,
  'RG': 2.0,
  'CN': 2.0,
  'UUT': 2.0,
  'FL': 2.0,
  'UUP': 2.0,
  'LV': 2.0,
  'UUH': 2.0
};
var DefaultVdwRadius = 2.0;

// http://dx.doi.org/10.1039/b801115j (or 1.6)
var CovalentRadii = {
  'H': 0.31,
  'HE': 0.28,
  'LI': 1.28,
  'BE': 0.96,
  'B': 0.84,
  'C': 0.76,
  'N': 0.71,
  'O': 0.66,
  'F': 0.57,
  'NE': 0.58,
  'NA': 1.66,
  'MG': 1.41,
  'AL': 1.21,
  'SI': 1.11,
  'P': 1.07,
  'S': 1.05,
  'CL': 1.02,
  'AR': 1.06,
  'K': 2.03,
  'CA': 1.76,
  'SC': 1.7,
  'TI': 1.6,
  'V': 1.53,
  'CR': 1.39,
  'MN': 1.39,
  'FE': 1.32,
  'CO': 1.26,
  'NI': 1.24,
  'CU': 1.32,
  'ZN': 1.22,
  'GA': 1.22,
  'GE': 1.2,
  'AS': 1.19,
  'SE': 1.2,
  'BR': 1.2,
  'KR': 1.16,
  'RB': 2.2,
  'SR': 1.95,
  'Y': 1.9,
  'ZR': 1.75,
  'NB': 1.64,
  'MO': 1.54,
  'TC': 1.47,
  'RU': 1.46,
  'RH': 1.42,
  'PD': 1.39,
  'AG': 1.45,
  'CD': 1.44,
  'IN': 1.42,
  'SN': 1.39,
  'SB': 1.39,
  'TE': 1.38,
  'I': 1.39,
  'XE': 1.4,
  'CS': 2.44,
  'BA': 2.15,
  'LA': 2.07,
  'CE': 2.04,
  'PR': 2.03,
  'ND': 2.01,
  'PM': 1.99,
  'SM': 1.98,
  'EU': 1.98,
  'GD': 1.96,
  'TB': 1.94,
  'DY': 1.92,
  'HO': 1.92,
  'ER': 1.89,
  'TM': 1.9,
  'YB': 1.87,
  'LU': 1.87,
  'HF': 1.75,
  'TA': 1.7,
  'W': 1.62,
  'RE': 1.51,
  'OS': 1.44,
  'IR': 1.41,
  'PT': 1.36,
  'AU': 1.36,
  'HG': 1.32,
  'TL': 1.45,
  'PB': 1.46,
  'BI': 1.48,
  'PO': 1.4,
  'AT': 1.5,
  'RN': 1.5,
  'FR': 2.6,
  'RA': 2.21,
  'AC': 2.15,
  'TH': 2.06,
  'PA': 2.0,
  'U': 1.96,
  'NP': 1.9,
  'PU': 1.87,
  'AM': 1.8,
  'CM': 1.69,
  'BK': 1.6,
  'CF': 1.6,
  'ES': 1.6,
  'FM': 1.6,
  'MD': 1.6,
  'NO': 1.6,
  'LR': 1.6,
  'RF': 1.6,
  'DB': 1.6,
  'SG': 1.6,
  'BH': 1.6,
  'HS': 1.6,
  'MT': 1.6,
  'DS': 1.6,
  'RG': 1.6,
  'CN': 1.6,
  'UUT': 1.6,
  'FL': 1.6,
  'UUP': 1.6,
  'LV': 1.6,
  'UUH': 1.6
};
var DefaultCovalentRadius = 1.6;

// http://blanco.biomol.uci.edu/Whole_residue_HFscales.txt
var ResidueHydrophobicity = {
    // AA  DGwif   DGwoct  Oct-IF
  'ALA': [ 0.17, 0.50, 0.33 ],
  'ARG': [ 0.81, 1.81, 1.00 ],
  'ASN': [ 0.42, 0.85, 0.43 ],
  'ASP': [ 1.23, 3.64, 2.41 ],
  'ASH': [ -0.07, 0.43, 0.50 ],
  'CYS': [ -0.24, -0.02, 0.22 ],
  'GLN': [ 0.58, 0.77, 0.19 ],
  'GLU': [ 2.02, 3.63, 1.61 ],
  'GLH': [ -0.01, 0.11, 0.12 ],
  'GLY': [ 0.01, 1.15, 1.14 ],
    // "His+": [  0.96,  2.33,  1.37 ],
  'HIS': [ 0.17, 0.11, -0.06 ],
  'ILE': [ -0.31, -1.12, -0.81 ],
  'LEU': [ -0.56, -1.25, -0.69 ],
  'LYS': [ 0.99, 2.80, 1.81 ],
  'MET': [ -0.23, -0.67, -0.44 ],
  'PHE': [ -1.13, -1.71, -0.58 ],
  'PRO': [ 0.45, 0.14, -0.31 ],
  'SER': [ 0.13, 0.46, 0.33 ],
  'THR': [ 0.14, 0.25, 0.11 ],
  'TRP': [ -1.85, -2.09, -0.24 ],
  'TYR': [ -0.94, -0.71, 0.23 ],
  'VAL': [ 0.07, -0.46, -0.53 ]
};
var DefaultResidueHydrophobicity = [ 0.00, 0.00, 0.00 ];

var AA1 = {
  'HIS': 'H',
  'ARG': 'R',
  'LYS': 'K',
  'ILE': 'I',
  'PHE': 'F',
  'LEU': 'L',
  'TRP': 'W',
  'ALA': 'A',
  'MET': 'M',
  'PRO': 'P',
  'CYS': 'C',
  'ASN': 'N',
  'VAL': 'V',
  'GLY': 'G',
  'SER': 'S',
  'GLN': 'Q',
  'TYR': 'Y',
  'ASP': 'D',
  'GLU': 'E',
  'THR': 'T',

  'ASH': 'D',
  'GLH': 'E',

  'UNK': ''
};

var AA3 = Object.keys(AA1);

var RnaBases = [ 'A', 'C', 'T', 'G', 'U' ];

var DnaBases = [ 'DA', 'DC', 'DT', 'DG', 'DU', 'TCY', 'MCY', '5CM' ];

var PurinBases = [ 'A', 'G', 'DA', 'DG' ];

var WaterNames = [
  'SOL', 'WAT', 'HOH', 'H2O', 'W', 'DOD', 'D3O', 'TIP3', 'TIP4'
];

// all chemical components with the word "ion" in their name, Sep 2016
//
// SET SESSION group_concat_max_len = 1000000;
// SELECT GROUP_CONCAT(id_ ORDER BY id_ ASC SEPARATOR '", "') from
// (
//     SELECT count(obj_id) as c, id_
//     FROM pdb.chem_comp WHERE name LIKE "% ION%"
//     GROUP BY id_
// ) AS t1;
var IonNames = [
  '118', '119', '1AL', '1CU', '2FK', '2HP', '2OF', '3CO',
  '3MT', '3NI', '3OF', '3P8', '4MO', '4PU', '543', '6MO', 'ACT', 'AG', 'AL',
  'ALF', 'AM', 'ATH', 'AU', 'AU3', 'AUC', 'AZI', 'BA', 'BCT', 'BEF', 'BF4', 'BO4',
  'BR', 'BS3', 'BSY', 'CA', 'CAC', 'CD', 'CD1', 'CD3', 'CD5', 'CE', 'CHT', 'CL',
  'CO', 'CO3', 'CO5', 'CON', 'CR', 'CS', 'CSB', 'CU', 'CU1', 'CU3', 'CUA', 'CUZ',
  'CYN', 'DME', 'DMI', 'DSC', 'DTI', 'DY', 'E4N', 'EDR', 'EMC', 'ER3', 'EU',
  'EU3', 'F', 'FE', 'FE2', 'FPO', 'GA', 'GD3', 'GEP', 'HAI', 'HG', 'HGC', 'IN',
  'IOD', 'IR', 'IR3', 'IRI', 'IUM', 'K', 'KO4', 'LA', 'LCO', 'LCP', 'LI', 'LU',
  'MAC', 'MG', 'MH2', 'MH3', 'MLI', 'MLT', 'MMC', 'MN', 'MN3', 'MN5', 'MN6',
  'MO1', 'MO2', 'MO3', 'MO4', 'MO5', 'MO6', 'MOO', 'MOS', 'MOW', 'MW1', 'MW2',
  'MW3', 'NA', 'NA2', 'NA5', 'NA6', 'NAO', 'NAW', 'NCO', 'NET', 'NH4', 'NI',
  'NI1', 'NI2', 'NI3', 'NO2', 'NO3', 'NRU', 'O4M', 'OAA', 'OC1', 'OC2', 'OC3',
  'OC4', 'OC5', 'OC6', 'OC7', 'OC8', 'OCL', 'OCM', 'OCN', 'OCO', 'OF1', 'OF2',
  'OF3', 'OH', 'OS', 'OS4', 'OXL', 'PB', 'PBM', 'PD', 'PDV', 'PER', 'PI', 'PO3',
  'PO4', 'PR', 'PT', 'PT4', 'PTN', 'RB', 'RH3', 'RHD', 'RU', 'SB', 'SCN', 'SE4',
  'SEK', 'SM', 'SMO', 'SO3', 'SO4', 'SR', 'T1A', 'TB', 'TBA', 'TCN', 'TEA', 'TH',
  'THE', 'TL', 'TMA', 'TRA', 'UNX', 'V', 'VN3', 'VO4', 'W', 'WO5', 'Y1', 'YB',
  'YB2', 'YH', 'YT3', 'ZCM', 'ZN', 'ZN2', 'ZN3', 'ZNO', 'ZO3',
    // additional ion names
  'OHX'
];

// all chemical components with the word "%saccharide%" in their type, Sep 2016
//
// SET SESSION group_concat_max_len = 1000000;
// select GROUP_CONCAT(id_ ORDER BY id_ ASC SEPARATOR '", "') from
// (
//     SELECT count(obj_id), id_
//     FROM pdb.chem_comp WHERE type like "%SACCHARIDE%"
//     GROUP BY id_
// ) AS t1;
var SaccharideNames = [
  '045', '0AT', '0BD', '0MK', '0NZ', '0TS', '0V4', '0XY', '0YT', '10M',
  '147', '149', '14T', '15L', '16G', '18T', '18Y', '1AR', '1BW', '1GL', '1GN',
  '1JB', '1LL', '1NA', '1S3', '26M', '26Q', '26R', '26V', '26W', '26Y', '27C',
  '289', '291', '293', '2DG', '2F8', '2FG', '2FL', '2FP', '2GL', '2M4', '2M5',
  '32O', '34V', '3CM', '3DO', '3DY', '3FM', '3LR', '3MF', '3MG', '3SA', '3ZW',
  '46D', '46M', '46Z', '48Z', '4CQ', '4GC', '4NN', '50A', '5DI', '5GF', '5MM',
  '5RP', '5SA', '5SP', '64K', '6PG', '6SA', '7JZ', '7SA', 'A1Q', 'A2G', 'AAB',
  'AAL', 'AAO', 'ABC', 'ABD', 'ABE', 'ABF', 'ABL', 'ACG', 'ACI', 'ACR', 'ACX',
  'ADA', 'ADG', 'ADR', 'AF1', 'AFD', 'AFL', 'AFO', 'AFP', 'AFR', 'AGC', 'AGH',
  'AGL', 'AHR', 'AIG', 'ALL', 'ALX', 'AMU', 'AOG', 'AOS', 'ARA', 'ARB', 'ARE',
  'ARI', 'ASG', 'ASO', 'AXP', 'AXR', 'B0D', 'B16', 'B2G', 'B4G', 'B6D', 'B8D',
  'B9D', 'BBK', 'BCD', 'BDG', 'BDP', 'BDR', 'BEM', 'BFP', 'BGC', 'BGL', 'BGP',
  'BGS', 'BHG', 'BMA', 'BMX', 'BNG', 'BNX', 'BOG', 'BRI', 'BXF', 'BXP', 'BXX',
  'BXY', 'C3X', 'C4X', 'C5X', 'CAP', 'CBI', 'CBK', 'CBS', 'CDR', 'CEG', 'CGF',
  'CHO', 'CR1', 'CR6', 'CRA', 'CT3', 'CTO', 'CTR', 'CTT', 'D6G', 'DAF', 'DAG',
  'DDA', 'DDB', 'DDL', 'DEL', 'DFR', 'DFX', 'DG0', 'DGC', 'DGD', 'DGM', 'DGS',
  'DIG', 'DLF', 'DLG', 'DMU', 'DNO', 'DOM', 'DP5', 'DQQ', 'DQR', 'DR2', 'DR3',
  'DR4', 'DRI', 'DSR', 'DT6', 'DVC', 'E4P', 'E5G', 'EAG', 'EBG', 'EBQ', 'EGA',
  'EJT', 'EPG', 'ERE', 'ERI', 'F1P', 'F1X', 'F6P', 'FBP', 'FCA', 'FCB', 'FCT',
  'FDP', 'FDQ', 'FFC', 'FIX', 'FMO', 'FRU', 'FSI', 'FU4', 'FUB', 'FUC', 'FUD',
  'FUL', 'FXP', 'G16', 'G1P', 'G2F', 'G3I', 'G4D', 'G4S', 'G6D', 'G6P', 'G6S',
  'GAC', 'GAD', 'GAL', 'GC1', 'GC4', 'GCD', 'GCN', 'GCO', 'GCS', 'GCT', 'GCU',
  'GCV', 'GCW', 'GCX', 'GE1', 'GFG', 'GFP', 'GIV', 'GL0', 'GL2', 'GL5', 'GL6',
  'GL7', 'GL9', 'GLA', 'GLB', 'GLC', 'GLD', 'GLF', 'GLG', 'GLO', 'GLP', 'GLS',
  'GLT', 'GLW', 'GMH', 'GN1', 'GNX', 'GP1', 'GP4', 'GPH', 'GPM', 'GQ1', 'GQ2',
  'GQ4', 'GS1', 'GS4', 'GSA', 'GSD', 'GTE', 'GTH', 'GTK', 'GTR', 'GTZ', 'GU0',
  'GU1', 'GU2', 'GU3', 'GU4', 'GU5', 'GU6', 'GU8', 'GU9', 'GUF', 'GUP', 'GUZ',
  'GYP', 'GYV', 'H2P', 'HDL', 'HMS', 'HS2', 'HSD', 'HSG', 'HSH', 'HSJ', 'HSQ',
  'HSR', 'HSU', 'HSX', 'HSY', 'HSZ', 'IAB', 'IDG', 'IDR', 'IDS', 'IDT', 'IDU',
  'IDX', 'IDY', 'IMK', 'IN1', 'IPT', 'ISL', 'KBG', 'KD2', 'KDA', 'KDM', 'KDO',
  'KFN', 'KO1', 'KO2', 'KTU', 'L6S', 'LAG', 'LAI', 'LAK', 'LAO', 'LAT', 'LB2',
  'LBT', 'LCN', 'LDY', 'LGC', 'LGU', 'LM2', 'LMT', 'LMU', 'LOG', 'LOX', 'LPK',
  'LSM', 'LTM', 'LVZ', 'LXB', 'LXZ', 'M1F', 'M3M', 'M6P', 'M8C', 'MA1', 'MA2',
  'MA3', 'MAB', 'MAG', 'MAL', 'MAN', 'MAT', 'MAV', 'MAW', 'MBG', 'MCU', 'MDA',
  'MDM', 'MDP', 'MFA', 'MFB', 'MFU', 'MG5', 'MGA', 'MGL', 'MLB', 'MMA', 'MMN',
  'MN0', 'MRP', 'MTT', 'MUG', 'MVP', 'MXY', 'N1L', 'N9S', 'NAA', 'NAG', 'NBG',
  'NDG', 'NED', 'NG1', 'NG6', 'NGA', 'NGB', 'NGC', 'NGE', 'NGF', 'NGL', 'NGS',
  'NGY', 'NHF', 'NM6', 'NM9', 'NTF', 'NTO', 'NTP', 'NXD', 'NYT', 'OPG', 'OPM',
  'ORP', 'OX2', 'P3M', 'P53', 'P6P', 'PA5', 'PNA', 'PNG', 'PNW', 'PRP', 'PSJ',
  'PSV', 'PTQ', 'QDK', 'QPS', 'QV4', 'R1P', 'R1X', 'R2B', 'R5P', 'RAA', 'RAE',
  'RAF', 'RAM', 'RAO', 'RAT', 'RB5', 'RBL', 'RCD', 'RDP', 'REL', 'RER', 'RF5',
  'RG1', 'RGG', 'RHA', 'RIB', 'RIP', 'RNS', 'RNT', 'ROB', 'ROR', 'RPA', 'RST',
  'RUB', 'RUU', 'RZM', 'S6P', 'S7P', 'SA0', 'SCR', 'SDD', 'SF6', 'SF9', 'SG4',
  'SG5', 'SG6', 'SG7', 'SGA', 'SGC', 'SGD', 'SGN', 'SGS', 'SHB', 'SHG', 'SI3',
  'SIO', 'SOE', 'SOL', 'SSG', 'SUC', 'SUP', 'SUS', 'T6P', 'T6T', 'TAG', 'TCB',
  'TDG', 'TGK', 'TGY', 'TH1', 'TIA', 'TM5', 'TM6', 'TM9', 'TMR', 'TMX', 'TOA',
  'TOC', 'TRE', 'TYV', 'UCD', 'UDC', 'VG1', 'X0X', 'X1X', 'X2F', 'X4S', 'X5S',
  'X6X', 'XBP', 'XDN', 'XDP', 'XIF', 'XIM', 'XLF', 'XLS', 'XMM', 'XUL', 'XXR',
  'XYP', 'XYS', 'YO5', 'Z3Q', 'Z6J', 'Z9M', 'ZDC', 'ZDM'
];

var ProteinBackboneAtoms = [
  'CA', 'C', 'N', 'O',
  'O1', 'O2', 'OC1', 'OC2', 'OX1', 'OXT',
  'H', 'H1', 'H2', 'H3', 'HA',
  'BB'
];

var NucleicBackboneAtoms = [
  'P', "O3'", "O5'", "C5'", "C4'", "C3'", 'OP1', 'OP2',
  'O3*', 'O5*', 'C5*', 'C4*', 'C3*'
];

var ResidueTypeAtoms = {};

ResidueTypeAtoms[ ProteinBackboneType ] = {
  trace: 'CA',
  direction1: 'C',
  direction2: [ 'O', 'OC1', 'O1', 'OX1', 'OXT' ],
  backboneStart: 'N',
  backboneEnd: 'C'
};

ResidueTypeAtoms[ RnaBackboneType ] = {
  trace: [ "C4'", 'C4*' ],
  direction1: [ "C1'", 'C1*' ],
  direction2: [ "C3'", 'C3*' ],
  backboneStart: 'P',
  backboneEnd: [ "O3'", 'O3*' ]
};

ResidueTypeAtoms[ DnaBackboneType ] = {
  trace: [ "C3'", 'C3*' ],
  direction1: [ "C2'", 'C2*' ],
  direction2: [ "O4'", 'O4*' ],
  backboneStart: 'P',
  backboneEnd: [ "O3'", 'O3*' ]
};

ResidueTypeAtoms[ CgProteinBackboneType ] = {
  trace: [ 'CA', 'BB' ],
  backboneStart: [ 'CA', 'BB' ],
  backboneEnd: [ 'CA', 'BB' ]
};

ResidueTypeAtoms[ CgRnaBackboneType ] = {
  trace: [ "C4'", 'C4*', 'P' ],
  backboneStart: [ "C4'", 'C4*', 'P' ],
  backboneEnd: [ "C4'", 'C4*', 'P' ]
};

ResidueTypeAtoms[ CgDnaBackboneType ] = {
  trace: [ "C3'", 'C3*', "C2'", 'P' ],  // C2' is used in martini ff
  backboneStart: [ "C3'", 'C3*', "C2'", 'P' ],
  backboneEnd: [ "C3'", 'C3*', "C2'", 'P' ]
};

ResidueTypeAtoms[ UnknownBackboneType ] = {};

/**
 * @file Radius Factory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function RadiusFactory (type, scale) {
  this.type = type;
  this.scale = scale || 1.0;

  this.max = 10;
}

RadiusFactory.prototype = {

  constructor: RadiusFactory,

  atomRadius: function (a) {
    var type = this.type;
    var scale = this.scale;

    var r;

    switch (type) {
      case 'vdw':

        r = VdwRadii[ a.element ] || DefaultVdwRadius;
        break

      case 'covalent':

        r = CovalentRadii[ a.element ] || DefaultCovalentRadius;
        break

      case 'bfactor':

        r = a.bfactor || 1.0;
        break

      case 'sstruc':

        var sstruc = a.sstruc;
        if (sstruc === 'h') {
          r = 0.25;
        } else if (sstruc === 'g') {
          r = 0.25;
        } else if (sstruc === 'i') {
          r = 0.25;
        } else if (sstruc === 'e') {
          r = 0.25;
        } else if (sstruc === 'b') {
          r = 0.25;
        } else if (NucleicBackboneAtoms.includes(a.atomname)) {
          r = 0.4;
        } else {
          r = 0.1;
        }
        break

      default:

        r = type || 1.0;
        break
    }

    return Math.min(r * scale, this.max)
  }

};

RadiusFactory.types = {

  '': '',
  'vdw': 'by vdW radius',
  'covalent': 'by covalent radius',
  'sstruc': 'by secondary structure',
  'bfactor': 'by bfactor',
  'size': 'size'

};

/**
 * @file Matrix Utils
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 *
 * svd methods from Eugene Zatepyakin / http://inspirit.github.io/jsfeat/
 */

function Matrix (columns, rows) {
  this.cols = columns;
  this.rows = rows;
  this.size = this.cols * this.rows;

  this.data = new Float32Array(this.size);
}

Matrix.prototype = {

  copyTo: function (matrix) {
    matrix.data.set(this.data);
  }

};

function transpose (At, A) {
  var i = 0;
  var j = 0;
  var nrows = A.rows;
  var ncols = A.cols;
  var Ai = 0;
  var Ati = 0;
  var pAt = 0;
  var ad = A.data;
  var atd = At.data;

  for (; i < nrows; Ati += 1, Ai += ncols, i++) {
    pAt = Ati;
    for (j = 0; j < ncols; pAt += nrows, j++) { atd[pAt] = ad[Ai + j]; }
  }
}

// C = A * B'
function multiplyABt (C, A, B) {
  var i = 0;
  var j = 0;
  var k = 0;
  var Ap = 0;
  var pA = 0;
  var pB = 0;
  var Cp = 0;
  var ncols = A.cols;
  var nrows = A.rows;
  var mrows = B.rows;
  var ad = A.data;
  var bd = B.data;
  var cd = C.data;
  var sum = 0.0;

  for (; i < nrows; Ap += ncols, i++) {
    for (pB = 0, j = 0; j < mrows; Cp++, j++) {
      pA = Ap;
      sum = 0.0;
      for (k = 0; k < ncols; pA++, pB++, k++) {
        sum += ad[pA] * bd[pB];
      }
      cd[Cp] = sum;
    }
  }
}

function invert3x3 (from, to) {
  var A = from.data;
  var invA = to.data;
  var t1 = A[4];
  var t2 = A[8];
  var t4 = A[5];
  var t5 = A[7];
  var t8 = A[0];

  var t9 = t8 * t1;
  var t11 = t8 * t4;
  var t13 = A[3];
  var t14 = A[1];
  var t15 = t13 * t14;
  var t17 = A[2];
  var t18 = t13 * t17;
  var t20 = A[6];
  var t21 = t20 * t14;
  var t23 = t20 * t17;
  var t26 = 1.0 / (t9 * t2 - t11 * t5 - t15 * t2 + t18 * t5 + t21 * t4 - t23 * t1);
  invA[0] = (t1 * t2 - t4 * t5) * t26;
  invA[1] = -(t14 * t2 - t17 * t5) * t26;
  invA[2] = -(-t14 * t4 + t17 * t1) * t26;
  invA[3] = -(t13 * t2 - t4 * t20) * t26;
  invA[4] = (t8 * t2 - t23) * t26;
  invA[5] = -(t11 - t18) * t26;
  invA[6] = -(-t13 * t5 + t1 * t20) * t26;
  invA[7] = -(t8 * t5 - t21) * t26;
  invA[8] = (t9 - t15) * t26;
}

function mat3x3determinant (M) {
  var md = M.data;
  return md[0] * md[4] * md[8] -
    md[0] * md[5] * md[7] -
    md[3] * md[1] * md[8] +
    md[3] * md[2] * md[7] +
    md[6] * md[1] * md[5] -
    md[6] * md[2] * md[4]
}

// C = A * B
function multiply3x3 (C, A, B) {
  var Cd = C.data;
  var Ad = A.data;
  var Bd = B.data;
  var m10 = Ad[0];
  var m11 = Ad[1];
  var m12 = Ad[2];
  var m13 = Ad[3];
  var m14 = Ad[4];
  var m15 = Ad[5];
  var m16 = Ad[6];
  var m17 = Ad[7];
  var m18 = Ad[8];

  var m20 = Bd[0];
  var m21 = Bd[1];
  var m22 = Bd[2];
  var m23 = Bd[3];
  var m24 = Bd[4];
  var m25 = Bd[5];
  var m26 = Bd[6];
  var m27 = Bd[7];
  var m28 = Bd[8];

  Cd[0] = m10 * m20 + m11 * m23 + m12 * m26;
  Cd[1] = m10 * m21 + m11 * m24 + m12 * m27;
  Cd[2] = m10 * m22 + m11 * m25 + m12 * m28;
  Cd[3] = m13 * m20 + m14 * m23 + m15 * m26;
  Cd[4] = m13 * m21 + m14 * m24 + m15 * m27;
  Cd[5] = m13 * m22 + m14 * m25 + m15 * m28;
  Cd[6] = m16 * m20 + m17 * m23 + m18 * m26;
  Cd[7] = m16 * m21 + m17 * m24 + m18 * m27;
  Cd[8] = m16 * m22 + m17 * m25 + m18 * m28;
}

function meanRows (A) {
  var i, j;
  var p = 0;
  var nrows = A.rows;
  var ncols = A.cols;
  var Ad = A.data;
  var mean = new Array(ncols);

  for (j = 0; j < ncols; ++j) {
    mean[ j ] = 0.0;
  }

  for (i = 0; i < nrows; ++i) {
    for (j = 0; j < ncols; ++j, ++p) {
      mean[ j ] += Ad[ p ];
    }
  }

  for (j = 0; j < ncols; ++j) {
    mean[ j ] /= nrows;
  }

  return mean
}

function subRows (A, row) {
  var i, j;
  var p = 0;
  var nrows = A.rows;
  var ncols = A.cols;
  var Ad = A.data;

  for (i = 0; i < nrows; ++i) {
    for (j = 0; j < ncols; ++j, ++p) {
      Ad[ p ] -= row[ j ];
    }
  }
}

function addRows (A, row) {
  var i, j;
  var p = 0;
  var nrows = A.rows;
  var ncols = A.cols;
  var Ad = A.data;

  for (i = 0; i < nrows; ++i) {
    for (j = 0; j < ncols; ++j, ++p) {
      Ad[ p ] += row[ j ];
    }
  }
}

function swap$1 (A, i0, i1, t) {
  t = A[i0];
  A[i0] = A[i1];
  A[i1] = t;
}

function hypot (a, b) {
  a = Math.abs(a);
  b = Math.abs(b);
  if (a > b) {
    b /= a;
    return a * Math.sqrt(1.0 + b * b)
  }
  if (b > 0) {
    a /= b;
    return b * Math.sqrt(1.0 + a * a)
  }
  return 0.0
}

var EPSILON = 0.0000001192092896;
var FLT_MIN = 1E-37;

function JacobiSVDImpl (At, astep, _W, Vt, vstep, m, n, n1) {
  var eps = EPSILON * 2.0;
  var minval = FLT_MIN;
  var i = 0;
  var j = 0;
  var k = 0;
  var iter = 0;
  var maxIter = Math.max(m, 30);
  var Ai = 0;
  var Aj = 0;
  var Vi = 0;
  var Vj = 0;
  var changed = 0;
  var c = 0.0;
  var s = 0.0;
  var t = 0.0;
  var t0 = 0.0;
  var t1 = 0.0;
  var sd = 0.0;
  var beta = 0.0;
  var gamma = 0.0;
  var delta = 0.0;
  var a = 0.0;
  var p = 0.0;
  var b = 0.0;
  var seed = 0x1234;
  var val = 0.0;
  var val0 = 0.0;
  var asum = 0.0;

  var W = new Float64Array(n << 3);

  for (; i < n; i++) {
    for (k = 0, sd = 0; k < m; k++) {
      t = At[i * astep + k];
      sd += t * t;
    }
    W[i] = sd;

    if (Vt) {
      for (k = 0; k < n; k++) {
        Vt[i * vstep + k] = 0;
      }
      Vt[i * vstep + i] = 1;
    }
  }

  for (; iter < maxIter; iter++) {
    changed = 0;

    for (i = 0; i < n - 1; i++) {
      for (j = i + 1; j < n; j++) {
        Ai = (i * astep) | 0;
        Aj = (j * astep) | 0;
        a = W[i];
        p = 0;
        b = W[j];

        k = 2;
        p += At[Ai] * At[Aj];
        p += At[Ai + 1] * At[Aj + 1];

        for (; k < m; k++) { p += At[Ai + k] * At[Aj + k]; }

        if (Math.abs(p) <= eps * Math.sqrt(a * b)) { continue }

        p *= 2.0;
        beta = a - b;
        gamma = hypot(p, beta);
        if (beta < 0) {
          delta = (gamma - beta) * 0.5;
          s = Math.sqrt(delta / gamma);
          c = (p / (gamma * s * 2.0));
        } else {
          c = Math.sqrt((gamma + beta) / (gamma * 2.0));
          s = (p / (gamma * c * 2.0));
        }

        a = 0.0;
        b = 0.0;

        k = 2; // unroll
        t0 = c * At[Ai] + s * At[Aj];
        t1 = -s * At[Ai] + c * At[Aj];
        At[Ai] = t0; At[Aj] = t1;
        a += t0 * t0; b += t1 * t1;

        t0 = c * At[Ai + 1] + s * At[Aj + 1];
        t1 = -s * At[Ai + 1] + c * At[Aj + 1];
        At[Ai + 1] = t0; At[Aj + 1] = t1;
        a += t0 * t0; b += t1 * t1;

        for (; k < m; k++) {
          t0 = c * At[Ai + k] + s * At[Aj + k];
          t1 = -s * At[Ai + k] + c * At[Aj + k];
          At[Ai + k] = t0; At[Aj + k] = t1;

          a += t0 * t0; b += t1 * t1;
        }

        W[i] = a;
        W[j] = b;

        changed = 1;

        if (Vt) {
          Vi = (i * vstep) | 0;
          Vj = (j * vstep) | 0;

          k = 2;
          t0 = c * Vt[Vi] + s * Vt[Vj];
          t1 = -s * Vt[Vi] + c * Vt[Vj];
          Vt[Vi] = t0; Vt[Vj] = t1;

          t0 = c * Vt[Vi + 1] + s * Vt[Vj + 1];
          t1 = -s * Vt[Vi + 1] + c * Vt[Vj + 1];
          Vt[Vi + 1] = t0; Vt[Vj + 1] = t1;

          for (; k < n; k++) {
            t0 = c * Vt[Vi + k] + s * Vt[Vj + k];
            t1 = -s * Vt[Vi + k] + c * Vt[Vj + k];
            Vt[Vi + k] = t0; Vt[Vj + k] = t1;
          }
        }
      }
    }
    if (changed === 0) { break }
  }

  for (i = 0; i < n; i++) {
    for (k = 0, sd = 0; k < m; k++) {
      t = At[i * astep + k];
      sd += t * t;
    }
    W[i] = Math.sqrt(sd);
  }

  for (i = 0; i < n - 1; i++) {
    j = i;
    for (k = i + 1; k < n; k++) {
      if (W[j] < W[k]) { j = k; }
    }
    if (i !== j) {
      swap$1(W, i, j, sd);
      if (Vt) {
        for (k = 0; k < m; k++) {
          swap$1(At, i * astep + k, j * astep + k, t);
        }

        for (k = 0; k < n; k++) {
          swap$1(Vt, i * vstep + k, j * vstep + k, t);
        }
      }
    }
  }

  for (i = 0; i < n; i++) {
    _W[i] = W[i];
  }

  if (!Vt) {
    return
  }

  for (i = 0; i < n1; i++) {
    sd = i < n ? W[i] : 0;

    while (sd <= minval) {
      // if we got a zero singular value, then in order to get the corresponding left singular vector
      // we generate a random vector, project it to the previously computed left singular vectors,
      // subtract the projection and normalize the difference.
      val0 = (1.0 / m);
      for (k = 0; k < m; k++) {
        seed = (seed * 214013 + 2531011);
        val = (((seed >> 16) & 0x7fff) & 256) !== 0 ? val0 : -val0;
        At[i * astep + k] = val;
      }
      for (iter = 0; iter < 2; iter++) {
        for (j = 0; j < i; j++) {
          sd = 0;
          for (k = 0; k < m; k++) {
            sd += At[i * astep + k] * At[j * astep + k];
          }
          asum = 0.0;
          for (k = 0; k < m; k++) {
            t = (At[i * astep + k] - sd * At[j * astep + k]);
            At[i * astep + k] = t;
            asum += Math.abs(t);
          }
          asum = asum ? 1.0 / asum : 0;
          for (k = 0; k < m; k++) {
            At[i * astep + k] *= asum;
          }
        }
      }
      sd = 0;
      for (k = 0; k < m; k++) {
        t = At[i * astep + k];
        sd += t * t;
      }
      sd = Math.sqrt(sd);
    }

    s = (1.0 / sd);
    for (k = 0; k < m; k++) {
      At[i * astep + k] *= s;
    }
  }
}

function svd (A, W, U, V) {
  var at = 0;
  var i = 0;
  var _m = A.rows;
  var _n = A.cols;
  var m = _m;
  var n = _n;

  if (m < n) {
    at = 1;
    i = m;
    m = n;
    n = i;
  }

  var amt = new Matrix(m, m);
  var wmt = new Matrix(1, n);
  var vmt = new Matrix(n, n);

  if (at === 0) {
    transpose(amt, A);
  } else {
    for (i = 0; i < _n * _m; i++) {
      amt.data[i] = A.data[i];
    }
    for (; i < n * m; i++) {
      amt.data[i] = 0;
    }
  }

  JacobiSVDImpl(amt.data, m, wmt.data, vmt.data, n, m, n, m);

  if (W) {
    for (i = 0; i < n; i++) {
      W.data[i] = wmt.data[i];
    }
    for (; i < _n; i++) {
      W.data[i] = 0;
    }
  }

  if (at === 0) {
    if (U) { transpose(U, amt); }
    if (V) { transpose(V, vmt); }
  } else {
    if (U) { transpose(U, vmt); }
    if (V) { transpose(V, amt); }
  }
}

//

function m4new () {
  return new Float32Array([
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
  ])
}

function m4set (out, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  out[ 0 ] = n11; out[ 4 ] = n12; out[ 8 ] = n13; out[ 12 ] = n14;
  out[ 1 ] = n21; out[ 5 ] = n22; out[ 9 ] = n23; out[ 13 ] = n24;
  out[ 2 ] = n31; out[ 6 ] = n32; out[ 10 ] = n33; out[ 14 ] = n34;
  out[ 3 ] = n41; out[ 7 ] = n42; out[ 11 ] = n43; out[ 15 ] = n44;
}

function m4multiply (out, a, b) {
  var a11 = a[ 0 ];
  var a12 = a[ 4 ];
  var a13 = a[ 8 ];
  var a14 = a[ 12 ];
  var a21 = a[ 1 ];
  var a22 = a[ 5 ];
  var a23 = a[ 9 ];
  var a24 = a[ 13 ];
  var a31 = a[ 2 ];
  var a32 = a[ 6 ];
  var a33 = a[ 10 ];
  var a34 = a[ 14 ];
  var a41 = a[ 3 ];
  var a42 = a[ 7 ];
  var a43 = a[ 11 ];
  var a44 = a[ 15 ];

  var b11 = b[ 0 ];
  var b12 = b[ 4 ];
  var b13 = b[ 8 ];
  var b14 = b[ 12 ];
  var b21 = b[ 1 ];
  var b22 = b[ 5 ];
  var b23 = b[ 9 ];
  var b24 = b[ 13 ];
  var b31 = b[ 2 ];
  var b32 = b[ 6 ];
  var b33 = b[ 10 ];
  var b34 = b[ 14 ];
  var b41 = b[ 3 ];
  var b42 = b[ 7 ];
  var b43 = b[ 11 ];
  var b44 = b[ 15 ];

  out[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
  out[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
  out[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
  out[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

  out[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
  out[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
  out[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
  out[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

  out[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
  out[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
  out[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
  out[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

  out[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
  out[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
  out[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
  out[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
}

function m4makeScale (out, x, y, z) {
  m4set(out,
    x, 0, 0, 0,
    0, y, 0, 0,
    0, 0, z, 0,
    0, 0, 0, 1
  );
}
m4makeScale.__deps = [ m4set ];

function m4makeTranslation (out, x, y, z) {
  m4set(out,
    1, 0, 0, x,
    0, 1, 0, y,
    0, 0, 1, z,
    0, 0, 0, 1
  );
}
m4makeTranslation.__deps = [ m4set ];

function m4makeRotationY (out, theta) {
  var c = Math.cos(theta);
  var s = Math.sin(theta);
  m4set(out,
    c, 0, s, 0,
    0, 1, 0, 0,
    -s, 0, c, 0,
    0, 0, 0, 1
  );
}
m4makeRotationY.__deps = [ m4set ];

//

function m3new () {
  return new Float32Array([
    1, 0, 0,
    0, 1, 0,
    0, 0, 1
  ])
}

function m3makeNormal (out, m4) {
  var r0 = v3new([ m4[0], m4[1], m4[2] ]);
  var r1 = v3new([ m4[4], m4[5], m4[6] ]);
  var r2 = v3new([ m4[8], m4[9], m4[10] ]);
  var cp = v3new();
  //        [ r0 ]       [ r1 x r2 ]
  // M3x3 = [ r1 ]   N = [ r2 x r0 ]
  //        [ r2 ]       [ r0 x r1 ]
  v3cross(cp, r1, r2);
  out[ 0 ] = cp[ 0 ];
  out[ 1 ] = cp[ 1 ];
  out[ 2 ] = cp[ 2 ];
  v3cross(cp, r2, r0);
  out[ 3 ] = cp[ 0 ];
  out[ 4 ] = cp[ 1 ];
  out[ 5 ] = cp[ 2 ];
  v3cross(cp, r0, r1);
  out[ 6 ] = cp[ 0 ];
  out[ 7 ] = cp[ 1 ];
  out[ 8 ] = cp[ 2 ];
}
m3makeNormal.__deps = [ v3new, v3cross ];

/**
 * @file Principal Axes
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var negateVector = new Vector3(-1, -1, -1);
var tmpMatrix$1 = new Matrix4();

/**
 * Principal axes
 */
var PrincipalAxes = function PrincipalAxes (points) {
  // console.time( "PrincipalAxes" );

  var n = points.rows;
  var n3 = n / 3;
  var pointsT = new Matrix(n, 3);
  var A = new Matrix(3, 3);
  var W = new Matrix(1, 3);
  var U = new Matrix(3, 3);
  var V = new Matrix(3, 3);

      // calculate
  var mean = meanRows(points);
  subRows(points, mean);
  transpose(pointsT, points);
  multiplyABt(A, pointsT, pointsT);
  svd(A, W, U, V);

  // console.log( points, pointsT, mean )
  // console.log( n, A, W, U, V );

  // center
  var vm = new Vector3(mean[0], mean[1], mean[2]);

  // normalized
  var van = new Vector3(U.data[0], U.data[3], U.data[6]);
  var vbn = new Vector3(U.data[1], U.data[4], U.data[7]);
  var vcn = new Vector3(U.data[2], U.data[5], U.data[8]);

  // scaled
  var va = van.clone().multiplyScalar(Math.sqrt(W.data[0] / n3));
  var vb = vbn.clone().multiplyScalar(Math.sqrt(W.data[1] / n3));
  var vc = vcn.clone().multiplyScalar(Math.sqrt(W.data[2] / n3));

  // points
  this.begA = vm.clone().sub(va);
  this.endA = vm.clone().add(va);
  this.begB = vm.clone().sub(vb);
  this.endB = vm.clone().add(vb);
  this.begC = vm.clone().sub(vc);
  this.endC = vm.clone().add(vc);

  //

  this.center = vm;

  this.vecA = va;
  this.vecB = vb;
  this.vecC = vc;

  this.normVecA = van;
  this.normVecB = vbn;
  this.normVecC = vcn;

  // console.timeEnd( "PrincipalAxes" );
};

/**
 * Get the basis matrix descriping the axes
 * @param{Matrix4} [optionalTarget] - target object
 * @return {Matrix4} the basis
 */
PrincipalAxes.prototype.getBasisMatrix = function getBasisMatrix (optionalTarget) {
  var basis = optionalTarget || new Matrix4();

  basis.makeBasis(this.normVecB, this.normVecA, this.normVecC);
  if (basis.determinant() < 0) {
    basis.scale(negateVector);
  }

  return basis
};

/**
 * Get a quaternion descriping the axes rotation
 * @param{Quaternion} [optionalTarget] - target object
 * @return {Quaternion} the rotation
 */
PrincipalAxes.prototype.getRotationQuaternion = function getRotationQuaternion (optionalTarget) {
  var q = optionalTarget || new Quaternion();
  q.setFromRotationMatrix(this.getBasisMatrix(tmpMatrix$1));

  return q.inverse()
};

/**
 * Get the scale/length for each dimension for a box around the axes
 * to enclose the atoms of a structure
 * @param{Structure|StructureView} structure - the structure
 * @return {{d1a: Number, d2a: Number, d3a: Number, d1b: Number, d2b: Number, d3b: Number}} scale
 */
PrincipalAxes.prototype.getProjectedScaleForAtoms = function getProjectedScaleForAtoms (structure) {
  var d1a = -Infinity;
  var d1b = -Infinity;
  var d2a = -Infinity;
  var d2b = -Infinity;
  var d3a = -Infinity;
  var d3b = -Infinity;

  var p = new Vector3();
  var t = new Vector3();

  var center = this.center;
  var ax1 = this.normVecA;
  var ax2 = this.normVecB;
  var ax3 = this.normVecC;

  structure.eachAtom(function (ap) {
    projectPointOnVector(p.copy(ap), ax1, center);
    var dp1 = t.subVectors(p, center).normalize().dot(ax1);
    var dt1 = p.distanceTo(center);
    if (dp1 > 0) {
      if (dt1 > d1a) { d1a = dt1; }
    } else {
      if (dt1 > d1b) { d1b = dt1; }
    }

    projectPointOnVector(p.copy(ap), ax2, center);
    var dp2 = t.subVectors(p, center).normalize().dot(ax2);
    var dt2 = p.distanceTo(center);
    if (dp2 > 0) {
      if (dt2 > d2a) { d2a = dt2; }
    } else {
      if (dt2 > d2b) { d2b = dt2; }
    }

    projectPointOnVector(p.copy(ap), ax3, center);
    var dp3 = t.subVectors(p, center).normalize().dot(ax3);
    var dt3 = p.distanceTo(center);
    if (dp3 > 0) {
      if (dt3 > d3a) { d3a = dt3; }
    } else {
      if (dt3 > d3b) { d3b = dt3; }
    }
  });

  return {
    d1a: d1a,
    d2a: d2a,
    d3a: d3a,
    d1b: -d1b,
    d2b: -d2b,
    d3b: -d3b
  }
};

/**
 * @file Spatial Hash
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// import { Debug, Log } from "../globals.js";

function SpatialHash (atomStore, boundingBox) {
  var exp = 3;

  var bb = boundingBox;
  var minX = bb.min.x;
  var minY = bb.min.y;
  var minZ = bb.min.z;
  var boundX = ((bb.max.x - minX) >> exp) + 1;
  var boundY = ((bb.max.y - minY) >> exp) + 1;
  var boundZ = ((bb.max.z - minZ) >> exp) + 1;

  var n = boundX * boundY * boundZ;
  var an = atomStore.count;

  var xArray = atomStore.x;
  var yArray = atomStore.y;
  var zArray = atomStore.z;

  var i, j;

  var count = 0;
  var grid = new Uint32Array(n);
  var bucketIndex = new Int32Array(an);
  for (i = 0; i < an; ++i) {
    var x = (xArray[ i ] - minX) >> exp;
    var y = (yArray[ i ] - minY) >> exp;
    var z = (zArray[ i ] - minZ) >> exp;
    var idx = (((x * boundY) + y) * boundZ) + z;
    if ((grid[ idx ] += 1) === 1) {
      count += 1;
    }
    bucketIndex[ i ] = idx;
  }

  var bucketCount = new Uint16Array(count);
  for (i = 0, j = 0; i < n; ++i) {
    var c = grid[ i ];
    if (c > 0) {
      grid[ i ] = j + 1;
      bucketCount[ j ] = c;
      j += 1;
    }
  }

  var bucketOffset = new Uint32Array(count);
  for (i = 1; i < count; ++i) {
    bucketOffset[ i ] += bucketOffset[ i - 1 ] + bucketCount[ i - 1 ];
  }

  var bucketFill = new Uint16Array(count);
  var bucketArray = new Int32Array(an);
  for (i = 0; i < an; ++i) {
    var bucketIdx = grid[ bucketIndex[ i ] ];
    if (bucketIdx > 0) {
      var k = bucketIdx - 1;
      bucketArray[ bucketOffset[ k ] + bucketFill[ k ] ] = i;
      bucketFill[ k ] += 1;
    }
  }

    //

  function within (x, y, z, r) {
    var rSq = r * r;

    var loX = Math.max(0, (x - r - minX) >> exp);
    var loY = Math.max(0, (y - r - minY) >> exp);
    var loZ = Math.max(0, (z - r - minZ) >> exp);

    var hiX = Math.min(boundX, (x + r - minX) >> exp);
    var hiY = Math.min(boundY, (y + r - minY) >> exp);
    var hiZ = Math.min(boundZ, (z + r - minZ) >> exp);

    var result = [];

    for (var ix = loX; ix <= hiX; ++ix) {
      for (var iy = loY; iy <= hiY; ++iy) {
        for (var iz = loZ; iz <= hiZ; ++iz) {
          var idx = (((ix * boundY) + iy) * boundZ) + iz;
          var bucketIdx = grid[ idx ];

          if (bucketIdx > 0) {
            var k = bucketIdx - 1;
            var offset = bucketOffset[ k ];
            var count = bucketCount[ k ];
            var end = offset + count;

            for (var i = offset; i < end; ++i) {
              var atomIndex = bucketArray[ i ];
              var dx = xArray[ atomIndex ] - x;
              var dy = yArray[ atomIndex ] - y;
              var dz = zArray[ atomIndex ] - z;

              if (dx * dx + dy * dy + dz * dz <= rSq) {
                result.push(atomIndex);
              }
            }
          }
        }
      }
    }

    return result
  }

    // API

  this.within = within;
}

/**
 * @file Worker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function Worker (name) {
  var pending = 0;
  var postCount = 0;
  var onmessageDict = {};
  var onerrorDict = {};

  var blobUrl = window.URL.createObjectURL(WorkerRegistry.get(name));
  var worker = new window.Worker(blobUrl);

  WorkerRegistry.activeWorkerCount += 1;

  worker.onmessage = function (event) {
    pending -= 1;
    var postId = event.data.__postId;

    if (Debug) { Log.timeEnd('Worker.postMessage ' + name + ' #' + postId); }

    if (onmessageDict[ postId ]) {
      onmessageDict[ postId ].call(worker, event);
    } else {
            // Log.debug( "No onmessage", postId, name );
    }

    delete onmessageDict[ postId ];
    delete onerrorDict[ postId ];
  };

  worker.onerror = function (event) {
    pending -= 1;
    if (event.data) {
      var postId = event.data.__postId;
      if (onerrorDict[ postId ]) {
        onerrorDict[ postId ].call(worker, event);
      } else {
        Log.error('Worker.onerror', postId, name, event);
      }
      delete onmessageDict[ postId ];
      delete onerrorDict[ postId ];
    } else {
      Log.error('Worker.onerror', name, event);
    }
  };

    // API

  this.name = name;

  this.post = function (aMessage, transferList, onmessage, onerror) {
    onmessageDict[ postCount ] = onmessage;
    onerrorDict[ postCount ] = onerror;

    aMessage = aMessage || {};
    aMessage.__name = name;
    aMessage.__postId = postCount;
    aMessage.__debug = Debug;

    if (Debug) { Log.time('Worker.postMessage ' + name + ' #' + postCount); }

    try {
      worker.postMessage(aMessage, transferList);
    } catch (error) {
      Log.error('worker.post:', error);
      worker.postMessage(aMessage);
    }

    pending += 1;
    postCount += 1;

    return this
  };

  this.terminate = function () {
    if (worker) {
      worker.terminate();
      window.URL.revokeObjectURL(blobUrl);
      WorkerRegistry.activeWorkerCount -= 1;
    } else {
      Log.log('no worker to terminate');
    }
  };

  Object.defineProperties(this, {
    postCount: {
      get: function () { return postCount }
    },
    pending: {
      get: function () { return pending }
    }
  });
}

Worker.prototype.constructor = Worker;

/**
 * @file Worker Pool
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function WorkerPool (name, maxCount) {
  maxCount = Math.min(8, maxCount || 2);

  var pool = [];
  var count = 0;

    // API

  this.name = name;

  this.maxCount = maxCount;

  this.post = function (aMessage, transferList, onmessage, onerror) {
    var worker = this.getNextWorker();
    worker.post(aMessage, transferList, onmessage, onerror);

    return this
  };

  this.terminate = function () {
    pool.forEach(function (worker) {
      worker.terminate();
    });
  };

  this.getNextWorker = function () {
    var nextWorker;
    var minPending = Infinity;

    for (var i = 0; i < maxCount; ++i) {
      if (i >= count) {
        nextWorker = new Worker(name);
        pool.push(nextWorker);
        count += 1;
        break
      }

      var worker = pool[ i ];

      if (worker.pending === 0) {
        nextWorker = worker;
        break
      } else if (worker.pending < minPending) {
        minPending = worker.pending;
        nextWorker = worker;
      }
    }

    return nextWorker
  };

  Object.defineProperties(this, {
    count: {
      get: function () { return count }
    }
  });
}

WorkerPool.prototype.constructor = WorkerPool;

/**
 * @file Marching Cubes
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function getEdgeTable () {
  return new Uint32Array([
    0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
    0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
    0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
    0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
    0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
    0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
    0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
    0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
    0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
    0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
    0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
    0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
    0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
    0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
    0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
    0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
    0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
    0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
    0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
    0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
    0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
    0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
    0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
    0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
    0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
    0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
    0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
    0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
    0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
    0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
    0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
    0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
  ])
}

function getTriTable () {
  return new Int32Array([
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1,
    3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1,
    3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1,
    3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1,
    9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1,
    9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
    2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1,
    8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1,
    9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
    4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1,
    3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1,
    1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1,
    4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1,
    4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
    5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1,
    2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1,
    9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
    0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
    2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1,
    10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1,
    4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1,
    5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1,
    5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1,
    9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1,
    0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1,
    1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1,
    10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1,
    8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1,
    2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1,
    7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1,
    2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1,
    11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1,
    5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1,
    11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1,
    11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
    1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1,
    9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
    5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1,
    2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
    5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1,
    6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1,
    3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1,
    6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1,
    5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1,
    1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
    10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1,
    6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1,
    8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1,
    7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1,
    3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
    5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1,
    0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1,
    9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1,
    8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1,
    5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1,
    0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1,
    6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1,
    10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1,
    10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1,
    8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1,
    1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1,
    0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1,
    10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1,
    3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1,
    6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1,
    9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1,
    8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1,
    3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1,
    6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1,
    0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1,
    10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1,
    10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1,
    2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1,
    7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1,
    7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1,
    2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1,
    1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1,
    11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1,
    8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1,
    0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1,
    7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
    10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
    2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
    6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1,
    7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1,
    2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1,
    1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1,
    10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1,
    10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1,
    0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1,
    7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1,
    6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1,
    8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1,
    9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1,
    6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1,
    4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1,
    10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1,
    8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1,
    0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1,
    1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1,
    8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1,
    10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1,
    4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1,
    10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
    5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
    11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1,
    9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
    6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1,
    7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1,
    3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1,
    7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1,
    9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1,
    3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1,
    6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1,
    9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1,
    1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1,
    4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1,
    7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1,
    6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1,
    3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1,
    0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1,
    6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1,
    0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1,
    11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1,
    6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1,
    5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1,
    9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1,
    1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1,
    1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1,
    10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1,
    0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1,
    5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1,
    10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1,
    11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1,
    9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1,
    7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1,
    2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1,
    8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1,
    9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1,
    9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1,
    1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1,
    9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1,
    9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1,
    5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1,
    0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1,
    10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1,
    2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1,
    0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1,
    0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1,
    9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1,
    5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1,
    3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1,
    5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1,
    8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1,
    0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1,
    9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1,
    0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1,
    1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1,
    3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1,
    4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1,
    9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1,
    11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1,
    11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1,
    2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1,
    9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1,
    3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1,
    1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1,
    4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1,
    4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1,
    0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1,
    3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1,
    3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1,
    0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1,
    9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1,
    1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
  ])
}

// Triangles are constructed between points on cube edges.
// allowedContours[edge1][edge1] indicates which lines from a given
// triangle should be shown in line mode.

// Values are bitmasks:
// In loop over cubes we keep another bitmask indicating whether our current
// cell is the first x-value (1),
// first y-value (2) or first z-value (4) of the current loop.
// We draw all lines on leading faces but only draw trailing face lines the first
// time through the loop
// A value of 8 below means the edge is always drawn (leading face)

// E.g. the first row, lines between edge0 and other edges in the bottom
// x-y plane are only drawn for the first value of z, edges in the
// x-z plane are only drawn for the first value of y. No other lines
// are drawn as they're redundant
// The line between edge 1 and 5 is always drawn as it's on the leading edge

function getAllowedContours () {
  return [

    [ 0, 4, 4, 4, 2, 0, 0, 0, 2, 2, 0, 0 ], // 1 2 3 4 8 9
    [ 4, 0, 4, 4, 0, 8, 0, 0, 0, 8, 8, 0 ], // 0 2 3 5 9 10
    [ 4, 4, 0, 4, 0, 0, 8, 0, 0, 0, 8, 8 ], // 0 1 3 6 10 11
    [ 4, 4, 4, 0, 0, 0, 0, 1, 1, 0, 0, 1 ], // 0 1 2 7 8 11
    [ 2, 0, 0, 0, 0, 8, 8, 8, 2, 2, 0, 0 ], // 0 5 6 7 8 9
    [ 0, 8, 0, 0, 8, 0, 8, 8, 0, 8, 8, 0 ], // And rotate it
    [ 0, 0, 8, 0, 8, 8, 0, 8, 0, 0, 8, 8 ],
    [ 0, 0, 0, 1, 8, 8, 8, 0, 1, 0, 0, 1 ],
    [ 2, 0, 0, 1, 2, 0, 0, 1, 0, 2, 0, 1 ], // 0 3 4 7 9 11
    [ 2, 8, 0, 0, 2, 8, 0, 0, 2, 0, 8, 0 ], // And rotate some more
    [ 0, 8, 8, 0, 0, 8, 8, 0, 0, 8, 0, 8 ],
    [ 0, 0, 8, 1, 0, 0, 8, 1, 1, 0, 8, 0 ]

  ]
}

function MarchingCubes (field, nx, ny, nz, atomindex) {
    // Based on alteredq / http://alteredqualia.com/
    // port of greggman's ThreeD version of marching cubes to Three.js
    // http://webglsamples.googlecode.com/hg/blob/blob.html
    //
    // Adapted for NGL by Alexander Rose

  var isolevel = 0;
  var noNormals = false;
  var contour = false;
  var wrap = false;

  var n = nx * ny * nz;

    // deltas
  var yd = nx;
  var zd = nx * ny;

  var normalCache, vertexIndex;
  var count, icount;

  var ilist = new Int32Array(12);

  var positionArray = [];
  var normalArray = [];
  var indexArray = [];
  var atomindexArray = [];

  var edgeTable = getEdgeTable();
  var triTable = getTriTable();
  var allowedContours = getAllowedContours();

  var mx, my, mz;

    //

  this.triangulate = function (_isolevel, _noNormals, _box, _contour, _wrap) {
    isolevel = _isolevel;
    contour = _contour;
    wrap = _wrap;
        // Normals currently disabled in contour mode for performance (unused)
    noNormals = _noNormals || contour;

    if (!noNormals && !normalCache) {
      normalCache = new Float32Array(n * 3);
    }

    var vIndexLength = contour ? n * 3 : n;

    if (!vertexIndex || vertexIndex.length !== vIndexLength) {
            // In contour mode we want all drawn edges parallel to one axis,
            // so interpolation must be calculated in each dimension (rather
            // than re-using a single interpolated vertex)
      vertexIndex = new Int32Array(vIndexLength);
    }

    count = 0;
    icount = 0;

    if (_box !== undefined) {
      var min = _box[ 0 ].map(Math.round);
      var max = _box[ 1 ].map(Math.round);

      mx = nx * Math.ceil(Math.abs(min[ 0 ]) / nx);
      my = ny * Math.ceil(Math.abs(min[ 1 ]) / ny);
      mz = nz * Math.ceil(Math.abs(min[ 2 ]) / nz);

      triangulate(
                min[ 0 ], min[ 1 ], min[ 2 ],
                max[ 0 ], max[ 1 ], max[ 2 ]
            );
    } else {
      mx = my = mz = 0;

      triangulate();
    }

    positionArray.length = count * 3;
    if (!noNormals) { normalArray.length = count * 3; }
    indexArray.length = icount;
    if (atomindex) { atomindexArray.length = count; }

    return {
      position: new Float32Array(positionArray),
      normal: noNormals ? undefined : new Float32Array(normalArray),
      index: getUintArray(indexArray, positionArray.length / 3),
      atomindex: atomindex ? new Int32Array(atomindexArray) : undefined,
      contour: contour
    }
  };

    // polygonization

  function lerp (a, b, t) { return a + (b - a) * t }

  function index (x, y, z) {
    x = (x + mx) % nx;
    y = (y + my) % ny;
    z = (z + mz) % nz;
    return ((zd * z) + yd * y) + x
  }

  function VIntX (q, offset, x, y, z, valp1, valp2) {
    var _q = contour ? 3 * q : q;

    if (vertexIndex[ _q ] < 0) {
      var mu = (isolevel - valp1) / (valp2 - valp1);
      var nc = normalCache;

      var c = count * 3;

      positionArray[ c + 0 ] = x + mu;
      positionArray[ c + 1 ] = y;
      positionArray[ c + 2 ] = z;

      if (!noNormals) {
        var q3 = q * 3;

        normalArray[ c ] = -lerp(nc[ q3 ], nc[ q3 + 3 ], mu);
        normalArray[ c + 1 ] = -lerp(nc[ q3 + 1 ], nc[ q3 + 4 ], mu);
        normalArray[ c + 2 ] = -lerp(nc[ q3 + 2 ], nc[ q3 + 5 ], mu);
      }

      if (atomindex) { atomindexArray[ count ] = atomindex[ q + Math.round(mu) ]; }

      vertexIndex[ _q ] = count;
      ilist[ offset ] = count;

      count += 1;
    } else {
      ilist[ offset ] = vertexIndex[ _q ];
    }
  }

  function VIntY (q, offset, x, y, z, valp1, valp2) {
    var _q = contour ? 3 * q + 1 : q;

    if (vertexIndex[ _q ] < 0) {
      var mu = (isolevel - valp1) / (valp2 - valp1);
      var nc = normalCache;

      var c = count * 3;

      positionArray[ c ] = x;
      positionArray[ c + 1 ] = y + mu;
      positionArray[ c + 2 ] = z;

      if (!noNormals) {
        var q3 = q * 3;
        var q6 = q3 + yd * 3;

        normalArray[ c ] = -lerp(nc[ q3 ], nc[ q6 ], mu);
        normalArray[ c + 1 ] = -lerp(nc[ q3 + 1 ], nc[ q6 + 1 ], mu);
        normalArray[ c + 2 ] = -lerp(nc[ q3 + 2 ], nc[ q6 + 2 ], mu);
      }

      if (atomindex) { atomindexArray[ count ] = atomindex[ q + Math.round(mu) * yd ]; }

      vertexIndex[ _q ] = count;
      ilist[ offset ] = count;

      count += 1;
    } else {
      ilist[ offset ] = vertexIndex[ _q ];
    }
  }

  function VIntZ (q, offset, x, y, z, valp1, valp2) {
    var _q = contour ? 3 * q + 2 : q;

    if (vertexIndex[ _q ] < 0) {
      var mu = (isolevel - valp1) / (valp2 - valp1);
      var nc = normalCache;

      var c = count * 3;

      positionArray[ c ] = x;
      positionArray[ c + 1 ] = y;
      positionArray[ c + 2 ] = z + mu;

      if (!noNormals) {
        var q3 = q * 3;
        var q6 = q3 + zd * 3;

        normalArray[ c ] = -lerp(nc[ q3 ], nc[ q6 ], mu);
        normalArray[ c + 1 ] = -lerp(nc[ q3 + 1 ], nc[ q6 + 1 ], mu);
        normalArray[ c + 2 ] = -lerp(nc[ q3 + 2 ], nc[ q6 + 2 ], mu);
      }

      if (atomindex) { atomindexArray[ count ] = atomindex[ q + Math.round(mu) * zd ]; }

      vertexIndex[ _q ] = count;
      ilist[ offset ] = count;

      count += 1;
    } else {
      ilist[ offset ] = vertexIndex[ _q ];
    }
  }

  function compNorm (q) {
    var q3 = q * 3;

    if (normalCache[ q3 ] === 0.0) {
      normalCache[ q3 ] = field[ (q - 1 + n) % n ] - field[ (q + 1) % n ];
      normalCache[ q3 + 1 ] = field[ (q - yd + n) % n ] - field[ (q + yd) % n ];
      normalCache[ q3 + 2 ] = field[ (q - zd + n) % n ] - field[ (q + zd) % n ];
    }
  }

  function polygonize (fx, fy, fz, q, edgeFilter) {
        // cache indices
    var q1;
    var qy;
    var qz;
    var q1y;
    var q1z;
    var qyz;
    var q1yz;
    if (wrap) {
      q = index(fx, fy, fz);
      q1 = index(fx + 1, fy, fz);
      qy = index(fx, fy + 1, fz);
      qz = index(fx, fy, fz + 1);
      q1y = index(fx + 1, fy + 1, fz);
      q1z = index(fx + 1, fy, fz + 1);
      qyz = index(fx, fy + 1, fz + 1);
      q1yz = index(fx + 1, fy + 1, fz + 1);
    } else {
      q1 = q + 1;
      qy = q + yd;
      qz = q + zd;
      q1y = qy + 1;
      q1z = qz + 1;
      qyz = qy + zd;
      q1yz = qyz + 1;
    }

    var cubeindex = 0;
    var field0 = field[ q ];
    var field1 = field[ q1 ];
    var field2 = field[ qy ];
    var field3 = field[ q1y ];
    var field4 = field[ qz ];
    var field5 = field[ q1z ];
    var field6 = field[ qyz ];
    var field7 = field[ q1yz ];

    if (field0 < isolevel) { cubeindex |= 1; }
    if (field1 < isolevel) { cubeindex |= 2; }
    if (field2 < isolevel) { cubeindex |= 8; }
    if (field3 < isolevel) { cubeindex |= 4; }
    if (field4 < isolevel) { cubeindex |= 16; }
    if (field5 < isolevel) { cubeindex |= 32; }
    if (field6 < isolevel) { cubeindex |= 128; }
    if (field7 < isolevel) { cubeindex |= 64; }

        // if cube is entirely in/out of the surface - bail, nothing to draw

    var bits = edgeTable[ cubeindex ];
    if (bits === 0) { return 0 }

    var fx2 = fx + 1;
    var fy2 = fy + 1;
    var fz2 = fz + 1;

        // top of the cube

    if (bits & 1) {
      if (!noNormals) {
        compNorm(q);
        compNorm(q1);
      }
      VIntX(q, 0, fx, fy, fz, field0, field1);
    }

    if (bits & 2) {
      if (!noNormals) {
        compNorm(q1);
        compNorm(q1y);
      }
      VIntY(q1, 1, fx2, fy, fz, field1, field3);
    }

    if (bits & 4) {
      if (!noNormals) {
        compNorm(qy);
        compNorm(q1y);
      }
      VIntX(qy, 2, fx, fy2, fz, field2, field3);
    }

    if (bits & 8) {
      if (!noNormals) {
        compNorm(q);
        compNorm(qy);
      }
      VIntY(q, 3, fx, fy, fz, field0, field2);
    }

        // bottom of the cube

    if (bits & 16) {
      if (!noNormals) {
        compNorm(qz);
        compNorm(q1z);
      }
      VIntX(qz, 4, fx, fy, fz2, field4, field5);
    }

    if (bits & 32) {
      if (!noNormals) {
        compNorm(q1z);
        compNorm(q1yz);
      }
      VIntY(q1z, 5, fx2, fy, fz2, field5, field7);
    }

    if (bits & 64) {
      if (!noNormals) {
        compNorm(qyz);
        compNorm(q1yz);
      }
      VIntX(qyz, 6, fx, fy2, fz2, field6, field7);
    }

    if (bits & 128) {
      if (!noNormals) {
        compNorm(qz);
        compNorm(qyz);
      }
      VIntY(qz, 7, fx, fy, fz2, field4, field6);
    }

        // vertical lines of the cube

    if (bits & 256) {
      if (!noNormals) {
        compNorm(q);
        compNorm(qz);
      }
      VIntZ(q, 8, fx, fy, fz, field0, field4);
    }

    if (bits & 512) {
      if (!noNormals) {
        compNorm(q1);
        compNorm(q1z);
      }
      VIntZ(q1, 9, fx2, fy, fz, field1, field5);
    }

    if (bits & 1024) {
      if (!noNormals) {
        compNorm(q1y);
        compNorm(q1yz);
      }
      VIntZ(q1y, 10, fx2, fy2, fz, field3, field7);
    }

    if (bits & 2048) {
      if (!noNormals) {
        compNorm(qy);
        compNorm(qyz);
      }
      VIntZ(qy, 11, fx, fy2, fz, field2, field6);
    }

    var triIndex = cubeindex << 4;  // re-purpose cubeindex into an offset into triTable

    var e1;
    var e2;
    var e3;
    var i = 0;

        // here is where triangles are created

    while (triTable[ triIndex + i ] !== -1) {
      e1 = triTable[ triIndex + i ];
      e2 = triTable[ triIndex + i + 1 ];
      e3 = triTable[ triIndex + i + 2 ];

      if (contour) {
        if (allowedContours[ e1 ][ e2 ] & edgeFilter) {
          indexArray[ icount++ ] = ilist[ e1 ];
          indexArray[ icount++ ] = ilist[ e2 ];
        }
        if (allowedContours[ e2 ][ e3 ] & edgeFilter) {
          indexArray[ icount++ ] = ilist[ e2 ];
          indexArray[ icount++ ] = ilist[ e3 ];
        }
        if (allowedContours[ e1 ][ e3 ] & edgeFilter) {
          indexArray[ icount++ ] = ilist[ e1 ];
          indexArray[ icount++ ] = ilist[ e3 ];
        }
      } else {
                // FIXME normals flipping (see above) and vertex order reversal
        indexArray[ icount++ ] = ilist[ e2 ];
        indexArray[ icount++ ] = ilist[ e1 ];
        indexArray[ icount++ ] = ilist[ e3 ];
      }

      i += 3;
    }
  }

  function triangulate (xBeg, yBeg, zBeg, xEnd, yEnd, zEnd) {
    var q;
    var q3;
    var x;
    var y;
    var z;
    var yOffset;
    var zOffset;

    xBeg = xBeg !== undefined ? xBeg : 0;
    yBeg = yBeg !== undefined ? yBeg : 0;
    zBeg = zBeg !== undefined ? zBeg : 0;

    xEnd = xEnd !== undefined ? xEnd : nx - 1;
    yEnd = yEnd !== undefined ? yEnd : ny - 1;
    zEnd = zEnd !== undefined ? zEnd : nz - 1;

    if (!wrap) {
      if (noNormals) {
        xBeg = Math.max(0, xBeg);
        yBeg = Math.max(0, yBeg);
        zBeg = Math.max(0, zBeg);

        xEnd = Math.min(nx - 1, xEnd);
        yEnd = Math.min(ny - 1, yEnd);
        zEnd = Math.min(nz - 1, zEnd);
      } else {
        xBeg = Math.max(1, xBeg);
        yBeg = Math.max(1, yBeg);
        zBeg = Math.max(1, zBeg);

        xEnd = Math.min(nx - 2, xEnd);
        yEnd = Math.min(ny - 2, yEnd);
        zEnd = Math.min(nz - 2, zEnd);
      }
    }

    var xBeg2, yBeg2, zBeg2, xEnd2, yEnd2, zEnd2;

    if (!wrap) {
            // init part of the vertexIndex
            // (takes a significant amount of time to do for all)

      xBeg2 = Math.max(0, xBeg - 2);
      yBeg2 = Math.max(0, yBeg - 2);
      zBeg2 = Math.max(0, zBeg - 2);

      xEnd2 = Math.min(nx, xEnd + 2);
      yEnd2 = Math.min(ny, yEnd + 2);
      zEnd2 = Math.min(nz, zEnd + 2);

      for (z = zBeg2; z < zEnd2; ++z) {
        zOffset = zd * z;
        for (y = yBeg2; y < yEnd2; ++y) {
          yOffset = zOffset + yd * y;
          for (x = xBeg2; x < xEnd2; ++x) {
            if (contour) {
              q = 3 * (yOffset + x);
              vertexIndex[ q ] = -1;
              vertexIndex[ q + 1 ] = -1;
              vertexIndex[ q + 2 ] = -1;
            } else {
              q = (yOffset + x);
              vertexIndex[ q ] = -1;
            }
          }
        }
      }
    } else {
      xBeg2 = xBeg - 2;
      yBeg2 = yBeg - 2;
      zBeg2 = zBeg - 2;

      xEnd2 = xEnd + 2;
      yEnd2 = yEnd + 2;
      zEnd2 = zEnd + 2;

      for (z = zBeg2; z < zEnd2; ++z) {
        for (y = yBeg2; y < yEnd2; ++y) {
          for (x = xBeg2; x < xEnd2; ++x) {
            if (contour) {
              q3 = index(x, y, z) * 3;
              vertexIndex[ q3 ] = -1;
              vertexIndex[ q3 + 1 ] = -1;
              vertexIndex[ q3 + 2 ] = -1;
            } else {
              q = index(x, y, z);
              vertexIndex[ q ] = -1;
            }
          }
        }
      }
    }

    if (!wrap) {
            // clip space where the isovalue is too low

      var __break;
      var __xBeg = xBeg; var __yBeg = yBeg; var __zBeg = zBeg;
      var __xEnd = xEnd; var __yEnd = yEnd; var __zEnd = zEnd;

      __break = false;
      for (z = zBeg; z < zEnd; ++z) {
        for (y = yBeg; y < yEnd; ++y) {
          for (x = xBeg; x < xEnd; ++x) {
            q = ((nx * ny) * z) + (nx * y) + x;
            if (field[ q ] >= isolevel) {
              __zBeg = z;
              __break = true;
              break
            }
          }
          if (__break) { break }
        }
        if (__break) { break }
      }

      __break = false;
      for (y = yBeg; y < yEnd; ++y) {
        for (z = __zBeg; z < zEnd; ++z) {
          for (x = xBeg; x < xEnd; ++x) {
            q = ((nx * ny) * z) + (nx * y) + x;
            if (field[ q ] >= isolevel) {
              __yBeg = y;
              __break = true;
              break
            }
          }
          if (__break) { break }
        }
        if (__break) { break }
      }

      __break = false;
      for (x = xBeg; x < xEnd; ++x) {
        for (y = __yBeg; y < yEnd; ++y) {
          for (z = __zBeg; z < zEnd; ++z) {
            q = ((nx * ny) * z) + (nx * y) + x;
            if (field[ q ] >= isolevel) {
              __xBeg = x;
              __break = true;
              break
            }
          }
          if (__break) { break }
        }
        if (__break) { break }
      }

      __break = false;
      for (z = zEnd; z >= zBeg; --z) {
        for (y = yEnd; y >= yBeg; --y) {
          for (x = xEnd; x >= xBeg; --x) {
            q = ((nx * ny) * z) + (nx * y) + x;
            if (field[ q ] >= isolevel) {
              __zEnd = z;
              __break = true;
              break
            }
          }
          if (__break) { break }
        }
        if (__break) { break }
      }

      __break = false;
      for (y = yEnd; y >= yBeg; --y) {
        for (z = __zEnd; z >= zBeg; --z) {
          for (x = xEnd; x >= xBeg; --x) {
            q = ((nx * ny) * z) + (nx * y) + x;
            if (field[ q ] >= isolevel) {
              __yEnd = y;
              __break = true;
              break
            }
          }
          if (__break) { break }
        }
        if (__break) { break }
      }

      __break = false;
      for (x = xEnd; x >= xBeg; --x) {
        for (y = __yEnd; y >= yBeg; --y) {
          for (z = __zEnd; z >= zBeg; --z) {
            q = ((nx * ny) * z) + (nx * y) + x;
            if (field[ q ] >= isolevel) {
              __xEnd = x;
              __break = true;
              break
            }
          }
          if (__break) { break }
        }
        if (__break) { break }
      }

            //

      if (noNormals) {
        xBeg = Math.max(0, __xBeg - 1);
        yBeg = Math.max(0, __yBeg - 1);
        zBeg = Math.max(0, __zBeg - 1);

        xEnd = Math.min(nx - 1, __xEnd + 1);
        yEnd = Math.min(ny - 1, __yEnd + 1);
        zEnd = Math.min(nz - 1, __zEnd + 1);
      } else {
        xBeg = Math.max(1, __xBeg - 1);
        yBeg = Math.max(1, __yBeg - 1);
        zBeg = Math.max(1, __zBeg - 1);

        xEnd = Math.min(nx - 2, __xEnd + 1);
        yEnd = Math.min(ny - 2, __yEnd + 1);
        zEnd = Math.min(nz - 2, __zEnd + 1);
      }
    }

        // polygonize part of the grid
    var edgeFilter = 15;
    for (z = zBeg; z < zEnd; ++z, edgeFilter &= ~4) {
      zOffset = zd * z;
      edgeFilter |= 2;
      for (y = yBeg; y < yEnd; ++y, edgeFilter &= ~2) {
        yOffset = zOffset + yd * y;
        edgeFilter |= 1;
        for (x = xBeg; x < xEnd; ++x, edgeFilter &= ~1) {
          q = yOffset + x;
          polygonize(x, y, z, q, edgeFilter);
        }
      }
    }
  }
}
MarchingCubes.__deps = [ getEdgeTable, getTriTable, getAllowedContours, getUintArray ];

/**
 * @file Surface Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function laplacianSmooth (verts, faces, numiter, inflate) {
    // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
    // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
    //
    // Permission to use, copy, modify, and distribute this program for
    // any purpose, with or without fee, is hereby granted, provided that
    // the notices on the head, the reference information, and this
    // copyright notice appear in all copies or substantial portions of
    // the Software. It is provided "as is" without express or implied
    // warranty.
    //
    // ported to JavaScript and adapted to NGL by Alexander Rose

  numiter = numiter || 1;
  inflate = inflate || true;

  var nv = verts.length / 3;
  var nf = faces.length / 3;
  var norms;

  if (inflate) {
    norms = new Float32Array(nv * 3);
  }

  var tps = new Float32Array(nv * 3);

  var i;
  var ndeg = 20;
  var vertdeg = new Array(ndeg);

  for (i = 0; i < ndeg; ++i) {
    vertdeg[ i ] = new Uint32Array(nv);
  }

  for (i = 0; i < nv; ++i) {
    vertdeg[ 0 ][ i ] = 0;
  }

  var j, jl;
  var flagvert;

    // for each face

  for (i = 0; i < nf; ++i) {
    var ao = i * 3;
    var bo = i * 3 + 1;
    var co = i * 3 + 2;

        // vertex a

    flagvert = true;
    for (j = 0, jl = vertdeg[ 0 ][ faces[ao] ]; j < jl; ++j) {
      if (faces[ bo ] === vertdeg[ j + 1 ][ faces[ ao ] ]) {
        flagvert = false;
        break
      }
    }
    if (flagvert) {
      vertdeg[ 0 ][ faces[ ao ] ]++;
      vertdeg[ vertdeg[ 0 ][ faces[ ao ] ] ][ faces[ ao ] ] = faces[ bo ];
    }

    flagvert = true;
    for (j = 0, jl = vertdeg[ 0 ][ faces[ ao ] ]; j < jl; ++j) {
      if (faces[ co ] === vertdeg[ j + 1 ][ faces[ ao ] ]) {
        flagvert = false;
        break
      }
    }
    if (flagvert) {
      vertdeg[ 0 ][ faces[ ao ] ]++;
      vertdeg[ vertdeg[ 0 ][ faces[ ao ] ] ][ faces[ ao ] ] = faces[ co ];
    }

        // vertex b

    flagvert = true;
    for (j = 0, jl = vertdeg[ 0 ][ faces[ bo ] ]; j < jl; ++j) {
      if (faces[ ao ] === vertdeg[ j + 1 ][ faces[ bo ] ]) {
        flagvert = false;
        break
      }
    }
    if (flagvert) {
      vertdeg[ 0 ][ faces[ bo ] ]++;
      vertdeg[ vertdeg[ 0 ][ faces[ bo ] ] ][ faces[ bo ] ] = faces[ ao ];
    }

    flagvert = true;
    for (j = 0, jl = vertdeg[ 0 ][ faces[ bo ] ]; j < jl; ++j) {
      if (faces[ co ] === vertdeg[ j + 1 ][ faces[ bo ] ]) {
        flagvert = false;
        break
      }
    }
    if (flagvert) {
      vertdeg[ 0 ][ faces[ bo ] ]++;
      vertdeg[ vertdeg[ 0 ][ faces[ bo ] ] ][ faces[ bo ] ] = faces[ co ];
    }

        // vertex c

    flagvert = true;
    for (j = 0; j < vertdeg[ 0 ][ faces[ co ] ]; ++j) {
      if (faces[ ao ] === vertdeg[ j + 1 ][ faces[ co ] ]) {
        flagvert = false;
        break
      }
    }
    if (flagvert) {
      vertdeg[ 0 ][ faces[ co ] ]++;
      vertdeg[ vertdeg[ 0 ][ faces[ co ] ] ][ faces[ co ] ] = faces[ ao ];
    }

    flagvert = true;
    for (j = 0, jl = vertdeg[ 0 ][ faces[ co ] ]; j < jl; ++j) {
      if (faces[ bo ] === vertdeg[ j + 1 ][ faces[ co ] ]) {
        flagvert = false;
        break
      }
    }
    if (flagvert) {
      vertdeg[ 0 ][ faces[ co ] ]++;
      vertdeg[ vertdeg[ 0 ][ faces[ co ] ] ][ faces[ co ] ] = faces[ bo ];
    }
  }

  var wt = 1.0;
  var wt2 = 0.5;
  var i3, vi3, vdi, wtvi, wt2vi;
  var ssign = -1;
  var scaleFactor = 1;
  var outwt = 0.75 / (scaleFactor + 3.5);  // area-preserving

    // smoothing iterations

  for (var k = 0; k < numiter; ++k) {
        // for each vertex

    for (i = 0; i < nv; ++i) {
      i3 = i * 3;
      vdi = vertdeg[ 0 ][ i ];

      if (vdi < 3) {
        tps[ i3 ] = verts[ i3 ];
        tps[ i3 + 1 ] = verts[ i3 + 1 ];
        tps[ i3 + 2 ] = verts[ i3 + 2 ];
      } else if (vdi === 3 || vdi === 4) {
        tps[ i3 ] = 0;
        tps[ i3 + 1 ] = 0;
        tps[ i3 + 2 ] = 0;

        for (j = 0; j < vdi; ++j) {
          vi3 = vertdeg[ j + 1 ][ i ] * 3;
          tps[ i3 ] += verts[ vi3 ];
          tps[ i3 + 1 ] += verts[ vi3 + 1 ];
          tps[ i3 + 2 ] += verts[ vi3 + 2 ];
        }

        tps[ i3 ] += wt2 * verts[ i3 ];
        tps[ i3 + 1 ] += wt2 * verts[ i3 + 1 ];
        tps[ i3 + 2 ] += wt2 * verts[ i3 + 2 ];

        wt2vi = wt2 + vdi;
        tps[ i3 ] /= wt2vi;
        tps[ i3 + 1 ] /= wt2vi;
        tps[ i3 + 2 ] /= wt2vi;
      } else {
        tps[ i3 ] = 0;
        tps[ i3 + 1 ] = 0;
        tps[ i3 + 2 ] = 0;

        for (j = 0; j < vdi; ++j) {
          vi3 = vertdeg[ j + 1 ][ i ] * 3;
          tps[ i3 ] += verts[ vi3 ];
          tps[ i3 + 1 ] += verts[ vi3 + 1 ];
          tps[ i3 + 2 ] += verts[ vi3 + 2 ];
        }

        tps[ i3 ] += wt * verts[ i3 ];
        tps[ i3 + 1 ] += wt * verts[ i3 + 1 ];
        tps[ i3 + 2 ] += wt * verts[ i3 + 2 ];

        wtvi = wt + vdi;
        tps[ i3 ] /= wtvi;
        tps[ i3 + 1 ] /= wtvi;
        tps[ i3 + 2 ] /= wtvi;
      }
    }

    verts.set(tps);  // copy smoothed positions

    if (inflate) {
      computeVertexNormals(verts, faces, norms);
      var nv3 = nv * 3;

      for (i3 = 0; i3 < nv3; i3 += 3) {
                // if(verts[i].inout) ssign=1;
                // else ssign=-1;

        verts[ i3 ] += ssign * outwt * norms[ i3 ];
        verts[ i3 + 1 ] += ssign * outwt * norms[ i3 + 1 ];
        verts[ i3 + 2 ] += ssign * outwt * norms[ i3 + 2 ];
      }
    }
  }
}
laplacianSmooth.__deps = [ computeVertexNormals ];

function computeVertexNormals (position, index, normal) {
  var i, il;

  if (normal === undefined) {
    normal = new Float32Array(position.length);
  } else {
        // reset existing normals to zero
    for (i = 0, il = normal.length; i < il; i++) {
      normal[ i ] = 0;
    }
  }

  var a = new Float32Array(3);
  var b = new Float32Array(3);
  var c = new Float32Array(3);
  var cb = new Float32Array(3);
  var ab = new Float32Array(3);

  if (index) {
        // indexed elements
    for (i = 0, il = index.length; i < il; i += 3) {
      var ai = index[ i ] * 3;
      var bi = index[ i + 1 ] * 3;
      var ci = index[ i + 2 ] * 3;

      v3fromArray(a, position, ai);
      v3fromArray(b, position, bi);
      v3fromArray(c, position, ci);

      v3sub(cb, c, b);
      v3sub(ab, a, b);
      v3cross(cb, cb, ab);

      normal[ ai ] += cb[ 0 ];
      normal[ ai + 1 ] += cb[ 1 ];
      normal[ ai + 2 ] += cb[ 2 ];

      normal[ bi ] += cb[ 0 ];
      normal[ bi + 1 ] += cb[ 1 ];
      normal[ bi + 2 ] += cb[ 2 ];

      normal[ ci ] += cb[ 0 ];
      normal[ ci + 1 ] += cb[ 1 ];
      normal[ ci + 2 ] += cb[ 2 ];
    }
  } else {
        // non-indexed elements (unconnected triangle soup)
    for (i = 0, il = position.length; i < il; i += 9) {
      v3fromArray(a, position, i);
      v3fromArray(b, position, i + 3);
      v3fromArray(c, position, i + 6);

      v3sub(cb, c, b);
      v3sub(ab, a, b);
      v3cross(cb, cb, ab);

      normal[ i ] = cb[ 0 ];
      normal[ i + 1 ] = cb[ 1 ];
      normal[ i + 2 ] = cb[ 2 ];

      normal[ i + 3 ] = cb[ 0 ];
      normal[ i + 4 ] = cb[ 1 ];
      normal[ i + 5 ] = cb[ 2 ];

      normal[ i + 6 ] = cb[ 0 ];
      normal[ i + 7 ] = cb[ 1 ];
      normal[ i + 8 ] = cb[ 2 ];
    }
  }

  normalizeVector3array(normal);

  return normal
}
computeVertexNormals.__deps = [
  v3sub, v3cross, v3fromArray, normalizeVector3array
];

function getRadiusDict (radiusList) {
  var radiusDict = {};
  for (var i = 0, il = radiusList.length; i < il; ++i) {
    radiusDict[ radiusList[ i ] ] = true;
  }
  return radiusDict
}

function getSurfaceGrid (min, max, maxRadius, scaleFactor, extraMargin) {
    // need margin to avoid boundary/round off effects
  var margin = (1 / scaleFactor) * 3;
  margin += maxRadius;

  v3subScalar(min, min, extraMargin + margin);
  v3addScalar(max, max, extraMargin + margin);

  v3multiplyScalar(min, min, scaleFactor);
  v3floor(min, min);
  v3divideScalar(min, min, scaleFactor);

  v3multiplyScalar(max, max, scaleFactor);
  v3ceil(max, max);
  v3divideScalar(max, max, scaleFactor);

  var dim = new Float32Array(3);
  v3sub(dim, max, min);
  v3multiplyScalar(dim, dim, scaleFactor);
  v3ceil(dim, dim);
  v3addScalar(dim, dim, 1);

  var maxSize = Math.pow(10, 6) * 256;
  var tmpSize = dim[ 0 ] * dim[ 1 ] * dim[ 2 ] * 3;

  if (maxSize <= tmpSize) {
    scaleFactor *= Math.pow(maxSize / tmpSize, 1 / 3);

    v3multiplyScalar(min, min, scaleFactor);
    v3floor(min, min);
    v3divideScalar(min, min, scaleFactor);

    v3multiplyScalar(max, max, scaleFactor);
    v3ceil(max, max);
    v3divideScalar(max, max, scaleFactor);

    v3sub(dim, max, min);
    v3multiplyScalar(dim, dim, scaleFactor);
    v3ceil(dim, dim);
    v3addScalar(dim, dim, 1);
  }

  var tran = new Float32Array(min);
  v3negate(tran, tran);

    // coordinate transformation matrix
  var matrix = m4new();
  var mroty = m4new();
  m4makeRotationY(mroty, degToRad(90));
  m4multiply(matrix, matrix, mroty);

  var mscale = m4new();
  m4makeScale(
    mscale,
    -1 / scaleFactor,
    1 / scaleFactor,
    1 / scaleFactor
  );
  m4multiply(matrix, matrix, mscale);

  var mtrans = m4new();
  m4makeTranslation(
    mtrans,
    -scaleFactor * tran[2],
    -scaleFactor * tran[1],
    -scaleFactor * tran[0]
  );
  m4multiply(matrix, matrix, mtrans);

  return {
    dim: dim,
    tran: tran,
    matrix: matrix,
    scaleFactor: scaleFactor
  }
}
getSurfaceGrid.__deps = [
  degToRad,
  v3subScalar, v3addScalar, v3divideScalar, v3multiplyScalar,
  v3floor, v3ceil, v3sub, v3negate,
  m4new, m4multiply, m4makeTranslation, m4makeScale, m4makeRotationY
];

/**
 * @file Surface
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Surface
 */
var Surface = function Surface (name, path, data) {
  this.name = name || '';
  this.path = path || '';
  this.info = {};

  this.center = new Vector3();
  this.boundingBox = new Box3();

  if (data instanceof Geometry ||
          data instanceof BufferGeometry ||
          data instanceof Group
      ) {
          // to be removed
    this.fromGeometry(data);
  } else if (data) {
    this.set(
              data.position,
              data.index,
              data.normal,
              data.color,
              data.atomindex,
              data.contour
          );

    this.boundingBox.setFromArray(data.position);
    this.boundingBox.getCenter(this.center);
  }
};

var prototypeAccessors$15 = { type: {} };

prototypeAccessors$15.type.get = function () { return 'Surface' };

  /**
   * set surface data
   * @param {Float32Array} position - surface positions
   * @param {Int32Array} index - surface indices
   * @param {Float32Array} normal - surface normals
   * @param {Float32Array} color - surface colors
   * @param {Int32Array} atomindex - atom indices
   * @param {boolean} contour - contour mode flag
   * @return {undefined}
   */
Surface.prototype.set = function set (position, index, normal, color, atomindex, contour) {
      /**
       * @type {Float32Array}
       */
  this.position = position;
      /**
       * @type {Uint32Array|Uint16Array|undefined}
       */
  this.index = index;
      /**
       * @type {Float32Array|undefined}
       */
  this.normal = normal;
      /**
       * @type {Float32Array|undefined}
       */
  this.color = color;
      /**
       * @type {Int32Array|undefined}
       */
  this.atomindex = atomindex;

  this.size = position.length / 3;
  this.contour = contour;
};

Surface.prototype.fromGeometry = function fromGeometry (geometry) {
  if (Debug) { Log.time('GeometrySurface.fromGeometry'); }

  var geo;

  if (geometry instanceof Geometry) {
    geometry.computeVertexNormals(true);
    geo = new BufferGeometry().fromGeometry(geometry);
  } else if (geometry instanceof BufferGeometry) {
    geo = geometry;
  } else {
    geo = geometry[ 0 ];
  }

  if (!geo.boundingBox) { geo.computeBoundingBox(); }

  this.boundingBox.copy(geo.boundingBox);
  this.boundingBox.getCenter(this.center);

  var position, color, index, normal;

  if (geo instanceof BufferGeometry) {
    var attr = geo.attributes;
    var an = attr.normal ? attr.normal.array : false;

          // assume there are no normals if the first is zero
    if (!an || (an[ 0 ] === 0 && an[ 1 ] === 0 && an[ 2 ] === 0)) {
      geo.computeVertexNormals();
    }

    position = attr.position.array;
    index = attr.index ? attr.index.array : null;
    normal = attr.normal.array;
  }

  this.set(position, index, normal, color, undefined);

  if (Debug) { Log.timeEnd('GeometrySurface.setGeometry'); }
};

Surface.prototype.getPosition = function getPosition () {
  return this.position
};

Surface.prototype.getColor = function getColor (params) {
  var p = params || {};
  p.surface = this;

  var n = this.size;
  var array = new Float32Array(n * 3);
  var colormaker = ColormakerRegistry.getScheme(p);

  if (colormaker.volumeColor || p.scheme === 'random') {
    for (var i = 0; i < n; ++i) {
      colormaker.volumeColorToArray(i, array, i * 3);
    }
  } else if (colormaker.positionColor) {
    var v = new Vector3();
    var pos = this.position;

    for (var i$1 = 0; i$1 < n; ++i$1) {
      var i3 = i$1 * 3;
      v.set(pos[ i3 ], pos[ i3 + 1 ], pos[ i3 + 2 ]);
      colormaker.positionColorToArray(v, array, i3);
    }
  } else if (colormaker.atomColor && this.atomindex) {
    var atomProxy = p.structure.getAtomProxy();
    var atomindex = this.atomindex;

    for (var i$2 = 0; i$2 < n; ++i$2) {
      atomProxy.index = atomindex[ i$2 ];
      colormaker.atomColorToArray(atomProxy, array, i$2 * 3);
    }
  } else {
    var tc = new Color(p.value);
    uniformArray3(n, tc.r, tc.g, tc.b, array);
  }

  return array
};

Surface.prototype.getPicking = function getPicking (structure) {
  if (this.atomindex && structure) {
    return new AtomPicker(this.atomindex, structure)
  } else {
    return new SurfacePicker(serialArray(this.size), this)
  }
};

Surface.prototype.getNormal = function getNormal () {
  return this.normal
};

Surface.prototype.getSize = function getSize (size, scale) {
  return uniformArray(this.size, size * scale)
};

Surface.prototype.getIndex = function getIndex () {
  return this.index
};

Surface.prototype.getFilteredIndex = function getFilteredIndex (sele, structure) {
  if (sele && this.atomindex) {
    var selection = new Selection(sele);
    var atomSet = structure.getAtomSet(selection);
    var filteredIndex = [];

    var atomindex = this.atomindex;
    var index = this.index;
    var n = index.length;
    var elementSize = this.contour ? 2 : 3;

    var j = 0;

    for (var i = 0; i < n; i += elementSize) {
      var include = true;

      for (var a = 0; a < elementSize; a++) {
        var idx = index[ i + a ];
        var ai = atomindex[ idx ];
        if (!atomSet.get(ai)) {
          include = false;
          break
        }
      }

      if (!include) { continue }

      for (var a$1 = 0; a$1 < elementSize; a$1++, j++) {
        filteredIndex[ j ] = index[ i + a$1 ];
      }
    }

    return getUintArray(filteredIndex, this.position.length / 3)
  } else {
    return this.index
  }
};

Surface.prototype.getAtomindex = function getAtomindex () {
  return this.atomindex
};

Surface.prototype.dispose = function dispose () {

      //

};

Object.defineProperties( Surface.prototype, prototypeAccessors$15 );

/**
 * @file Volume
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function VolumeSurface (data, nx, ny, nz, atomindex) {
  var mc = new MarchingCubes(data, nx, ny, nz, atomindex);

  function getSurface (isolevel, smooth, box, matrix, contour, wrap) {
    var sd = mc.triangulate(isolevel, smooth, box, contour, wrap);
    if (smooth && !contour) {
      laplacianSmooth(sd.position, sd.index, smooth, true);
      sd.normal = computeVertexNormals(sd.position, sd.index);
    }
    if (matrix) {
      applyMatrix4toVector3array(matrix, sd.position);
      if (sd.normal) {
        var normalMatrix = m3new();
        m3makeNormal(normalMatrix, matrix);
        applyMatrix3toVector3array(normalMatrix, sd.normal);
      }
    }
    return sd
  }

  this.getSurface = getSurface;
}
VolumeSurface.__deps = [
  laplacianSmooth, computeVertexNormals, MarchingCubes,
  applyMatrix4toVector3array, applyMatrix3toVector3array,
  m3new, m3makeNormal
];

WorkerRegistry.add('surf', function func (e, callback) {
  var a = e.data.args;
  var p = e.data.params;
  if (a) {
    /* global self */
    self.volsurf = new VolumeSurface(a[0], a[1], a[2], a[3], a[4]);
  }
  if (p) {
    var sd = self.volsurf.getSurface(
            p.isolevel, p.smooth, p.box, p.matrix, p.contour, p.wrap
        );
    var transferList = [ sd.position.buffer, sd.index.buffer ];
    if (sd.normal) { transferList.push(sd.normal.buffer); }
    if (sd.atomindex) { transferList.push(sd.atomindex.buffer); }
    var data = {
      sd: sd,
      p: p
    };
    callback(data, transferList);
  }
}, [ VolumeSurface ]);

/**
 * Volume
 */
var Volume = function Volume (name, path, data, nx, ny, nz, atomindex) {
  this.name = name;
  this.path = path;

  this.matrix = new Matrix4();
  this.normalMatrix = new Matrix3();
  this.inverseMatrix = new Matrix4();
  this.center = new Vector3();
  this.boundingBox = new Box3();

  this.setData(data, nx, ny, nz, atomindex);
};

var prototypeAccessors$14 = { type: {},position: {},min: {},max: {},sum: {},mean: {},rms: {} };

prototypeAccessors$14.type.get = function () { return 'Volume' };

  /**
   * set volume data
   * @param {Float32array} data - volume 3d grid
   * @param {Integer} nx - x dimension of the 3d volume
   * @param {Integer} ny - y dimension of the 3d volume
   * @param {Integer} nz - z dimension of the 3d volume
   * @param {Int32Array} atomindex - atom indices corresponding to the cells in the 3d grid
   * @return {undefined}
   */
Volume.prototype.setData = function setData (data, nx, ny, nz, atomindex) {
  this.nx = nx || 1;
  this.ny = ny || 1;
  this.nz = nz || 1;

  this.data = data || new Float32Array(1);
  this.setAtomindex(atomindex);

  delete this._position;

  delete this._min;
  delete this._max;
  delete this._mean;
  delete this._rms;

  if (this.worker) { this.worker.terminate(); }
};

  /**
   * set transformation matrix
   * @param {Matrix4} matrix - 4x4 transformation matrix
   * @return {undefined}
   */
Volume.prototype.setMatrix = function setMatrix (matrix) {
  this.matrix.copy(matrix);

  var bb = this.boundingBox;
  var v = this.center;// temporary re-purposing

  var x = this.nx - 1;
  var y = this.ny - 1;
  var z = this.nz - 1;

  bb.makeEmpty();

  bb.expandByPoint(v.set(x, y, z));
  bb.expandByPoint(v.set(x, y, 0));
  bb.expandByPoint(v.set(x, 0, z));
  bb.expandByPoint(v.set(x, 0, 0));
  bb.expandByPoint(v.set(0, y, z));
  bb.expandByPoint(v.set(0, 0, z));
  bb.expandByPoint(v.set(0, y, 0));
  bb.expandByPoint(v.set(0, 0, 0));

  bb.applyMatrix4(this.matrix);
  bb.getCenter(this.center);

      // make normal matrix

  var me = this.matrix.elements;
  var r0 = new Vector3(me[0], me[1], me[2]);
  var r1 = new Vector3(me[4], me[5], me[6]);
  var r2 = new Vector3(me[8], me[9], me[10]);
  var cp = new Vector3();
      //      [ r0 ]     [ r1 x r2 ]
      // M3x3 = [ r1 ] N = [ r2 x r0 ]
      //      [ r2 ]     [ r0 x r1 ]
  var ne = this.normalMatrix.elements;
  cp.crossVectors(r1, r2);
  ne[ 0 ] = cp.x;
  ne[ 1 ] = cp.y;
  ne[ 2 ] = cp.z;
  cp.crossVectors(r2, r0);
  ne[ 3 ] = cp.x;
  ne[ 4 ] = cp.y;
  ne[ 5 ] = cp.z;
  cp.crossVectors(r0, r1);
  ne[ 6 ] = cp.x;
  ne[ 7 ] = cp.y;
  ne[ 8 ] = cp.z;

  this.inverseMatrix.getInverse(this.matrix);
};

  /**
   * set atom indices
   * @param {Int32Array} atomindex - atom indices corresponding to the cells in the 3d grid
   * @return {undefined}
   */
Volume.prototype.setAtomindex = function setAtomindex (atomindex) {
  this.atomindex = atomindex;
};

Volume.prototype.getBox = function getBox (center, size, target) {
  if (!target) { target = new Box3(); }

  target.set(center, center);
  target.expandByScalar(size);
  target.applyMatrix4(this.inverseMatrix);

  target.min.round();
  target.max.round();

  return target
};

Volume.prototype._getBox = function _getBox (center, size) {
  if (!center || !size) { return }

  if (!this.__box) { this.__box = new Box3(); }
  var box = this.getBox(center, size, this.__box);
  return [ box.min.toArray(), box.max.toArray() ]
};

Volume.prototype._makeSurface = function _makeSurface (sd, isolevel, smooth) {
  var name = this.name + '@' + isolevel.toPrecision(2);
  var surface = new Surface(name, '', sd);
  surface.info.isolevel = isolevel;
  surface.info.smooth = smooth;
  surface.info.volume = this;

  return surface
};

Volume.prototype.getSurface = function getSurface (isolevel, smooth, center, size, contour, wrap) {
  isolevel = isNaN(isolevel) ? this.getValueForSigma(2) : isolevel;
  smooth = defaults(smooth, 0);

      //

  if (this.volsurf === undefined) {
    this.volsurf = new VolumeSurface(
              this.data, this.nx, this.ny, this.nz, this.atomindex
          );
  }

  var box = this._getBox(center, size);
  var sd = this.volsurf.getSurface(
          isolevel, smooth, box, this.matrix.elements, contour, wrap
      );

  return this._makeSurface(sd, isolevel, smooth)
};

Volume.prototype.getSurfaceWorker = function getSurfaceWorker (isolevel, smooth, center, size, contour, wrap, callback) {
    var this$1 = this;

  isolevel = isNaN(isolevel) ? this.getValueForSigma(2) : isolevel;
  smooth = smooth || 0;

      //

  if (window.Worker) {
    if (this.workerPool === undefined) {
      this.workerPool = new WorkerPool('surf', 2);
    }

    var msg = {};
    var worker = this.workerPool.getNextWorker();

    if (worker.postCount === 0) {
      msg.args = [
        this.data, this.nx, this.ny, this.nz, this.atomindex
      ];
    }

    msg.params = {
      isolevel: isolevel,
      smooth: smooth,
      box: this._getBox(center, size),
      matrix: this.matrix.elements,
      contour: contour,
      wrap: wrap
    };

    worker.post(msg, undefined,

              function (e) {
                var sd = e.data.sd;
                var p = e.data.p;
                callback(this$1._makeSurface(sd, p.isolevel, p.smooth));
              },

              function (e) {
                console.warn(
                      'Volume.getSurfaceWorker error - trying without worker', e
                  );
                var surface = this$1.getSurface(isolevel, smooth, center, size, contour, wrap);
                callback(surface);
              }

          );
  } else {
    var surface = this.getSurface(isolevel, smooth, center, size, contour, wrap);
    callback(surface);
  }
};

Volume.prototype.getValueForSigma = function getValueForSigma (sigma) {
  return this.mean + defaults(sigma, 2) * this.rms
};

Volume.prototype.getSigmaForValue = function getSigmaForValue (value) {
  return (defaults(value, 0) - this.mean) / this.rms
};

prototypeAccessors$14.position.get = function () {
  if (!this._position) {
    var nz = this.nz;
    var ny = this.ny;
    var nx = this.nx;
    var position = new Float32Array(nx * ny * nz * 3);

    var p = 0;
    for (var z = 0; z < nz; ++z) {
      for (var y = 0; y < ny; ++y) {
        for (var x = 0; x < nx; ++x) {
          position[ p + 0 ] = x;
          position[ p + 1 ] = y;
          position[ p + 2 ] = z;
          p += 3;
        }
      }
    }

    applyMatrix4toVector3array(this.matrix.elements, position);
    this._position = position;
  }

  return this._position
};

Volume.prototype.getDataAtomindex = function getDataAtomindex () {
  return this.atomindex
};

Volume.prototype.getDataPosition = function getDataPosition () {
  return this.position
};

Volume.prototype.getDataColor = function getDataColor (params) {
  var p = params || {};
  p.volume = this;
  p.scale = p.scale || 'Spectral';
  p.domain = p.domain || [ this.min, this.max ];

  var colormaker = ColormakerRegistry.getScheme(p);

  var n = this.position.length / 3;
  var array = new Float32Array(n * 3);

      // var atoms = p.structure.atoms;
      // var atomindex = this.atomindex;

  for (var i = 0; i < n; ++i) {
    colormaker.volumeColorToArray(i, array, i * 3);
          // a = atoms[ atomindex[ i ] ];
          // if( a ) colormaker.atomColorToArray( a, array, i * 3 );
  }

  return array
};

Volume.prototype.getDataPicking = function getDataPicking () {
  var picking = serialArray(this.position.length / 3);
  return new VolumePicker(picking, this)
};

Volume.prototype.getDataSize = function getDataSize (size, scale) {
  var data = this.data;
  var n = this.position.length / 3;
  var array;

  switch (size) {
    case 'value':
      array = new Float32Array(data);
      break

    case 'abs-value':
      array = new Float32Array(data);
      for (var i = 0; i < n; ++i) {
        array[ i ] = Math.abs(array[ i ]);
      }
      break

    case 'value-min': {
      array = new Float32Array(data);
      var min = this.min;
      for (var i$1 = 0; i$1 < n; ++i$1) {
        array[ i$1 ] -= min;
      }
      break
    }

    case 'deviation':
      array = new Float32Array(data);
      break

    default:
      array = uniformArray(n, size);
      break
  }

  if (scale !== 1.0) {
    for (var i$2 = 0; i$2 < n; ++i$2) {
      array[ i$2 ] *= scale;
    }
  }

  return array
};

prototypeAccessors$14.min.get = function () {
  if (this._min === undefined) {
    this._min = arrayMin(this.data);
  }
  return this._min
};

prototypeAccessors$14.max.get = function () {
  if (this._max === undefined) {
    this._max = arrayMax$1(this.data);
  }
  return this._max
};

prototypeAccessors$14.sum.get = function () {
  if (this._sum === undefined) {
    this._sum = arraySum(this.data);
  }
  return this._sum
};

prototypeAccessors$14.mean.get = function () {
  if (this._mean === undefined) {
    this._mean = arrayMean(this.data);
  }
  return this._mean
};

prototypeAccessors$14.rms.get = function () {
  if (this._rms === undefined) {
    this._rms = arrayRms(this.data);
  }
  return this._rms
};

Volume.prototype.clone = function clone () {
  var vol = new Volume(

          this.name,
          this.path,

          this.data,

          this.nx,
          this.ny,
          this.nz,

          this.atomindex

      );

  vol.matrix.copy(this.matrix);
  vol.header = Object.assign({}, this.header);

  return vol
};

Volume.prototype.dispose = function dispose () {
  if (this.workerPool) { this.workerPool.terminate(); }
};

Object.defineProperties( Volume.prototype, prototypeAccessors$14 );

/**
 * @file Filtered Volume
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var FilteredVolume = function FilteredVolume (volume, minValue, maxValue, outside) {
  this.volume = volume;
  this.setFilter(minValue, maxValue, outside);
};

var prototypeAccessors$13 = { header: {},matrix: {},normalMatrix: {},inverseMatrix: {},center: {},boundingBox: {},min: {},max: {},mean: {},rms: {} };

prototypeAccessors$13.header.get = function () { return this.volume.header };
prototypeAccessors$13.matrix.get = function () { return this.volume.matrix };
prototypeAccessors$13.normalMatrix.get = function () { return this.volume.normalMatrix };
prototypeAccessors$13.inverseMatrix.get = function () { return this.volume.inverseMatrix };
prototypeAccessors$13.center.get = function () { return this.volume.center };
prototypeAccessors$13.boundingBox.get = function () { return this.volume.boundingBox };
prototypeAccessors$13.min.get = function () { return this.volume.min };
prototypeAccessors$13.max.get = function () { return this.volume.max };
prototypeAccessors$13.mean.get = function () { return this.volume.mean };
prototypeAccessors$13.rms.get = function () { return this.volume.rms };

FilteredVolume.prototype._getFilterHash = function _getFilterHash (minValue, maxValue, outside) {
  return JSON.stringify([ minValue, maxValue, outside ])
};

FilteredVolume.prototype.setFilter = function setFilter (minValue, maxValue, outside) {
  if (isNaN(minValue) && this.header) {
    minValue = this.header.DMEAN + 2.0 * this.header.ARMS;
  }

  minValue = (minValue !== undefined && !isNaN(minValue)) ? minValue : -Infinity;
  maxValue = defaults(maxValue, Infinity);
  outside = defaults(outside, false);

  var data = this.volume.data;
  var position = this.volume.position;
  var atomindex = this.volume.atomindex;

  var filterHash = this._getFilterHash(minValue, maxValue, outside);

  if (filterHash === this._filterHash) {
          // already filtered
    return
  } else if (minValue === -Infinity && maxValue === Infinity) {
    this.data = data;
    this.position = position;
    this.atomindex = atomindex;
  } else {
    var n = data.length;

    if (!this._dataBuffer) {
              // ArrayBuffer for re-use as Float32Array backend

      this._dataBuffer = new ArrayBuffer(n * 4);
      this._positionBuffer = new ArrayBuffer(n * 3 * 4);
      if (atomindex) { this._atomindexBuffer = new ArrayBuffer(n * 4); }
    }

    var filteredData = new Float32Array(this._dataBuffer);
    var filteredPosition = new Float32Array(this._positionBuffer);
    var filteredAtomindex;
    if (atomindex) { filteredAtomindex = new Uint32Array(this._atomindexBuffer); }

    var j = 0;

    for (var i = 0; i < n; ++i) {
      var i3 = i * 3;
      var v = data[ i ];

      if ((!outside && v >= minValue && v <= maxValue) ||
                  (outside && (v < minValue || v > maxValue))
              ) {
        var j3 = j * 3;

        filteredData[ j ] = v;

        filteredPosition[ j3 + 0 ] = position[ i3 + 0 ];
        filteredPosition[ j3 + 1 ] = position[ i3 + 1 ];
        filteredPosition[ j3 + 2 ] = position[ i3 + 2 ];

        if (atomindex) { filteredAtomindex[ j ] = atomindex[ i ]; }

        j += 1;
      }
    }

          // set views

    this.data = new Float32Array(this._dataBuffer, 0, j);
    this.position = new Float32Array(this._positionBuffer, 0, j * 3);
    if (atomindex) { this.atomindex = new Float32Array(this._atomindexBuffer, 0, j); }
  }

  this._filterHash = filterHash;
};

Object.defineProperties( FilteredVolume.prototype, prototypeAccessors$13 );

FilteredVolume.prototype.getValueForSigma = Volume.prototype.getValueForSigma;
FilteredVolume.prototype.getSigmaForValue = Volume.prototype.getSigmaForValue;

FilteredVolume.prototype.getDataAtomindex = Volume.prototype.getDataAtomindex;
FilteredVolume.prototype.getDataPosition = Volume.prototype.getDataPosition;
FilteredVolume.prototype.getDataColor = Volume.prototype.getDataColor;
FilteredVolume.prototype.getDataPicking = Volume.prototype.getDataPicking;
FilteredVolume.prototype.getDataSize = Volume.prototype.getDataSize;

/**
 * @file Bond Hash
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var BondHash = function BondHash (bondStore, atomCount) {
  if (Debug) { Log.time('BondHash init'); }

  var bondCount = bondStore.count;
  var atomIndex1Array = bondStore.atomIndex1;
  var atomIndex2Array = bondStore.atomIndex2;
  var countArray = new Uint8Array(atomCount);
  var offsetArray = new Int32Array(atomCount);

      // count bonds per atom
  for (var i = 0; i < bondCount; ++i) {
    countArray[ atomIndex1Array[ i ] ] += 1;
    countArray[ atomIndex2Array[ i ] ] += 1;
  }

      // get offsets to atom bonds
  for (var i$1 = 1; i$1 < atomCount; ++i$1) {
    offsetArray[ i$1 ] += offsetArray[ i$1 - 1 ] + countArray[ i$1 - 1 ];
  }

      // prepare index array
  var bondCount2 = bondCount * 2;
  var indexArray = new Int32Array(bondCount2);
  for (var j = 0; j < bondCount2; ++j) {
    indexArray[ j ] = -1;
  }

      // build index array
  for (var i$2 = 0; i$2 < bondCount; ++i$2) {
    var idx1 = atomIndex1Array[ i$2 ];
    var idx2 = atomIndex2Array[ i$2 ];
    var j1 = offsetArray[ idx1 ];
    while (indexArray[ j1 ] !== -1) {
      j1 += 1;
    }
    indexArray[ j1 ] = i$2;
    var j2 = offsetArray[ idx2 ];
    while (indexArray[ j2 ] !== -1) {
      j2 += 1;
    }
    indexArray[ j2 ] = i$2;
  }

  if (Debug) { Log.timeEnd('BondHash init'); }

  this.countArray = countArray;
  this.offsetArray = offsetArray;
  this.indexArray = indexArray;
};

/**
 * @file Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Store class
 * @interface
 */
var Store = function Store (size) {
  if (Number.isInteger(size)) {
    this._init(size);
  } else {
    this._init(0);
  }
};

/**
 * Initialize the store
 * @param{Integer} size - size to initialize
 * @return {undefined}
 */
Store.prototype._init = function _init (size) {
    var this$1 = this;

  this.length = size;
  this.count = 0;

  for (var i = 0, il = this.__fields.length; i < il; ++i) {
    var name = this$1.__fields[ i ][ 0 ];
    var itemSize = this$1.__fields[ i ][ 1 ];
    var arrayType = this$1.__fields[ i ][ 2 ];
    var arraySize = this$1.length * itemSize;

    this$1[ name ] = getTypedArray(arrayType, arraySize);
  }
};

/**
 * Resize the store to the new size
 * @param{Integer} size - new size
 * @return {undefined}
 */
Store.prototype.resize = function resize (size) {
    var this$1 = this;

  // Log.time( "Store.resize" );

  this.length = Math.round(size || 0);
  this.count = Math.min(this.count, this.length);

  for (var i = 0, il = this.__fields.length; i < il; ++i) {
    var name = this$1.__fields[ i ][ 0 ];
    var itemSize = this$1.__fields[ i ][ 1 ];
    var arraySize = this$1.length * itemSize;
    var tmpArray = new this$1[ name ].constructor(arraySize);

    if (this$1[ name ].length > arraySize) {
      tmpArray.set(this$1[ name ].subarray(0, arraySize));
    } else {
      tmpArray.set(this$1[ name ]);
    }
    this$1[ name ] = tmpArray;
  }

  // Log.timeEnd( "Store.resize" );
};

/**
 * Resize the store to 1.5 times its current size if full
 * @return {undefined}
 */
Store.prototype.growIfFull = function growIfFull () {
  if (this.count >= this.length) {
    var size = Math.round(this.length * 1.5);
    this.resize(Math.max(256, size));
  }
};

/**
 * Copy data from one store to another
 * @param{Store} other - store to copy from
 * @param{Integer} thisOffset - offset to start copying to
 * @param{Integer} otherOffset - offset to start copying from
 * @param{Integer} length - number of entries to copy
 * @return {undefined}
 */
Store.prototype.copyFrom = function copyFrom (other, thisOffset, otherOffset, length) {
    var this$1 = this;

  for (var i = 0, il = this.__fields.length; i < il; ++i) {
    var name = this$1.__fields[ i ][ 0 ];
    var itemSize = this$1.__fields[ i ][ 1 ];
    var thisField = this$1[ name ];
    var otherField = other[ name ];

    for (var j = 0; j < length; ++j) {
      var thisIndex = itemSize * (thisOffset + j);
      var otherIndex = itemSize * (otherOffset + j);
      for (var k = 0; k < itemSize; ++k) {
        thisField[ thisIndex + k ] = otherField[ otherIndex + k ];
      }
    }
  }
};

/**
 * Copy data within this store
 * @param{Integer} thisOffset - offset to start copying to
 * @param{Integer} otherOffset - offset to start copying from
 * @param{Integer} length - number of entries to copy
 * @return {undefined}
 */
Store.prototype.copyWithin = function copyWithin (offsetTarget, offsetSource, length) {
    var this$1 = this;

  for (var i = 0, il = this.__fields.length; i < il; ++i) {
    var name = this$1.__fields[ i ][ 0 ];
    var itemSize = this$1.__fields[ i ][ 1 ];
    var thisField = this$1[ name ];

    for (var j = 0; j < length; ++j) {
      var targetIndex = itemSize * (offsetTarget + j);
      var sourceIndex = itemSize * (offsetSource + j);
      for (var k = 0; k < itemSize; ++k) {
        thisField[ targetIndex + k ] = thisField[ sourceIndex + k ];
      }
    }
  }
};

/**
 * Sort entries in the store given the compare function
 * @param{[type]} compareFunction - function to sort by
 * @return {undefined}
 */
Store.prototype.sort = function sort (compareFunction) {
  Log.time('Store.sort');

  var thisStore = this;
  var tmpStore = new this.constructor(1);

  function swap (index1, index2) {
    if (index1 === index2) { return }
    tmpStore.copyFrom(thisStore, 0, index1, 1);
    thisStore.copyWithin(index1, index2, 1);
    thisStore.copyFrom(tmpStore, index2, 0, 1);
  }

  function quicksort (left, right) {
    if (left < right) {
      var pivot = Math.floor((left + right) / 2);
      var leftNew = left;
      var rightNew = right;
      do {
        while (compareFunction(leftNew, pivot) < 0) {
          leftNew += 1;
        }
        while (compareFunction(rightNew, pivot) > 0) {
          rightNew -= 1;
        }
        if (leftNew <= rightNew) {
          if (leftNew === pivot) {
            pivot = rightNew;
          } else if (rightNew === pivot) {
            pivot = leftNew;
          }
          swap(leftNew, rightNew);
          leftNew += 1;
          rightNew -= 1;
        }
      } while (leftNew <= rightNew)
      quicksort(left, rightNew);
      quicksort(leftNew, right);
    }
  }

  quicksort(0, this.count - 1);

  Log.timeEnd('Store.sort');
};

/**
 * Empty the store
 * @return {undefined}
 */
Store.prototype.clear = function clear () {
  this.count = 0;
};

/**
 * Dispose of the store entries and fields
 * @return {undefined}
 */
Store.prototype.dispose = function dispose () {
    var this$1 = this;

  delete this.length;
  delete this.count;

  for (var i = 0, il = this.__fields.length; i < il; ++i) {
    var name = this$1.__fields[ i ][ 0 ];
    delete this$1[ name ];
  }
};

/**
 * @file Bond Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Bond store
 */
var BondStore = (function (Store$$1) {
  function BondStore () {
    Store$$1.apply(this, arguments);
  }

  if ( Store$$1 ) BondStore.__proto__ = Store$$1;
  BondStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
  BondStore.prototype.constructor = BondStore;

  var prototypeAccessors = { __fields: {} };

  prototypeAccessors.__fields.get = function () {
    return [
      [ 'atomIndex1', 1, 'int32' ],
      [ 'atomIndex2', 1, 'int32' ],
      [ 'bondOrder', 1, 'int8' ]
    ]
  };

  BondStore.prototype.addBond = function addBond (atom1, atom2, bondOrder) {
    this.growIfFull();

    var i = this.count;
    var ai1 = atom1.index;
    var ai2 = atom2.index;

    if (ai1 < ai2) {
      this.atomIndex1[ i ] = ai1;
      this.atomIndex2[ i ] = ai2;
    } else {
      this.atomIndex2[ i ] = ai1;
      this.atomIndex1[ i ] = ai2;
    }
    if (bondOrder) { this.bondOrder[ i ] = bondOrder; }

    this.count += 1;
  };

  BondStore.prototype.addBondIfConnected = function addBondIfConnected (atom1, atom2, bondOrder) {
    if (atom1.connectedTo(atom2)) {
      this.addBond(atom1, atom2, bondOrder);
      return true
    }

    return false
  };

  Object.defineProperties( BondStore.prototype, prototypeAccessors );

  return BondStore;
}(Store));

/**
 * @file Atom Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Atom store
 */
var AtomStore = (function (Store$$1) {
  function AtomStore () {
    Store$$1.apply(this, arguments);
  }

  if ( Store$$1 ) AtomStore.__proto__ = Store$$1;
  AtomStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
  AtomStore.prototype.constructor = AtomStore;

  var prototypeAccessors = { __fields: {} };

  prototypeAccessors.__fields.get = function () {
    return [
      [ 'residueIndex', 1, 'uint32' ],
      [ 'atomTypeId', 1, 'uint16' ],

      [ 'x', 1, 'float32' ],
      [ 'y', 1, 'float32' ],
      [ 'z', 1, 'float32' ],
      [ 'serial', 1, 'int32' ],
      [ 'bfactor', 1, 'float32' ],
      [ 'altloc', 1, 'uint8' ],
      [ 'occupancy', 1, 'float32' ]
    ]
  };

  AtomStore.prototype.setAltloc = function setAltloc (i, str) {
    this.altloc[ i ] = str.charCodeAt(0);
  };

  AtomStore.prototype.getAltloc = function getAltloc (i) {
    var code = this.altloc[ i ];
    return code ? String.fromCharCode(code) : ''
  };

  Object.defineProperties( AtomStore.prototype, prototypeAccessors );

  return AtomStore;
}(Store));

/**
 * @file Residue Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Residue store
 */
var ResidueStore = (function (Store$$1) {
  function ResidueStore () {
    Store$$1.apply(this, arguments);
  }

  if ( Store$$1 ) ResidueStore.__proto__ = Store$$1;
  ResidueStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
  ResidueStore.prototype.constructor = ResidueStore;

  var prototypeAccessors = { __fields: {} };

  prototypeAccessors.__fields.get = function () {
    return [
      [ 'chainIndex', 1, 'uint32' ],
      [ 'atomOffset', 1, 'uint32' ],
      [ 'atomCount', 1, 'uint16' ],
      [ 'residueTypeId', 1, 'uint16' ],

      [ 'resno', 1, 'int32' ],
      [ 'sstruc', 1, 'uint8' ],
      [ 'inscode', 1, 'uint8' ]
    ]
  };

  ResidueStore.prototype.setSstruc = function setSstruc (i, str) {
    this.sstruc[ i ] = str.charCodeAt(0);
  };

  ResidueStore.prototype.getSstruc = function getSstruc (i) {
    var code = this.sstruc[ i ];
    return code ? String.fromCharCode(code) : ''
  };

  ResidueStore.prototype.setInscode = function setInscode (i, str) {
    this.inscode[ i ] = str.charCodeAt(0);
  };

  ResidueStore.prototype.getInscode = function getInscode (i) {
    var code = this.inscode[ i ];
    return code ? String.fromCharCode(code) : ''
  };

  Object.defineProperties( ResidueStore.prototype, prototypeAccessors );

  return ResidueStore;
}(Store));

/**
 * @file Chain Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Chain store
 */
var ChainStore = (function (Store$$1) {
  function ChainStore () {
    Store$$1.apply(this, arguments);
  }

  if ( Store$$1 ) ChainStore.__proto__ = Store$$1;
  ChainStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
  ChainStore.prototype.constructor = ChainStore;

  var prototypeAccessors = { __fields: {} };

  prototypeAccessors.__fields.get = function () {
    return [
      [ 'entityIndex', 1, 'uint16' ],
      [ 'modelIndex', 1, 'uint16' ],
      [ 'residueOffset', 1, 'uint32' ],
      [ 'residueCount', 1, 'uint32' ],

      [ 'chainname', 4, 'uint8' ],
      [ 'chainid', 4, 'uint8' ]
    ]
  };

  ChainStore.prototype.setChainname = function setChainname (i, str) {
    var j = 4 * i;
    this.chainname[ j ] = str.charCodeAt(0);
    this.chainname[ j + 1 ] = str.charCodeAt(1);
    this.chainname[ j + 2 ] = str.charCodeAt(2);
    this.chainname[ j + 3 ] = str.charCodeAt(3);
  };

  ChainStore.prototype.getChainname = function getChainname (i) {
    var this$1 = this;

    var chainname = '';
    for (var k = 0; k < 4; ++k) {
      var code = this$1.chainname[ 4 * i + k ];
      if (code) {
        chainname += String.fromCharCode(code);
      } else {
        break
      }
    }
    return chainname
  };

  ChainStore.prototype.setChainid = function setChainid (i, str) {
    var j = 4 * i;
    this.chainid[ j ] = str.charCodeAt(0);
    this.chainid[ j + 1 ] = str.charCodeAt(1);
    this.chainid[ j + 2 ] = str.charCodeAt(2);
    this.chainid[ j + 3 ] = str.charCodeAt(3);
  };

  ChainStore.prototype.getChainid = function getChainid (i) {
    var this$1 = this;

    var chainid = '';
    for (var k = 0; k < 4; ++k) {
      var code = this$1.chainid[ 4 * i + k ];
      if (code) {
        chainid += String.fromCharCode(code);
      } else {
        break
      }
    }
    return chainid
  };

  Object.defineProperties( ChainStore.prototype, prototypeAccessors );

  return ChainStore;
}(Store));

/**
 * @file Model Store
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Model store
 */
var ModelStore = (function (Store$$1) {
  function ModelStore () {
    Store$$1.apply(this, arguments);
  }

  if ( Store$$1 ) ModelStore.__proto__ = Store$$1;
  ModelStore.prototype = Object.create( Store$$1 && Store$$1.prototype );
  ModelStore.prototype.constructor = ModelStore;

  var prototypeAccessors = { __fields: {} };

  prototypeAccessors.__fields.get = function () {
    return [
      [ 'chainOffset', 1, 'uint32' ],
      [ 'chainCount', 1, 'uint32' ]
    ]
  };

  Object.defineProperties( ModelStore.prototype, prototypeAccessors );

  return ModelStore;
}(Store));

/**
 * @file Helixorient
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function Helixorient (polymer) {
  this.polymer = polymer;

  this.size = polymer.residueCount;
}

Helixorient.prototype = {

  constructor: Helixorient,

  getCenterIterator: function (smooth) {
    var center = this.getPosition().center;
    var n = center.length / 3;

    var i = 0;
    var j = -1;

    var cache = [
      new Vector3(),
      new Vector3(),
      new Vector3(),
      new Vector3()
    ];

    function next () {
      var vector = this.get(j);
      j += 1;
      return vector
    }

    function get (idx) {
      idx = Math.min(n - 1, Math.max(0, idx));
      var v = cache[ i % 4 ];
      var idx3 = 3 * idx;
      v.fromArray(center, idx3);
      if (smooth) {
        var l, k, t;
        var w = Math.min(smooth, idx, n - idx - 1);
        for (k = 1; k <= w; ++k) {
          l = k * 3;
          t = (w + 1 - k) / (w + 1);
          v.x += t * center[ idx3 - l + 0 ] + t * center[ idx3 + l + 0 ];
          v.y += t * center[ idx3 - l + 1 ] + t * center[ idx3 + l + 1 ];
          v.z += t * center[ idx3 - l + 2 ] + t * center[ idx3 + l + 2 ];
        }
        v.x /= w + 1;
        v.y /= w + 1;
        v.z /= w + 1;
      }
      i += 1;
      return v
    }

    function reset () {
      i = 0;
      j = -1;
    }

    return {
      size: n,
      next: next,
      get: get,
      reset: reset
    }
  },

  getColor: function (params) {
    var polymer = this.polymer;
    var structure = polymer.structure;
    var n = polymer.residueCount;
    var residueIndexStart = polymer.residueIndexStart;

    var col = new Float32Array(n * 3);

    var p = params || {};
    p.structure = structure;

    var colormaker = ColormakerRegistry.getScheme(p);

    var rp = structure.getResidueProxy();
    var ap = structure.getAtomProxy();

    for (var i = 0; i < n; ++i) {
      rp.index = residueIndexStart + i;
      ap.index = rp.traceAtomIndex;

      colormaker.atomColorToArray(ap, col, i * 3);
    }

    return {
      'color': col
    }
  },

  getPicking: function () {
    var polymer = this.polymer;
    var structure = polymer.structure;
    var n = polymer.residueCount;
    var residueIndexStart = polymer.residueIndexStart;

    var pick = new Float32Array(n);
    var rp = structure.getResidueProxy();

    for (var i = 0; i < n; ++i) {
      rp.index = residueIndexStart + i;
      pick[ i ] = rp.traceAtomIndex;
    }

    return {
      'picking': new AtomPicker(pick, structure)
    }
  },

  getSize: function (type, scale) {
    var polymer = this.polymer;
    var structure = polymer.structure;
    var n = polymer.residueCount;
    var residueIndexStart = polymer.residueIndexStart;

    var size = new Float32Array(n);
    var radiusFactory = new RadiusFactory(type, scale);

    var rp = structure.getResidueProxy();
    var ap = structure.getAtomProxy();

    for (var i = 0; i < n; ++i) {
      rp.index = residueIndexStart + i;
      ap.index = rp.traceAtomIndex;
      size[ i ] = radiusFactory.atomRadius(ap);
    }

    return {
      'size': size
    }
  },

  getPosition: function () {
    var polymer = this.polymer;
    var structure = polymer.structure;
    var n = polymer.residueCount;
    var n3 = n - 3;

    var center = new Float32Array(3 * n);
    var axis = new Float32Array(3 * n);
    var diff = new Float32Array(n);
    var radius = new Float32Array(n);
    var rise = new Float32Array(n);
    var twist = new Float32Array(n);
    var resdir = new Float32Array(3 * n);

    var tmp, j, i;
    var diff13Length, diff24Length;

    var r12 = new Vector3();
    var r23 = new Vector3();
    var r34 = new Vector3();

    var diff13 = new Vector3();
    var diff24 = new Vector3();

    var v1 = new Vector3();
    var v2 = new Vector3();
    var vt = new Vector3();

    var _axis = new Vector3();
    var _prevAxis = new Vector3();

    var _resdir = new Vector3();
    var _center = new Vector3(0, 0, 0);

    var type = 'trace';
    var a1 = structure.getAtomProxy();
    var a2 = structure.getAtomProxy(polymer.getAtomIndexByType(0, type));
    var a3 = structure.getAtomProxy(polymer.getAtomIndexByType(1, type));
    var a4 = structure.getAtomProxy(polymer.getAtomIndexByType(2, type));

    for (i = 0; i < n3; ++i) {
      a1.index = a2.index;
      a2.index = a3.index;
      a3.index = a4.index;
      a4.index = polymer.getAtomIndexByType(i + 3, type);

      j = 3 * i;

            // ported from GROMACS src/tools/gmx_helixorient.c

      r12.subVectors(a2, a1);
      r23.subVectors(a3, a2);
      r34.subVectors(a4, a3);

      diff13.subVectors(r12, r23);
      diff24.subVectors(r23, r34);

      _axis.crossVectors(diff13, diff24).normalize();
      _axis.toArray(axis, j);

      if (i > 0) {
        diff[ i ] = _axis.angleTo(_prevAxis);
      }

      tmp = Math.cos(diff13.angleTo(diff24));
      twist[ i ] = 180.0 / Math.PI * Math.acos(tmp);

      diff13Length = diff13.length();
      diff24Length = diff24.length();

      radius[ i ] = (
                Math.sqrt(diff24Length * diff13Length) /
                // clamp, to avoid instabilities for when
                // angle between diff13 and diff24 is near 0
                Math.max(2.0, 2.0 * (1.0 - tmp))
            );

      rise[ i ] = Math.abs(r23.dot(_axis));

            //

      v1.copy(diff13).multiplyScalar(radius[ i ] / diff13Length);
      v2.copy(diff24).multiplyScalar(radius[ i ] / diff24Length);

      v1.subVectors(a2, v1);
      v2.subVectors(a3, v2);

      v1.toArray(center, j + 3);
      v2.toArray(center, j + 6);

            //

      _resdir.subVectors(a1, _center);
      _resdir.toArray(resdir, j);

      _prevAxis.copy(_axis);
      _center.copy(v1);
    }

        //

        // calc axis as dir of second and third center pos
        // project first traceAtom onto axis to get first center pos
    v1.fromArray(center, 3);
    v2.fromArray(center, 6);
    _axis.subVectors(v1, v2).normalize();
        // _center.copy( res[ 0 ].getTraceAtom() );
    a1.index = polymer.getAtomIndexByType(0, type);
    _center.copy(a1);
    vt.copy(a1);
    projectPointOnVector(vt, _axis, v1);
    vt.toArray(center, 0);

        // calc first resdir
    _resdir.subVectors(_center, v1);
    _resdir.toArray(resdir, 0);

        // calc axis as dir of n-1 and n-2 center pos
        // project last traceAtom onto axis to get last center pos
    v1.fromArray(center, 3 * n - 6);
    v2.fromArray(center, 3 * n - 9);
    _axis.subVectors(v1, v2).normalize();
        // _center.copy( res[ n - 1 ].getTraceAtom() );
    a1.index = polymer.getAtomIndexByType(n - 1, type);
    _center.copy(a1);
    vt.copy(a1);
    projectPointOnVector(vt, _axis, v1);
    vt.toArray(center, 3 * n - 3);

        // calc last three resdir
    for (i = n - 3; i < n; ++i) {
      v1.fromArray(center, 3 * i);
            // _center.copy( res[ i ].getTraceAtom() );
      a1.index = polymer.getAtomIndexByType(i, type);
      _center.copy(a1);

      _resdir.subVectors(_center, v1);
      _resdir.toArray(resdir, 3 * i);
    }

        // average measures to define them on the residues

    var resRadius = new Float32Array(n);
    var resTwist = new Float32Array(n);
    var resRise = new Float32Array(n);
    var resBending = new Float32Array(n);

    resRadius[ 1 ] = radius[ 0 ];
    resTwist[ 1 ] = twist[ 0 ];
    resRise[ 1 ] = radius[ 0 ];

    for (i = 2; i < n - 2; ++i) {
      resRadius[ i ] = 0.5 * (radius[ i - 2 ] + radius[ i - 1 ]);
      resTwist[ i ] = 0.5 * (twist[ i - 2 ] + twist[ i - 1 ]);
      resRise[ i ] = 0.5 * (rise[ i - 2 ] + rise[ i - 1 ]);

      v1.fromArray(axis, 3 * (i - 2));
      v2.fromArray(axis, 3 * (i - 1));
      resBending[ i ] = 180.0 / Math.PI * Math.acos(Math.cos(v1.angleTo(v2)));
    }

    resRadius[ n - 2 ] = radius[ n - 4 ];
    resTwist[ n - 2 ] = twist[ n - 4 ];
    resRise[ n - 2 ] = rise[ n - 4 ];

        // average helix axes to define them on the residues

    var resAxis = new Float32Array(3 * n);

    copyArray(axis, resAxis, 0, 0, 3);
    copyArray(axis, resAxis, 0, 3, 3);

    for (i = 2; i < n - 2; ++i) {
      v1.fromArray(axis, 3 * (i - 2));
      v2.fromArray(axis, 3 * (i - 1));

      _axis.addVectors(v2, v1).multiplyScalar(0.5).normalize();
      _axis.toArray(resAxis, 3 * i);
    }

    copyArray(axis, resAxis, 3 * n - 12, 3 * n - 6, 3);
    copyArray(axis, resAxis, 3 * n - 12, 3 * n - 3, 3);

    return {
      'center': center,
      'axis': resAxis,
      'bending': resBending,
      'radius': resRadius,
      'rise': resRise,
      'twist': resTwist,
      'resdir': resdir
    }
  }

};

/**
 * @file Helixbundle
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function Helixbundle (polymer) {
  this.polymer = polymer;

  this.helixorient = new Helixorient(polymer);
  this.position = this.helixorient.getPosition();
}

Helixbundle.prototype = {

  constructor: Helixbundle,

  getAxis: function (localAngle, centerDist, ssBorder, colorParams, radius, scale) {
    localAngle = localAngle || 30;
    centerDist = centerDist || 2.5;
    ssBorder = ssBorder === undefined ? false : ssBorder;

    var polymer = this.polymer;
    var structure = polymer.structure;
    var n = polymer.residueCount;
    var residueIndexStart = polymer.residueIndexStart;

    var pos = this.position;

    var cp = colorParams || {};
    cp.structure = structure;

    var colormaker = ColormakerRegistry.getScheme(cp);

    var radiusFactory = new RadiusFactory(radius, scale);

    var j = 0;
    var k = 0;

    var axis = [];
    var center = [];
    var beg = [];
    var end = [];
    var col = [];
    var pick = [];
    var size = [];
    var residueOffset = [];
    var residueCount = [];

    var tmpAxis = [];
    var tmpCenter = [];

    var _axis, _center;
    var _beg = new Vector3();
    var _end = new Vector3();

    var rp1 = structure.getResidueProxy();
    var rp2 = structure.getResidueProxy();
    var ap = structure.getAtomProxy();

    var c1 = new Vector3();
    var c2 = new Vector3();

    var split = false;

    for (var i = 0; i < n; ++i) {
      rp1.index = residueIndexStart + i;
      c1.fromArray(pos.center, i * 3);

      if (i === n - 1) {
        split = true;
      } else {
        rp2.index = residueIndexStart + i + 1;
        c2.fromArray(pos.center, i * 3 + 3);

        if (ssBorder && rp1.sstruc !== rp2.sstruc) {
          split = true;
        } else if (c1.distanceTo(c2) > centerDist) {
          split = true;
        } else if (pos.bending[ i ] > localAngle) {
          split = true;
        }
      }

      if (split) {
        if (i - j < 4) {
          j = i;
          split = false;
          continue
        }

        ap.index = rp1.traceAtomIndex;

                // ignore first and last axis
        tmpAxis = pos.axis.subarray(j * 3 + 3, i * 3);
        tmpCenter = pos.center.subarray(j * 3, i * 3 + 3);

        _axis = calculateMeanVector3(tmpAxis).normalize();
        _center = calculateMeanVector3(tmpCenter);

        _beg.fromArray(tmpCenter);
        projectPointOnVector(_beg, _axis, _center);

        _end.fromArray(tmpCenter, tmpCenter.length - 3);
        projectPointOnVector(_end, _axis, _center);

        _axis.subVectors(_end, _beg);

        _axis.toArray(axis, k);
        _center.toArray(center, k);
        _beg.toArray(beg, k);
        _end.toArray(end, k);

        colormaker.atomColorToArray(ap, col, k);

        pick.push(ap.index);

        size.push(radiusFactory.atomRadius(ap));

        residueOffset.push(residueIndexStart + j);
        residueCount.push(residueIndexStart + i + 1 - j);

        k += 3;
        j = i;
        split = false;
      }
    }

    var picking = new Float32Array(pick);

    return {
      'axis': new Float32Array(axis),
      'center': new Float32Array(center),
      'begin': new Float32Array(beg),
      'end': new Float32Array(end),
      'color': new Float32Array(col),
      'picking': new AtomPicker(picking, structure),
      'size': new Float32Array(size),
      'residueOffset': residueOffset,
      'residueCount': residueCount
    }
  }

};

/**
 * @file Binary Heap
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Binary heap implementation
 * @class
 * @author http://eloquentjavascript.net/appendix2.htm
 * @param {Function} scoreFunction - the heap scoring function
 */
function BinaryHeap (scoreFunction) {
  this.content = [];
  this.scoreFunction = scoreFunction;
}

BinaryHeap.prototype = {

  push: function (element) {
        // Add the new element to the end of the array.
    this.content.push(element);

        // Allow it to bubble up.
    this.bubbleUp(this.content.length - 1);
  },

  pop: function () {
        // Store the first element so we can return it later.
    var result = this.content[ 0 ];

        // Get the element at the end of the array.
    var end = this.content.pop();

        // If there are any elements left, put the end element at the
        // start, and let it sink down.
    if (this.content.length > 0) {
      this.content[ 0 ] = end;
      this.sinkDown(0);
    }

    return result
  },

  peek: function () {
    return this.content[ 0 ]
  },

  remove: function (node) {
    var this$1 = this;

    var len = this.content.length;

        // To remove a value, we must search through the array to find it.
    for (var i = 0; i < len; i++) {
      if (this$1.content[ i ] === node) {
                // When it is found, the process seen in 'pop' is repeated
                // to fill up the hole.
        var end = this$1.content.pop();

        if (i !== len - 1) {
          this$1.content[ i ] = end;

          if (this$1.scoreFunction(end) < this$1.scoreFunction(node)) {
            this$1.bubbleUp(i);
          } else {
            this$1.sinkDown(i);
          }
        }

        return
      }
    }

    throw new Error('Node not found.')
  },

  size: function () {
    return this.content.length
  },

  bubbleUp: function (n) {
    var this$1 = this;

        // Fetch the element that has to be moved.
    var element = this.content[ n ];

        // When at 0, an element can not go up any further.
    while (n > 0) {
            // Compute the parent element's index, and fetch it.
      var parentN = Math.floor((n + 1) / 2) - 1;
      var parent = this$1.content[ parentN ];

            // Swap the elements if the parent is greater.
      if (this$1.scoreFunction(element) < this$1.scoreFunction(parent)) {
        this$1.content[ parentN ] = element;
        this$1.content[ n ] = parent;

                // Update 'n' to continue at the new position.
        n = parentN;
      } else {
                // Found a parent that is less, no need to move it further.
        break
      }
    }
  },

  sinkDown: function (n) {
    var this$1 = this;

        // Look up the target element and its score.
    var length = this.content.length;
    var element = this.content[ n ];
    var elemScore = this.scoreFunction(element);

    var child1Score, child2Score;

    while (true) {
            // Compute the indices of the child elements.
      var child2N = (n + 1) * 2;
      var child1N = child2N - 1;

            // This is used to store the new position of the element, if any.
      var swap = null;

            // If the first child exists (is inside the array)...
      if (child1N < length) {
                // Look it up and compute its score.
        var child1 = this$1.content[ child1N ];
        child1Score = this$1.scoreFunction(child1);

                // If the score is less than our element's, we need to swap.
        if (child1Score < elemScore) { swap = child1N; }
      }

            // Do the same checks for the other child.
      if (child2N < length) {
        var child2 = this$1.content[ child2N ];
        child2Score = this$1.scoreFunction(child2);

        if (child2Score < (swap === null ? elemScore : child1Score)) { swap = child2N; }
      }

            // If the element needs to be moved, swap it, and continue.
      if (swap !== null) {
        this$1.content[ n ] = this$1.content[ swap ];
        this$1.content[ swap ] = element;
        n = swap;
      } else {
                // Otherwise, we are done.
        break
      }
    }
  }

};

/**
 * @file Kdtree
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Kdtree
 * @class
 * @author Alexander Rose <alexander.rose@weirdbyte.de>, 2016
 * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013
 * @author I4DS http://www.fhnw.ch/i4ds, 2013
 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
 * @description
 * k-d Tree for typed arrays of 3d points (e.g. for Float32Array), in-place
 * provides fast nearest neighbour search
 *
 * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs
 *
 * Further information (including mathematical properties)
 * http://en.wikipedia.org/wiki/Binary_tree
 * http://en.wikipedia.org/wiki/K-d_tree
 *
 * @example
 * points: [x, y, z, x, y, z, x, y, z, ...]
 * metric: function(a, b){
 *    return Math.pow(a[0]-b[0], 2) + Math.pow(a[1]-b[1], 2) + Math.pow(a[2]-b[2], 2);
 * }
 *
 * @param {Float32Array} points - points
 * @param {Function} metric - metric
 */
function Kdtree$2 (points, metric) {
  var n = points.length / 3;
  var maxDepth = 0;

  var indices = new Uint32Array(n);
  for (var i = 0; i < n; ++i) {
    indices[ i ] = i;
  }
  var nodes = new Int32Array(n * 4);
  // pos, left, right, parent

  var currentNode = 0;
  var currentDim = 0;

  function buildTree (depth, parent, arrBegin, arrEnd) {
    if (depth > maxDepth) { maxDepth = depth; }

    var plength = arrEnd - arrBegin;
    if (plength === 0) {
      return -1
    }
    var nodeIndex = currentNode * 4;
    currentNode += 1;
    if (plength === 1) {
      nodes[ nodeIndex ] = arrBegin;
      nodes[ nodeIndex + 1 ] = -1;
      nodes[ nodeIndex + 2 ] = -1;
      nodes[ nodeIndex + 3 ] = parent;
      return nodeIndex
    }
    // if( plength <= 32 ){
    //     return nodeIndex;
    // }

    var arrMedian = arrBegin + Math.floor(plength / 2);
    currentDim = depth % 3;

    // inlined quickselect function
    var j, tmp, pivotIndex, pivotValue, storeIndex;
    var left = arrBegin;
    var right = arrEnd - 1;
    while (right > left) {
      pivotIndex = (left + right) >> 1;
      pivotValue = points[ indices[ pivotIndex ] * 3 + currentDim ];
      // swap( pivotIndex, right );
      tmp = indices[ pivotIndex ];
      indices[ pivotIndex ] = indices[ right ];
      indices[ right ] = tmp;
      storeIndex = left;
      for (j = left; j < right; ++j) {
        if (points[ indices[ j ] * 3 + currentDim ] < pivotValue) {
          // swap( storeIndex, j );
          tmp = indices[ storeIndex ];
          indices[ storeIndex ] = indices[ j ];
          indices[ j ] = tmp;
          ++storeIndex;
        }
      }
      // swap( right, storeIndex );
      tmp = indices[ right ];
      indices[ right ] = indices[ storeIndex ];
      indices[ storeIndex ] = tmp;
      pivotIndex = storeIndex;
      if (arrMedian === pivotIndex) {
        break
      } else if (arrMedian < pivotIndex) {
        right = pivotIndex - 1;
      } else {
        left = pivotIndex + 1;
      }
    }

    nodes[ nodeIndex ] = arrMedian;
    nodes[ nodeIndex + 1 ] = buildTree(depth + 1, nodeIndex, arrBegin, arrMedian);
    nodes[ nodeIndex + 2 ] = buildTree(depth + 1, nodeIndex, arrMedian + 1, arrEnd);
    nodes[ nodeIndex + 3 ] = parent;
    return nodeIndex
  }

  function getNodeDepth (nodeIndex) {
    var parentIndex = nodes[ nodeIndex + 3 ];
    if (parentIndex === -1) {
      return 0
    } else {
      return getNodeDepth(parentIndex) + 1
    }
  }

  // TODO
  // function getNodePos( node ){}

  var rootIndex = buildTree(0, -1, 0, n);

  /**
   * find nearest points
   * @param {Array} point - array of size 3
   * @param {Integer} maxNodes - max amount of nodes to return
   * @param {Float} maxDistance - maximum distance of point to result nodes
   * @return {Array} array of point, distance pairs
   */
  function nearest (point, maxNodes, maxDistance) {
    var bestNodes = new BinaryHeap(
      function (e) { return -e[ 1 ] }
    );

    function nearestSearch (nodeIndex) {
      var bestChild, otherChild;
      var dimension = getNodeDepth(nodeIndex) % 3;
      var pointIndex = indices[ nodes[ nodeIndex ] ] * 3;
      var ownPoint = [
        points[ pointIndex + 0 ],
        points[ pointIndex + 1 ],
        points[ pointIndex + 2 ]
      ];
      var ownDistance = metric(point, ownPoint);

      function saveNode (nodeIndex, distance) {
        bestNodes.push([ nodeIndex, distance ]);
        if (bestNodes.size() > maxNodes) {
          bestNodes.pop();
        }
      }

      var leftIndex = nodes[ nodeIndex + 1 ];
      var rightIndex = nodes[ nodeIndex + 2 ];

            // if it's a leaf
      if (rightIndex === -1 && leftIndex === -1) {
        if ((bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[ 1 ]) &&
          ownDistance <= maxDistance
        ) {
          saveNode(nodeIndex, ownDistance);
        }
        return
      }

      if (rightIndex === -1) {
        bestChild = leftIndex;
      } else if (leftIndex === -1) {
        bestChild = rightIndex;
      } else {
        if (point[ dimension ] <= points[ pointIndex + dimension ]) {
          bestChild = leftIndex;
        } else {
          bestChild = rightIndex;
        }
      }

      // recursive search
      nearestSearch(bestChild);

      if ((bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[ 1 ]) &&
        ownDistance <= maxDistance
      ) {
        saveNode(nodeIndex, ownDistance);
      }

      // if there's still room or the current distance is nearer than the best distance

      var linearPoint = [];
      for (var i = 0; i < 3; i += 1) {
        if (i === dimension) {
          linearPoint[ i ] = point[ i ];
        } else {
          linearPoint[ i ] = points[ pointIndex + i ];
        }
      }
      var linearDistance = metric(linearPoint, ownPoint);

      if ((bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[ 1 ]) &&
        Math.abs(linearDistance) <= maxDistance
      ) {
        if (bestChild === leftIndex) {
          otherChild = rightIndex;
        } else {
          otherChild = leftIndex;
        }
        if (otherChild !== -1) {
          nearestSearch(otherChild);
        }
      }
    }

    nearestSearch(rootIndex);

    var result = [];
    for (var i = 0, il = Math.min(bestNodes.size(), maxNodes); i < il; i += 1) {
      result.push(bestNodes.content[ i ]);
    }

    return result
  }

  function verify (nodeIndex, depth) {
    var count = 1;

    if (nodeIndex === undefined) {
      nodeIndex = rootIndex;
      depth = 0;
    }

    if (nodeIndex === -1) {
      throw new Error('node is null')
    }

    var dim = depth % 3;

    var leftIndex = nodes[ nodeIndex + 1 ];
    var rightIndex = nodes[ nodeIndex + 2 ];

    if (leftIndex !== -1) {
      if (points[ indices[ nodes[ leftIndex ] ] * 3 + dim ] >
        points[ indices[ nodes[ nodeIndex ] ] * 3 + dim ]
      ) {
        throw new Error('left child is > parent!')
      }
      count += verify(leftIndex, depth + 1);
    }

    if (rightIndex !== -1) {
      if (points[ indices[ nodes[ rightIndex ] ] * 3 + dim ] <
        points[ indices[ nodes[ nodeIndex ] ] * 3 + dim ]
      ) {
        throw new Error('right child is < parent!')
      }
      count += verify(rightIndex, depth + 1);
    }

    return count
  }

  // API

  this.rootIndex = rootIndex;
  this.maxDepth = maxDepth;
  this.nearest = nearest;
  this.indices = indices;
  this.nodes = nodes;
  this.verify = verify;
}

/**
 * @file Kdtree
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function Kdtree (entity, useSquaredDist) {
  if (Debug) { Log.time('Kdtree build'); }

  var metric;

  if (useSquaredDist) {
    metric = function (a, b) {
      var dx = a[0] - b[0];
      var dy = a[1] - b[1];
      var dz = a[2] - b[2];
      return dx * dx + dy * dy + dz * dz
    };
  } else {
    metric = function (a, b) {
      var dx = a[0] - b[0];
      var dy = a[1] - b[1];
      var dz = a[2] - b[2];
      return Math.sqrt(dx * dx + dy * dy + dz * dz)
    };
  }

  var points = new Float32Array(entity.atomCount * 3);
  var atomIndices = new Uint32Array(entity.atomCount);
  var i = 0;

  entity.eachAtom(function (ap) {
    points[ i + 0 ] = ap.x;
    points[ i + 1 ] = ap.y;
    points[ i + 2 ] = ap.z;
    atomIndices[ i / 3 ] = ap.index;
    i += 3;
  });

  this.atomIndices = atomIndices;
  this.points = points;
  this.kdtree = new Kdtree$2(points, metric);

  if (Debug) { Log.timeEnd('Kdtree build'); }

    // console.log("this.kdtree.verify()", this.kdtree.verify())
}

Kdtree.prototype = {

  nearest: (function () {
    var pointArray = new Float32Array(3);

    return function nearest (point, maxNodes, maxDistance) {
            // Log.time( "Kdtree nearest" );

      if (point.toArray) {
        point.toArray(pointArray);
      } else if (point.positionToArray) {
        point.positionToArray(pointArray);
      }

      var nodeList = this.kdtree.nearest(
                pointArray, maxNodes, maxDistance
            );

      var indices = this.kdtree.indices;
      var nodes = this.kdtree.nodes;
      var atomIndices = this.atomIndices;
      var resultList = [];

      for (var i = 0, n = nodeList.length; i < n; ++i) {
        var d = nodeList[ i ];
        var nodeIndex = d[ 0 ];
        var dist = d[ 1 ];

        resultList.push({
          index: atomIndices[ indices[ nodes[ nodeIndex ] ] ],
          distance: dist
        });
      }

            // Log.timeEnd( "Kdtree nearest" );

      return resultList
    }
  }())

};

/**
 * @file Symmetry Constants
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var SymOpCode = {
  ' ': 'X',
  '!': 'Y',
  '#': 'Z',
  '$': '-X',
  '%': '-Y',
  '&': '-Z',
  "'": 'Y+1/2',
  '(': '1/2+X',
  ')': '1/2+Y',
  '*': '1/2-X',
  '+': '1/2+Z',
  ',': '1/2-Y',
  '-': '1/2-Z',
  '.': 'X+1/2',
  '/': 'Z+1/2',
  '0': '-X+1/2',
  '1': '-Y+1/2',
  '2': '-Z+1/2',
  '3': '1/4+X',
  '4': '1/4-Y',
  '5': '1/4+Z',
  '6': '1/4-X',
  '7': '1/4+Y',
  '8': '3/4-Y',
  '9': '3/4+Z',
  ':': '3/4+Y',
  ';': '3/4+X',
  '<': '3/4-X',
  '=': '1/4-Z',
  '>': '3/4-Z',
  '?': 'X-Y',
  '@': 'Y-X',
  'A': 'Z+1/3',
  'B': 'Z+2/3',
  'C': 'X+2/3',
  'D': 'Y+1/3',
  'E': '-Y+2/3',
  'F': 'X-Y+1/3',
  'G': 'Y-X+2/3',
  'H': '-X+1/3',
  'I': 'X+1/3',
  'J': 'Y+2/3',
  'K': '-Y+1/3',
  'L': 'X-Y+2/3',
  'M': 'Y-X+1/3',
  'N': '-X+2/3',
  'O': '2/3+X',
  'P': '1/3+Y',
  'Q': '1/3+Z',
  'R': '2/3-Y',
  'S': '1/3+X-Y',
  'T': '2/3+Y-X',
  'U': '1/3-X',
  'V': '2/3-X',
  'W': '1/3-Y',
  'X': '1/3-Z',
  'Y': '2/3+Y',
  'Z': '1/3+Y-X',
  '[': '2/3+X-Y',
  ']': '1/3+X',
  '^': '2/3+Z',
  '_': '2/3-Z',
  '`': '5/6+Z',
  'a': '1/6+Z',
  'b': '5/6-Z',
  'c': '1/6-Z',
  'd': 'Z+5/6',
  'e': 'Z+1/6',
  'f': 'Z+1/4',
  'g': '+Y'
};

// encoded, originally from CCP4 symop.lib
var EncodedSymOp = {
  'P 1': ' !#',
  'P -1': ' !#$%&',
  'P 1 2 1': ' !#$!&',
  'P 1 21 1': " !#$'&",
  'C 1 2 1': ' !#$!&()#*)&',
  'P 1 m 1': ' !# %#',
  'P 1 c 1': ' !# %+',
  'C 1 m 1': ' !# %#()#(,#',
  'C 1 c 1': ' !# %+()#(,+',
  'P 1 2/m 1': ' !# %#$!&$%&',
  'P 1 21/m 1': ' !#$)&$%& ,#',
  'C 1 2/m 1': ' !# %#$!&$%&()#(,#*)&*,&',
  'P 1 2/c 1': ' !#$!-$%& %+',
  'P 1 21/c 1': ' !#$%&$)- ,+',
  'C 1 2/c 1': ' !#$!-$%& %+()#*)-*,&(,+',
  'P 2 2 2': ' !#$%#$!& %&',
  'P 2 2 21': ' !#$%+$!- %&',
  'P 21 21 2': ' !#$%#*)&(,&',
  'P 21 21 21': ' !#*%+$)-(,&',
  'C 2 2 21': ' !#$%+$!- %&()#*,+*)-(,&',
  'C 2 2 2': ' !#$%#$!& %&()#*,#*)&(,&',
  'F 2 2 2': ' !#$%#$!& %& )+$,+$)- ,-(!+*%+*!-(%-()#*,#*)&(,&',
  'I 2 2 2': " !#$%# %&$!&.'/01/.120'2",
  'I 21 21 21': ' !#*%+$)-(,&()+$,#*!& %-',
  'P m m 2': ' !#$%# %#$!#',
  'P m c 21': ' !#$%+ %+$!#',
  'P c c 2': ' !#$%# %+$!+',
  'P m a 2': ' !#$%#(%#*!#',
  'P c a 21': ' !#$%+(%#*!+',
  'P n c 2': ' !#$%# ,+$)+',
  'P m n 21': ' !#*%+(%+$!#',
  'P b a 2': ' !#$%#(,#*)#',
  'P n a 21': ' !#$%+(,#*)+',
  'P n n 2': ' !#$%#(,+*)+',
  'C m m 2': ' !#$%# %#$!#()#*,#(,#*)#',
  'C m c 21': ' !#$%+ %+$!#()#*,+(,+*)#',
  'C c c 2': ' !#$%# %+$!+()#*,#(,+*)+',
  'A m m 2': ' !#$%# %#$!# )+$,+ ,+$)+',
  'A b m 2': ' !#$%# ,#$)# )+$,+ %+$!+',
  'A m a 2': ' !#$%#(%#*!# )+$,+(,+*)+',
  'A b a 2': ' !#$%#(,#*)# )+$,+(%+*!+',
  'F m m 2': ' !#$%# %#$!# )+$,+ ,+$)+(!+*%+(%+*!+()#*,#(,#*)#',
  'F d d 2': ' !#$%#345675 )+$,+3896:9(!+*%+;49<79()#*,#;85<:5',
  'I m m 2': ' !#$%# %#$!#()+*,+(,+*)+',
  'I b a 2': ' !#$%#(,#*)#()+*,+ %+$!+',
  'I m a 2': ' !#$%#(%#*!#()+*,+ ,+$)+',
  'P 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#',
  'P 2/n 2/n 2/n': ' !#$%#$!& %&*,-()-(,+*)+',
  'P 2/c 2/c 2/m': ' !#$%#$!- %-$%& !& %+$!+',
  'P 2/b 2/a 2/n': ' !#$%#$!& %&*,&()&(,#*)#',
  'P 21/m 2/m 2/a': ' !#*%#$!&(%&$%&(!& %#*!#',
  'P 2/n 21/n 2/a': ' !#*%#*)- ,-$%&(!&(,+$)+',
  'P 2/m 2/n 21/a': ' !#*%+*!- %&$%&(!-(%+$!#',
  'P 21/c 2/c 2/a': ' !#*%#$!-(%-$%&(!& %+*!+',
  'P 21/b 21/a 2/m': ' !#$%#*)&(,&$%& !&(,#*)#',
  'P 21/c 21/c 2/n': ' !#*,#$)-(%-$%&()& ,+*!+',
  'P 2/b 21/c 21/m': ' !#$%+$)- ,&$%& !- ,+$)#',
  'P 21/n 21/n 2/m': ' !#$%#*)-(,-$%& !&(,+*)+',
  'P 21/m 21/m 2/n': " !#$%#*'&.,&*,&.'& %#$!#",
  'P 21/b 2/c 21/n': ' !#*,+$!-(,&$%&()- %+*)#',
  'P 21/b 21/c 21/a': ' !#*%+$)-(,&$%&(!- ,+*)#',
  'P 21/n 21/m 21/a': " !#0%/$'&.12$%&.!2 1#0'/",
  'C 2/m 2/c 21/m': ' !#$%+$!- %&$%& !- %+$!#()#*,+*)-(,&*,&()-(,+*)#',
  'C 2/m 2/c 21/a': ' !#$,+$)- %&$%& )- ,+$!#()#*%+*!-(,&*,&(!-(%+*)#',
  'C 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#()#*,#*)&(,&*,&()&(,#*)#',
  'C 2/c 2/c 2/m': ' !#$%#$!- %-$%& !& %+$!+()#*,#*)-(,-*,&()&(,+*)+',
  'C 2/m 2/m 2/a': ' !#$,#$)& %&$%& )& ,#$!#()#*%#*!&(,&*,&(!&(%#*)#',
  'C 2/c 2/c 2/a': ' !#*,#$!&(,&$,-(!- ,+*!+()#$%#*)& %&*%- )-(%+$)+',
  'F 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!# )+$,+$)- ,-$,- )- ,+$)+(!+*%+*!-(%-*%-(!-(%+*!+()#*,#*)&(,&*,&()&(,#*)#',
  'F 2/d 2/d 2/d': ' !#$%#$!& %&64=37=345675 )+$,+$)- ,-68>3:>3896:9(!+*%+*!-(%-<4>;7>;49<79()#*,#*)&(,&<8=;:=;85<:5',
  'I 2/m 2/m 2/m': ' !#$%#$!& %&$%& !& %#$!#()+*,+*)-(,-*,-()-(,+*)+',
  'I 2/b 2/a 2/m': ' !#$%#*)&(,&$%& !&(,#*)#()+*,+$!- %-*,-()- %+$!+',
  'I 21/b 21/c 21/a': ' !#*%+$)-(,&$%&(!- ,+*)#()+$,#*!& %-*,- )&(%#$!+',
  'I 21/m 21/m 21/a': ' !#$,#$)& %&$%& )& ,#$!#()+*%+*!-(,-*,-(!-(%+*)+',
  'P 4': ' !#$%#% #!$#',
  'P 41': ' !#$%+% 5!$9',
  'P 42': ' !#$%#% +!$+',
  'P 43': ' !#$%+% 9!$5',
  'I 4': ' !#$%#% #!$#()+*,+,(+)*+',
  'I 41': ' !#*,+%(5)$9()+$%#, 9!*5',
  'P -4': ' !#$%#!$&% &',
  'I -4': ' !#$%#!$&% &()+*,+)*-,(-',
  'P 4/m': ' !#$%#% #!$#$%& !&!$&% &',
  'P 42/m': ' !#$%#% +!$+$%& !&!$-% -',
  'P 4/n': ' !#$%#,(#)*#*,&()&!$&% &',
  'P 42/n': ' !#$%#,(+)*+*,-()-!$&% &',
  'I 4/m': ' !#$%#% #!$#$%& !&!$&% &()+*,+,(+)*+*,-()-)*-,(-',
  'I 41/a': ' !#*,+%(5)$9$,=(!>!$&,(-()+$%#, 9!*5*%> )=)*-% &',
  'P 4 2 2': ' !#$%#% #!$#$!& %&! &%$&',
  'P 4 21 2': ' !#$%#,(#)*#*)&(,&! &%$&',
  'P 41 2 2': ' !#$%+% 5!$9$!& %-! >%$=',
  'P 41 21 2': ' !#$%+,(5)*9*)=(,>! &%$-',
  'P 42 2 2': ' !#$%#% +!$+$!& %&! -%$-',
  'P 42 21 2': ' !#$%#,(+)*+*)-(,-! &%$&',
  'P 43 2 2': ' !#$%+% 9!$5$!& %-! =%$>',
  'P 43 21 2': ' !#$%+,(9)*5*)>(,=! &%$-',
  'I 4 2 2': ' !#$%#% #!$#$!& %&! &%$&()+*,+,(+)*+*)-(,-)(-,*-',
  'I 41 2 2': ' !#*,+%(5)$9*!> ,=)(-%$&()+$%#, 9!*5$)=(%>! &,*-',
  'P 4 m m': ' !#$%#% #!$# %#$!#%$#! #',
  'P 4 b m': ' !#$%#% #!$#(,#*)#,*#)(#',
  'P 42 c m': ' !#$%#% +!$+ %+$!+%$#! #',
  'P 42 n m': ' !#$%#,(+)*+(,+*)+%$#! #',
  'P 4 c c': ' !#$%#% #!$# %+$!+%$+! +',
  'P 4 n c': ' !#$%#% #!$#(,+*)+,*+)(+',
  'P 42 m c': ' !#$%#% +!$+ %#$!#%$+! +',
  'P 42 b c': ' !#$%#% +!$+(,#*)#,*+)(+',
  'I 4 m m': ' !#$%#% #!$# %#$!#%$#! #()+*,+,(+)*+(,+*)+,*+)(+',
  'I 4 c m': ' !#$%#% #!$# %+$!+%$+! +()+*,+,(+)*+(,#*)#,*#)(#',
  'I 41 m d': ' !#*,+%(5)$9 %#*)+%*5) 9()+$%#, 9!*5(,+$!#,$9!(5',
  'I 41 c d': ' !#*,+%(5)$9 %+*)#%*9) 5()+$%#, 9!*5(,#$!+,$5!(9',
  'P -4 2 m': ' !#$%#% &!$&$!& %&%$#! #',
  'P -4 2 c': ' !#$%#% &!$&$!- %-%$+! +',
  'P -4 21 m': ' !#$%#% &!$&*)&(,&,*#)(#',
  'P -4 21 c': ' !#$%#% &!$&*)-(,-,*+)(+',
  'P -4 m 2': ' !#$%#!$&% & %#$!#! &%$&',
  'P -4 c 2': ' !#$%#% &!$& %+$!+! -%$-',
  'P -4 b 2': ' !#$%#% &!$&(,#*)#)(&,*&',
  'P -4 n 2': ' !#$%#% &!$&(,+*)+)(-,*-',
  'I -4 m 2': ' !#$%#% &!$& %#$!#! &%$&()+*,+,(-)*-(,+*)+)(-,*-',
  'I -4 c 2': ' !#$%#% &!$& %+$!+! -%$-()+*,+,(-)*-(,#*)#)(&,*&',
  'I -4 2 m': ' !#$%#% &!$&$!& %&%$#! #()+*,+,(-)*-*)-(,-,*+)(+',
  'I -4 2 d': ' !#$%#% &!$&*!>(%>,$9) 9()+*,+,(-)*-$)= ,=%*5!(5',
  'P 4/m 2/m 2/m': ' !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #',
  'P 4/m 2/c 2/c': ' !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +',
  'P 4/n 2/b 2/m': ' !#$%#% #!$#$!& %&! &%$&*,&()&)*&,(&(,#*)#,*#)(#',
  'P 4/n 2/n 2/c': ' !#$%#% #!$#$!& %&! &%$&*,-()-)*-,(-(,+*)+,*+)(+',
  'P 4/m 21/b 2/m': ' !#$%#% #!$#*)&(,&)(&,*&$%& !&!$&% &(,#*)#,*#)(#',
  'P 4/m 21/n 2/c': ' !#$%#% #!$#*)-(,-)(-,*-$%& !&!$&% &(,+*)+,*+)(+',
  'P 4/n 21/m 2/m': ' !#$%#,(#)*#*)&(,&! &%$&*,&()&!$&% & %#$!#,*#)(#',
  'P 4/n 2/c 2/c': ' !#$%#,(#)*#*)-(,-! -%$-*,&()&!$&% & %+$!+,*+)(+',
  'P 42/m 2/m 2/c': ' !#$%#% +!$+$!& %&! -%$-$%& !&!$-% - %#$!#%$+! +',
  'P 42/m 2/c 2/m': ' !#$%#% +!$+$!- %-! &%$&$%& !&!$-% - %+$!+%$#! #',
  'P 42/n 2/b 2/c': ' !#$%#,(+)*+$!- %-)(&,*&*,-()-!$&% &(,#*)#%$+! +',
  'P 42/n 2/n 2/m': ' !#$%#,(+)*+$!& %&)(-,*-*,-()-!$&% &(,+*)+%$#! #',
  'P 42/m 21/b 2/c': ' !#$%#% +!$+*)&(,&)(-,*-$%& !&!$-% -(,#*)#,*+)(+',
  'P 42/m 21/n 2/m': " !#$%#,./'*/*'-.,-! &%$&$%& !&'*-,.-.,/*'/%$#! #",
  'P 42/n 21/m 2/c': ' !#$%#,(+)*+*)-(,-! &%$&*,-()-!$&% & %#$!#,*+)(+',
  'P 42/n 21/c 2/m': ' !#$%#,(+)*+*)&(,&! -%$-*,-()-!$&% & %+$!+,*#)(#',
  'I 4/m 2/m 2/m': ' !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #()+*,+,(+)*+*)-(,-)(-,*-*,-()-)*-,(-(,+*)+,*+)(+',
  'I 4/m 2/c 2/m': ' !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +()+*,+,(+)*+*)&(,&)(&,*&*,-()-)*-,(-(,#*)#,*#)(#',
  'I 41/a 2/m 2/d': ' !#*,+%(5)$9*!> ,=)(-%$&$,=(!>!$&,(-(,+$!#,$9!(5()+$%#, 9!*5$)=(%>! &,*-*%> )=)*-% & %#*)+%*5) 9',
  'I 41/a 2/c 2/d': ' !#*,+%(5)$9*!= ,>)(&%$-$,=(!>!$&,(-(,#$!+,$5!(9()+$%#, 9!*5$)>(%=! -,*&*%> )=)*-% & %+*)#%*9) 5',
  'P 3': ' !#%?#@$#',
  'P 31': ' !#%?A@$B',
  'P 32': ' !#%?B@$A',
  'H 3': ' !#%?#@$#CDAEFAGHAIJBKLBMNB',
  'R 3': ' !## !!# ',
  'P -3': ' !#%?#@$#$%&!@&? &',
  'H -3': ' !#%?#@$#$%&!@&? &OPQRSQTUQVWXYZX[]X]Y^W[^ZV^UR_PT_SO_',
  'R -3': ' !## !!# $%&&$%%&$',
  'P 3 1 2': ' !#%?#@$#%$&@!& ?&',
  'P 3 2 1': ' !#%?#@$#! &?%&$@&',
  'P 31 1 2': ' !#%?Q@$^%$_@!X ?&',
  'P 31 2 1': ' !#%?A@$B! &?%_$@X',
  'P 32 1 2': ' !#%?^@$Q%$X@!_ ?&',
  'P 32 2 1': ' !#%?B@$A! &?%X$@_',
  'H 3 2': ' !#%?#@$#! &?%&$@&OPQRSQTUQY]X[WXVZX]Y^W[^ZV^PO_SR_UT_',
  'R 3 2': ' !## !!# %$&$&%&%$',
  'P 3 m 1': ' !#%?#@$#%$#@!# ?#',
  'P 3 1 m': ' !#%?#@$#! #?%#$@#',
  'P 3 c 1': ' !#%?#@$#%$+@!+ ?+',
  'P 3 1 c': ' !#%?#@$#! +?%+$@+',
  'H 3 m': ' !#%?#@$#%$#@!# ?#OPQRSQTUQRUQTPQOSQ]Y^W[^ZV^WV^ZY^][^',
  'R 3 m': ' !## !!# ! # #!#! ',
  'H 3 c': ' !#%?#@$#%$+@!+ ?+OPQRSQTUQRU`TP`OS`]Y^W[^ZV^WVaZYa][a',
  'R 3 c': " !## !!# '././'/'.",
  'P -3 1 2/m': ' !#%?#@$#%$&@!& ?&$%&!@&? &! #?%#$@#',
  'P -3 1 2/c': ' !#%?#@$#%$-@!- ?-$%&!@&? &! +?%+$@+',
  'P -3 2/m 1': ' !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#',
  'P -3 2/c 1': ' !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+',
  'H -3 2/m': ' !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#OPQRSQTUQY]X[WXVZXVWXYZX[]XRUQTPQOSQ]Y^W[^ZV^PO_SR_UT_UR_PT_SO_WV^ZY^][^',
  'R -3 2/m': ' !## !!# %$&$&%&%$$%&&$%%&$! # #!#! ',
  'H -3 2/c': ' !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+OPQRSQTUQY]b[WbVZbVWXYZX[]XRU`TP`OS`]Y^W[^ZV^POcSRcUTcUR_PT_SO_WVaZYa][a',
  'R -3 2/c': " !## !!# 102021210$%&&$%%&$'././'/'.",
  'P 6': ' !#%?#@$#$%#!@#? #',
  'P 61': ' !#%?A@$B$%/!@d? e',
  'P 65': ' !#%?B@$A$%/!@e? d',
  'P 62': ' !#%?^@$Q$%#!@^? Q',
  'P 64': ' !#%?Q@$^$%#!@Q? ^',
  'P 63': ' !#%?#@$#$%+!@+? +',
  'P -6': ' !#%?#@$# !&%?&@$&',
  'P 6/m': ' !#%?#@$#$%#!@#? #$%&!@&? & !&%?&@$&',
  'P 63/m': ' !#%?#@$#$%+!@+? +$%&!@&? & !-%?-@$-',
  'P 6 2 2': ' !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&',
  'P 61 2 2': ' !#%?Q@$^$%+!@`? a! X?%&$@_%$b@!- ?c',
  'P 65 2 2': ' !#%?^@$Q$%+!@a? `! _?%&$@X%$c@!- ?b',
  'P 62 2 2': ' !#%?^@$Q$%#!@^? Q! _?%&$@X%$_@!& ?X',
  'P 64 2 2': ' !#%?Q@$^$%#!@Q? ^! X?%&$@_%$X@!& ?_',
  'P 63 2 2': ' !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-',
  'P 6 m m': ' !#%?#@$#$%#!@#? #%$#@!# ?#! #?%#$@#',
  'P 6 c c': ' !#%?#@$#$%#!@#? #%$+@!+ ?+! +?%+$@+',
  'P 63 c m': ' !#%?#@$#$%+!@+? +%$+@!+ ?+! #?%#$@#',
  'P 63 m c': ' !#%?#@$#$%+!@+? +%$#@!# ?#! +?%+$@+',
  'P -6 m 2': ' !#%?#@$# !&%?&@$&%$#@!# ?#%$&@!& ?&',
  'P -6 c 2': ' !#%?#@$# !-%?-@$-%$+@!+ ?+%$&@!& ?&',
  'P -6 2 m': ' !#%?#@$# !&%?&@$&! &?%&$@&! #?%#$@#',
  'P -6 2 c': ' !#%?#@$# !-%?-@$-! &?%&$@&! +?%+$@+',
  'P 6/m 2/m 2/m': ' !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&$%&!@&? & !&@$&%?&%$#@!# ?#! #?%#$@#',
  'P 6/m 2/c 2/c': ' !#%?#@$#$%#!@#? #! -?%-$@-%$-@!- ?-$%&!@&? & !&@$&%?&%$+@!+ ?+! +?%+$@+',
  'P 63/m 2/c 2/m': ' !#%?#@$#$%+!@+? +! -?%-$@-%$&@!& ?&$%&!@&? & !-@$-%?-%$+@!+ ?+! #?%#$@#',
  'P 63/m 2/m 2/c': ' !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-$%&!@&? & !-@$-%?-%$#@!# ?#! +?%+$@+',
  'P 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ',
  'F 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%&  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ',
  'I 2 3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(',
  'P 21 3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(',
  'I 21 3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- ',
  'P 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$',
  'P 2/n -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& *,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*',
  'F 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-($,- )- ,+$)+&*,&()#(,#*)%-*!-(%+(!+*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(*%-(!-(%+*!+-$,- )+ ,+$),&*)&(,#()#*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- *,&()&(,#*)#-*%-(!+(%+*!,-$)- ,+ )+$',
  'F 2/d -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& 64=37=345675=64=375345674=67=3453756 )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(68>3:>3896:9=<8=;:5;85<:4><7>;49;79<(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(<4>;7>;49<79>68>3:93896:8=<:=;85;:5<()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- <8=;:=;8f<:f><4>;79;49<78>6:>3893:96',
  'I 2/m -3': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*',
  'P 21/a -3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*',
  'I 21/a -3': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*()+$,#*g& %-+()#$,&*!- %)+(,#$!&*%- *,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$',
  'P 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$',
  'P 42 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*',
  'F 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(-%*-!*+%(+ +,$+)$-, -)#)*#,(&)(&,*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() -,$-)$+, +(#,*#)*&,(&)+!*+%(-!(-%*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(&,*&)*#,(#(+%*+!*-%(-!+)$+, -) -,$',
  'F 41 3 2': ' !#$,+*)&(%-# !+$,&*)-(%!# ,+$)&*%-(:3>46=7<98;5;58<976=43>:97<58;>:3=46 )+$%#*!-(,&#()+*%&$!- ,!+(,#*)-$%& :;=4<>765839;94<5:6>83=79:6543>7;=8<(!+*,#$)- %&+ )#$%-*!&(,)#(%+*!&$,- 73=86>:<54;935469:<=8;>7576983=:;>4<()#*%+$!& ,-+(!#*,-$)& %)+ %#$!-*,&(7;>8<=:69435398657<>4;=:5:<94;=73>86',
  'I 4 3 2': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*',
  'P 43 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7;>46=:<5839398<5:6=4;>75:<983>7;=46',
  'P 41 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<',
  'I 41 3 2': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46',
  'P -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ',
  'F -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&%  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(+%*+!*-%(- +)$+,$-) -,#)(#,*&)*&,((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() +,$+)$-, -(#)*#,*&)(&,+!(+%*-!*-%(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(#,*#)*&,(&(+!*+%*-!(-%+) +,$-)$-, ',
  'I -4 3 m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(',
  'P -4 3 n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(',
  'F -4 3 c': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,( )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-() #,$#)$&, &(#!*#%*&!(&%+! +%$-!$-% (!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(!(#%*#!*&%(& +!$+%$-! -%#) #,$&)$&, ()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ! +%$+!$-% - #)$#,$&) &,#!(#%*&!*&%(',
  'I -4 3 d': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7354<9:6>8;=357<946>:;=857394<>:6=8;()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- :;98657<=43>;9:658<=73>49:;586=7<>43',
  'P 4/m -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ',
  'P 4/n -3 2/n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
  'P 42/m -3 2/n': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
  'P 42/n -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ',
  'F 4/m -3 2/m
  'F 4/m -3 2/c
  'F 41/d -3 2/m': ' !#$,+*)&(%-# !+$,&*)-(%!# ,+$)&*%-(:3>46=7<98;5;58<976=43>:97<58;>:3=4664=3:>;85<79=64>3:5;89<74=6:>385;79<,$+! #%(-)*&*&)(-% #!$+,-%(&)*+,$#!  )+$%#*!-(,&#()+*%&$!- ,!+(,#*)-$%& :;=4<>765839;94<5:6>83=79:6543>7;=8<68>37=;49<:5=<8>;753496:4><:=;893756,*#!(+% &)$-*-!(&, +)$#%-, &!$+%*#)((!+*,#$)- %&+ )#$%-*!&(,)#(%+*!&$,- 73=86>:<54;935469:<=8;>7576983=:;>4<<4>;:=389675>68=379;45<:8=<7>;453:96%$#) +,(&!*-$&! -,(#)*+%&% -)$#,*+!(()#*%+$!& ,-+(!#*,-$)& %)+ %#$!-*,&(7;>8<=:69435398657<>4;=:5:<94;=73>86<8=;7>3456:9><4=;:9385678>67=349;:5<%*+)(#, -!$&$-) &%(+!*#,&,(-!*#%$+) ',
  'F 41/d -3 2/c
  'I 4/m -3 2/m': ' !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(',
  'I 41/a -3 2/d': ' !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<$%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*4<97358;=:6>6>:;=8357<94=8;>:694<573()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46*,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$865:;943>7<=<=73>4;9:658>43=7<5869:;',
  'P 1 1 2': ' !#$%#',
  'P 1 1 21': ' !#$%+',
  'B 1 1 2': ' !#$%#(g+*%+',
  'A 1 2 1': ' !#$!& )+$)-',
  'C 1 21 1': ' !#$)&()#*!&',
  'I 1 2 1': " !#$!&.'/0'2",
  'I 1 21 1': " !#$)&.'/0!-",
  'P 1 1 m': ' !# !&',
  'P 1 1 b': ' !# )&',
  'B 1 1 m': ' !# !&(!+(!-',
  'B 1 1 b': ' !# )&(!+()-',
  'P 1 1 2/m': ' !# !&$%#$%&',
  'P 1 1 21/m': ' !#$%+$%& !-',
  'B 1 1 2/m': ' !# !&$%#$%&(!+(!-*%+*%-',
  'P 1 1 2/b': ' !#$,#$%& )&',
  'P 1 1 21/b': ' !#$%&$,+ )-',
  'B 1 1 2/b': ' !#$,#$%& )&(!+*,+*%-()-',
  'P 21 2 2': ' !#$!&(%&*%#',
  'P 2 21 2': ' !# ,&$)&$%#',
  'P 21 21 2 (a)': " !#*,#.%&$'&",
  'P 21 2 21': ' !#$!&(%-*%+',
  'P 2 21 21': ' !# %&$)-$,+',
  'C 2 2 21a)': ' !#*%+(,&$)-()#$,+ %&*!-',
  'C 2 2 2a': " !#*,#.%&$'&()#$%# ,&*!&",
  'F 2 2 2a': " !#*,#.%&$'& '/*%/.12$!2.!/$,/ %20'2.'#$%# 1&0!&",
  'I 2 2 2a': " !#*,#.%&$'&()+$%+*!- ,-",
  'P 21/m 21/m 2/n a': " !#*,#$)&(%&$%&.'& ,#*!#",
  'P 42 21 2a': " !#*,#%.+'$+$'&.%&! -,*-",
  'I 2 3a': " !#*,#.%&$'&!# ,- '&$%/$# !-*!/$%&.%()+$%+ ,-*!-)+(%&(!-*,#*+()&$)#*,- ,"
};

/**
 * @file Symmetry Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function getSymmetryOperations (spacegroup) {
  var encodedSymopList = EncodedSymOp[ spacegroup ];
  var matrixDict = {};

  if (encodedSymopList === undefined) {
    console.warn(
            "getSymmetryOperations: spacegroup '" +
            spacegroup + "' not found in symop library"
        );
    return matrixDict
  }

  var symopList = [];

  for (var i = 0, il = encodedSymopList.length; i < il; i += 3) {
    var symop = [];
    for (var j = 0; j < 3; ++j) {
      symop.push(SymOpCode[ encodedSymopList[ i + j ] ]);
    }
    symopList.push(symop);
  }

  var reInteger = /^[1-9]$/;

  symopList.forEach(function (symop) {
        // console.log( "symop", symop );

    var row = 0;
    var matrix = new Matrix4().set(
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 1
    );
    var me = matrix.elements;

    matrixDict[ symop ] = matrix;

    symop.forEach(function (elm) {
      // console.log( "row", row );

      var negate = false;
      var denominator = false;

      for (var i = 0, n = elm.length; i < n; ++i) {
        var c = elm[ i ];

        if (c === '-') {
          negate = true;
        } else if (c === '+') {
          negate = false;
        } else if (c === '/') {
          denominator = true;
        } else if (c === 'X') {
          me[ 0 + row ] = negate ? -1 : 1;
        } else if (c === 'Y') {
          me[ 4 + row ] = negate ? -1 : 1;
        } else if (c === 'Z') {
          me[ 8 + row ] = negate ? -1 : 1;
        } else if (reInteger.test(c)) {
          var integer = parseInt(c);
          if (denominator) {
            me[ 12 + row ] /= integer;
          } else {
            me[ 12 + row ] = integer;
          }
        } else {
          Log.warn('getSymmetryOperations: unknown token "' + c + '"');
        }
        // console.log( "token", c )
      }

      row += 1;
    });

    // console.log( "matrix", me )
  });

  return matrixDict
}

/**
 * @file Assembly
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function selectionFromChains (chainList) {
  var sele = '';
  if (chainList.length > 0) {
    sele = ':' + uniqueArray(chainList).join(' OR :');
  }
  return new Selection(sele)
}

/**
 * Assembly of transformed parts of a {@link Structure}
 */
var Assembly = function Assembly (name) {
  this.name = name || '';
  this.partList = [];
};

var prototypeAccessors$16 = { type: {} };

prototypeAccessors$16.type.get = function () { return 'Assembly' };

  /**
   * Add transformed parts to the assembly
   * @example
   * var m1 = new NGL.Matrix4().set( ... );
   * var m2 = new NGL.Matrix4().set( ... );
   * var assembly = new NGL.Assembly( "myAssembly" );
   * // add part that transforms chain 'A' and 'B' using matrices `m1` and `m2`
   * assembly.addPart( [ m1, m2 ], [ "A", "B" ] )
   *
   * @param {Matrix4[]} matrixList - array of 4x4 transformation matrices
   * @param {String[]} chainList - array of chain names
   * @return {AssemblyPart} the added assembly part
   */
Assembly.prototype.addPart = function addPart (matrixList, chainList) {
  var part = new AssemblyPart(matrixList, chainList);
  this.partList.push(part);
  return part
};

Assembly.prototype._getCount = function _getCount (structure, methodName) {
  var count = 0;

  this.partList.forEach(function (part) {
    count += part[ methodName ](structure);
  });

  return count
};

  /**
   * Get the number of atom for a given structure
   * @param{Structure} structure - the given structure
   * @return {Integer} number of atoms in the assembly
   */
Assembly.prototype.getAtomCount = function getAtomCount (structure) {
  return this._getCount(structure, 'getAtomCount')
};

  /**
   * Get the number of residues for a given structure
   * @param{Structure} structure - the given structure
   * @return {Integer} number of residues in the assembly
   */
Assembly.prototype.getResidueCount = function getResidueCount (structure) {
  return this._getCount(structure, 'getResidueCount')
};

  /**
   * Get number of instances the assembly will produce, i.e.
   * the number of transformations performed by the assembly
   * @return {Integer} number of instances
   */
Assembly.prototype.getInstanceCount = function getInstanceCount () {
  var instanceCount = 0;

  this.partList.forEach(function (part) {
    instanceCount += part.matrixList.length;
  });

  return instanceCount
};

  /**
   * Determine if the assembly is the full and untransformed structure
   * @param{Structure}structure - the given structure
   * @return {Boolean} whether the assembly is identical to the structure
   */
Assembly.prototype.isIdentity = function isIdentity (structure) {
  if (this.partList.length !== 1) { return false }

  var part = this.partList[ 0 ];
  if (part.matrixList.length !== 1) { return false }

  var identityMatrix = new Matrix4();
  if (!identityMatrix.equals(part.matrixList[ 0 ])) { return false }

  var structureChainList = [];
  structure.eachChain(function (cp) {
    structureChainList.push(cp.chainname);
  });
  structureChainList = uniqueArray(structureChainList);
  if (part.chainList.length !== structureChainList.length) { return false }

  return true
};

Assembly.prototype.getBoundingBox = function getBoundingBox (structure) {
  var boundingBox = new Box3();

  this.partList.forEach(function (part) {
    var partBox = part.getBoundingBox(structure);
    boundingBox.expandByPoint(partBox.min);
    boundingBox.expandByPoint(partBox.max);
  });

  return boundingBox
};

Assembly.prototype.getCenter = function getCenter (structure) {
  return this.getBoundingBox(structure).getCenter()
};

Assembly.prototype.getSelection = function getSelection () {
  var chainList = [];
  this.partList.forEach(function (part) {
    chainList = chainList.concat(part.chainList);
  });
  return selectionFromChains(chainList)
};

Object.defineProperties( Assembly.prototype, prototypeAccessors$16 );

var AssemblyPart = function AssemblyPart (matrixList, chainList) {
  this.matrixList = matrixList || [];
  this.chainList = chainList || [];
};

var prototypeAccessors$1$2 = { type: {} };

prototypeAccessors$1$2.type.get = function () { return 'AssemblyPart' };

AssemblyPart.prototype._getCount = function _getCount (structure, propertyName) {
  var count = 0;
  var chainList = this.chainList;

  structure.eachChain(function (cp) {
    if (chainList.length === 0 || chainList.includes(cp.chainname)) {
      count += cp[ propertyName ];
    }
  });

  return this.matrixList.length * count
};

AssemblyPart.prototype.getAtomCount = function getAtomCount (structure) {
  return this._getCount(structure, 'atomCount')
};

AssemblyPart.prototype.getResidueCount = function getResidueCount (structure) {
  return this._getCount(structure, 'residueCount')
};

AssemblyPart.prototype.getBoundingBox = function getBoundingBox (structure) {
  var partBox = new Box3();
  var instanceBox = new Box3();

  var selection = this.getSelection();
  var structureBox = structure.getBoundingBox(selection);

  this.matrixList.forEach(function (matrix) {
    instanceBox.copy(structureBox).applyMatrix4(matrix);
    partBox.expandByPoint(instanceBox.min);
    partBox.expandByPoint(instanceBox.max);
  });

  return partBox
};

AssemblyPart.prototype.getSelection = function getSelection () {
  return selectionFromChains(this.chainList)
};

AssemblyPart.prototype.getView = function getView (structure) {
  var selection = this.getSelection();
  if (selection) {
    return structure.getView(selection)
  } else {
    return structure
  }
};

AssemblyPart.prototype.getInstanceList = function getInstanceList () {
    var this$1 = this;

  var instanceList = [];
  for (var j = 0, jl = this.matrixList.length; j < jl; ++j) {
    instanceList.push({
      id: j + 1,
      name: j,
      matrix: this$1.matrixList[ j ]
    });
  }
  return instanceList
};

Object.defineProperties( AssemblyPart.prototype, prototypeAccessors$1$2 );

/**
 * @file Structure Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function assignSecondaryStructure (structure, secStruct) {
  if (!secStruct) { return }

  if (Debug) { Log.time('assignSecondaryStructure'); }

  var chainnames = [];
  structure.eachModel(function (mp) {
    mp.eachChain(function (cp) {
      chainnames.push(cp.chainname);
    });
  });

  var chainnamesSorted = chainnames.slice().sort();
  var chainnamesIndex = [];
  chainnamesSorted.forEach(function (c) {
    chainnamesIndex.push(chainnames.indexOf(c));
  });

    // helix assignment

  var helices = secStruct.helices;

  helices = helices.filter(function (h) {
    return binarySearchIndexOf(chainnamesSorted, h[ 0 ]) >= 0
  });

  helices.sort(function (h1, h2) {
    var c1 = h1[ 0 ];
    var c2 = h2[ 0 ];
    var r1 = h1[ 1 ];
    var r2 = h2[ 1 ];

    if (c1 === c2) {
      if (r1 === r2) {
        return 0
      } else {
        return r1 < r2 ? -1 : 1
      }
    } else {
      var idx1 = binarySearchIndexOf(chainnamesSorted, c1);
      var idx2 = binarySearchIndexOf(chainnamesSorted, c2);
      return chainnamesIndex[ idx1 ] < chainnamesIndex[ idx2 ] ? -1 : 1
    }
  });

  var residueStore = structure.residueStore;

  structure.eachModel(function (mp) {
    var i = 0;
    var n = helices.length;
    if (n === 0) { return }
    var helix = helices[ i ];
    var helixRun = false;
    var done = false;

    mp.eachChain(function (cp) {
      var chainChange = false;

      if (cp.chainname === helix[ 0 ]) {
        var count = cp.residueCount;
        var offset = cp.residueOffset;
        var end = offset + count;

        for (var j = offset; j < end; ++j) {
          if (residueStore.resno[ j ] === helix[ 1 ] &&  // resnoBeg
                        residueStore.getInscode(j) === helix[ 2 ]   // inscodeBeg
                    ) {
            helixRun = true;
          }

          if (helixRun) {
            residueStore.sstruc[ j ] = helix[ 6 ];

            if (residueStore.resno[ j ] === helix[ 4 ] &&  // resnoEnd
                            residueStore.getInscode(j) === helix[ 5 ]   // inscodeEnd
                        ) {
              helixRun = false;
              i += 1;

              if (i < n) {
                                // must look at previous residues as
                                // residues may not be ordered by resno
                j = offset - 1;
                helix = helices[ i ];
                chainChange = cp.chainname !== helix[ 0 ];
              } else {
                done = true;
              }
            }
          }

          if (chainChange || done) { return }
        }
      }
    });
  });

    // sheet assignment

  var sheets = secStruct.sheets;

  sheets = sheets.filter(function (s) {
    return binarySearchIndexOf(chainnamesSorted, s[ 0 ]) >= 0
  });

  sheets.sort(function (s1, s2) {
    var c1 = s1[ 0 ];
    var c2 = s2[ 0 ];

    if (c1 === c2) { return 0 }
    var idx1 = binarySearchIndexOf(chainnamesSorted, c1);
    var idx2 = binarySearchIndexOf(chainnamesSorted, c2);
    return chainnamesIndex[ idx1 ] < chainnamesIndex[ idx2 ] ? -1 : 1
  });

  var strandCharCode = 'e'.charCodeAt(0);
  structure.eachModel(function (mp) {
    var i = 0;
    var n = sheets.length;
    if (n === 0) { return }
    var sheet = sheets[ i ];
    var sheetRun = false;
    var done = false;

    mp.eachChain(function (cp) {
      var chainChange = false;

      if (cp.chainname === sheet[ 0 ]) {
        var count = cp.residueCount;
        var offset = cp.residueOffset;
        var end = offset + count;

        for (var j = offset; j < end; ++j) {
          if (residueStore.resno[ j ] === sheet[ 1 ] &&  // resnoBeg
                        residueStore.getInscode(j) === sheet[ 2 ]   // inscodeBeg
                    ) {
            sheetRun = true;
          }

          if (sheetRun) {
            residueStore.sstruc[ j ] = strandCharCode;

            if (residueStore.resno[ j ] === sheet[ 4 ] &&  // resnoEnd
                            residueStore.getInscode(j) === sheet[ 5 ]   // inscodeEnd
                        ) {
              sheetRun = false;
              i += 1;

              if (i < n) {
                                // must look at previous residues as
                                // residues may not be ordered by resno
                j = offset - 1;
                sheet = sheets[ i ];
                chainChange = cp.chainname !== sheet[ 0 ];
              } else {
                done = true;
              }
            }
          }

          if (chainChange || done) { return }
        }
      }
    });
  });

  if (Debug) { Log.timeEnd('assignSecondaryStructure'); }
}

var calculateSecondaryStructure = (function () {
    // Implementation for proteins based on "pv"
    //
    // assigns secondary structure information based on a simple and very fast
    // algorithm published by Zhang and Skolnick in their TM-align paper.
    // Reference:
    //
    // TM-align: a protein structure alignment algorithm based on the Tm-score
    // (2005) NAR, 33(7) 2302-2309

  var zhangSkolnickSS = function (polymer, i, distances, delta) {
    var structure = polymer.structure;
    var offset = polymer.residueIndexStart;
    var rp1 = structure.getResidueProxy();
    var rp2 = structure.getResidueProxy();
    var ap1 = structure.getAtomProxy();
    var ap2 = structure.getAtomProxy();

    for (var j = Math.max(0, i - 2); j <= i; ++j) {
      for (var k = 2; k < 5; ++k) {
        if (j + k >= polymer.residueCount) {
          continue
        }

        rp1.index = offset + j;
        rp2.index = offset + j + k;
        ap1.index = rp1.traceAtomIndex;
        ap2.index = rp2.traceAtomIndex;

        var d = ap1.distanceTo(ap2);

        if (Math.abs(d - distances[ k - 2 ]) > delta) {
          return false
        }
      }
    }

    return true
  };

  var isHelical = function (polymer, i) {
    var helixDistances = [ 5.45, 5.18, 6.37 ];
    var helixDelta = 2.1;
    return zhangSkolnickSS(polymer, i, helixDistances, helixDelta)
  };

  var isSheet = function (polymer, i) {
    var sheetDistances = [ 6.1, 10.4, 13.0 ];
    var sheetDelta = 1.42;
    return zhangSkolnickSS(polymer, i, sheetDistances, sheetDelta)
  };

  var proteinPolymer = function (p) {
    var residueStore = p.residueStore;
    var offset = p.residueIndexStart;
    for (var i = 0, il = p.residueCount; i < il; ++i) {
      var sstruc = 'c';
      if (isHelical(p, i)) {
        sstruc = 'h';
      } else if (isSheet(p, i)) {
        sstruc = 's';
      }
      residueStore.sstruc[ offset + i ] = sstruc.charCodeAt(0);
    }
  };

  var cgPolymer = function (p) {
    var localAngle = 20;
    var centerDist = 2.0;

    var residueStore = p.residueStore;
    var offset = p.residueIndexStart;

    var helixbundle = new Helixbundle(p);
    var pos = helixbundle.position;

    var c1 = new Vector3();
    var c2 = new Vector3();

    for (var i = 0, il = p.residueCount; i < il; ++i) {
      c1.fromArray(pos.center, i * 3);
      c2.fromArray(pos.center, i * 3 + 3);
      var d = c1.distanceTo(c2);

      if (d < centerDist && d > 1.0 && pos.bending[ i ] < localAngle) {
        residueStore.sstruc[ offset + i ] = 'h'.charCodeAt(0);
        residueStore.sstruc[ offset + i + 1 ] = 'h'.charCodeAt(0);
      }
    }
  };

  return function calculateSecondaryStructure (structure) {
    if (Debug) { Log.time('calculateSecondaryStructure'); }

    structure.eachPolymer(function (p) {
            // assign secondary structure
      if (p.residueCount < 4) { return }
      if (p.isCg()) {
        cgPolymer(p);
      } else if (p.isProtein()) {
        proteinPolymer(p);
      } else {
        return
      }

            // set lone secondary structure assignments to "c"
      var prevSstruc;
      var sstrucCount = 0;
      p.eachResidue(function (r) {
        if (r.sstruc === prevSstruc) {
          sstrucCount += 1;
        } else {
          if (sstrucCount === 1) {
            r.index -= 1;
            r.sstruc = 'c';
          }
          sstrucCount = 1;
          prevSstruc = r.sstruc;
        }
      });
    });

    if (Debug) { Log.timeEnd('calculateSecondaryStructure'); }
  }
}());

function calculateChainnames (structure) {
  if (Debug) { Log.time('calculateChainnames'); }

  var doAutoChainName = true;
  structure.eachChain(function (c) {
    if (c.chainname) { doAutoChainName = false; }
  });

  if (doAutoChainName) {
        // var names = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
        //             "abcdefghijklmnopqrstuvwxyz" +
        //             "0123456789";
    var names = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var n = names.length;

    var modelStore = structure.modelStore;
    var chainStore = structure.chainStore;
    var residueStore = structure.residueStore;

    var addChain = function (mIndex, chainname, rOffset, rCount) {
      var ci = chainStore.count;
      for (var i = 0; i < rCount; ++i) {
        residueStore.chainIndex[ rOffset + i ] = ci;
      }
      chainStore.growIfFull();
      chainStore.modelIndex[ ci ] = mIndex;
      chainStore.setChainname(ci, chainname);
      chainStore.setChainid(ci, chainname);
      chainStore.residueOffset[ ci ] = rOffset;
      chainStore.residueCount[ ci ] = rCount;
      chainStore.count += 1;
      modelStore.chainCount[ mIndex ] += 1;
    };

    var getName = function (i) {
      var j = i;
      var k = 0;
      var chainname = names[ j % n ];
      while (j >= n) {
        j = Math.floor(j / n);
        chainname += names[ j % n ];
        k += 1;
      }
      if (k >= 5) {
        Log.warn('chainname overflow');
      }
      return chainname
    };

    var ap1 = structure.getAtomProxy();
    var ap2 = structure.getAtomProxy();

    var i = 0;
    var mi = 0;
    var rStart = 0;
    var rEnd = 0;
    var chainData = [];

    if (residueStore.count === 1) {
      chainData.push({
        mIndex: 0,
        chainname: 'A',
        rStart: 0,
        rCount: 1
      });
    } else {
      structure.eachResidueN(2, function (rp1, rp2) {
        var newChain = false;

        var bbType1 = rp1.backboneType;
        var bbType2 = rp2.backboneType;
        var bbTypeUnk = UnknownBackboneType;

        rEnd = rp1.index;

        if (rp1.modelIndex !== rp2.modelIndex) {
          newChain = true;
        } else if (rp1.moleculeType !== rp2.moleculeType) {
          newChain = true;
        } else if (bbType1 !== bbTypeUnk && bbType1 === bbType2) {
          ap1.index = rp1.backboneEndAtomIndex;
          ap2.index = rp2.backboneStartAtomIndex;
          if (!ap1.connectedTo(ap2)) {
            newChain = true;
          }
        }

                // current chain goes to end of the structure
        if (!newChain && rp2.index === residueStore.count - 1) {
          newChain = true;
          rEnd = rp2.index;
        }

        if (newChain) {
          chainData.push({
            mIndex: mi,
            chainname: getName(i),
            rStart: rStart,
            rCount: rEnd - rStart + 1
          });

          i += 1;

          if (rp1.modelIndex !== rp2.modelIndex) {
            i = 0;
            mi += 1;
          }

                    // new chain for the last residue of the structure
          if (rp2.index === residueStore.count - 1 && rEnd !== rp2.index) {
            chainData.push({
              mIndex: mi,
              chainname: getName(i),
              rStart: residueStore.count - 1,
              rCount: 1
            });
          }

          rStart = rp2.index;
          rEnd = rp2.index;
        }
      });
    }

        //

    chainStore.count = 0;
    chainData.forEach(function (d) {
      addChain(d.mIndex, d.chainname, d.rStart, d.rCount);
    });

    var chainOffset = 0;
    structure.eachModel(function (mp) {
      modelStore.chainOffset[ mp.index ] = chainOffset;
      modelStore.chainCount[ mp.index ] -= 1;
      chainOffset += modelStore.chainCount[ mp.index ];
    });
  }

  if (Debug) { Log.timeEnd('calculateChainnames'); }
}

function calculateBonds (structure) {
  if (Debug) { Log.time('calculateBonds'); }

  calculateBondsWithin(structure);
  calculateBondsBetween(structure);

  if (Debug) { Log.timeEnd('calculateBonds'); }
}

function calculateResidueBonds (r) {
  var structure = r.structure;
  var a1 = structure.getAtomProxy();
  var a2 = structure.getAtomProxy();

  var count = r.atomCount;
  var offset = r.atomOffset;
  var end = offset + count;
  var end1 = end - 1;

  if (count > 500) {
    if (Debug) { Log.warn('more than 500 atoms, skip residue for auto-bonding', r.qualifiedName()); }
    return
  }

  var i, j;
  var atomIndices1 = [];
  var atomIndices2 = [];
  var bondOrders = [];

  if (count > 50) {
    var kdtree = new Kdtree(r, true);
    var radius = r.isCg() ? 1.2 : 2.3;

    for (i = offset; i < end1; ++i) {
      a1.index = i;
      var maxd = a1.covalent + radius + 0.3;
      var nearestAtoms = kdtree.nearest(
                a1, Infinity, maxd * maxd
            );
      var m = nearestAtoms.length;
      for (j = 0; j < m; ++j) {
        a2.index = nearestAtoms[ j ].index;
        if (a1.index < a2.index) {
          if (a1.connectedTo(a2)) {
            atomIndices1.push(a1.index - offset);
            atomIndices2.push(a2.index - offset);
            bondOrders.push(1);
          }
        }
      }
    }
  } else {
    for (i = offset; i < end1; ++i) {
      a1.index = i;
      for (j = i + 1; j <= end1; ++j) {
        a2.index = j;
        if (a1.connectedTo(a2)) {
          atomIndices1.push(i - offset);
          atomIndices2.push(j - offset);
          bondOrders.push(1);
        }
      }
    }
  }

  return {
    atomIndices1: atomIndices1,
    atomIndices2: atomIndices2,
    bondOrders: bondOrders
  }
}

function calculateAtomBondMap (structure) {
  if (Debug) { Log.time('calculateAtomBondMap'); }

  var atomBondMap = [];

  structure.eachBond(function (bp) {
    var ai1 = bp.atomIndex1;
    var ai2 = bp.atomIndex2;
    if (atomBondMap[ ai1 ] === undefined) { atomBondMap[ ai1 ] = []; }
    atomBondMap[ ai1 ][ ai2 ] = bp.index;
  });

  if (Debug) { Log.timeEnd('calculateAtomBondMap'); }

  return atomBondMap
}

function calculateBondsWithin (structure, onlyAddRung) {
  if (Debug) { Log.time('calculateBondsWithin'); }

  var bondStore = structure.bondStore;
  var rungBondStore = structure.rungBondStore;
  var rungAtomSet = structure.getAtomSet(false);
  var a1 = structure.getAtomProxy();
  var a2 = structure.getAtomProxy();
  var bp = structure.getBondProxy();
  var atomBondMap = onlyAddRung ? null : calculateAtomBondMap(structure);

  structure.eachResidue(function (r) {
    if (!onlyAddRung) {
      var count = r.atomCount;
      var offset = r.atomOffset;

      if (count > 500) {
        Log.warn('more than 500 atoms, skip residue for auto-bonding', r.qualifiedName());
        return
      }

      var bonds = r.getBonds();
      var atomIndices1 = bonds.atomIndices1;
      var atomIndices2 = bonds.atomIndices2;
      var bondOrders = bonds.bondOrders;
      var nn = atomIndices1.length;

      for (var i = 0; i < nn; ++i) {
        var ai1 = atomIndices1[ i ] + offset;
        var ai2 = atomIndices2[ i ] + offset;
        var tmp = atomBondMap[ ai1 ];
        if (tmp !== undefined && (tmp = tmp[ ai2 ]) !== undefined) {
          bp.index = tmp;
          var residueTypeBondIndex = r.residueType.getBondIndex(ai1, ai2);
                    // overwrite residueType bondOrder with value from existing bond
          bondOrders[ residueTypeBondIndex ] = bp.bondOrder;
        } else {
          a1.index = ai1;
          a2.index = ai2;
                    // only add bond if not already in bondStore
          bondStore.addBond(a1, a2, bondOrders[ i ]);
        }
      }
    }

        // get RNA/DNA rung pseudo bonds
    var traceAtomIndex = r.residueType.traceAtomIndex;
    var rungEndAtomIndex = r.residueType.rungEndAtomIndex;
    if (traceAtomIndex !== -1 && rungEndAtomIndex !== -1) {
      a1.index = r.traceAtomIndex;
      a2.index = r.rungEndAtomIndex;
      rungBondStore.addBond(a1, a2);
      rungAtomSet.set(a1.index);
      rungAtomSet.set(a2.index);
    }
  });

  structure.atomSetDict.rung = rungAtomSet;

  if (Debug) { Log.timeEnd('calculateBondsWithin'); }
}

function calculateBondsBetween (structure, onlyAddBackbone) {
  if (Debug) { Log.time('calculateBondsBetween'); }

  var bondStore = structure.bondStore;
  var backboneBondStore = structure.backboneBondStore;
  var backboneAtomSet = structure.getAtomSet(false);
  var ap1 = structure.getAtomProxy();
  var ap2 = structure.getAtomProxy();

  if (backboneBondStore.count === 0) {
    backboneBondStore.resize(structure.residueStore.count);
  }

  function addBondIfConnected (rp1, rp2) {
    var bbType1 = rp1.backboneType;
    var bbType2 = rp2.backboneType;
    if (bbType1 !== UnknownBackboneType && bbType1 === bbType2) {
      ap1.index = rp1.backboneEndAtomIndex;
      ap2.index = rp2.backboneStartAtomIndex;
      if (ap1.connectedTo(ap2)) {
        if (!onlyAddBackbone) {
          bondStore.addBond(ap1, ap2, 1);  // assume single bond
        }
        ap1.index = rp1.traceAtomIndex;
        ap2.index = rp2.traceAtomIndex;
        backboneBondStore.addBond(ap1, ap2);
        backboneAtomSet.set(ap1.index);
        backboneAtomSet.set(ap2.index);
      }
    }
  }

  structure.eachResidueN(2, addBondIfConnected);

  var rp1 = structure.getResidueProxy();
  var rp2 = structure.getResidueProxy();

    // check for cyclic chains
  structure.eachChain(function (cp) {
    if (cp.residueCount === 0) { return }
    rp1.index = cp.residueOffset;
    rp2.index = cp.residueOffset + cp.residueCount - 1;
    addBondIfConnected(rp2, rp1);
  });

  structure.atomSetDict.backbone = backboneAtomSet;

  if (Debug) { Log.timeEnd('calculateBondsBetween'); }
}

function buildUnitcellAssembly (structure) {
  if (!structure.unitcell) { return }

  if (Debug) { Log.time('buildUnitcellAssembly'); }

  var uc = structure.unitcell;

  var centerFrac = structure.center.clone().applyMatrix4(uc.cartToFrac);
  var symopDict = getSymmetryOperations(uc.spacegroup);

  var positionFrac = new Vector3();
  var centerFracSymop = new Vector3();
  var positionFracSymop = new Vector3();

  if (centerFrac.x > 1) { positionFrac.x -= 1; }
  if (centerFrac.x < 0) { positionFrac.x += 1; }
  if (centerFrac.y > 1) { positionFrac.y -= 1; }
  if (centerFrac.y < 0) { positionFrac.y += 1; }
  if (centerFrac.z > 1) { positionFrac.z -= 1; }
  if (centerFrac.z < 0) { positionFrac.z += 1; }

  function getMatrixList (shift) {
    var matrixList = [];

    Object.keys(symopDict).forEach(function (name) {
      var m = symopDict[ name ].clone();

      centerFracSymop.copy(centerFrac).applyMatrix4(m);
      positionFracSymop.setFromMatrixPosition(m);
      positionFracSymop.sub(positionFrac);

      if (centerFracSymop.x > 1) { positionFracSymop.x -= 1; }
      if (centerFracSymop.x < 0) { positionFracSymop.x += 1; }
      if (centerFracSymop.y > 1) { positionFracSymop.y -= 1; }
      if (centerFracSymop.y < 0) { positionFracSymop.y += 1; }
      if (centerFracSymop.z > 1) { positionFracSymop.z -= 1; }
      if (centerFracSymop.z < 0) { positionFracSymop.z += 1; }

      if (shift) { positionFracSymop.add(shift); }

      m.setPosition(positionFracSymop);
      m.multiplyMatrices(uc.fracToCart, m);
      m.multiply(uc.cartToFrac);

      matrixList.push(m);
    });

    return matrixList
  }

  var unitcellAssembly = new Assembly('UNITCELL');
  var unitcellMatrixList = getMatrixList();
  var ncsMatrixList;
  if (structure.biomolDict.NCS) {
    ncsMatrixList = [ new Matrix4() ].concat(
            structure.biomolDict.NCS.partList[ 0 ].matrixList
        );
    var ncsUnitcellMatrixList = [];
    unitcellMatrixList.forEach(function (sm) {
      ncsMatrixList.forEach(function (nm) {
        ncsUnitcellMatrixList.push(sm.clone().multiply(nm));
      });
    });
    unitcellAssembly.addPart(ncsUnitcellMatrixList);
  } else {
    unitcellAssembly.addPart(unitcellMatrixList);
  }

  var vec = new Vector3();
  var supercellAssembly = new Assembly('SUPERCELL');
  var supercellMatrixList = Array.prototype.concat.call(
    getMatrixList(vec.set(1, 0, 0)),  // 655
    getMatrixList(vec.set(0, 1, 0)),  // 565
    getMatrixList(vec.set(0, 0, 1)),  // 556

    getMatrixList(vec.set(-1, 0, 0)),  // 455
    getMatrixList(vec.set(0, -1, 0)),  // 545
    getMatrixList(vec.set(0, 0, -1)),  // 554

    getMatrixList(vec.set(1, 1, 0)),  // 665
    getMatrixList(vec.set(1, 0, 1)),  // 656
    getMatrixList(vec.set(0, 1, 1)),  // 566

    getMatrixList(vec.set(-1, -1, 0)),  // 445
    getMatrixList(vec.set(-1, 0, -1)),  // 454
    getMatrixList(vec.set(0, -1, -1)),  // 544

    getMatrixList(vec.set(1, -1, -1)),  // 644
    getMatrixList(vec.set(1, 1, -1)),  // 664
    getMatrixList(vec.set(1, -1, 1)),  // 646
    getMatrixList(vec.set(-1, 1, 1)),  // 466
    getMatrixList(vec.set(-1, -1, 1)),  // 446
    getMatrixList(vec.set(-1, 1, -1)),  // 464

    getMatrixList(vec.set(0, 1, -1)),  // 564
    getMatrixList(vec.set(0, -1, 1)),  // 546
    getMatrixList(vec.set(1, 0, -1)),  // 654
    getMatrixList(vec.set(-1, 0, 1)),  // 456
    getMatrixList(vec.set(1, -1, 0)),  // 645
    getMatrixList(vec.set(-1, 1, 0)),  // 465

    getMatrixList(),                         // 555
    getMatrixList(vec.set(1, 1, 1)),  // 666
    getMatrixList(vec.set(-1, -1, -1))   // 444
  );
  if (structure.biomolDict.NCS) {
    var ncsSupercellMatrixList = [];
    supercellMatrixList.forEach(function (sm) {
      ncsMatrixList.forEach(function (nm) {
        ncsSupercellMatrixList.push(sm.clone().multiply(nm));
      });
    });
    supercellAssembly.addPart(ncsSupercellMatrixList);
  } else {
    supercellAssembly.addPart(supercellMatrixList);
  }

  structure.biomolDict.UNITCELL = unitcellAssembly;
  structure.biomolDict.SUPERCELL = supercellAssembly;

  if (Debug) { Log.timeEnd('buildUnitcellAssembly'); }
}

var elm1 = [ 'H', 'C', 'O', 'N', 'S', 'P' ];
var elm2 = [ 'NA', 'CL', 'FE' ];

function guessElement (atomName) {
  var at = atomName.trim().toUpperCase();
  if (parseInt(at.charAt(0))) { at = at.substr(1); }
    // parse again to check for a second integer
  if (parseInt(at.charAt(0))) { at = at.substr(1); }
  var n = at.length;

  if (n === 0) { return '' }
  if (n === 1) { return at }
  if (n === 2) {
    if (elm2.indexOf(at) !== -1) { return at }
    if (elm1.indexOf(at[0]) !== -1) { return at[0] }
  }
  if (n >= 3) {
    if (elm1.indexOf(at[0]) !== -1) { return at[0] }
  }
  return ''
}

/**
 * Assigns ResidueType bonds.
 * @param {Structure} structure - the structure object
 * @return {undefined}
 */
function assignResidueTypeBonds (structure) {
    // if( Debug ) Log.time( "assignResidueTypeBonds" );

  var bondHash = structure.bondHash;
  var countArray = bondHash.countArray;
  var offsetArray = bondHash.offsetArray;
  var indexArray = bondHash.indexArray;
  var bp = structure.getBondProxy();

  structure.eachResidue(function (rp) {
    var residueType = rp.residueType;
    if (residueType.bonds !== undefined) { return }

    var atomOffset = rp.atomOffset;
    var atomIndices1 = [];
    var atomIndices2 = [];
    var bondOrders = [];
    var bondDict = {};

    rp.eachAtom(function (ap) {
      var index = ap.index;
      var offset = offsetArray[ index ];
      var count = countArray[ index ];
      for (var i = 0, il = count; i < il; ++i) {
        bp.index = indexArray[ offset + i ];
        var idx1 = bp.atomIndex1;
        var idx2 = bp.atomIndex2;
        if (idx1 > idx2) {
          var tmp = idx2;
          idx2 = idx1;
          idx1 = tmp;
        }
        var hash = idx1 + '|' + idx2;
        if (bondDict[ hash ] === undefined) {
          bondDict[ hash ] = true;
          atomIndices1.push(idx1 - atomOffset);
          atomIndices2.push(idx2 - atomOffset);
          bondOrders.push(bp.bondOrder);
        }
      }
    });

    residueType.bonds = {
      atomIndices1: atomIndices1,
      atomIndices2: atomIndices2,
      bondOrders: bondOrders
    };
  });

    // if( Debug ) Log.timeEnd( "assignResidueTypeBonds" );
}

/**
 * @file Atom Type
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Atom type
 */
var AtomType = function AtomType (structure, atomname, element) {
  this.structure = structure;

  element = element || guessElement(atomname);

  this.atomname = atomname;
  this.element = element;
  this.vdw = VdwRadii[ element ];
  this.covalent = CovalentRadii[ element ];
};

/**
 * @file Atom Map
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function getHash (atomname, element) {
  return atomname + '|' + element
}

var AtomMap = function AtomMap (structure) {
  this.structure = structure;

  this.dict = {};
  this.list = [];
};

AtomMap.prototype.add = function add (atomname, element) {
  atomname = atomname.toUpperCase();
  if (!element) {
    element = guessElement(atomname);
  } else {
    element = element.toUpperCase();
  }
  var hash = getHash(atomname, element);
  var id = this.dict[ hash ];
  if (id === undefined) {
    var atomType = new AtomType(this.structure, atomname, element);
    id = this.list.length;
    this.dict[ hash ] = id;
    this.list.push(atomType);
  }
  return id
};

AtomMap.prototype.get = function get (id) {
  return this.list[ id ]
};

/**
 * @file Residue Type
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @author Fred Ludlow
 * @private
 */

/**
 * Residue type
 */
var ResidueType = function ResidueType (structure, resname, atomTypeIdList, hetero, chemCompType, bonds) {
  this.structure = structure;

  this.resname = resname;
  this.atomTypeIdList = atomTypeIdList;
  this.hetero = hetero ? 1 : 0;
  this.chemCompType = chemCompType;
  this.bonds = bonds;
  this.rings = undefined;
  this.atomCount = atomTypeIdList.length;

  this.moleculeType = this.getMoleculeType();
  this.backboneType = this.getBackboneType(0);
  this.backboneEndType = this.getBackboneType(-1);
  this.backboneStartType = this.getBackboneType(1);
  this.backboneIndexList = this.getBackboneIndexList();

  var atomnames = ResidueTypeAtoms[ this.backboneType ];
  var atomnamesStart = ResidueTypeAtoms[ this.backboneStartType ];
  var atomnamesEnd = ResidueTypeAtoms[ this.backboneEndType ];

  var traceIndex = this.getAtomIndexByName(atomnames.trace);
  this.traceAtomIndex = traceIndex !== undefined ? traceIndex : -1;

  var dir1Index = this.getAtomIndexByName(atomnames.direction1);
  this.direction1AtomIndex = dir1Index !== undefined ? dir1Index : -1;

  var dir2Index = this.getAtomIndexByName(atomnames.direction2);
  this.direction2AtomIndex = dir2Index !== undefined ? dir2Index : -1;

  var bbStartIndex = this.getAtomIndexByName(atomnamesStart.backboneStart);
  this.backboneStartAtomIndex = bbStartIndex !== undefined ? bbStartIndex : -1;

  var bbEndIndex = this.getAtomIndexByName(atomnamesEnd.backboneEnd);
  this.backboneEndAtomIndex = bbEndIndex !== undefined ? bbEndIndex : -1;

  var rungEndIndex;
  if (PurinBases.includes(resname)) {
    rungEndIndex = this.getAtomIndexByName('N1');
  } else {
    rungEndIndex = this.getAtomIndexByName('N3');
  }
  this.rungEndAtomIndex = rungEndIndex !== undefined ? rungEndIndex : -1;

      // Sparse array containing the reference atom index for each bond.
  this.bondReferenceAtomIndices = [];
};

ResidueType.prototype.getBackboneIndexList = function getBackboneIndexList () {
  var backboneIndexList = [];
  var atomnameList;
  switch (this.moleculeType) {
    case ProteinType:
      atomnameList = ProteinBackboneAtoms;
      break
    case RnaType:
    case DnaType:
      atomnameList = NucleicBackboneAtoms;
      break
    default:
      return backboneIndexList
  }
  var atomMap = this.structure.atomMap;
  var atomTypeIdList = this.atomTypeIdList;
  for (var i = 0, il = this.atomCount; i < il; ++i) {
    var atomType = atomMap.get(atomTypeIdList[ i ]);
    if (atomnameList.includes(atomType.atomname)) {
      backboneIndexList.push(i);
    }
  }
  return backboneIndexList
};

ResidueType.prototype.getMoleculeType = function getMoleculeType () {
  if (this.isProtein()) {
    return ProteinType
  } else if (this.isRna()) {
    return RnaType
  } else if (this.isDna()) {
    return DnaType
  } else if (this.isWater()) {
    return WaterType
  } else if (this.isIon()) {
    return IonType
  } else if (this.isSaccharide()) {
    return SaccharideType
  } else {
    return UnknownType
  }
};

ResidueType.prototype.getBackboneType = function getBackboneType (position) {
  if (this.hasProteinBackbone(position)) {
    return ProteinBackboneType
  } else if (this.hasRnaBackbone(position)) {
    return RnaBackboneType
  } else if (this.hasDnaBackbone(position)) {
    return DnaBackboneType
  } else if (this.hasCgProteinBackbone(position)) {
    return CgProteinBackboneType
  } else if (this.hasCgRnaBackbone(position)) {
    return CgRnaBackboneType
  } else if (this.hasCgDnaBackbone(position)) {
    return CgDnaBackboneType
  } else {
    return UnknownBackboneType
  }
};

ResidueType.prototype.isProtein = function isProtein () {
  if (this.chemCompType) {
    return ChemCompProtein.includes(this.chemCompType)
  } else {
    return (
              this.hasAtomWithName('CA', 'C', 'N') ||
              AA3.includes(this.resname)
    )
  }
};

ResidueType.prototype.isCg = function isCg () {
  var backboneType = this.backboneType;
  return (
          backboneType === CgProteinBackboneType ||
          backboneType === CgRnaBackboneType ||
          backboneType === CgDnaBackboneType
  )
};

ResidueType.prototype.isNucleic = function isNucleic () {
  return this.isRna() || this.isDna()
};

ResidueType.prototype.isRna = function isRna () {
  if (this.chemCompType) {
    return ChemCompRna.includes(this.chemCompType)
  } else {
    return (
              this.hasAtomWithName(
                  [ 'P', "O3'", 'O3*' ], [ "C4'", 'C4*' ], [ "O2'", 'O2*', "F2'", 'F2*' ]
              ) ||
              (RnaBases.includes(this.resname) &&
                  (this.hasAtomWithName([ "O2'", 'O2*', "F2'", 'F2*' ])))
    )
  }
};

ResidueType.prototype.isDna = function isDna () {
  if (this.chemCompType) {
    return ChemCompDna.includes(this.chemCompType)
  } else {
    return (
              (this.hasAtomWithName([ 'P', "O3'", 'O3*' ], [ "C3'", 'C3*' ]) &&
                  !this.hasAtomWithName([ "O2'", 'O2*', "F2'", 'F2*' ])) ||
              DnaBases.includes(this.resname)
    )
  }
};

ResidueType.prototype.isHetero = function isHetero () {
  return this.hetero === 1
};

ResidueType.prototype.isIon = function isIon () {
  return IonNames.includes(this.resname)
};

ResidueType.prototype.isWater = function isWater () {
  return WaterNames.includes(this.resname)
};

ResidueType.prototype.isSaccharide = function isSaccharide () {
  if (this.chemCompType) {
    return ChemCompSaccharide.includes(this.chemCompType)
  } else {
    return SaccharideNames.includes(this.resname)
  }
};

ResidueType.prototype.hasBackboneAtoms = function hasBackboneAtoms (position, type) {
  var atomnames = ResidueTypeAtoms[ type ];
  if (position === -1) {
    return this.hasAtomWithName(
              atomnames.trace,
              atomnames.backboneEnd,
              atomnames.direction1,
              atomnames.direction2
          )
  } else if (position === 0) {
    return this.hasAtomWithName(
              atomnames.trace,
              atomnames.direction1,
              atomnames.direction2
          )
  } else if (position === 1) {
    return this.hasAtomWithName(
              atomnames.trace,
              atomnames.backboneStart,
              atomnames.direction1,
              atomnames.direction2
          )
  } else {
    return this.hasAtomWithName(
              atomnames.trace,
              atomnames.backboneStart,
              atomnames.backboneEnd,
              atomnames.direction1,
              atomnames.direction2
          )
  }
};

ResidueType.prototype.hasProteinBackbone = function hasProteinBackbone (position) {
  return (
          this.isProtein() &&
          this.hasBackboneAtoms(position, ProteinBackboneType)
  )
};

ResidueType.prototype.hasRnaBackbone = function hasRnaBackbone (position) {
  return (
          this.isRna() &&
          this.hasBackboneAtoms(position, RnaBackboneType)
  )
};

ResidueType.prototype.hasDnaBackbone = function hasDnaBackbone (position) {
  return (
          this.isDna() &&
          this.hasBackboneAtoms(position, DnaBackboneType)
  )
};

ResidueType.prototype.hasCgProteinBackbone = function hasCgProteinBackbone (position) {
  return (
          this.isProtein() &&
          this.hasBackboneAtoms(position, CgProteinBackboneType)
  )
};

ResidueType.prototype.hasCgRnaBackbone = function hasCgRnaBackbone (position) {
  return (
          this.isRna() &&
          this.hasBackboneAtoms(position, CgRnaBackboneType)
  )
};

ResidueType.prototype.hasCgDnaBackbone = function hasCgDnaBackbone (position) {
  return (
          this.isDna() &&
          this.hasBackboneAtoms(position, CgDnaBackboneType)
  )
};

ResidueType.prototype.hasBackbone = function hasBackbone (position) {
  return (
          this.hasProteinBackbone(position) ||
          this.hasRnaBackbone(position) ||
          this.hasDnaBackbone(position) ||
          this.hasCgProteinBackbone(position) ||
          this.hasCgRnaBackbone(position) ||
          this.hasCgDnaBackbone(position)
  )
};

ResidueType.prototype.getAtomIndexByName = function getAtomIndexByName (atomname) {
  var n = this.atomCount;
  var atomMap = this.structure.atomMap;
  var atomTypeIdList = this.atomTypeIdList;
  if (Array.isArray(atomname)) {
    for (var i = 0; i < n; ++i) {
      var index = atomTypeIdList[ i ];
      if (atomname.includes(atomMap.get(index).atomname)) {
        return i
      }
    }
  } else {
    for (var i$1 = 0; i$1 < n; ++i$1) {
      var index$1 = atomTypeIdList[ i$1 ];
      if (atomname === atomMap.get(index$1).atomname) {
        return i$1
      }
    }
  }
  return undefined
};

ResidueType.prototype.hasAtomWithName = function hasAtomWithName (/* atomname */) {
    var arguments$1 = arguments;
    var this$1 = this;

  var n = arguments.length;
  for (var i = 0; i < n; ++i) {
    if (arguments$1[ i ] === undefined) { continue }
    if (this$1.getAtomIndexByName(arguments$1[ i ]) === undefined) {
      return false
    }
  }
  return true
};

ResidueType.prototype.getBonds = function getBonds (r) {
  if (this.bonds === undefined) {
    this.bonds = calculateResidueBonds(r);
  }
  return this.bonds
};

ResidueType.prototype.getRings = function getRings () {
  if (this.rings === undefined) {
    this.calculateRings();
  }
  return this.rings
};

ResidueType.prototype.getBondGraph = function getBondGraph () {
  if (this.bondGraph === undefined) {
    this.calculateBondGraph();
  }
  return this.bondGraph
};

  /**
   * @return {Object} bondGraph - represents the bonding in this
   * residue: { ai1: [ ai2, ai3, ...], ...}
   */
ResidueType.prototype.calculateBondGraph = function calculateBondGraph () {
  var bondGraph = this.bondGraph = {};
  var bonds = this.getBonds();
  var nb = bonds.atomIndices1.length;
  var atomIndices1 = bonds.atomIndices1;
  var atomIndices2 = bonds.atomIndices2;

  for (var i = 0; i < nb; ++i) {
    var ai1 = atomIndices1[i];
    var ai2 = atomIndices2[i];

    var a1 = bondGraph[ ai1 ] = bondGraph[ ai1 ] || [];
    a1.push(ai2);

    var a2 = bondGraph[ ai2 ] = bondGraph[ ai2 ] || [];
    a2.push(ai1);
  }
};

  /**
   * Calculates ring atoms within a residue
   * Adaptation of RDKit's fastFindRings method by G. Landrum:
   * https://github.com/rdkit/rdkit/blob/master/Code/GraphMol/FindRings.cpp
   *
   * @param {ResidueProxy} r - The residue for which we are to find rings
   * @return {Object} ringData - contains ringFlags (1/0) and rings
   *                           (nested array)
   *
   * Note this method finds all ring atoms, but in cases of fused or
   * connected rings will not detect all rings.
   * The resulting rings object will provide 'a ring' for each ring atom
   * but which ring depends on atom order and connectivity
   *
   * @return {undefined}
   */
ResidueType.prototype.calculateRings = function calculateRings () {
  var bondGraph = this.getBondGraph();

  var state = new Int8Array(this.atomCount);
  var flags = new Int8Array(this.atomCount);
  var rings = [];
  var visited = [];

  function DFS (i, connected, from) {
          // Sanity check
    if (state[ i ]) { throw new Error('DFS revisited atom') }
    state[ i ] = 1;
    visited.push(i);
    var nc = connected.length;

          // For each neighbour
    for (var ci = 0; ci < nc; ++ci) {
      var j = connected[ci];

              // If unvisited:
      if (state[ j ] === 0) {
                  // And has >= 2 neighbours:
        if (bondGraph[ j ] && bondGraph[ j ].length >= 2) {
                      // Recurse
          DFS(j, bondGraph[ j ], i);
        } else {
                      // Not interesting
          state[ j ] = 2;
        }

              // Else unclosed ring:
      } else if (state[ j ] === 1) {
        if (from && from !== j) {
          var ring = [ j ];
          flags[ j ] = 1;
          rings.push(ring);
          for (var ki = visited.length - 1; ki >= 0; --ki) {
            var k = visited[ ki ];
            if (k === j) {
              break
            }
            ring.push(k);
            flags[ k ] = 1;
          }
        }
      }
    }
    state[ i ] = 2; // Completed processing for this atom

    visited.pop();
  }

  for (var i = 0; i < this.atomCount; ++i) {
    if (state[ i ]) { continue } // Already processed

    var connected = bondGraph[ i ];
    if (!connected || connected.length < 2) {
              // Finished
      state[ i ] = 2;
      continue
    }

    visited.length = 0;
    DFS(i, connected);
  }

  this.rings = { flags: flags, rings: rings };
};

  /**
   * For bonds with order > 1, pick a reference atom
   * @return {undefined}
   */
ResidueType.prototype.assignBondReferenceAtomIndices = function assignBondReferenceAtomIndices () {
  var bondGraph = this.getBondGraph();
  var rings = this.getRings();
  var ringFlags = rings.flags;
  var ringData = rings.rings;

  var atomIndices1 = this.bonds.atomIndices1;
  var atomIndices2 = this.bonds.atomIndices2;
  var bondOrders = this.bonds.bondOrders;
  var bondReferenceAtomIndices = this.bondReferenceAtomIndices;

  var nb = this.bonds.atomIndices1.length;

  bondReferenceAtomIndices.length = 0;// reset array

  for (var i = 0; i < nb; ++i) {
          // Not required for single bonds
    if (bondOrders[i] <= 1) { continue }

    var ai1 = atomIndices1[i];
    var ai2 = atomIndices2[i];

          // Are both atoms in a ring?
    if (ringFlags[ ai1 ] && ringFlags[ ai2 ]) {
              // Select another ring atom
              // I *think* we can simply take the first ring atom
              // we find in a ring that contains either ai1 or ai2
              // where the ring atom is not ai1 or ai2
      for (var ri = 0; ri < ringData.length; ++ri) {
                  // Have we already found it?
        if (bondReferenceAtomIndices[i] !== undefined) { break }

        var ring = ringData[ ri ];
                  // Try to find this atom and reference atom in no more than 1 full
                  // iteration through loop
        var refAtom = null;
        var found = false;
        for (var rai = 0; rai < ring.length; ++rai) {
          var ai3 = ring[ rai ];
          if (ai3 === ai1 || ai3 === ai2) {
            found = true;
          } else {
                          // refAtom is any other atom
            refAtom = ai3;
          }
          if (found && refAtom !== null) {
            bondReferenceAtomIndices[i] = refAtom;
            break
          }
        }
      }
      if (bondReferenceAtomIndices[i] !== undefined) { continue }
    }

          // Not a ring (or not one we can process), simply take the first
          // neighbouring atom

    if (bondGraph[ ai1 ].length > 1) {
      for (var j = 0; j < bondGraph[ ai1 ].length; ++j) {
        var ai3$1 = bondGraph[ ai1 ][ j ];
        if (ai3$1 !== ai2) {
          bondReferenceAtomIndices[i] = ai3$1;
          break
        }
      }
      continue
    } else if (bondGraph[ ai2 ].length > 1) {
      for (var j$1 = 0; j$1 < bondGraph[ ai2 ].length; ++j$1) {
        var ai3$2 = bondGraph[ ai2 ][ j$1 ];
        if (ai3$2 !== ai1) {
          bondReferenceAtomIndices[i] = ai3$2;
          break
        }
      }
      continue
    } // No reference atom could be found (e.g. diatomic molecule/fragment)
  }
};

ResidueType.prototype.getBondIndex = function getBondIndex (atomIndex1, atomIndex2) {
  var bonds = this.bonds;
  var atomIndices1 = bonds.atomIndices1;
  var atomIndices2 = bonds.atomIndices2;
  var idx1 = atomIndices1.indexOf(atomIndex1);
  var idx2 = atomIndices2.indexOf(atomIndex2);
  var _idx2 = idx2;
  while (idx1 !== -1) {
    while (idx2 !== -1) {
      if (idx1 === idx2) { return idx1 }
      idx2 = atomIndices2.indexOf(atomIndex2, idx2 + 1);
    }
    idx1 = atomIndices1.indexOf(atomIndex1, idx1 + 1);
    idx2 = _idx2;
  }
      // returns undefined when no bond is found
};

ResidueType.prototype.getBondReferenceAtomIndex = function getBondReferenceAtomIndex (atomIndex1, atomIndex2) {
  var bondIndex = this.getBondIndex(atomIndex1, atomIndex2);
  if (bondIndex === undefined) { return undefined }
  if (this.bondReferenceAtomIndices.length === 0) {
    this.assignBondReferenceAtomIndices();
  }
  return this.bondReferenceAtomIndices[ bondIndex ]
};

/**
 * @file Residue Map
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function getHash$1 (resname, atomTypeIdList, hetero, chemCompType) {
  return (
        resname + '|' +
        atomTypeIdList.join(',') + '|' +
        (hetero ? 1 : 0) + '|' +
        (chemCompType || '')
  )
}

var ResidueMap = function ResidueMap (structure) {
  this.structure = structure;

  this.dict = {};
  this.list = [];
};

ResidueMap.prototype.add = function add (resname, atomTypeIdList, hetero, chemCompType, bonds) {
  resname = resname.toUpperCase();
  var hash = getHash$1(resname, atomTypeIdList, hetero, chemCompType);
  var id = this.dict[ hash ];
  if (id === undefined) {
    var residueType = new ResidueType(
              this.structure, resname, atomTypeIdList, hetero, chemCompType, bonds
          );
    id = this.list.length;
    this.dict[ hash ] = id;
    this.list.push(residueType);
  }
  return id
};

ResidueMap.prototype.get = function get (id) {
  return this.list[ id ]
};

/**
 * @file Bond Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Bond proxy
 */
var BondProxy = function BondProxy (structure, index) {
      /**
       * @type {Structure}
       */
  this.structure = structure;
      /**
       * @type {BondStore}
       */
  this.bondStore = structure.bondStore;
      /**
       * @type {Integer}
       */
  this.index = index;

  this._v12 = new Vector3();
  this._v13 = new Vector3();
  this._ap1 = this.structure.getAtomProxy();
  this._ap2 = this.structure.getAtomProxy();
  this._ap3 = this.structure.getAtomProxy();
};

var prototypeAccessors$17 = { atom1: {},atom2: {},atomIndex1: {},atomIndex2: {},bondOrder: {} };

  /**
   * @type {AtomProxy}
   */
prototypeAccessors$17.atom1.get = function () {
  return this.structure.getAtomProxy(this.atomIndex1)
};

  /**
   * @type {AtomProxy}
   */
prototypeAccessors$17.atom2.get = function () {
  return this.structure.getAtomProxy(this.atomIndex2)
};

  /**
   * @type {Integer}
   */
prototypeAccessors$17.atomIndex1.get = function () {
  return this.bondStore.atomIndex1[ this.index ]
};
prototypeAccessors$17.atomIndex1.set = function (value) {
  this.bondStore.atomIndex1[ this.index ] = value;
};

  /**
   * @type {Integer}
   */
prototypeAccessors$17.atomIndex2.get = function () {
  return this.bondStore.atomIndex2[ this.index ]
};
prototypeAccessors$17.atomIndex2.set = function (value) {
  this.bondStore.atomIndex2[ this.index ] = value;
};

  /**
   * @type {Integer}
   */
prototypeAccessors$17.bondOrder.get = function () {
  return this.bondStore.bondOrder[ this.index ]
};
prototypeAccessors$17.bondOrder.set = function (value) {
  this.bondStore.bondOrder[ this.index ] = value;
};

  /**
   * Get reference atom index for the bond
   * @return {Integer|undefined} atom index, or `undefined` if unavailable
   */
BondProxy.prototype.getReferenceAtomIndex = function getReferenceAtomIndex () {
  var ap1 = this._ap1;
  var ap2 = this._ap2;
  ap1.index = this.atomIndex1;
  ap2.index = this.atomIndex2;
  if (ap1.residueIndex !== ap2.residueIndex) {
    return undefined// Bond between residues, for now ignore (could detect)
  }
  var typeAtomIndex1 = ap1.index - ap1.residueAtomOffset;
  var typeAtomIndex2 = ap2.index - ap2.residueAtomOffset;
  var residueType = ap1.residueType;
  var ix = residueType.getBondReferenceAtomIndex(typeAtomIndex1, typeAtomIndex2);
  if (ix !== undefined) {
    return ix + ap1.residueAtomOffset
  } else {
    console.warn('No reference atom found', ap1.index, ap2.index);
  }
};

  /**
   * calculate shift direction for displaying double/triple bonds
   * @param{Vector3} [v] pre-allocated output vector
   * @return {Vector3} the shift direction vector
   */
BondProxy.prototype.calculateShiftDir = function calculateShiftDir (v) {
  if (!v) { v = new Vector3(); }

  var ap1 = this._ap1;
  var ap2 = this._ap2;
  var ap3 = this._ap3;
  var v12 = this._v12;
  var v13 = this._v13;

  ap1.index = this.atomIndex1;
  ap2.index = this.atomIndex2;
  var ai3 = this.getReferenceAtomIndex();

  v12.subVectors(ap1, ap2).normalize();
  if (ai3 !== undefined) {
    ap3.index = ai3;
    v13.subVectors(ap1, ap3);
  } else {
    v13.copy(ap1);// no reference point, use origin
  }
  v13.normalize();

      // make sure v13 and v12 are not colinear
  var dp = v12.dot(v13);
  if (1 - Math.abs(dp) < 1e-5) {
    v13.set(1, 0, 0);
    dp = v12.dot(v13);
    if (1 - Math.abs(dp) < 1e-5) {
      v13.set(0, 1, 0);
      dp = v12.dot(v13);
    }
  }

  return v.copy(v13.sub(v12.multiplyScalar(dp))).normalize()
};

BondProxy.prototype.qualifiedName = function qualifiedName () {
  return this.atomIndex1 + '=' + this.atomIndex2
};

  /**
   * Clone object
   * @return {BondProxy} cloned bond
   */
BondProxy.prototype.clone = function clone () {
  return new this.constructor(this.structure, this.index)
};

BondProxy.prototype.toObject = function toObject () {
  return {
    atomIndex1: this.atomIndex1,
    atomIndex2: this.atomIndex2,
    bondOrder: this.bondOrder
  }
};

Object.defineProperties( BondProxy.prototype, prototypeAccessors$17 );

/**
 * @file Atom Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Atom proxy
 */
var AtomProxy = function AtomProxy (structure, index) {
      /**
       * The structure the atom belongs to.
       * @type {Structure}
       */
  this.structure = structure;

      /**
       * @type {ChainStore}
       */
  this.chainStore = structure.chainStore;
      /**
       * @type {ResidueStore}
       */
  this.residueStore = structure.residueStore;
      /**
       * @type {AtomStore}
       */
  this.atomStore = structure.atomStore;

      /**
       * @type {ResidueMap}
       */
  this.residueMap = structure.residueMap;
      /**
       * @type {AtomMap}
       */
  this.atomMap = structure.atomMap;

      /**
       * The index of the atom, pointing to the data in the corresponding {@link AtomStore}
       * @type {Integer}
       */
  this.index = index;
};

var prototypeAccessors$18 = { bondHash: {},entity: {},entityIndex: {},modelIndex: {},chainIndex: {},residue: {},residueIndex: {},sstruc: {},inscode: {},resno: {},chainname: {},chainid: {},residueType: {},atomType: {},residueAtomOffset: {},resname: {},hetero: {},atomname: {},element: {},vdw: {},covalent: {},x: {},y: {},z: {},serial: {},bfactor: {},occupancy: {},altloc: {} };

  /**
   * @type {BondHash}
   */
prototypeAccessors$18.bondHash.get = function () { return this.structure.bondHash };

  /**
   * Molecular enity
   * @type {Entity}
   */
prototypeAccessors$18.entity.get = function () {
  return this.structure.entityList[ this.entityIndex ]
};
prototypeAccessors$18.entityIndex.get = function () {
  return this.chainStore.entityIndex[ this.chainIndex ]
};
prototypeAccessors$18.modelIndex.get = function () {
  return this.chainStore.modelIndex[ this.chainIndex ]
};
prototypeAccessors$18.chainIndex.get = function () {
  return this.residueStore.chainIndex[ this.residueIndex ]
};
  /**
   * @type {ResidueProxy}
   */
prototypeAccessors$18.residue.get = function () {
  console.warn('residue - might be expensive');
  return this.structure.getResidueProxy(this.residueIndex)
};

prototypeAccessors$18.residueIndex.get = function () {
  return this.atomStore.residueIndex[ this.index ]
};
prototypeAccessors$18.residueIndex.set = function (value) {
  this.atomStore.residueIndex[ this.index ] = value;
};

  //

  /**
   * Secondary structure code
   * @type {String}
   */
prototypeAccessors$18.sstruc.get = function () {
  return this.residueStore.getSstruc(this.residueIndex)
};
  /**
   * Insertion code
   * @type {String}
   */
prototypeAccessors$18.inscode.get = function () {
  return this.residueStore.getInscode(this.residueIndex)
};
  /**
   * Residue number/label
   * @type {Integer}
   */
prototypeAccessors$18.resno.get = function () {
  return this.residueStore.resno[ this.residueIndex ]
};
  /**
   * Chain name
   * @type {String}
   */
prototypeAccessors$18.chainname.get = function () {
  return this.chainStore.getChainname(this.chainIndex)
};
  /**
   * Chain id
   * @type {String}
   */
prototypeAccessors$18.chainid.get = function () {
  return this.chainStore.getChainid(this.chainIndex)
};

  //

  /**
   * @type {ResidueType}
   */
prototypeAccessors$18.residueType.get = function () {
  return this.residueMap.get(this.residueStore.residueTypeId[ this.residueIndex ])
};
  /**
   * @type {AtomType}
   */
prototypeAccessors$18.atomType.get = function () {
  return this.atomMap.get(this.atomStore.atomTypeId[ this.index ])
};
prototypeAccessors$18.residueAtomOffset.get = function () {
  return this.residueStore.atomOffset[ this.residueIndex ]
};

  //

  /**
   * Residue name
   * @type {String}
   */
prototypeAccessors$18.resname.get = function () {
  return this.residueType.resname
};
  /**
   * Hetero flag
   * @type {Boolean}
   */
prototypeAccessors$18.hetero.get = function () {
  return this.residueType.hetero
};

  //

  /**
   * Atom name
   * @type {String}
   */
prototypeAccessors$18.atomname.get = function () {
  return this.atomType.atomname
};
  /**
   * Element
   * @type {String}
   */
prototypeAccessors$18.element.get = function () {
  return this.atomType.element
};
  /**
   * Van-der-Waals radius
   * @type {Float}
   */
prototypeAccessors$18.vdw.get = function () {
  return this.atomType.vdw
};
  /**
   * Covalent radius
   * @type {Float}
   */
prototypeAccessors$18.covalent.get = function () {
  return this.atomType.covalent
};

  //

  /**
   * X coordinate
   * @type {Float}
   */
prototypeAccessors$18.x.get = function () {
  return this.atomStore.x[ this.index ]
};
prototypeAccessors$18.x.set = function (value) {
  this.atomStore.x[ this.index ] = value;
};

  /**
   * Y coordinate
   * @type {Float}
   */
prototypeAccessors$18.y.get = function () {
  return this.atomStore.y[ this.index ]
};
prototypeAccessors$18.y.set = function (value) {
  this.atomStore.y[ this.index ] = value;
};

  /**
   * Z coordinate
   * @type {Float}
   */
prototypeAccessors$18.z.get = function () {
  return this.atomStore.z[ this.index ]
};
prototypeAccessors$18.z.set = function (value) {
  this.atomStore.z[ this.index ] = value;
};

  /**
   * Serial number
   * @type {Integer}
   */
prototypeAccessors$18.serial.get = function () {
  return this.atomStore.serial[ this.index ]
};
prototypeAccessors$18.serial.set = function (value) {
  this.atomStore.serial[ this.index ] = value;
};

  /**
   * B-factor value
   * @type {Float}
   */
prototypeAccessors$18.bfactor.get = function () {
  return this.atomStore.bfactor[ this.index ]
};
prototypeAccessors$18.bfactor.set = function (value) {
  this.atomStore.bfactor[ this.index ] = value;
};

  /**
   * Occupancy value
   * @type {Float}
   */
prototypeAccessors$18.occupancy.get = function () {
  return this.atomStore.occupancy[ this.index ]
};
prototypeAccessors$18.occupancy.set = function (value) {
  this.atomStore.occupancy[ this.index ] = value;
};

  /**
   * Alternate location identifier
   * @type {String}
   */
prototypeAccessors$18.altloc.get = function () {
  return this.atomStore.getAltloc(this.index)
};
prototypeAccessors$18.altloc.set = function (value) {
  this.atomStore.setAltloc(this.index, value);
};

  //

  /**
   * Iterate over each bond
   * @param{function(bond: BondProxy)} callback - iterator callback function
   * @param{BondProxy} [bp] - optional target bond proxy for use in the callback
   * @return {undefined}
   */
AtomProxy.prototype.eachBond = function eachBond (callback, bp) {
  bp = bp || this.structure._bp;
  var idx = this.index;
  var bondHash = this.bondHash;
  var indexArray = bondHash.indexArray;
  var n = bondHash.countArray[ idx ];
  var offset = bondHash.offsetArray[ idx ];

  for (var i = 0; i < n; ++i) {
    bp.index = indexArray[ offset + i ];
    callback(bp);
  }
};

  /**
   * Iterate over each bonded atom
   * @param{function(atom: AtomProxy)} callback - iterator callback function
   * @param{AtomProxy} [ap] - optional target atom proxy for use in the callback
   * @return {undefined}
   */
AtomProxy.prototype.eachBondedAtom = function eachBondedAtom (callback, ap) {
  ap = ap || this.structure._ap;
  var idx = this.index;

  this.eachBond(function (bp) {
    if (idx !== bp.atomIndex1) {
      ap.index = bp.atomIndex1;
    } else {
      ap.index = bp.atomIndex2;
    }
    callback(ap);
  });
};

  //

  /**
   * If atom is part of a backbone
   * @return {Boolean} flag
   */
AtomProxy.prototype.isBackbone = function isBackbone () {
  var backboneIndexList = this.residueType.backboneIndexList;
  if (backboneIndexList.length > 0) {
    var atomOffset = this.residueStore.atomOffset[ this.residueIndex ];
    return backboneIndexList.includes(this.index - atomOffset)
  } else {
    return false
  }
};

  /**
   * If atom is part of a polymer
   * @return {Boolean} flag
   */
AtomProxy.prototype.isPolymer = function isPolymer () {
  if (this.structure.entityList.length > 0) {
    return this.entity.isPolymer()
  } else {
    var moleculeType = this.residueType.moleculeType;
    return (
              moleculeType === ProteinType ||
              moleculeType === RnaType ||
              moleculeType === DnaType
    )
  }
};

  /**
   * If atom is part of a sidechin
   * @return {Boolean} flag
   */
AtomProxy.prototype.isSidechain = function isSidechain () {
  return this.isPolymer() && !this.isBackbone()
};

  /**
   * If atom is part of a coarse-grain group
   * @return {Boolean} flag
   */
AtomProxy.prototype.isCg = function isCg () {
  var backboneType = this.residueType.backboneType;
  return (
          backboneType === CgProteinBackboneType ||
          backboneType === CgRnaBackboneType ||
          backboneType === CgDnaBackboneType
  )
};

  /**
   * If atom is part of a hetero group
   * @return {Boolean} flag
   */
AtomProxy.prototype.isHetero = function isHetero () {
  return this.residueType.hetero === 1
};

  /**
   * If atom is part of a protein molecule
   * @return {Boolean} flag
   */
AtomProxy.prototype.isProtein = function isProtein () {
  return this.residueType.moleculeType === ProteinType
};

  /**
   * If atom is part of a nucleic molecule
   * @return {Boolean} flag
   */
AtomProxy.prototype.isNucleic = function isNucleic () {
  var moleculeType = this.residueType.moleculeType;
  return (
          moleculeType === RnaType ||
          moleculeType === DnaType
  )
};

  /**
   * If atom is part of a rna
   * @return {Boolean} flag
   */
AtomProxy.prototype.isRna = function isRna () {
  return this.residueType.moleculeType === RnaType
};

  /**
   * If atom is part of a dna
   * @return {Boolean} flag
   */
AtomProxy.prototype.isDna = function isDna () {
  return this.residueType.moleculeType === DnaType
};

  /**
   * If atom is part of a water molecule
   * @return {Boolean} flag
   */
AtomProxy.prototype.isWater = function isWater () {
  return this.residueType.moleculeType === WaterType
};

  /**
   * If atom is part of an ion
   * @return {Boolean} flag
   */
AtomProxy.prototype.isIon = function isIon () {
  return this.residueType.moleculeType === IonType
};

  /**
   * If atom is part of a saccharide
   * @return {Boolean} flag
   */
AtomProxy.prototype.isSaccharide = function isSaccharide () {
  return this.residueType.moleculeType === SaccharideType
};

  /**
   * If atom is part of a helix
   * @return {Boolean} flag
   */
AtomProxy.prototype.isHelix = function isHelix () {
  return SecStrucHelix.includes(this.sstruc)
};

  /**
   * If atom is part of a sheet
   * @return {Boolean} flag
   */
AtomProxy.prototype.isSheet = function isSheet () {
  return SecStrucSheet.includes(this.sstruc)
};

  /**
   * If atom is part of a turn
   * @return {Boolean} flag
   */
AtomProxy.prototype.isTurn = function isTurn () {
  return SecStrucTurn.includes(this.sstruc) && this.isProtein()
};

AtomProxy.prototype.isBonded = function isBonded () {
  return this.bondHash.countArray[ this.index ] !== 0
};

  /**
   * If atom is part of a ring
   * @return {Boolean} flag
   */
AtomProxy.prototype.isRing = function isRing () {
  var ringFlags = this.residueType.getRings().flags;
  return ringFlags[ this.index - this.residueAtomOffset ] === 1
};

  /**
   * Distance to another atom
   * @param{AtomProxy} atom - the other atom
   * @return {Number} the distance
   */
AtomProxy.prototype.distanceTo = function distanceTo (atom) {
  var taa = this.atomStore;
  var aaa = atom.atomStore;
  var ti = this.index;
  var ai = atom.index;
  var x = taa.x[ ti ] - aaa.x[ ai ];
  var y = taa.y[ ti ] - aaa.y[ ai ];
  var z = taa.z[ ti ] - aaa.z[ ai ];
  var distSquared = x * x + y * y + z * z;
  return Math.sqrt(distSquared)
};

  /**
   * If connected to another atom
   * @param{AtomProxy} atom - the other atom
   * @return {Boolean} flag
   */
AtomProxy.prototype.connectedTo = function connectedTo (atom) {
  var taa = this.atomStore;
  var aaa = atom.atomStore;
  var ti = this.index;
  var ai = atom.index;

  if (taa.altloc && aaa.altloc) {
    var ta = taa.altloc[ ti ];// use Uint8 value to compare
    var aa = aaa.altloc[ ai ];// no need to convert to char
          // 0 is the Null character, 32 is the space character
    if (!(ta === 0 || aa === 0 || ta === 32 || aa === 32 || (ta === aa))) { return false }
  }

  var x = taa.x[ ti ] - aaa.x[ ai ];
  var y = taa.y[ ti ] - aaa.y[ ai ];
  var z = taa.z[ ti ] - aaa.z[ ai ];

  var distSquared = x * x + y * y + z * z;

      // if( this.residue.isCg() ) console.log( this.qualifiedName(), Math.sqrt( distSquared ), distSquared )
  if (distSquared < 64.0 && this.isCg()) { return true }

  if (isNaN(distSquared)) { return false }

  var d = this.covalent + atom.covalent;
  var d1 = d + 0.3;
  var d2 = d - 0.5;

  return distSquared < (d1 * d1) && distSquared > (d2 * d2)
};

  /**
   * Set atom position from array
   * @param{Array|TypedArray} array - input array
   * @param{Integer} [offset] - the offset
   * @return {AtomProxy} this object
   */
AtomProxy.prototype.positionFromArray = function positionFromArray (array, offset) {
  if (offset === undefined) { offset = 0; }

  this.x = array[ offset + 0 ];
  this.y = array[ offset + 1 ];
  this.z = array[ offset + 2 ];

  return this
};

  /**
   * Write atom position to array
   * @param{Array|TypedArray} [array] - target array
   * @param{Integer} [offset] - the offset
   * @return {Array|TypedArray} target array
   */
AtomProxy.prototype.positionToArray = function positionToArray (array, offset) {
  if (array === undefined) { array = []; }
  if (offset === undefined) { offset = 0; }

  var index = this.index;
  var atomStore = this.atomStore;

  array[ offset + 0 ] = atomStore.x[ index ];
  array[ offset + 1 ] = atomStore.y[ index ];
  array[ offset + 2 ] = atomStore.z[ index ];

  return array
};

  /**
   * Write atom position to vector
   * @param{Vector3} [v] - target vector
   * @return {Vector3} target vector
   */
AtomProxy.prototype.positionToVector3 = function positionToVector3 (v) {
  if (v === undefined) { v = new Vector3(); }

  v.x = this.x;
  v.y = this.y;
  v.z = this.z;

  return v
};

  /**
   * Set atom position from vector
   * @param{Vector3} v - input vector
   * @return {AtomProxy} this object
   */
AtomProxy.prototype.positionFromVector3 = function positionFromVector3 (v) {
  this.x = v.x;
  this.y = v.y;
  this.z = v.z;

  return this
};

  /**
   * Get intra group/residue bonds
   * @param{Boolean} firstOnly - immediately return the first connected atomIndex
   * @return {Integer[]|Integer|undefined} connected atomIndices
   */
AtomProxy.prototype.getResidueBonds = function getResidueBonds (firstOnly) {
  var residueAtomOffset = this.residueAtomOffset;
  var relativeIndex = this.index - this.residueAtomOffset;
  var bonds = this.residueType.getBonds();
  var atomIndices1 = bonds.atomIndices1;
  var atomIndices2 = bonds.atomIndices2;
  var idx1, idx2, connectedAtomIndex, connectedAtomIndices;

  if (!firstOnly) { connectedAtomIndices = []; }

  idx1 = atomIndices1.indexOf(relativeIndex);
  while (idx1 !== -1) {
    connectedAtomIndex = atomIndices2[ idx1 ] + residueAtomOffset;
    if (firstOnly) { return connectedAtomIndex }
    connectedAtomIndices.push(connectedAtomIndex);
    idx1 = atomIndices1.indexOf(relativeIndex, idx1 + 1);
  }

  idx2 = atomIndices2.indexOf(relativeIndex);
  while (idx2 !== -1) {
    connectedAtomIndex = atomIndices1[ idx2 ] + residueAtomOffset;
    if (firstOnly) { return connectedAtomIndex }
    connectedAtomIndices.push(connectedAtomIndex);
    idx2 = atomIndices2.indexOf(relativeIndex, idx2 + 1);
  }

  return connectedAtomIndices
};

  //

AtomProxy.prototype.qualifiedName = function qualifiedName (noResname) {
  var name = '';
  if (this.resname && !noResname) { name += '[' + this.resname + ']'; }
  if (this.resno !== undefined) { name += this.resno; }
  if (this.inscode) { name += '^' + this.inscode; }
  if (this.chainname) { name += ':' + this.chainname; }
  if (this.atomname) { name += '.' + this.atomname; }
  if (this.altloc) { name += '%' + this.altloc; }
  if (this.structure.modelStore.count > 1) { name += '/' + this.modelIndex; }
  return name
};

  /**
   * Clone object
   * @return {AtomProxy} cloned atom
   */
AtomProxy.prototype.clone = function clone () {
  return new this.constructor(this.structure, this.index)
};

AtomProxy.prototype.toObject = function toObject () {
  return {
    index: this.index,
    residueIndex: this.residueIndex,

    atomno: this.atomno,
    resname: this.resname,
    x: this.x,
    y: this.y,
    z: this.z,
    element: this.element,
    chainname: this.chainname,
    resno: this.resno,
    serial: this.serial,
    vdw: this.vdw,
    covalent: this.covalent,
    hetero: this.hetero,
    bfactor: this.bfactor,
    altloc: this.altloc,
    atomname: this.atomname,
    modelindex: this.modelindex
  }
};

Object.defineProperties( AtomProxy.prototype, prototypeAccessors$18 );

/**
 * @file Residue Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Residue proxy
 */
var ResidueProxy = function ResidueProxy (structure, index) {
      /**
       * @type {Structure}
       */
  this.structure = structure;
      /**
       * @type {ChainStore}
       */
  this.chainStore = structure.chainStore;
      /**
       * @type {ResidueStore}
       */
  this.residueStore = structure.residueStore;
      /**
       * @type {AtomStore}
       */
  this.atomStore = structure.atomStore;
      /**
       * @type {ResidueMap}
       */
  this.residueMap = structure.residueMap;
      /**
       * @type {AtomMap}
       */
  this.atomMap = structure.atomMap;
      /**
       * @type {Integer}
       */
  this.index = index;
};

var prototypeAccessors$19 = { entity: {},entityIndex: {},chain: {},chainIndex: {},atomOffset: {},atomCount: {},atomEnd: {},modelIndex: {},chainname: {},chainid: {},resno: {},sstruc: {},inscode: {},residueType: {},resname: {},hetero: {},moleculeType: {},backboneType: {},backboneStartType: {},backboneEndType: {},traceAtomIndex: {},direction1AtomIndex: {},direction2AtomIndex: {},backboneStartAtomIndex: {},backboneEndAtomIndex: {},rungEndAtomIndex: {} };

  /**
   * Entity
   * @type {Entity}
   */
prototypeAccessors$19.entity.get = function () {
  return this.structure.entityList[ this.entityIndex ]
};
prototypeAccessors$19.entityIndex.get = function () {
  return this.chainStore.entityIndex[ this.chainIndex ]
};
  /**
   * Chain
   * @type {ChainProxy}
   */
prototypeAccessors$19.chain.get = function () {
  return this.structure.getChainProxy(this.chainIndex)
};

prototypeAccessors$19.chainIndex.get = function () {
  return this.residueStore.chainIndex[ this.index ]
};
prototypeAccessors$19.chainIndex.set = function (value) {
  this.residueStore.chainIndex[ this.index ] = value;
};

prototypeAccessors$19.atomOffset.get = function () {
  return this.residueStore.atomOffset[ this.index ]
};
prototypeAccessors$19.atomOffset.set = function (value) {
  this.residueStore.atomOffset[ this.index ] = value;
};

  /**
   * Atom count
   * @type {Integer}
   */
prototypeAccessors$19.atomCount.get = function () {
  return this.residueStore.atomCount[ this.index ]
};
prototypeAccessors$19.atomCount.set = function (value) {
  this.residueStore.atomCount[ this.index ] = value;
};

prototypeAccessors$19.atomEnd.get = function () {
  return this.atomOffset + this.atomCount - 1
};

  //

prototypeAccessors$19.modelIndex.get = function () {
  return this.chainStore.modelIndex[ this.chainIndex ]
};
  /**
   * Chain name
   * @type {String}
   */
prototypeAccessors$19.chainname.get = function () {
  return this.chainStore.getChainname(this.chainIndex)
};
  /**
   * Chain id
   * @type {String}
   */
prototypeAccessors$19.chainid.get = function () {
  return this.chainStore.getChainid(this.chainIndex)
};

  //

  /**
   * Residue number/label
   * @type {Integer}
   */
prototypeAccessors$19.resno.get = function () {
  return this.residueStore.resno[ this.index ]
};
prototypeAccessors$19.resno.set = function (value) {
  this.residueStore.resno[ this.index ] = value;
};

  /**
   * Secondary structure code
   * @type {String}
   */
prototypeAccessors$19.sstruc.get = function () {
  return this.residueStore.getSstruc(this.index)
};
prototypeAccessors$19.sstruc.set = function (value) {
  this.residueStore.setSstruc(this.index, value);
};

  /**
   * Insertion code
   * @type {String}
   */
prototypeAccessors$19.inscode.get = function () {
  return this.residueStore.getInscode(this.index)
};
prototypeAccessors$19.inscode.set = function (value) {
  this.residueStore.getInscode(this.index, value);
};

  //

prototypeAccessors$19.residueType.get = function () {
  return this.residueMap.get(this.residueStore.residueTypeId[ this.index ])
};

  /**
   * Residue name
   * @type {String}
   */
prototypeAccessors$19.resname.get = function () {
  return this.residueType.resname
};
  /**
   * Hetero flag
   * @type {Boolean}
   */
prototypeAccessors$19.hetero.get = function () {
  return this.residueType.hetero
};
prototypeAccessors$19.moleculeType.get = function () {
  return this.residueType.moleculeType
};
prototypeAccessors$19.backboneType.get = function () {
  return this.residueType.backboneType
};
prototypeAccessors$19.backboneStartType.get = function () {
  return this.residueType.backboneStartType
};
prototypeAccessors$19.backboneEndType.get = function () {
  return this.residueType.backboneEndType
};
prototypeAccessors$19.traceAtomIndex.get = function () {
  return this.residueType.traceAtomIndex + this.atomOffset
};
prototypeAccessors$19.direction1AtomIndex.get = function () {
  return this.residueType.direction1AtomIndex + this.atomOffset
};
prototypeAccessors$19.direction2AtomIndex.get = function () {
  return this.residueType.direction2AtomIndex + this.atomOffset
};
prototypeAccessors$19.backboneStartAtomIndex.get = function () {
  return this.residueType.backboneStartAtomIndex + this.atomOffset
};
prototypeAccessors$19.backboneEndAtomIndex.get = function () {
  return this.residueType.backboneEndAtomIndex + this.atomOffset
};
prototypeAccessors$19.rungEndAtomIndex.get = function () {
  return this.residueType.rungEndAtomIndex + this.atomOffset
};

  //

  /**
   * Atom iterator
   * @param{function(atom: AtomProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
ResidueProxy.prototype.eachAtom = function eachAtom (callback, selection) {
  var i;
  var count = this.atomCount;
  var offset = this.atomOffset;
  var ap = this.structure._ap;
  var end = offset + count;

  if (selection && selection.atomOnlyTest) {
    var atomOnlyTest = selection.atomOnlyTest;
    for (i = offset; i < end; ++i) {
      ap.index = i;
      if (atomOnlyTest(ap)) { callback(ap); }
    }
  } else {
    for (i = offset; i < end; ++i) {
      ap.index = i;
      callback(ap);
    }
  }
};

  //

  /**
   * If residue is from a protein
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isProtein = function isProtein () {
  return this.residueType.moleculeType === ProteinType
};

  /**
   * If residue is nucleic
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isNucleic = function isNucleic () {
  var moleculeType = this.residueType.moleculeType;
  return (
          moleculeType === RnaType ||
          moleculeType === DnaType
  )
};

  /**
   * If residue is rna
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isRna = function isRna () {
  return this.residueType.moleculeType === RnaType
};

  /**
   * If residue is dna
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isDna = function isDna () {
  return this.residueType.moleculeType === DnaType
};

  /**
   * If residue is coarse-grain
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isCg = function isCg () {
  var backboneType = this.residueType.backboneType;
  return (
          backboneType === CgProteinBackboneType ||
          backboneType === CgRnaBackboneType ||
          backboneType === CgDnaBackboneType
  )
};

  /**
   * If residue is from a polymer
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isPolymer = function isPolymer () {
  if (this.structure.entityList.length > 0) {
    return this.entity.isPolymer()
  } else {
    var moleculeType = this.residueType.moleculeType;
    return (
              moleculeType === ProteinType ||
              moleculeType === RnaType ||
              moleculeType === DnaType
    )
  }
};

  /**
   * If residue is hetero
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isHetero = function isHetero () {
  return this.residueType.hetero === 1
};

  /**
   * If residue is a water molecule
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isWater = function isWater () {
  return this.residueType.moleculeType === WaterType
};

  /**
   * If residue is an ion
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isIon = function isIon () {
  return this.residueType.moleculeType === IonType
};

  /**
   * If residue is a saccharide
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isSaccharide = function isSaccharide () {
  return this.residueType.moleculeType === SaccharideType
};

  /**
   * If residue is part of a helix
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isHelix = function isHelix () {
  return SecStrucHelix.includes(this.sstruc)
};

  /**
   * If residue is part of a sheet
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isSheet = function isSheet () {
  return SecStrucSheet.includes(this.sstruc)
};

  /**
   * If residue is part of a turn
   * @return {Boolean} flag
   */
ResidueProxy.prototype.isTurn = function isTurn () {
  return SecStrucTurn.includes(this.sstruc) && this.isProtein()
};

ResidueProxy.prototype.getAtomType = function getAtomType (index) {
  return this.atomMap.get(this.atomStore.atomTypeId[ index ])
};

ResidueProxy.prototype.getResname1 = function getResname1 () {
      // FIXME nucleic support
  return AA1[ this.resname.toUpperCase() ] || 'X'
};

ResidueProxy.prototype.getBackboneType = function getBackboneType (position) {
  switch (position) {
    case -1:
      return this.residueType.backboneStartType
    case 1:
      return this.residueType.backboneEndType
    default:
      return this.residueType.backboneType
  }
};

ResidueProxy.prototype.getAtomIndexByName = function getAtomIndexByName (atomname) {
  var index = this.residueType.getAtomIndexByName(atomname);
  if (index !== undefined) {
    index += this.atomOffset;
  }
  return index
};

ResidueProxy.prototype.getAtomByName = function getAtomByName (atomname) {
  return this.residueType.getAtomByName(atomname)
};

ResidueProxy.prototype.hasAtomWithName = function hasAtomWithName (atomname) {
  return this.residueType.hasAtomWithName(atomname)
};

ResidueProxy.prototype.getAtomnameList = function getAtomnameList () {
    var this$1 = this;

  console.warn('getAtomnameList - might be expensive');

  var n = this.atomCount;
  var offset = this.atomOffset;
  var list = new Array(n);
  for (var i = 0; i < n; ++i) {
    list[ i ] = this$1.getAtomType(offset + i).atomname;
  }
  return list
};

  /**
   * If residue is connected to another
   * @param{ResidueProxy} rNext - the other residue
   * @return {Boolean} - flag
   */
ResidueProxy.prototype.connectedTo = function connectedTo (rNext) {
  var bbAtomEnd = this.structure.getAtomProxy(this.backboneEndAtomIndex);
  var bbAtomStart = this.structure.getAtomProxy(rNext.backboneStartAtomIndex);
  if (bbAtomEnd && bbAtomStart) {
    return bbAtomEnd.connectedTo(bbAtomStart)
  } else {
    return false
  }
};

ResidueProxy.prototype.getNextConnectedResidue = function getNextConnectedResidue () {
  var rOffset = this.chainStore.residueOffset[ this.chainIndex ];
  var rCount = this.chainStore.residueCount[ this.chainIndex ];
  var nextIndex = this.index + 1;
  if (nextIndex < rOffset + rCount) {
    var rpNext = this.structure.getResidueProxy(nextIndex);
    if (this.connectedTo(rpNext)) {
      return rpNext
    }
  } else if (nextIndex === rOffset + rCount) {// cyclic
    var rpFirst = this.structure.getResidueProxy(rOffset);
    if (this.connectedTo(rpFirst)) {
      return rpFirst
    }
  }
  return undefined
};

ResidueProxy.prototype.getPreviousConnectedResidue = function getPreviousConnectedResidue () {
  var rOffset = this.chainStore.residueOffset[ this.chainIndex ];
  var prevIndex = this.index - 1;
  if (prevIndex >= rOffset) {
    var rpPrev = this.structure.getResidueProxy(prevIndex);
    if (rpPrev.connectedTo(this)) {
      return rpPrev
    }
  } else if (prevIndex === rOffset - 1) {// cyclic
    var rCount = this.chainStore.residueCount[ this.chainIndex ];
    var rpLast = this.structure.getResidueProxy(rOffset + rCount - 1);
    if (rpLast.connectedTo(this)) {
      return rpLast
    }
  }
  return undefined
};

ResidueProxy.prototype.getBonds = function getBonds () {
  return this.residueType.getBonds(this)
};

ResidueProxy.prototype.getRings = function getRings () {
  return this.residueType.getRings()
};

ResidueProxy.prototype.qualifiedName = function qualifiedName (noResname) {
  var name = '';
  if (this.resname && !noResname) { name += '[' + this.resname + ']'; }
  if (this.resno !== undefined) { name += this.resno; }
  if (this.inscode) { name += '^' + this.inscode; }
  if (this.chain) { name += ':' + this.chainname; }
  name += '/' + this.modelIndex;
  return name
};

  /**
   * Clone object
   * @return {ResidueProxy} cloned residue
   */
ResidueProxy.prototype.clone = function clone () {
  return new this.constructor(this.structure, this.index)
};

ResidueProxy.prototype.toObject = function toObject () {
  return {
    index: this.index,
    chainIndex: this.chainIndex,
    atomOffset: this.atomOffset,
    atomCount: this.atomCount,

    resno: this.resno,
    resname: this.resname,
    sstruc: this.sstruc
  }
};

Object.defineProperties( ResidueProxy.prototype, prototypeAccessors$19 );

/**
 * @file Polymer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Polymer
 */
var Polymer = function Polymer (structure, residueIndexStart, residueIndexEnd) {
      /**
       * @type {Structure}
       */
  this.structure = structure;
      /**
       * @type {ChainStore}
       */
  this.chainStore = structure.chainStore;
      /**
       * @type {ResidueStore}
       */
  this.residueStore = structure.residueStore;
      /**
       * @type {AtomStore}
       */
  this.atomStore = structure.atomStore;

      /**
       * @type {Integer}
       */
  this.residueIndexStart = residueIndexStart;
      /**
       * @type {Integer}
       */
  this.residueIndexEnd = residueIndexEnd;
      /**
       * @type {Integer}
       */
  this.residueCount = residueIndexEnd - residueIndexStart + 1;

  var rpStart = this.structure.getResidueProxy(this.residueIndexStart);
  var rpEnd = this.structure.getResidueProxy(this.residueIndexEnd);
  this.isPrevConnected = rpStart.getPreviousConnectedResidue() !== undefined;
  var rpNext = rpEnd.getNextConnectedResidue();
  this.isNextConnected = rpNext !== undefined;
  this.isNextNextConnected = this.isNextConnected && rpNext.getNextConnectedResidue() !== undefined;
  this.isCyclic = rpEnd.connectedTo(rpStart);

  this.__residueProxy = this.structure.getResidueProxy();

      // console.log( this.qualifiedName(), this );
};

var prototypeAccessors$21 = { chainIndex: {},modelIndex: {},chainname: {} };

prototypeAccessors$21.chainIndex.get = function () {
  return this.residueStore.chainIndex[ this.residueIndexStart ]
};
prototypeAccessors$21.modelIndex.get = function () {
  return this.chainStore.modelIndex[ this.chainIndex ]
};

  /**
   * @type {String}
   */
prototypeAccessors$21.chainname.get = function () {
  return this.chainStore.getChainname(this.chainIndex)
};

  //

  /**
   * If first residue is from aprotein
   * @return {Boolean} flag
   */
Polymer.prototype.isProtein = function isProtein () {
  this.__residueProxy.index = this.residueIndexStart;
  return this.__residueProxy.isProtein()
};

  /**
   * If atom is part of a coarse-grain group
   * @return {Boolean} flag
   */
Polymer.prototype.isCg = function isCg () {
  this.__residueProxy.index = this.residueIndexStart;
  return this.__residueProxy.isCg()
};

  /**
   * If atom is part of a nucleic molecule
   * @return {Boolean} flag
   */
Polymer.prototype.isNucleic = function isNucleic () {
  this.__residueProxy.index = this.residueIndexStart;
  return this.__residueProxy.isNucleic()
};

Polymer.prototype.getMoleculeType = function getMoleculeType () {
  this.__residueProxy.index = this.residueIndexStart;
  return this.__residueProxy.moleculeType
};

Polymer.prototype.getBackboneType = function getBackboneType (position) {
  this.__residueProxy.index = this.residueIndexStart;
  return this.__residueProxy.getBackboneType(position)
};

Polymer.prototype.getAtomIndexByType = function getAtomIndexByType (index, type) {
      // TODO pre-calculate, add to residueStore???

  if (this.isCyclic) {
    if (index === -1) {
      index = this.residueCount - 1;
    } else if (index === this.residueCount) {
      index = 0;
    }
  } else {
    if (index === -1 && !this.isPrevConnected) { index += 1; }
    if (index === this.residueCount && !this.isNextNextConnected) { index -= 1; }
          // if( index === this.residueCount - 1 && !this.isNextConnected ) index -= 1;
  }

  var rp = this.__residueProxy;
  rp.index = this.residueIndexStart + index;
  var aIndex;

  switch (type) {
    case 'trace':
      aIndex = rp.traceAtomIndex;
      break
    case 'direction1':
      aIndex = rp.direction1AtomIndex;
      break
    case 'direction2':
      aIndex = rp.direction2AtomIndex;
      break
    default:
      var ap = rp.getAtomByName(type);
      aIndex = ap ? ap.index : undefined;
  }

      // if( !ap ){
      //   console.log( this, type, rp.residueType )
      //   // console.log( rp.qualifiedName(), rp.index, index, this.residueCount - 1 )
      //   // rp.index = this.residueIndexStart;
      //   // console.log( rp.qualifiedName(), this.residueIndexStart )
      //   // rp.index = this.residueIndexEnd;
      //   // console.log( rp.qualifiedName(), this.residueIndexEnd )
      // }

  return aIndex
};

  /**
   * Atom iterator
   * @param{function(atom: AtomProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
Polymer.prototype.eachAtom = function eachAtom (callback, selection) {
  this.eachResidue(function (rp) {
    rp.eachAtom(callback, selection);
  }, selection);
};

Polymer.prototype.eachAtomN = function eachAtomN (n, callback, type) {
    var this$1 = this;

  var i;
  var m = this.residueCount;

  var array = new Array(n);
  for (i = 0; i < n; ++i) {
    array[ i ] = this$1.structure.getAtomProxy(this$1.getAtomIndexByType(i, type));
  }
  callback.apply(this, array);

  for (var j = n; j < m; ++j) {
    for (i = 1; i < n; ++i) {
      array[ i - 1 ].index = array[ i ].index;
    }
    array[ n - 1 ].index = this$1.getAtomIndexByType(j, type);
    callback.apply(this$1, array);
  }
};

Polymer.prototype.eachAtomN2 = function eachAtomN2 (n, callback, type) {
    var this$1 = this;

      // console.log(this.residueOffset,this.residueCount)

  var offset = this.atomOffset;
  var count = this.atomCount;
  var end = offset + count;
  if (count < n) { return }

  var array = new Array(n);
  for (var i = 0; i < n; ++i) {
    array[ i ] = this$1.structure.getAtomProxy();
  }
      // console.log( array, offset, end, count )

  var atomSet = this.structure.atomSetCache[ '__' + type ];
  if (atomSet === undefined) {
    Log.warn('no precomputed atomSet for: ' + type);
    atomSet = this.structure.getAtomSet(false);
    this.eachResidue(function (rp) {
      var ap = rp.getAtomByName(type);
      atomSet.set(ap.index);
    });
  }
  var j = 0;

  atomSet.forEach(function (index) {
    if (index >= offset && index < end) {
      for (var i = 1; i < n; ++i) {
        array[ i - 1 ].index = array[ i ].index;
      }
      array[ n - 1 ].index = index;
      j += 1;
      if (j >= n) {
        callback.apply(this, array);
      }
    }
  });
};

  /**
   * Residue iterator
   * @param{function(residue: ResidueProxy)} callback - the callback
   * @return {undefined}
   */
Polymer.prototype.eachResidue = function eachResidue (callback) {
  var rp = this.structure.getResidueProxy();
  var n = this.residueCount;
  var rStartIndex = this.residueIndexStart;

  for (var i = 0; i < n; ++i) {
    rp.index = rStartIndex + i;
    callback(rp);
  }
};

Polymer.prototype.qualifiedName = function qualifiedName () {
  var rpStart = this.structure.getResidueProxy(this.residueIndexStart);
  var rpEnd = this.structure.getResidueProxy(this.residueIndexEnd);
  return rpStart.qualifiedName() + ' - ' + rpEnd.qualifiedName()
};

Object.defineProperties( Polymer.prototype, prototypeAccessors$21 );

/**
 * @file Chain Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Chain proxy
 */
var ChainProxy = function ChainProxy (structure, index) {
      /**
       * @type {Structure}
       */
  this.structure = structure;
      /**
       * @type {ChainStore}
       */
  this.chainStore = structure.chainStore;
      /**
       * @type {ResidueStore}
       */
  this.residueStore = structure.residueStore;
      /**
       * @type {Integer}
       */
  this.index = index;
};

var prototypeAccessors$20 = { entity: {},model: {},entityIndex: {},modelIndex: {},residueOffset: {},residueCount: {},residueEnd: {},atomOffset: {},atomEnd: {},atomCount: {},chainname: {},chainid: {} };

  /**
   * Entity
   * @type {Entity}
   */
prototypeAccessors$20.entity.get = function () {
  return this.structure.entityList[ this.entityIndex ]
};
  /**
   * Model
   * @type {ModelProxy}
   */
prototypeAccessors$20.model.get = function () {
  return this.structure.getModelProxy(this.modelIndex)
};

prototypeAccessors$20.entityIndex.get = function () {
  return this.chainStore.entityIndex[ this.index ]
};
prototypeAccessors$20.entityIndex.set = function (value) {
  this.chainStore.entityIndex[ this.index ] = value;
};

prototypeAccessors$20.modelIndex.get = function () {
  return this.chainStore.modelIndex[ this.index ]
};
prototypeAccessors$20.modelIndex.set = function (value) {
  this.chainStore.modelIndex[ this.index ] = value;
};

prototypeAccessors$20.residueOffset.get = function () {
  return this.chainStore.residueOffset[ this.index ]
};
prototypeAccessors$20.residueOffset.set = function (value) {
  this.chainStore.residueOffset[ this.index ] = value;
};

  /**
   * Residue count
   * @type {Integer}
   */
prototypeAccessors$20.residueCount.get = function () {
  return this.chainStore.residueCount[ this.index ]
};
prototypeAccessors$20.residueCount.set = function (value) {
  this.chainStore.residueCount[ this.index ] = value;
};

prototypeAccessors$20.residueEnd.get = function () {
  return this.residueOffset + this.residueCount - 1
};

prototypeAccessors$20.atomOffset.get = function () {
  return this.residueStore.atomOffset[ this.residueOffset ]
};
prototypeAccessors$20.atomEnd.get = function () {
  return (
          this.residueStore.atomOffset[ this.residueEnd ] +
          this.residueStore.atomCount[ this.residueEnd ] - 1
  )
};
  /**
   * Atom count
   * @type {Integer}
   */
prototypeAccessors$20.atomCount.get = function () {
  if (this.residueCount === 0) {
    return 0
  } else {
    return this.atomEnd - this.atomOffset + 1
  }
};

  //

  /**
   * Chain name
   * @type {String}
   */
prototypeAccessors$20.chainname.get = function () {
  return this.chainStore.getChainname(this.index)
};
prototypeAccessors$20.chainname.set = function (value) {
  this.chainStore.setChainname(this.index, value);
};

  /**
   * Chain id
   * @type {String}
   */
prototypeAccessors$20.chainid.get = function () {
  return this.chainStore.getChainid(this.index)
};
prototypeAccessors$20.chainid.set = function (value) {
  this.chainStore.setChainid(this.index, value);
};

  //

  /**
   * Atom iterator
   * @param{function(atom: AtomProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
ChainProxy.prototype.eachAtom = function eachAtom (callback, selection) {
  this.eachResidue(function (rp) {
    rp.eachAtom(callback, selection);
  }, selection);
};

  /**
   * Residue iterator
   * @param{function(residue: ResidueProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
ChainProxy.prototype.eachResidue = function eachResidue (callback, selection) {
  var i;
  var count = this.residueCount;
  var offset = this.residueOffset;
  var rp = this.structure._rp;
  var end = offset + count;

  if (selection && selection.test) {
    var residueOnlyTest = selection.residueOnlyTest;
    if (residueOnlyTest) {
      for (i = offset; i < end; ++i) {
        rp.index = i;
        if (residueOnlyTest(rp)) {
          callback(rp, selection);
        }
      }
    } else {
      for (i = offset; i < end; ++i) {
        rp.index = i;
        callback(rp, selection);
      }
    }
  } else {
    for (i = offset; i < end; ++i) {
      rp.index = i;
      callback(rp);
    }
  }
};

  /**
   * Multi-residue iterator
   * @param {Integer} n - window size
   * @param{function(residueList: ResidueProxy[])} callback - the callback
   * @return {undefined}
   */
ChainProxy.prototype.eachResidueN = function eachResidueN (n, callback) {
    var this$1 = this;

  var i;
  var count = this.residueCount;
  var offset = this.residueOffset;
  var end = offset + count;
  if (count < n) { return }
  var array = new Array(n);

  for (i = 0; i < n; ++i) {
    array[ i ] = this$1.structure.getResidueProxy(offset + i);
  }
  callback.apply(this, array);

  for (var j = offset + n; j < end; ++j) {
    for (i = 0; i < n; ++i) {
      array[ i ].index += 1;
    }
    callback.apply(this$1, array);
  }
};

  /**
   * Polymer iterator
   * @param{function(polymer: Polymer)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
ChainProxy.prototype.eachPolymer = function eachPolymer (callback, selection) {
  var rStartIndex, rNextIndex;
  var test = selection ? selection.residueOnlyTest : undefined;
  var structure = this.model.structure;

  var count = this.residueCount;
  var offset = this.residueOffset;
  var end = offset + count;

  var rp1 = this.structure.getResidueProxy();
  var rp2 = this.structure.getResidueProxy(offset);

  var ap1 = this.structure.getAtomProxy();
  var ap2 = this.structure.getAtomProxy();

  var first = true;

  for (var i = offset + 1; i < end; ++i) {
    rp1.index = rp2.index;
    rp2.index = i;

    if (first) {
      rStartIndex = rp1.index;
      first = false;
    }
    rNextIndex = rp2.index;

    var bbType1 = first ? rp1.backboneEndType : rp1.backboneType;
    var bbType2 = rp2.backboneType;

    if (bbType1 !== UnknownBackboneType && bbType1 === bbType2) {
      ap1.index = rp1.backboneEndAtomIndex;
      ap2.index = rp2.backboneStartAtomIndex;
    } else {
      if (bbType1 !== UnknownBackboneType) {
        if (rp1.index - rStartIndex > 1) {
                      // console.log("FOO1",rStartIndex, rp1.index)
          callback(new Polymer(structure, rStartIndex, rp1.index));
        }
      }
      rStartIndex = rNextIndex;

      continue
    }

    if (!ap1 || !ap2 || !ap1.connectedTo(ap2) ||
              (test && (!test(rp1) || !test(rp2)))
          ) {
      if (rp1.index - rStartIndex > 1) {
                  // console.log("FOO2",rStartIndex, rp1.index)
        callback(new Polymer(structure, rStartIndex, rp1.index));
      }
      rStartIndex = rNextIndex;
    }
  }

  if (rNextIndex - rStartIndex > 1) {
    if (this.structure.getResidueProxy(rStartIndex).backboneStartType) {
              // console.log("FOO3",rStartIndex, rNextIndex)
      callback(new Polymer(structure, rStartIndex, rNextIndex));
    }
  }
};

  //

ChainProxy.prototype.qualifiedName = function qualifiedName () {
  var name = ':' + this.chainname + '/' + this.modelIndex;
  return name
};

  /**
   * Clone object
   * @return {ChainProxy} cloned chain
   */
ChainProxy.prototype.clone = function clone () {
  return new this.constructor(this.structure, this.index)
};

ChainProxy.prototype.toObject = function toObject () {
  return {
    index: this.index,
    residueOffset: this.residueOffset,
    residueCount: this.residueCount,

    chainname: this.chainname
  }
};

Object.defineProperties( ChainProxy.prototype, prototypeAccessors$20 );

/**
 * @file Model Proxy
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Model proxy
 */
var ModelProxy = function ModelProxy (structure, index) {
      /**
       * @type {Structure}
       */
  this.structure = structure;
      /**
       * @type {ModelStore}
       */
  this.modelStore = structure.modelStore;
      /**
       * @type {ChainStore}
       */
  this.chainStore = structure.chainStore;
      /**
       * @type {ResidueStore}
       */
  this.residueStore = structure.residueStore;
      /**
       * @type {Number}
       */
  this.index = index;
};

var prototypeAccessors$22 = { chainOffset: {},chainCount: {},residueOffset: {},atomOffset: {},chainEnd: {},residueEnd: {},atomEnd: {},residueCount: {},atomCount: {} };

prototypeAccessors$22.chainOffset.get = function () {
  return this.modelStore.chainOffset[ this.index ]
};
prototypeAccessors$22.chainOffset.set = function (value) {
  this.modelStore.chainOffset[ this.index ] = value;
};

prototypeAccessors$22.chainCount.get = function () {
  return this.modelStore.chainCount[ this.index ]
};
prototypeAccessors$22.chainCount.set = function (value) {
  this.modelStore.chainCount[ this.index ] = value;
};

prototypeAccessors$22.residueOffset.get = function () {
  return this.chainStore.residueOffset[ this.chainOffset ]
};
prototypeAccessors$22.atomOffset.get = function () {
  return this.residueStore.atomOffset[ this.residueOffset ]
};

prototypeAccessors$22.chainEnd.get = function () {
  return this.chainOffset + this.chainCount - 1
};
prototypeAccessors$22.residueEnd.get = function () {
  return (
          this.chainStore.residueOffset[ this.chainEnd ] +
          this.chainStore.residueCount[ this.chainEnd ] - 1
  )
};
prototypeAccessors$22.atomEnd.get = function () {
  return (
          this.residueStore.atomOffset[ this.residueEnd ] +
          this.residueStore.atomCount[ this.residueEnd ] - 1
  )
};

  /**
   * Residue count
   * @type {Integer}
   */
prototypeAccessors$22.residueCount.get = function () {
  if (this.chainCount === 0) {
    return 0
  } else {
    return this.residueEnd - this.residueOffset + 1
  }
};

  /**
   * Atom count
   * @type {Integer}
   */
prototypeAccessors$22.atomCount.get = function () {
  if (this.residueCount === 0) {
    return 0
  } else {
    return this.atomEnd - this.atomOffset + 1
  }
};

  //

  /**
   * Atom iterator
   * @param{function(atom: AtomProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
ModelProxy.prototype.eachAtom = function eachAtom (callback, selection) {
  this.eachChain(function (cp) {
    cp.eachAtom(callback, selection);
  }, selection);
};

  /**
   * Residue iterator
   * @param{function(residue: ResidueProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
ModelProxy.prototype.eachResidue = function eachResidue (callback, selection) {
  this.eachChain(function (cp) {
    cp.eachResidue(callback, selection);
  }, selection);
};

  /**
   * Polymer iterator
   * @param{function(polymer: Polymer)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
ModelProxy.prototype.eachPolymer = function eachPolymer (callback, selection) {
  if (selection && selection.chainOnlyTest) {
    var chainOnlyTest = selection.chainOnlyTest;

    this.eachChain(function (cp) {
      if (chainOnlyTest(cp)) {
        cp.eachPolymer(callback, selection);
      }
    });
  } else {
    this.eachChain(function (cp) {
      cp.eachPolymer(callback, selection);
    });
  }
};

  /**
   * Chain iterator
   * @param{function(chain: ChainProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
ModelProxy.prototype.eachChain = function eachChain (callback, selection) {
  var i;
  var count = this.chainCount;
  var offset = this.chainOffset;
  var cp = this.structure._cp;
  var end = offset + count;

  if (selection && selection.test) {
    var chainOnlyTest = selection.chainOnlyTest;
    if (chainOnlyTest) {
      for (i = offset; i < end; ++i) {
        cp.index = i;
        if (chainOnlyTest(cp)) {
          callback(cp, selection);
        }
      }
    } else {
      for (i = offset; i < end; ++i) {
        cp.index = i;
        callback(cp, selection);
      }
    }
  } else {
    for (i = offset; i < end; ++i) {
      cp.index = i;
      callback(cp);
    }
  }
};

  //

ModelProxy.prototype.qualifiedName = function qualifiedName () {
  var name = '/' + this.index;
  return name
};

  /**
   * Clone object
   * @return {ModelProxy} cloned model
   */
ModelProxy.prototype.clone = function clone () {
  return new this.constructor(this.structure, this.index)
};

ModelProxy.prototype.toObject = function toObject () {
  return {
    index: this.index,
    chainOffset: this.chainOffset,
    chainCount: this.chainCount
  }
};

Object.defineProperties( ModelProxy.prototype, prototypeAccessors$22 );

/**
 * @file Structure
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// import StructureView from "./structure-view.js";

/**
 * Structure header object.
 * @typedef {Object} StructureHeader - structure meta data
 * @property {String} [releaseDate] - release data, YYYY-MM-DD
 * @property {String} [depositionDate] - deposition data, YYYY-MM-DD
 * @property {Float} [resolution] - experimental resolution
 * @property {Float} [rFree] - r-free value
 * @property {Float} [rWork] - r-work value
 * @property {String[]} [experimentalMethods] - experimental methods
 */

/**
 * Structure extra data.
 * @typedef {Object} StructureExtraData - structure extra data
 * @property {Object} [cif] - dictionary from cif parser
 * @property {Object[]} [sdf] - associated data items from sdf parser, one per compound
 */

/**
 * Structure
 */
var Structure = function Structure (name, path) {
      /**
       * @type {{refreshed: Signal}}
       */
  this.signals = {
    refreshed: new Signal()
  };

  this.init(name, path);
};

var prototypeAccessors$12 = { type: {} };

Structure.prototype.init = function init (name, path) {
  this.name = name;
  this.path = path;
  this.title = '';
  this.id = '';
      /**
       * @type {StructureHeader}
       */
  this.header = {};
      /**
       * @type {StructureExtraData}
       */
  this.extraData = {};

  this.atomSetCache = undefined;
  this.atomSetDict = {};
  this.biomolDict = {};
      /**
       * @type {Entity[]}
       */
  this.entityList = [];
      /**
       * @type {Unitcell}
       */
  this.unitcell = undefined;

  this.frames = [];
  this.boxes = [];

      /**
       * @type {Validation}
       */
  this.validation = undefined;

  this.bondStore = new BondStore(0);
  this.backboneBondStore = new BondStore(0);
  this.rungBondStore = new BondStore(0);
  this.atomStore = new AtomStore(0);
  this.residueStore = new ResidueStore(0);
  this.chainStore = new ChainStore(0);
  this.modelStore = new ModelStore(0);

      /**
       * @type {AtomMap}
       */
  this.atomMap = new AtomMap(this);
      /**
       * @type {ResidueMap}
       */
  this.residueMap = new ResidueMap(this);

      /**
       * @type {BondHash}
       */
  this.bondHash = undefined;
      /**
       * @type {SpatialHash}
       */
  this.spatialHash = undefined;

  this.atomSet = undefined;
  this.bondSet = undefined;

      /**
       * @type {Vector3}
       */
  this.center = undefined;
      /**
       * @type {Box3}
       */
  this.boundingBox = undefined;

  this._bp = this.getBondProxy();
  this._ap = this.getAtomProxy();
  this._rp = this.getResidueProxy();
  this._cp = this.getChainProxy();
};

prototypeAccessors$12.type.get = function () { return 'Structure' };

Structure.prototype.finalizeAtoms = function finalizeAtoms () {
  this.atomSet = this.getAtomSet();
  this.atomCount = this.atomStore.count;
  this.boundingBox = this.getBoundingBox();
  this.center = this.boundingBox.getCenter();
  this.spatialHash = new SpatialHash(this.atomStore, this.boundingBox);
};

Structure.prototype.finalizeBonds = function finalizeBonds () {
    var this$1 = this;

  this.bondSet = this.getBondSet();
  this.bondCount = this.bondStore.count;
  this.bondHash = new BondHash(this.bondStore, this.atomStore.count);

  this.atomSetCache = {};
  if (!this.atomSetDict.rung) {
    this.atomSetDict.rung = this.getAtomSet(false);
  }

  for (var name in this$1.atomSetDict) {
    this$1.atomSetCache[ '__' + name ] = this$1.atomSetDict[ name ].clone();
  }
};

  //

Structure.prototype.getBondProxy = function getBondProxy (index) {
  return new BondProxy(this, index)
};

Structure.prototype.getAtomProxy = function getAtomProxy (index) {
  return new AtomProxy(this, index)
};

Structure.prototype.getResidueProxy = function getResidueProxy (index) {
  return new ResidueProxy(this, index)
};

Structure.prototype.getChainProxy = function getChainProxy (index) {
  return new ChainProxy(this, index)
};

Structure.prototype.getModelProxy = function getModelProxy (index) {
  return new ModelProxy(this, index)
};

  //

Structure.prototype.getBondSet = function getBondSet (/* selection */) {
      // TODO implement selection parameter

  var n = this.bondStore.count;
  var bondSet = new BitArray(n);
  var atomSet = this.atomSet;

  if (atomSet) {
    var bp = this.getBondProxy();

    for (var i = 0; i < n; ++i) {
      bp.index = i;
      if (atomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
        bondSet.set(bp.index);
      }
    }
  } else {
    bondSet.setAll();
  }

  return bondSet
};

Structure.prototype.getBackboneBondSet = function getBackboneBondSet (/* selection */) {
      // TODO implement selection parameter

  var n = this.backboneBondStore.count;
  var backboneBondSet = new BitArray(n);
  var backboneAtomSet = this.atomSetCache.__backbone;

  if (backboneAtomSet) {
    var bp = this.getBondProxy();
    bp.bondStore = this.backboneBondStore;

    for (var i = 0; i < n; ++i) {
      bp.index = i;
      if (backboneAtomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
        backboneBondSet.set(bp.index);
      }
    }
  } else {
    backboneBondSet.set_all(true);
  }

  return backboneBondSet
};

Structure.prototype.getRungBondSet = function getRungBondSet (/* selection */) {
      // TODO implement selection parameter

  var n = this.rungBondStore.count;
  var rungBondSet = new BitArray(n);
  var rungAtomSet = this.atomSetCache.__rung;

  if (rungAtomSet) {
    var bp = this.getBondProxy();
    bp.bondStore = this.rungBondStore;

    for (var i = 0; i < n; ++i) {
      bp.index = i;
      if (rungAtomSet.isSet(bp.atomIndex1, bp.atomIndex2)) {
        rungBondSet.set(bp.index);
      }
    }
  } else {
    rungBondSet.set_all(true);
  }

  return rungBondSet
};

Structure.prototype.getAtomSet = function getAtomSet (selection) {
  var atomSet;
  var n = this.atomStore.count;

  if (selection instanceof BitArray) {
    atomSet = selection;
  } else if (selection && selection.test) {
    var seleString = selection.string;

    if (seleString in this.atomSetCache) {
      atomSet = this.atomSetCache[ seleString ];
    } else {
      atomSet = new BitArray(n);
      this.eachAtom(function (ap) {
        atomSet.set(ap.index);
      }, selection);
      this.atomSetCache[ seleString ] = atomSet;
    }
  } else if (selection === false) {
    atomSet = new BitArray(n);
  } else {
    atomSet = new BitArray(n, true);
  }

  return atomSet
};

  /**
   * Get set of atom around a set of atoms from a selection
   * @param{Selection} selection - the selection object
   * @param{Number} radius - radius to select within
   * @return {BitArray} set of atoms
   */
Structure.prototype.getAtomSetWithinSelection = function getAtomSetWithinSelection (selection, radius) {
  var spatialHash = this.spatialHash;
  var atomSet = this.getAtomSet(false);
  var ap = this.getAtomProxy();

  this.getAtomSet(selection).forEach(function (idx) {
    ap.index = idx;
    spatialHash.within(ap.x, ap.y, ap.z, radius).forEach(function (idx2) {
      atomSet.set(idx2);
    });
  });

  return atomSet
};

Structure.prototype.getAtomSetWithinPoint = function getAtomSetWithinPoint (point, radius) {
  var p = point;
  var atomSet = this.getAtomSet(false);

  this.spatialHash.within(p.x, p.y, p.z, radius).forEach(function (idx) {
    atomSet.set(idx);
  });

  return atomSet
};

Structure.prototype.getAtomSetWithinVolume = function getAtomSetWithinVolume (volume, radius, minValue, maxValue, outside) {
    var this$1 = this;

  var fv = new FilteredVolume(volume, minValue, maxValue, outside);

  var dp = fv.getDataPosition();
  var n = dp.length;
  var r = fv.matrix.getMaxScaleOnAxis();
  var atomSet = this.getAtomSet(false);

  for (var i = 0; i < n; i += 3) {
    this$1.spatialHash.within(dp[ i ], dp[ i + 1 ], dp[ i + 2 ], r).forEach(function (idx) {
      atomSet.set(idx);
    });
  }

  return atomSet
};

Structure.prototype.getAtomSetWithinGroup = function getAtomSetWithinGroup (selection) {
  var atomResidueIndex = this.atomStore.residueIndex;
  var atomSet = this.getAtomSet(false);
  var rp = this.getResidueProxy();

  this.getAtomSet(selection).forEach(function (idx) {
    rp.index = atomResidueIndex[ idx ];
    for (var idx2 = rp.atomOffset; idx2 <= rp.atomEnd; ++idx2) {
      atomSet.set(idx2);
    }
  });

  return atomSet
};

  //

Structure.prototype.getSelection = function getSelection () {
  return false
};

Structure.prototype.getStructure = function getStructure () {
  return this
};

  /**
   * Entity iterator
   * @param{function(entity: Entity)} callback - the callback
   * @param{EntityType} type - entity type
   * @return {undefined}
   */
Structure.prototype.eachEntity = function eachEntity (callback, type) {
  this.entityList.forEach(function (entity) {
    if (type === undefined || entity.getEntityType() === type) {
      callback(entity);
    }
  });
};

  /**
   * Bond iterator
   * @param{function(bond: BondProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
Structure.prototype.eachBond = function eachBond (callback, selection) {
  var bp = this.getBondProxy();
  var bondSet;

  if (selection && selection.test) {
    bondSet = this.getBondSet(selection);
    if (this.bondSet) {
      bondSet.intersection(this.bondSet);
    }
  }

  if (bondSet) {
    bondSet.forEach(function (index) {
      bp.index = index;
      callback(bp);
    });
  } else {
    var n = this.bondStore.count;
    for (var i = 0; i < n; ++i) {
      bp.index = i;
      callback(bp);
    }
  }
};

  /**
   * Atom iterator
   * @param{function(atom: AtomProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
Structure.prototype.eachAtom = function eachAtom (callback, selection) {
  if (selection && selection.test) {
    this.eachModel(function (mp) {
      mp.eachAtom(callback, selection);
    }, selection);
  } else {
    var an = this.atomStore.count;
    var ap = this.getAtomProxy();
    for (var i = 0; i < an; ++i) {
      ap.index = i;
      callback(ap);
    }
  }
};

  /**
   * Residue iterator
   * @param{function(residue: ResidueProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
Structure.prototype.eachResidue = function eachResidue (callback, selection) {
  var i;
  if (selection && selection.test) {
    var mn = this.modelStore.count;
    var mp = this.getModelProxy();
    var modelOnlyTest = selection.modelOnlyTest;
    if (modelOnlyTest) {
      for (i = 0; i < mn; ++i) {
        mp.index = i;
        if (modelOnlyTest(mp)) {
          mp.eachResidue(callback, selection);
        }
      }
    } else {
      for (i = 0; i < mn; ++i) {
        mp.index = i;
        mp.eachResidue(callback, selection);
      }
    }
  } else {
    var rn = this.residueStore.count;
    var rp = this.getResidueProxy();
    for (i = 0; i < rn; ++i) {
      rp.index = i;
      callback(rp);
    }
  }
};

  /**
   * Multi-residue iterator
   * @param {Integer} n - window size
   * @param{function(residueList: ResidueProxy[])} callback - the callback
   * @return {undefined}
   */
Structure.prototype.eachResidueN = function eachResidueN (n, callback) {
    var this$1 = this;

  var i, j;
  var rn = this.residueStore.count;
  if (rn < n) { return }
  var array = new Array(n);

  for (i = 0; i < n; ++i) {
    array[ i ] = this$1.getResidueProxy(i);
  }
  callback.apply(this, array);

  for (j = n; j < rn; ++j) {
    for (i = 0; i < n; ++i) {
      array[ i ].index += 1;
    }
    callback.apply(this$1, array);
  }
};

  /**
   * Polymer iterator
   * @param{function(polymer: Polymer)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
Structure.prototype.eachPolymer = function eachPolymer (callback, selection) {
  if (selection && selection.modelOnlyTest) {
    var modelOnlyTest = selection.modelOnlyTest;

    this.eachModel(function (mp) {
      if (modelOnlyTest(mp)) {
        mp.eachPolymer(callback, selection);
      }
    });
  } else {
    this.eachModel(function (mp) {
      mp.eachPolymer(callback, selection);
    });
  }
};

  /**
   * Chain iterator
   * @param{function(chain: ChainProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
Structure.prototype.eachChain = function eachChain (callback, selection) {
  if (selection && selection.test) {
    this.eachModel(function (mp) {
      mp.eachChain(callback, selection);
    });
  } else {
    var cn = this.chainStore.count;
    var cp = this.getChainProxy();
    for (var i = 0; i < cn; ++i) {
      cp.index = i;
      callback(cp);
    }
  }
};

  /**
   * Model iterator
   * @param{function(model: ModelProxy)} callback - the callback
   * @param{Selection} [selection] - the selection
   * @return {undefined}
   */
Structure.prototype.eachModel = function eachModel (callback, selection) {
  var i;
  var n = this.modelStore.count;
  var mp = this.getModelProxy();

  if (selection && selection.test) {
    var modelOnlyTest = selection.modelOnlyTest;
    if (modelOnlyTest) {
      for (i = 0; i < n; ++i) {
        mp.index = i;
        if (modelOnlyTest(mp)) {
          callback(mp, selection);
        }
      }
    } else {
      for (i = 0; i < n; ++i) {
        mp.index = i;
        callback(mp, selection);
      }
    }
  } else {
    for (i = 0; i < n; ++i) {
      mp.index = i;
      callback(mp);
    }
  }
};

  //

Structure.prototype.getAtomData = function getAtomData (params) {
  var p = Object.assign({}, params);
  if (p.colorParams) { p.colorParams.structure = this.getStructure(); }

  var what = p.what;
  var atomSet = defaults(p.atomSet, this.atomSet);

  var radiusFactory, colormaker;
  var position, color, picking, radius, index;

  var atomData = {};
  var ap = this.getAtomProxy();
  var atomCount = atomSet.getSize();

  if (!what || what.position) {
    position = new Float32Array(atomCount * 3);
    atomData.position = position;
  }
  if (!what || what.color) {
    color = new Float32Array(atomCount * 3);
    atomData.color = color;
    colormaker = ColormakerRegistry.getScheme(p.colorParams);
  }
  if (!what || what.picking) {
    picking = new Float32Array(atomCount);
    atomData.picking = new AtomPicker(picking, this.getStructure());
  }
  if (!what || what.radius) {
    radius = new Float32Array(atomCount);
    atomData.radius = radius;
    radiusFactory = new RadiusFactory(p.radiusParams.radius, p.radiusParams.scale);
  }
  if (!what || what.index) {
    index = new Float32Array(atomCount);
    atomData.index = index;
  }

  atomSet.forEach(function (idx, i) {
    var i3 = i * 3;
    ap.index = idx;
    if (position) {
      ap.positionToArray(position, i3);
    }
    if (color) {
      colormaker.atomColorToArray(ap, color, i3);
    }
    if (picking) {
      picking[ i ] = idx;
    }
    if (radius) {
      radius[ i ] = radiusFactory.atomRadius(ap);
    }
    if (index) {
      index[ i ] = idx;
    }
  });
  return atomData
};

Structure.prototype.getBondData = function getBondData (params) {
  var p = Object.assign({}, params);
  if (p.colorParams) { p.colorParams.structure = this.getStructure(); }

  var what = p.what;
  var bondSet = defaults(p.bondSet, this.bondSet);
  var multipleBond = defaults(p.multipleBond, 'off');
  var isMulti = multipleBond !== 'off';
  var isOffset = multipleBond === 'offset';
  var bondScale = defaults(p.bondScale, 0.4);
  var bondSpacing = defaults(p.bondSpacing, 1.0);

  var radiusFactory, colormaker;
  var position1, position2, color1, color2, picking, radius1, radius2;

  var bondData = {};
  var bp = this.getBondProxy();
  if (p.bondStore) { bp.bondStore = p.bondStore; }
  var ap1 = this.getAtomProxy();
  var ap2 = this.getAtomProxy();
  var bondCount;
  if (isMulti) {
    var storeBondOrder = bp.bondStore.bondOrder;
    bondCount = 0;
    bondSet.forEach(function (index) {
      bondCount += storeBondOrder[ index ];
    });
  } else {
    bondCount = bondSet.getSize();
  }

  if (!what || what.position) {
    position1 = new Float32Array(bondCount * 3);
    position2 = new Float32Array(bondCount * 3);
    bondData.position1 = position1;
    bondData.position2 = position2;
  }
  if (!what || what.color) {
    color1 = new Float32Array(bondCount * 3);
    color2 = new Float32Array(bondCount * 3);
    bondData.color = color1;
    bondData.color2 = color2;
    colormaker = ColormakerRegistry.getScheme(p.colorParams);
  }
  if (!what || what.picking) {
    picking = new Float32Array(bondCount);
    bondData.picking = new BondPicker(picking, this.getStructure(), p.bondStore);
  }
  if (!what || what.radius || (isMulti && what.position)) {
    radiusFactory = new RadiusFactory(p.radiusParams.radius, p.radiusParams.scale);
  }
  if (!what || what.radius) {
    radius1 = new Float32Array(bondCount);
    bondData.radius = radius1;
    if (p.radius2) {
      radius2 = new Float32Array(bondCount);
      bondData.radius2 = radius2;
    }
  }

  var i = 0;

  var j, i3, k, bondOrder, radius, multiRadius, absOffset;

  var vt = new Vector3();
  var vShortening = new Vector3();
  var vShift = new Vector3();

  bondSet.forEach(function (index) {
    i3 = i * 3;
    bp.index = index;
    ap1.index = bp.atomIndex1;
    ap2.index = bp.atomIndex2;
    bondOrder = bp.bondOrder;
    if (position1) {
      if (isMulti && bondOrder > 1) {
        radius = radiusFactory.atomRadius(ap1);
        multiRadius = radius * bondScale / (0.5 * bondOrder);

        bp.calculateShiftDir(vShift);

        if (isOffset) {
          absOffset = 2 * bondSpacing * radius;
          vShift.multiplyScalar(absOffset);
          vShift.negate();

                      // Shortening is calculated so that neighbouring double
                      // bonds on tetrahedral geometry (e.g. sulphonamide)
                      // are not quite touching (arccos(1.9 / 2) ~ 109deg)
                      // but don't shorten beyond 10% each end or it looks odd
          vShortening.subVectors(ap2, ap1).multiplyScalar(
                          Math.max(0.1, absOffset / 1.88)
                      );
          ap1.positionToArray(position1, i3);
          ap2.positionToArray(position2, i3);

          if (bondOrder >= 2) {
            vt.addVectors(ap1, vShift).add(vShortening).toArray(position1, i3 + 3);
            vt.addVectors(ap2, vShift).sub(vShortening).toArray(position2, i3 + 3);

            if (bondOrder >= 3) {
              vt.subVectors(ap1, vShift).add(vShortening).toArray(position1, i3 + 6);
              vt.subVectors(ap2, vShift).sub(vShortening).toArray(position2, i3 + 6);
            }
          }
        } else {
          absOffset = (bondSpacing - bondScale) * radius;
          vShift.multiplyScalar(absOffset);

          if (bondOrder === 2) {
            vt.addVectors(ap1, vShift).toArray(position1, i3);
            vt.subVectors(ap1, vShift).toArray(position1, i3 + 3);
            vt.addVectors(ap2, vShift).toArray(position2, i3);
            vt.subVectors(ap2, vShift).toArray(position2, i3 + 3);
          } else if (bondOrder === 3) {
            ap1.positionToArray(position1, i3);
            vt.addVectors(ap1, vShift).toArray(position1, i3 + 3);
            vt.subVectors(ap1, vShift).toArray(position1, i3 + 6);
            ap2.positionToArray(position2, i3);
            vt.addVectors(ap2, vShift).toArray(position2, i3 + 3);
            vt.subVectors(ap2, vShift).toArray(position2, i3 + 6);
          } else {
                        // todo, better fallback
            ap1.positionToArray(position1, i3);
            ap2.positionToArray(position2, i3);
          }
        }
      } else {
        ap1.positionToArray(position1, i3);
        ap2.positionToArray(position2, i3);
      }
    }
    if (color1) {
      colormaker.bondColorToArray(bp, 1, color1, i3);
      colormaker.bondColorToArray(bp, 0, color2, i3);
      if (isMulti && bondOrder > 1) {
        for (j = 1; j < bondOrder; ++j) {
          k = j * 3 + i3;
          copyWithin(color1, i3, k, 3);
          copyWithin(color2, i3, k, 3);
        }
      }
    }
    if (picking) {
      picking[ i ] = index;
      if (isMulti && bondOrder > 1) {
        for (j = 1; j < bondOrder; ++j) {
          picking[ i + j ] = index;
        }
      }
    }
    if (radius1) {
      radius1[ i ] = radiusFactory.atomRadius(ap1);
      if (isMulti && bondOrder > 1) {
        multiRadius = radius1[ i ] * bondScale / (isOffset ? 1 : (0.5 * bondOrder));
        for (j = isOffset ? 1 : 0; j < bondOrder; ++j) {
          radius1[ i + j ] = multiRadius;
        }
      }
    }
    if (radius2) {
      radius2[ i ] = radiusFactory.atomRadius(ap2);
      if (isMulti && bondOrder > 1) {
        multiRadius = radius2[ i ] * bondScale / (isOffset ? 1 : (0.5 * bondOrder));
        for (j = isOffset ? 1 : 0; j < bondOrder; ++j) {
          radius2[ i + j ] = multiRadius;
        }
      }
    }
    i += isMulti ? bondOrder : 1;
  });

  return bondData
};

Structure.prototype.getBackboneAtomData = function getBackboneAtomData (params) {
  params = Object.assign({
    atomSet: this.atomSetCache.__backbone
  }, params);

  return this.getAtomData(params)
};

Structure.prototype.getBackboneBondData = function getBackboneBondData (params) {
  params = Object.assign({
    bondSet: this.getBackboneBondSet(),
    bondStore: this.backboneBondStore
  }, params);

  return this.getBondData(params)
};

Structure.prototype.getRungAtomData = function getRungAtomData (params) {
  params = Object.assign({
    atomSet: this.atomSetCache.__rung
  }, params);

  return this.getAtomData(params)
};

Structure.prototype.getRungBondData = function getRungBondData (params) {
  params = Object.assign({
    bondSet: this.getRungBondSet(),
    bondStore: this.rungBondStore
  }, params);

  return this.getBondData(params)
};

  //

  /**
   * Gets the bounding box of the (selected) structure atoms
   * @param{Selection} [selection] - the selection
   * @param{Box3} [box] - optional target
   * @return {Vector3} the box
   */
Structure.prototype.getBoundingBox = function getBoundingBox (selection, box) {
  if (Debug) { Log.time('getBoundingBox'); }

  box = box || new Box3();

  var minX = +Infinity;
  var minY = +Infinity;
  var minZ = +Infinity;

  var maxX = -Infinity;
  var maxY = -Infinity;
  var maxZ = -Infinity;

  this.eachAtom(function (ap) {
    var x = ap.x;
    var y = ap.y;
    var z = ap.z;

    if (x < minX) { minX = x; }
    if (y < minY) { minY = y; }
    if (z < minZ) { minZ = z; }

    if (x > maxX) { maxX = x; }
    if (y > maxY) { maxY = y; }
    if (z > maxZ) { maxZ = z; }
  }, selection);

  box.min.set(minX, minY, minZ);
  box.max.set(maxX, maxY, maxZ);

  if (Debug) { Log.timeEnd('getBoundingBox'); }

  return box
};

  /**
   * Gets the principal axes of the (selected) structure atoms
   * @param{Selection} [selection] - the selection
   * @return {PrincipalAxes} the principal axes
   */
Structure.prototype.getPrincipalAxes = function getPrincipalAxes (selection) {
  if (Debug) { Log.time('getPrincipalAxes'); }

  var i = 0;
  var coords = new Matrix(3, this.atomCount);
  var cd = coords.data;

  this.eachAtom(function (a) {
    cd[ i + 0 ] = a.x;
    cd[ i + 1 ] = a.y;
    cd[ i + 2 ] = a.z;
    i += 3;
  }, selection);

  if (Debug) { Log.timeEnd('getPrincipalAxes'); }

  return new PrincipalAxes(coords)
};

  /**
   * Gets the center of the (selected) structure atoms
   * @param{Selection} [selection] - the selection
   * @return {Vector3} the center
   */
Structure.prototype.atomCenter = function atomCenter (selection) {
  if (selection) {
    return this.getBoundingBox(selection).getCenter()
  } else {
    return this.center.clone()
  }
};

Structure.prototype.getSequence = function getSequence (selection) {
  var seq = [];
  var rp = this.getResidueProxy();

  this.eachAtom(function (ap) {
    rp.index = ap.residueIndex;
    if (ap.index === rp.traceAtomIndex) {
      seq.push(rp.getResname1());
    }
  }, selection);

  return seq
};

Structure.prototype.getAtomIndices = function getAtomIndices (selection) {
  var indices;

  if (selection && selection.string) {
    indices = [];
    this.eachAtom(function (ap) {
      indices.push(ap.index);
    }, selection);
  } else {
    var p = { what: { index: true } };
    indices = this.getAtomData(p).index;
  }

  return indices
};

  /**
   * Get number of unique chainnames
   * @param{Selection} selection - limit count to selection
   * @return {Integer} count
   */
Structure.prototype.getChainnameCount = function getChainnameCount (selection) {
  var chainnames = new Set();
  this.eachChain(function (cp) {
    if (cp.residueCount) {
      chainnames.add(cp.chainname);
    }
  }, selection);

  return chainnames.size
};

  //

Structure.prototype.updatePosition = function updatePosition (position) {
  var i = 0;

  this.eachAtom(function (ap) {
    ap.positionFromArray(position, i);
    i += 3;
  });
};

Structure.prototype.refreshPosition = function refreshPosition () {
  this.getBoundingBox(undefined, this.boundingBox);
  this.boundingBox.getCenter(this.center);
  this.spatialHash = new SpatialHash(this.atomStore, this.boundingBox);
};

  /**
   * Calls dispose() method of property objects.
   * Unsets properties to help garbage collection.
   * @return {undefined}
   */
Structure.prototype.dispose = function dispose () {
  if (this.frames) { this.frames.length = 0; }
  if (this.boxes) { this.boxes.length = 0; }

  this.bondStore.dispose();
  this.backboneBondStore.dispose();
  this.rungBondStore.dispose();
  this.atomStore.dispose();
  this.residueStore.dispose();
  this.chainStore.dispose();
  this.modelStore.dispose();

  delete this.bondStore;
  delete this.atomStore;
  delete this.residueStore;
  delete this.chainStore;
  delete this.modelStore;

  delete this.frames;
  delete this.boxes;
  delete this.cif;

  delete this.bondSet;
  delete this.atomSet;
};

Object.defineProperties( Structure.prototype, prototypeAccessors$12 );

/**
 * @file Queue
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function Queue (fn, argList) {
  var queue = [];
  var pending = false;

  if (argList) {
    for (var i = 0, il = argList.length; i < il; ++i) {
      queue.push(argList[ i ]);
    }
    next();
  }

  function run (arg) {
    fn(arg, next);
  }

  function next () {
    var arg = queue.shift();
    if (arg !== undefined) {
      pending = true;
      setTimeout(function () { run(arg); });
    } else {
      pending = false;
    }
  }

    // API

  this.push = function (arg) {
    queue.push(arg);
    if (!pending) { next(); }
  };

  this.kill = function () {
    queue.length = 0;
  };

  this.length = function () {
    return queue.length
  };
}

/**
 * @file Superposition
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var Superposition = function Superposition (atoms1, atoms2) {
  // allocate & init data structures

  var n;
  if (typeof atoms1.eachAtom === 'function') {
    n = atoms1.atomCount;
  } else if (atoms1 instanceof Float32Array) {
    n = atoms1.length / 3;
  }

  var coords1 = new Matrix(3, n);
  var coords2 = new Matrix(3, n);

  this.coords1t = new Matrix(n, 3);
  this.coords2t = new Matrix(n, 3);

  this.A = new Matrix(3, 3);
  this.W = new Matrix(1, 3);
  this.U = new Matrix(3, 3);
  this.V = new Matrix(3, 3);
  this.VH = new Matrix(3, 3);
  this.R = new Matrix(3, 3);

  this.tmp = new Matrix(3, 3);
  this.c = new Matrix(3, 3);
  this.c.data.set([ 1, 0, 0, 0, 1, 0, 0, 0, -1 ]);

  // prep coords

  this.prepCoords(atoms1, coords1);
  this.prepCoords(atoms2, coords2);

  // superpose

  this._superpose(coords1, coords2);
};

Superposition.prototype._superpose = function _superpose (coords1, coords2) {
  this.mean1 = meanRows(coords1);
  this.mean2 = meanRows(coords2);

  subRows(coords1, this.mean1);
  subRows(coords2, this.mean2);

  transpose(this.coords1t, coords1);
  transpose(this.coords2t, coords2);

  multiplyABt(this.A, this.coords2t, this.coords1t);

  svd(this.A, this.W, this.U, this.V);

  invert3x3(this.V, this.VH);
  multiply3x3(this.R, this.U, this.VH);

  if (mat3x3determinant(this.R) < 0.0) {
    if (Debug) { Log.log('R not a right handed system'); }

    multiply3x3(this.tmp, this.c, this.VH);
    multiply3x3(this.R, this.U, this.tmp);
  }
};

Superposition.prototype.prepCoords = function prepCoords (atoms, coords) {
  var i = 0;
  var cd = coords.data;

  if (typeof atoms.eachAtom === 'function') {
    atoms.eachAtom(function (a) {
      cd[ i + 0 ] = a.x;
      cd[ i + 1 ] = a.y;
      cd[ i + 2 ] = a.z;

      i += 3;
    });
  } else if (atoms instanceof Float32Array) {
    cd.set(atoms);
  } else {
    Log.warn('prepCoords: input type unknown');
  }
};

Superposition.prototype.transform = function transform (atoms) {
  // allocate data structures

  var n;
  if (typeof atoms.eachAtom === 'function') {
    n = atoms.atomCount;
  } else if (atoms instanceof Float32Array) {
    n = atoms.length / 3;
  }

  var coords = new Matrix(3, n);
  var tmp = new Matrix(n, 3);

  // prep coords

  this.prepCoords(atoms, coords);

  // do transform

  subRows(coords, this.mean1);
  multiplyABt(tmp, this.R, coords);
  transpose(coords, tmp);
  addRows(coords, this.mean2);

  var i = 0;
  var cd = coords.data;

  if (typeof atoms.eachAtom === 'function') {
    atoms.eachAtom(function (a) {
      a.x = cd[ i + 0 ];
      a.y = cd[ i + 1 ];
      a.z = cd[ i + 2 ];

      i += 3;
    });
  } else if (atoms instanceof Float32Array) {
    atoms.set(cd.subarray(0, n * 3));
  } else {
    Log.warn('transform: input type unknown');
  }
};

/**
 * @file Trajectory Player
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Trajectory player parameter object.
 * @typedef {Object} TrajectoryPlayerParameters - parameters
 *
 * @property {Integer} step - how many frames to skip when playing
 * @property {Integer} timeout - how many milliseconds to wait between playing frames
 * @property {Integer} start - first frame to play
 * @property {Integer} end - last frame to play
 * @property {String} interpolateType - one of "" (empty string), "linear" or "spline"
 * @property {Integer} interpolateStep - window size used for interpolation
 * @property {String} mode - either "loop" or "once"
 * @property {String} direction - either "forward" or "backward"
 */

/**
 * Trajectory player for animating coordinate frames
 * @example
 * var player = new NGL.TrajectoryPlayer( trajComp.trajectory, { step: 1, timeout: 50 } );
 * player.play();
 */
var TrajectoryPlayer = function TrajectoryPlayer (traj, params) {
  this.signals = {
    startedRunning: new Signal(),
    haltedRunning: new Signal()
  };

  var p = Object.assign({}, params);

  traj.signals.playerChanged.add(function (player) {
    if (player !== this) {
      this.pause();
    }
  }, this);

  var n = defaults(traj.numframes, 1);
  this.traj = traj;
  this.start = defaults(p.start, 0);
  this.end = Math.min(defaults(p.end, n - 1), n - 1);

  this.step = defaults(p.step, Math.ceil((n + 1) / 100));
  this.timeout = defaults(p.timeout, 50);
  this.interpolateType = defaults(p.interpolateType, '');
  this.interpolateStep = defaults(p.interpolateStep, 5);
  this.mode = defaults(p.mode, 'loop');// loop, once
  this.direction = defaults(p.direction, 'forward');// forward, backward

  this._stopFlag = false;
  this._running = false;

  traj.signals.gotNumframes.add(function (n) {
    this.end = Math.min(defaults(p.end, n - 1), n - 1);
  }, this);
};

TrajectoryPlayer.prototype._animate = function _animate () {
  var i;
  this._running = true;

  if (!this.traj.inProgress && !this._stopFlag) {
    if (this.direction === 'forward') {
      i = this.traj.currentFrame + this.step;
    } else {
      i = this.traj.currentFrame - this.step;
    }

    if (i >= this.end || i < this.start) {
      if (this.mode === 'once') {
        this.pause();

        if (this.direction === 'forward') {
          i = this.end;
        } else {
          i = this.start;
        }
      } else {
        if (this.direction === 'forward') {
          i = this.start;
        } else {
          i = this.end;
        }
      }
    }

    if (!this.interpolateType) {
      this.traj.setFrame(i);
    }
  }

  if (!this._stopFlag) {
    if (!this.traj.inProgress && this.interpolateType) {
      var ip, ipp, ippp;

      if (this.direction === 'forward') {
        ip = Math.max(this.start, i - this.step);
        ipp = Math.max(this.start, i - 2 * this.step);
        ippp = Math.max(this.start, i - 3 * this.step);
      } else {
        ip = Math.min(this.end, i + this.step);
        ipp = Math.min(this.end, i + 2 * this.step);
        ippp = Math.min(this.end, i + 3 * this.step);
      }

      this._interpolate(
                  i, ip, ipp, ippp, 1 / this.interpolateStep, 0
              );
    } else {
      setTimeout(this._animate.bind(this), this.timeout);
    }
  } else {
    this._running = false;
  }
};

TrajectoryPlayer.prototype._interpolate = function _interpolate (i, ip, ipp, ippp, d, t) {
  t += d;

  if (t <= 1) {
    var deltaTime = Math.round(this.timeout * d);

    this.traj.setFrameInterpolated(
              i, ip, ipp, ippp, t, this.interpolateType,
              function () {
                setTimeout(function () {
                  this._interpolate(i, ip, ipp, ippp, d, t);
                }.bind(this), deltaTime);
              }.bind(this)
          );
  } else {
    setTimeout(this._animate.bind(this), 0);
  }
};

  /**
   * toggle between playing and pausing the animation
   * @return {undefined}
   */
TrajectoryPlayer.prototype.toggle = function toggle () {
  if (this._running) {
    this.pause();
  } else {
    this.play();
  }
};

  /**
   * start the animation
   * @return {undefined}
   */
TrajectoryPlayer.prototype.play = function play () {
  if (!this._running) {
    if (this.traj.player !== this) {
      this.traj.setPlayer(this);
    }

    var frame = this.traj.currentFrame;

          // snap to the grid implied by this.step division and multiplication
          // thus minimizing cache misses
    var i = Math.ceil(frame / this.step) * this.step;

          // wrap when restarting from the limit (i.e. end or start)
    if (this.direction === 'forward' && frame >= this.end) {
      i = this.start;
    } else if (this.direction === 'backward' && frame <= this.start) {
      i = this.end;
    }

    this.traj.setFrame(i);

    this._stopFlag = false;
    this._animate();
    this.signals.startedRunning.dispatch();
  }
};

  /**
   * pause the animation
   * @return {undefined}
   */
TrajectoryPlayer.prototype.pause = function pause () {
  if (this._running) {
    this._stopFlag = true;
    this.signals.haltedRunning.dispatch();
  }
};

  /**
   * stop the animation (pause and return to start-frame)
   * @return {undefined}
   */
TrajectoryPlayer.prototype.stop = function stop () {
  this.traj.setFrame(this.start);
  this.pause();
};

/**
 * @file Trajectory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function centerPbc (coords, mean, box) {
  if (box[ 0 ] === 0 || box[ 8 ] === 0 || box[ 4 ] === 0) {
    return
  }

  var i;
  var n = coords.length;

  var bx = box[ 0 ];
  var by = box[ 1 ];
  var bz = box[ 2 ];
  var mx = mean[ 0 ];
  var my = mean[ 1 ];
  var mz = mean[ 2 ];

  var fx = -mx + bx + bx / 2;
  var fy = -my + by + by / 2;
  var fz = -mz + bz + bz / 2;

  for (i = 0; i < n; i += 3) {
    coords[ i + 0 ] = (coords[ i + 0 ] + fx) % bx;
    coords[ i + 1 ] = (coords[ i + 1 ] + fy) % by;
    coords[ i + 2 ] = (coords[ i + 2 ] + fz) % bz;
  }
}

function removePbc (x, box) {
  if (box[ 0 ] === 0 || box[ 8 ] === 0 || box[ 4 ] === 0) {
    return
  }

    // ported from GROMACS src/gmxlib/rmpbc.c:rm_gropbc()
    // in-place

  var i, j, d, dist;
  var n = x.length;

  for (i = 3; i < n; i += 3) {
    for (j = 0; j < 3; ++j) {
      dist = x[ i + j ] - x[ i - 3 + j ];

      if (Math.abs(dist) > 0.9 * box[ j * 3 + j ]) {
        if (dist > 0) {
          for (d = 0; d < 3; ++d) {
            x[ i + d ] -= box[ j * 3 + d ];
          }
        } else {
          for (d = 0; d < 3; ++d) {
            x[ i + d ] += box[ j * 3 + d ];
          }
        }
      }
    }
  }

  return x
}

/**
 * Trajectory parameter object.
 * @typedef {Object} TrajectoryParameters - parameters
 *
 * @property {String} sele - to restrict atoms used for superposition
 * @property {Boolean} centerPbc - center on initial frame
 * @property {Boolean} removePbc - try fixing periodic boundary discontinuities
 * @property {Boolean} superpose - superpose on initial frame
 */

/**
 * Trajectory object for tying frames and structure together
 * @class
 * @param {String|Frames} trajPath - trajectory source
 * @param {Structure} structure - the structure object
 * @param {TrajectoryParameters} params - trajectory parameters
 */
var Trajectory = function Trajectory (trajPath, structure, params) {
  this.signals = {
    gotNumframes: new Signal(),
    frameChanged: new Signal(),
    selectionChanged: new Signal(),
    playerChanged: new Signal()
  };

  var p = params || {};
  p.centerPbc = defaults(p.centerPbc, true);
  p.removePbc = defaults(p.removePbc, true);
  p.superpose = defaults(p.superpose, true);
  this.setParameters(p);

  this.name = trajPath.replace(/^.*[\\/]/, '');

      // selection to restrict atoms used for superposition
  this.selection = new Selection(
          defaults(p.sele, 'backbone and not hydrogen')
      );

  this.selection.signals.stringChanged.add(function () {
    this.makeIndices();
    this.resetCache();
  }, this);

      // should come after this.selection is set
  this.setStructure(structure);
  this.setPlayer(new TrajectoryPlayer(this));

  this.trajPath = trajPath;

  this.numframes = undefined;
  this.getNumframes();
};

Trajectory.prototype.setStructure = function setStructure (structure) {
  this.structure = structure;
  this.atomCount = structure.atomCount;

  this.makeAtomIndices();

  this.saveInitialStructure();

  this.backboneIndices = this.getIndices(
          new Selection('backbone and not hydrogen')
      );
  this.makeIndices();

  this.frameCache = [];
  this.boxCache = [];
  this.pathCache = [];
  this.frameCacheSize = 0;
  this.currentFrame = -1;
};

Trajectory.prototype.saveInitialStructure = function saveInitialStructure () {
  var i = 0;
  var initialStructure = new Float32Array(3 * this.atomCount);

  this.structure.eachAtom(function (a) {
    initialStructure[ i + 0 ] = a.x;
    initialStructure[ i + 1 ] = a.y;
    initialStructure[ i + 2 ] = a.z;

    i += 3;
  });

  this.initialStructure = initialStructure;
};

Trajectory.prototype.setSelection = function setSelection (string) {
  this.selection.setString(string);

  return this
};

Trajectory.prototype.getIndices = function getIndices (selection) {
  var indices;

  if (selection && selection.test) {
    var i = 0;
    var test = selection.test;
    indices = [];

    this.structure.eachAtom(function (ap) {
      if (test(ap)) {
        indices.push(i);
      }
      i += 1;
    });
  } else {
    indices = this.structure.getAtomIndices(this.selection);
  }

  return indices
};

Trajectory.prototype.makeIndices = function makeIndices () {
    var this$1 = this;

      // indices to restrict atoms used for superposition
  this.indices = this.getIndices(this.selection);

  var i, j;
  var n = this.indices.length * 3;

  this.coords1 = new Float32Array(n);
  this.coords2 = new Float32Array(n);

  var y = this.initialStructure;
  var coords2 = this.coords2;

  for (i = 0; i < n; i += 3) {
    j = this$1.indices[ i / 3 ] * 3;

    coords2[ i + 0 ] = y[ j + 0 ];
    coords2[ i + 1 ] = y[ j + 1 ];
    coords2[ i + 2 ] = y[ j + 2 ];
  }
};

Trajectory.prototype.makeAtomIndices = function makeAtomIndices () {
  Log.error('Trajectory.makeAtomIndices not implemented');
};

Trajectory.prototype.getNumframes = function getNumframes () {
  Log.error('Trajectory.loadFrame not implemented');
};

Trajectory.prototype.resetCache = function resetCache () {
  this.frameCache = [];
  this.boxCache = [];
  this.pathCache = [];
  this.frameCacheSize = 0;
  this.setFrame(this.currentFrame);

  return this
};

Trajectory.prototype.setParameters = function setParameters (params) {
  var p = params;
  var resetCache = false;

  if (p.centerPbc !== undefined && p.centerPbc !== this.centerPbc) {
    this.centerPbc = p.centerPbc;
    resetCache = true;
  }

  if (p.removePbc !== undefined && p.removePbc !== this.removePbc) {
    this.removePbc = p.removePbc;
    resetCache = true;
  }

  if (p.superpose !== undefined && p.superpose !== this.superpose) {
    this.superpose = p.superpose;
    resetCache = true;
  }

  if (resetCache) { this.resetCache(); }
};

Trajectory.prototype.setFrame = function setFrame (i, callback) {
  if (i === undefined) { return this }

  this.inProgress = true;

  i = parseInt(i);

  if (i === -1 || this.frameCache[ i ]) {
    this.updateStructure(i, callback);
  } else {
    this.loadFrame(i, function () {
      this.updateStructure(i, callback);
    }.bind(this));
  }

  return this
};

Trajectory.prototype.interpolate = function interpolate (i, ip, ipp, ippp, t, type, callback) {
  var fc = this.frameCache;

  var c = fc[ i ];
  var cp = fc[ ip ];
  var cpp = fc[ ipp ];
  var cppp = fc[ ippp ];

  var j;
  var m = c.length;
  var coords = new Float32Array(m);

  if (type === 'spline') {
    for (j = 0; j < m; j += 3) {
      coords[ j + 0 ] = spline(
                  cppp[ j + 0 ], cpp[ j + 0 ], cp[ j + 0 ], c[ j + 0 ], t, 1
              );
      coords[ j + 1 ] = spline(
                  cppp[ j + 1 ], cpp[ j + 1 ], cp[ j + 1 ], c[ j + 1 ], t, 1
              );
      coords[ j + 2 ] = spline(
                  cppp[ j + 2 ], cpp[ j + 2 ], cp[ j + 2 ], c[ j + 2 ], t, 1
              );
    }
  } else {
    for (j = 0; j < m; j += 3) {
      coords[ j + 0 ] = lerp(cp[ j + 0 ], c[ j + 0 ], t);
      coords[ j + 1 ] = lerp(cp[ j + 1 ], c[ j + 1 ], t);
      coords[ j + 2 ] = lerp(cp[ j + 2 ], c[ j + 2 ], t);
    }
  }

  this.structure.updatePosition(coords);
  this.currentFrame = i;
  this.signals.frameChanged.dispatch(i);

  if (typeof callback === 'function') {
    callback();
  }
};

Trajectory.prototype.setFrameInterpolated = function setFrameInterpolated (i, ip, ipp, ippp, t, type, callback) {
  if (i === undefined) { return this }

  var fc = this.frameCache;

  var iList = [];

  if (!fc[ ippp ]) { iList.push(ippp); }
  if (!fc[ ipp ]) { iList.push(ipp); }
  if (!fc[ ip ]) { iList.push(ip); }
  if (!fc[ i ]) { iList.push(i); }

  if (iList.length) {
    this.loadFrame(iList, function () {
      this.interpolate(i, ip, ipp, ippp, t, type, callback);
    }.bind(this));
  } else {
    this.interpolate(i, ip, ipp, ippp, t, type, callback);
  }

  return this
};

Trajectory.prototype.loadFrame = function loadFrame (i, callback) {
  if (Array.isArray(i)) {
    var queue;
    var fn = function (j, wcallback) {
      this._loadFrame(j, wcallback);
      if (queue.length() === 0 && typeof callback === 'function') { callback(); }
    }.bind(this);
    queue = new Queue(fn, i);
  } else {
    this._loadFrame(i, callback);
  }
};

Trajectory.prototype._loadFrame = function _loadFrame (i, callback) {
  Log.error('Trajectory._loadFrame not implemented', i, callback);
};

Trajectory.prototype.updateStructure = function updateStructure (i, callback) {
  if (this._disposed) { return }

  if (i === -1) {
    this.structure.updatePosition(this.initialStructure);
  } else {
    this.structure.updatePosition(this.frameCache[ i ]);
  }

  this.structure.trajectory = {
    name: this.trajPath,
    frame: i
  };

  if (typeof callback === 'function') {
    callback();
  }

  this.currentFrame = i;
  this.inProgress = false;
  this.signals.frameChanged.dispatch(i);
};

Trajectory.prototype.getCircularMean = function getCircularMean (indices, coords, box) {
  return [
    circularMean(coords, box[ 0 ], 3, 0, indices),
    circularMean(coords, box[ 1 ], 3, 1, indices),
    circularMean(coords, box[ 2 ], 3, 2, indices)
  ]
};

Trajectory.prototype.doSuperpose = function doSuperpose (x) {
    var this$1 = this;

  var i, j;
  var n = this.indices.length * 3;

  var coords1 = this.coords1;
  var coords2 = this.coords2;

  for (i = 0; i < n; i += 3) {
    j = this$1.indices[ i / 3 ] * 3;

    coords1[ i + 0 ] = x[ j + 0 ];
    coords1[ i + 1 ] = x[ j + 1 ];
    coords1[ i + 2 ] = x[ j + 2 ];
  }

      // TODO re-use superposition object
  var sp = new Superposition(coords1, coords2);
  sp.transform(x);
};

Trajectory.prototype.process = function process (i, box, coords, numframes) {
  this.setNumframes(numframes);

  if (box) {
    if (this.backboneIndices.length > 0 && this.centerPbc) {
      var box2 = [ box[ 0 ], box[ 4 ], box[ 8 ] ];
      var mean = this.getCircularMean(
                  this.backboneIndices, coords, box2
              );
      centerPbc(coords, mean, box2);
    }

    if (this.removePbc) {
      removePbc(coords, box);
    }
  }

  if (this.indices.length > 0 && this.superpose) {
    this.doSuperpose(coords);
  }

  this.frameCache[ i ] = coords;
  this.boxCache[ i ] = box;
  this.frameCacheSize += 1;
};

Trajectory.prototype.setNumframes = function setNumframes (n) {
  if (n !== this.numframes) {
    this.numframes = n;
    this.signals.gotNumframes.dispatch(n);
  }
};

Trajectory.prototype.dispose = function dispose () {
  this.frameCache = [];// aid GC
  this._disposed = true;
  if (this.player) { this.player.stop(); }
};

Trajectory.prototype.setPlayer = function setPlayer (player) {
  this.player = player;
  this.signals.playerChanged.dispatch(player);
};

Trajectory.prototype.getPath = function getPath (index, callback) {
  Log.error('Trajectory.getPath not implemented', index, callback);
};

ShaderRegistry.add('shader/Mesh.vert', "#define STANDARD\nuniform float nearClip;\nuniform vec3 clipCenter;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#elif defined( NOLIGHT )\nvarying vec3 vColor;\n#else\n#include color_pars_vertex\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#endif\n#include common\nvoid main(){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#elif defined( NOLIGHT )\nvColor = color;\n#else\n#include color_vertex\n#include beginnormal_vertex\n#include defaultnormal_vertex\n#ifndef FLAT_SHADED\nvNormal = normalize( transformedNormal );\n#endif\n#endif\n#include begin_vertex\n#include project_vertex\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

ShaderRegistry.add('shader/Mesh.frag', "#define STANDARD\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float nearClip;\nuniform float clipRadius;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\n#elif defined( NOLIGHT )\nvarying vec3 vColor;\n#else\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars\n#include lights_physical_pars_fragment\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\nif( opacity < 0.7 )\ndiscard;\ngl_FragColor = vec4( vPickingColor, objectId );\n#elif defined( NOLIGHT )\ngl_FragColor = vec4( vColor, opacity );\n#else\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\n#include normal_flip\n#include normal_fragment\n#include dull_interior_fragment\n#include lights_physical_fragment\n#include lights_template\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#include opaque_back_fragment\n#endif\n}");

/**
 * @file Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Buffer parameter object.
 * @typedef {Object} BufferParameters - buffer parameters
 * @property {Boolean} opaqueBack - render back-side opaque
 * @property {Boolean} dullInterior - render back-side with dull lighting
 * @property {String} side - which triangle sides to render, "front" front-side,
 *                            "back" back-side, "double" front- and back-side
 * @property {Float} opacity - translucency: 1 is fully opaque, 0 is fully transparent
 * @property {Boolean} depthWrite - depth write
 * @property {Integer} clipNear - position of camera near/front clipping plane
 *                                in percent of scene bounding box
 * @property {Boolean} flatShaded - render flat shaded
 * @property {Integer} linewidth - width of lines (when applicable)
 * @property {Boolean} wireframe - render as wireframe
 * @property {Integer} wireframeLinewidth - width of wireframe lines
 * @property {Float} roughness - how rough the material is, between 0 and 1
 * @property {Float} metalness - how metallic the material is, between 0 and 1
 * @property {Color} diffuse - diffuse color for lighting
 * @property {Boolean} forceTransparent - force the material to allow transparency
 * @property {Matrix4} matrix - additional transformation matrix
 * @property {Boolean} disablePicking - disable picking
 */

function getThreeSide (side) {
  if (side === 'front') {
    return FrontSide
  } else if (side === 'back') {
    return BackSide
  } else if (side === 'double') {
    return DoubleSide
  } else {
    return DoubleSide
  }
}

var itemSize = {
  'f': 1, 'v2': 2, 'v3': 3, 'c': 3
};

function setObjectMatrix (object, matrix) {
  object.matrix.copy(matrix);
  object.matrix.decompose(object.position, object.quaternion, object.scale);
  object.matrixWorldNeedsUpdate = true;
}

/**
 * Buffer class. Base class for buffers.
 * @interface
 */
var Buffer = function Buffer (data, params) {
  var d = data || {};
  var p = params || {};

  this.opaqueBack = defaults(p.opaqueBack, false);
  this.dullInterior = defaults(p.dullInterior, false);
  this.side = defaults(p.side, 'double');
  this.opacity = defaults(p.opacity, 1.0);
  this.depthWrite = defaults(p.depthWrite, true);
  this.clipNear = defaults(p.clipNear, 0);
  this.clipRadius = defaults(p.clipRadius, 0);
  this.clipCenter = defaults(p.clipCenter, new Vector3());
  this.flatShaded = defaults(p.flatShaded, false);
  this.background = defaults(p.background, false);
  this.linewidth = defaults(p.linewidth, 1);
  this.wireframe = defaults(p.wireframe, false);
  this.wireframeLinewidth = defaults(p.wireframeLinewidth, 1);
  this.roughness = defaults(p.roughness, 0.4);
  this.metalness = defaults(p.metalness, 0.0);
  this.diffuse = defaults(p.diffuse, 0xffffff);
  this.forceTransparent = defaults(p.forceTransparent, false);
  this.disablePicking = defaults(p.disablePicking, false);

  this.geometry = new BufferGeometry();

  this.indexVersion = 0;
  this.wireframeIndexVersion = -1;

  this.uniforms = UniformsUtils.merge([
    UniformsLib.common,
    {
      fogColor: { value: null },
      fogNear: { value: 0.0 },
      fogFar: { value: 0.0 },
      opacity: { value: this.opacity },
      nearClip: { value: 0.0 },
      clipRadius: { value: this.clipRadius },
      clipCenter: { value: this.clipCenter }
    },
    {
      emissive: { value: new Color(0x000000) },
      roughness: { value: this.roughness },
      metalness: { value: this.metalness }
    },
    UniformsLib.ambient,
    UniformsLib.lights
  ]);

  this.uniforms.diffuse.value.set(this.diffuse);

  this.pickingUniforms = {
    nearClip: { value: 0.0 },
    objectId: { value: 0 },
    opacity: { value: this.opacity }
  };

  this.group = new Group();
  this.wireframeGroup = new Group();
  this.pickingGroup = new Group();

      // requires Group objects to be present
  this.matrix = defaults(p.matrix, new Matrix4());

      //

  var position = d.position || d.position1;
  this._positionDataSize = position ? position.length / 3 : 0;

  this.addAttributes({
    position: { type: 'v3', value: d.position },
    color: { type: 'c', value: d.color },
    primitiveId: { type: 'f', value: d.primitiveId }
  });

  if (d.index) {
    this.initIndex(d.index);
  }
  this.picking = d.picking;

  this.makeWireframeGeometry();
};

var prototypeAccessors$24 = { parameters: {},matrix: {},transparent: {},size: {},attributeSize: {},pickable: {},dynamic: {},vertexShader: {},fragmentShader: {} };

prototypeAccessors$24.parameters.get = function () {
  return {
    opaqueBack: { updateShader: true },
    dullInterior: { updateShader: true },
    side: { updateShader: true, property: true },
    opacity: { uniform: true },
    depthWrite: { property: true },
    clipNear: { updateShader: true, property: true },
    clipRadius: { updateShader: true, property: true, uniform: true },
    clipCenter: { uniform: true },
    flatShaded: { updateShader: true },
    background: { updateShader: true },
    linewidth: { property: true },
    wireframe: { updateVisibility: true },
    roughness: { uniform: true },
    metalness: { uniform: true },
    diffuse: { uniform: true },
    matrix: {}
  }
};

prototypeAccessors$24.matrix.set = function (m) {
  this.setMatrix(m);
};
prototypeAccessors$24.matrix.get = function () {
  return this.group.matrix.clone()
};

prototypeAccessors$24.transparent.get = function () {
  return this.opacity < 1 || this.forceTransparent
};

prototypeAccessors$24.size.get = function () {
  return this._positionDataSize
};

prototypeAccessors$24.attributeSize.get = function () {
  return this.size
};

prototypeAccessors$24.pickable.get = function () {
  return !!this.picking && !this.disablePicking
};

prototypeAccessors$24.dynamic.get = function () { return true };

  /**
   * @abstract
   */
prototypeAccessors$24.vertexShader.get = function () {};

  /**
   * @abstract
   */
prototypeAccessors$24.fragmentShader.get = function () {};

Buffer.prototype.setMatrix = function setMatrix (m) {
  setObjectMatrix(this.group, m);
  setObjectMatrix(this.wireframeGroup, m);
  setObjectMatrix(this.pickingGroup, m);
};

Buffer.prototype.initIndex = function initIndex (index) {
  this.geometry.setIndex(
          new BufferAttribute(index, 1)
      );
  this.geometry.getIndex().setDynamic(this.dynamic);
};

Buffer.prototype.makeMaterial = function makeMaterial () {
  var side = getThreeSide(this.side);

  var m = new ShaderMaterial({
    uniforms: this.uniforms,
    vertexShader: '',
    fragmentShader: '',
    depthTest: true,
    transparent: this.transparent,
    depthWrite: this.depthWrite,
    lights: true,
    fog: true,
    side: side,
    linewidth: this.linewidth
  });
  m.vertexColors = VertexColors;
  m.extensions.derivatives = this.flatShaded;
  m.extensions.fragDepth = this.isImpostor;
  m.clipNear = this.clipNear;

  var wm = new ShaderMaterial({
    uniforms: this.uniforms,
    vertexShader: '',
    fragmentShader: '',
    depthTest: true,
    transparent: this.transparent,
    depthWrite: this.depthWrite,
    lights: false,
    fog: true,
    side: side,
    linewidth: this.linewidth
  });
  wm.vertexColors = VertexColors;
  wm.clipNear = this.clipNear;

  var pm = new ShaderMaterial({
    uniforms: this.pickingUniforms,
    vertexShader: '',
    fragmentShader: '',
    depthTest: true,
    transparent: false,
    depthWrite: this.depthWrite,
    lights: false,
    fog: false,
    side: side,
    linewidth: this.linewidth,
    blending: NoBlending
  });
  pm.vertexColors = VertexColors;
  pm.extensions.fragDepth = this.isImpostor;
  pm.clipNear = this.clipNear;

  this.material = m;
  this.wireframeMaterial = wm;
  this.pickingMaterial = pm;

      // also sets vertexShader/fragmentShader
  this.updateShader();
};

Buffer.prototype.makeWireframeGeometry = function makeWireframeGeometry () {
  this.makeWireframeIndex();

  var geometry = this.geometry;
  var wireframeIndex = this.wireframeIndex;
  var wireframeGeometry = new BufferGeometry();

  wireframeGeometry.attributes = geometry.attributes;
  if (wireframeIndex) {
    wireframeGeometry.setIndex(
              new BufferAttribute(wireframeIndex, 1)
                  .setDynamic(this.dynamic)
          );
    wireframeGeometry.setDrawRange(0, this.wireframeIndexCount);
  }

  this.wireframeGeometry = wireframeGeometry;
};

Buffer.prototype.makeWireframeIndex = function makeWireframeIndex () {
  var edges = [];

  function checkEdge (a, b) {
    if (a > b) {
      var tmp = a;
      a = b;
      b = tmp;
    }

    var list = edges[ a ];

    if (list === undefined) {
      edges[ a ] = [ b ];
      return true
    } else if (!list.includes(b)) {
      list.push(b);
      return true
    }

    return false
  }

  var geometry = this.geometry;
  var index = geometry.index;

  if (!this.wireframe) {
    this.wireframeIndex = new Uint16Array(0);
    this.wireframeIndexCount = 0;
  } else if (index) {
    var array = index.array;
    var n = array.length;
    if (geometry.drawRange.count !== Infinity) {
      n = geometry.drawRange.count;
    }
    var wireframeIndex;
    if (this.wireframeIndex && this.wireframeIndex.length > n * 2) {
      wireframeIndex = this.wireframeIndex;
    } else {
      var count = geometry.attributes.position.count;
      wireframeIndex = getUintArray(n * 2, count);
    }

    var j = 0;
    edges.length = 0;

    for (var i = 0; i < n; i += 3) {
      var a = array[ i + 0 ];
      var b = array[ i + 1 ];
      var c = array[ i + 2 ];

      if (checkEdge(a, b)) {
        wireframeIndex[ j + 0 ] = a;
        wireframeIndex[ j + 1 ] = b;
        j += 2;
      }
      if (checkEdge(b, c)) {
        wireframeIndex[ j + 0 ] = b;
        wireframeIndex[ j + 1 ] = c;
        j += 2;
      }
      if (checkEdge(c, a)) {
        wireframeIndex[ j + 0 ] = c;
        wireframeIndex[ j + 1 ] = a;
        j += 2;
      }
    }

    this.wireframeIndex = wireframeIndex;
    this.wireframeIndexCount = j;
    this.wireframeIndexVersion = this.indexVersion;
  } else {
    var n$1 = geometry.attributes.position.count;

    var wireframeIndex$1;
    if (this.wireframeIndex && this.wireframeIndex.length > n$1 * 2) {
      wireframeIndex$1 = this.wireframeIndex;
    } else {
      wireframeIndex$1 = getUintArray(n$1 * 2, n$1);
    }

    for (var i$1 = 0, j$1 = 0; i$1 < n$1; i$1 += 3) {
      wireframeIndex$1[ j$1 + 0 ] = i$1;
      wireframeIndex$1[ j$1 + 1 ] = i$1 + 1;
      wireframeIndex$1[ j$1 + 2 ] = i$1 + 1;
      wireframeIndex$1[ j$1 + 3 ] = i$1 + 2;
      wireframeIndex$1[ j$1 + 4 ] = i$1 + 2;
      wireframeIndex$1[ j$1 + 5 ] = i$1;

      j$1 += 6;
    }

    this.wireframeIndex = wireframeIndex$1;
    this.wireframeIndexCount = n$1 * 2;
    this.wireframeIndexVersion = this.indexVersion;
  }
};

Buffer.prototype.updateWireframeIndex = function updateWireframeIndex () {
  this.wireframeGeometry.setDrawRange(0, Infinity);
  if (this.wireframeIndexVersion < this.indexVersion) { this.makeWireframeIndex(); }

  if (this.wireframeIndex.length > this.wireframeGeometry.index.array.length) {
    this.wireframeGeometry.setIndex(
              new BufferAttribute(this.wireframeIndex, 1)
                  .setDynamic(this.dynamic)
          );
  } else {
    var index = this.wireframeGeometry.getIndex();
    index.set(this.wireframeIndex);
    index.needsUpdate = this.wireframeIndexCount > 0;
    index.updateRange.count = this.wireframeIndexCount;
  }

  this.wireframeGeometry.setDrawRange(0, this.wireframeIndexCount);
};

Buffer.prototype.getRenderOrder = function getRenderOrder () {
  var renderOrder = 0;

  if (this.isText) {
    renderOrder = 1;
  } else if (this.transparent) {
    if (this.isSurface) {
      renderOrder = 3;
    } else {
      renderOrder = 2;
    }
  }

  return renderOrder
};

Buffer.prototype._getMesh = function _getMesh (materialName) {
  if (!this.material) { this.makeMaterial(); }

  var g = this.geometry;
  var m = this[ materialName ];

  var mesh;

  if (this.isLine) {
    mesh = new LineSegments(g, m);
  } else if (this.isPoint) {
    mesh = new Points(g, m);
    if (this.sortParticles) { mesh.sortParticles = true; }
  } else {
    mesh = new Mesh(g, m);
  }

  mesh.frustumCulled = false;
  mesh.renderOrder = this.getRenderOrder();

  return mesh
};

Buffer.prototype.getMesh = function getMesh () {
  return this._getMesh('material')
};

Buffer.prototype.getWireframeMesh = function getWireframeMesh () {
  var mesh;

  if (!this.material) { this.makeMaterial(); }
  if (!this.wireframeGeometry) { this.makeWireframeGeometry(); }

  mesh = new LineSegments(
          this.wireframeGeometry, this.wireframeMaterial
      );

  mesh.frustumCulled = false;
  mesh.renderOrder = this.getRenderOrder();

  return mesh
};

Buffer.prototype.getPickingMesh = function getPickingMesh () {
  return this._getMesh('pickingMaterial')
};

Buffer.prototype.getShader = function getShader$1 (name, type) {
  return getShader(name, this.getDefines(type))
};

Buffer.prototype.getVertexShader = function getVertexShader (type) {
  return this.getShader(this.vertexShader, type)
};

Buffer.prototype.getFragmentShader = function getFragmentShader (type) {
  return this.getShader(this.fragmentShader, type)
};

Buffer.prototype.getDefines = function getDefines (type) {
  var defines = {};

  if (this.clipNear) {
    defines.NEAR_CLIP = 1;
  }

  if (this.clipRadius) {
    defines.RADIUS_CLIP = 1;
  }

  if (type === 'picking') {
    defines.PICKING = 1;
  } else {
    if (type === 'background' || this.background) {
      defines.NOLIGHT = 1;
    }
    if (this.flatShaded) {
      defines.FLAT_SHADED = 1;
    }
    if (this.opaqueBack) {
      defines.OPAQUE_BACK = 1;
    }
    if (this.dullInterior) {
      defines.DULL_INTERIOR = 1;
    }
  }

  return defines
};

Buffer.prototype.getParameters = function getParameters () {
    var this$1 = this;

  var params = {};

  for (var name in this$1.parameters) {
    params[ name ] = this$1[ name ];
  }

  return params
};

Buffer.prototype.addUniforms = function addUniforms (uniforms) {
  this.uniforms = UniformsUtils.merge(
          [ this.uniforms, uniforms ]
      );

  this.pickingUniforms = UniformsUtils.merge(
          [ this.pickingUniforms, uniforms ]
      );
};

Buffer.prototype.addAttributes = function addAttributes (attributes) {
    var this$1 = this;

  for (var name in attributes) {
    var buf = (void 0);
    var a = attributes[ name ];
    var arraySize = this$1.attributeSize * itemSize[ a.type ];

    if (a.value) {
      if (arraySize !== a.value.length) {
        Log.error('attribute value has wrong length', name);
      }

      buf = a.value;
    } else {
      buf = getTypedArray('float32', arraySize);
    }

    this$1.geometry.addAttribute(
              name,
              new BufferAttribute(buf, itemSize[ a.type ])
                  .setDynamic(this$1.dynamic)
          );
  }
};

Buffer.prototype.updateRenderOrder = function updateRenderOrder () {
  var renderOrder = this.getRenderOrder();
  function setRenderOrder (mesh) {
    mesh.renderOrder = renderOrder;
  }

  this.group.children.forEach(setRenderOrder);
  if (this.pickingGroup) {
    this.pickingGroup.children.forEach(setRenderOrder);
  }
};

Buffer.prototype.updateShader = function updateShader () {
  var m = this.material;
  var wm = this.wireframeMaterial;
  var pm = this.pickingMaterial;

  m.vertexShader = this.getVertexShader();
  m.fragmentShader = this.getFragmentShader();
  m.needsUpdate = true;

  wm.vertexShader = this.getShader('Line.vert');
  wm.fragmentShader = this.getShader('Line.frag');
  wm.needsUpdate = true;

  pm.vertexShader = this.getVertexShader('picking');
  pm.fragmentShader = this.getFragmentShader('picking');
  pm.needsUpdate = true;
};

  /**
   * Set buffer parameters
   * @param {BufferParameters} params - buffer parameters object
   * @return {undefined}
   */
Buffer.prototype.setParameters = function setParameters (params) {
    var this$1 = this;

  if (!params) { return }

  var p = params;
  var tp = this.parameters;

  var propertyData = {};
  var uniformData = {};
  var doShaderUpdate = false;
  var doVisibilityUpdate = false;

  for (var name in p) {
    var value = p[ name ];

    if (value === undefined) { continue }
    if (tp[ name ] === undefined) { continue }

    this$1[ name ] = value;

    if (tp[ name ].property) {
      if (tp[ name ].property !== true) {
        propertyData[ tp[ name ].property ] = value;
      } else {
        propertyData[ name ] = value;
      }
    }

    if (tp[ name ].uniform) {
      if (tp[ name ].uniform !== true) {
        uniformData[ tp[ name ].uniform ] = value;
      } else {
        uniformData[ name ] = value;
      }
    }

    if (tp[ name ].updateShader) {
      doShaderUpdate = true;
    }

    if (tp[ name ].updateVisibility) {
      doVisibilityUpdate = true;
    }

    if (this$1.dynamic && name === 'wireframe' && value === true) {
      this$1.updateWireframeIndex();
    }

    if (name === 'flatShaded') {
      this$1.material.extensions.derivatives = this$1.flatShaded;
    }

    if (name === 'forceTransparent') {
      propertyData.transparent = this$1.transparent;
    }
  }

  this.setProperties(propertyData);
  this.setUniforms(uniformData);
  if (doShaderUpdate) { this.updateShader(); }
  if (doVisibilityUpdate) { this.setVisibility(this.visible); }
};

Buffer.prototype.setAttributes = function setAttributes (data) {
    var this$1 = this;

      /**
       * Sets buffer attributes
       * @param {Object} data - An object where the keys are the attribute names
       *    and the values are the attribute data.
       * @example
       * var buffer = new Buffer();
       * buffer.setAttributes({ attrName: attrData });
       */

  var geometry = this.geometry;
  var attributes = geometry.attributes;

  for (var name in data) {
    if (name === 'picking') { continue }

    var array = data[ name ];
    var length = array.length;

    if (name === 'index') {
      var index = geometry.getIndex();
      geometry.setDrawRange(0, Infinity);

      if (length > index.array.length) {
        geometry.setIndex(
                      new BufferAttribute(array, 1)
                          .setDynamic(this$1.dynamic)
                  );
      } else {
        index.set(array);
        index.needsUpdate = length > 0;
        index.updateRange.count = length;
        geometry.setDrawRange(0, length);
      }

      this$1.indexVersion++;
      if (this$1.wireframe) { this$1.updateWireframeIndex(); }
    } else {
      var attribute = attributes[ name ];

      if (length > attribute.array.length) {
        geometry.addAttribute(
                      name,
                      new BufferAttribute(array, attribute.itemSize)
                          .setDynamic(this$1.dynamic)
                  );
      } else {
        attributes[ name ].set(array);
        attributes[ name ].needsUpdate = length > 0;
        attributes[ name ].updateRange.count = length;
      }
    }
  }
};

Buffer.prototype.setUniforms = function setUniforms (data) {
    var this$1 = this;

  if (!data) { return }

  var u = this.material.uniforms;
  var wu = this.wireframeMaterial.uniforms;
  var pu = this.pickingMaterial.uniforms;

  for (var name in data) {
    if (name === 'opacity') {
      this$1.setProperties({ transparent: this$1.transparent });
    }

    if (u[ name ] !== undefined) {
      if (u[ name ].value.isVector3) {
        u[ name ].value.copy(data[ name ]);
      } else if (u[ name ].value.set) {
        u[ name ].value.set(data[ name ]);
      } else {
        u[ name ].value = data[ name ];
      }
    }

    if (wu[ name ] !== undefined) {
      if (wu[ name ].value.isVector3) {
        wu[ name ].value.copy(data[ name ]);
      } else if (wu[ name ].value.set) {
        wu[ name ].value.set(data[ name ]);
      } else {
        wu[ name ].value = data[ name ];
      }
    }

    if (pu[ name ] !== undefined) {
      if (pu[ name ].value.isVector3) {
        pu[ name ].value.copy(data[ name ]);
      } else if (pu[ name ].value.set) {
        pu[ name ].value.set(data[ name ]);
      } else {
        pu[ name ].value = data[ name ];
      }
    }
  }
};

Buffer.prototype.setProperties = function setProperties (data) {
    var this$1 = this;

  if (!data) { return }

  var m = this.material;
  var wm = this.wireframeMaterial;
  var pm = this.pickingMaterial;

  for (var name in data) {
    var value = data[ name ];

    if (name === 'transparent') {
      this$1.updateRenderOrder();
    } else if (name === 'side') {
      value = getThreeSide(value);
    }

    if (m[ name ] !== undefined) {
      m[ name ] = value;
    }

    if (wm[ name ] !== undefined) {
      wm[ name ] = value;
    }

    if (pm[ name ] !== undefined) {
      pm[ name ] = value;
    }
  }

  m.needsUpdate = true;
  wm.needsUpdate = true;
  pm.needsUpdate = true;
};

  /**
   * Set buffer visibility
   * @param {Boolean} value - visibility value
   * @return {undefined}
   */
Buffer.prototype.setVisibility = function setVisibility (value) {
  this.visible = value;

  if (this.wireframe) {
    this.group.visible = false;
    this.wireframeGroup.visible = value;
    if (this.pickable) {
      this.pickingGroup.visible = false;
    }
  } else {
    this.group.visible = value;
    this.wireframeGroup.visible = false;
    if (this.pickable) {
      this.pickingGroup.visible = value;
    }
  }
};

  /**
   * Free buffer resources
   * @return {undefined}
   */
Buffer.prototype.dispose = function dispose () {
  if (this.material) { this.material.dispose(); }
  if (this.wireframeMaterial) { this.wireframeMaterial.dispose(); }
  if (this.pickingMaterial) { this.pickingMaterial.dispose(); }

  this.geometry.dispose();
  if (this.wireframeGeometry) { this.wireframeGeometry.dispose(); }
};

Object.defineProperties( Buffer.prototype, prototypeAccessors$24 );

/**
 * @file Mesh Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Mesh buffer. Draws a triangle mesh.
 *
 * @example
 * var meshBuffer = new MeshBuffer( {
 *     position: new Float32Array(
 *         [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1 ]
 *     ),
 *     color: new Float32Array(
 *         [ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 ]
 *     )
 * } );
 */
var MeshBuffer = (function (Buffer$$1) {
  function MeshBuffer (data, params) {
    var d = data || {};

    if (!d.primitiveId && d.position) {
      d.primitiveId = serialArray(d.position.length / 3);
    }

    Buffer$$1.call(this, d, params);

    this.addAttributes({
      'normal': { type: 'v3', value: d.normal }
    });

    if (d.normal === undefined) {
      this.geometry.computeVertexNormals();
    }
  }

  if ( Buffer$$1 ) MeshBuffer.__proto__ = Buffer$$1;
  MeshBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
  MeshBuffer.prototype.constructor = MeshBuffer;

  var prototypeAccessors = { vertexShader: {},fragmentShader: {} };

  prototypeAccessors.vertexShader.get = function () { return 'Mesh.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'Mesh.frag' };

  Object.defineProperties( MeshBuffer.prototype, prototypeAccessors );

  return MeshBuffer;
}(Buffer));

/**
 * @file Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var matrix$1 = new Matrix4();
var normalMatrix = new Matrix3();

/**
 * Geometry buffer. Base class for geometry-based buffers. Used to draw
 * geometry primitives given a mesh.
 * @interface
 */
var GeometryBuffer = (function (MeshBuffer$$1) {
  function GeometryBuffer (data, params, geo) {
    var d = data || {};
    var p = params || {};

    var geoPosition = geo.attributes.position.array;
    var geoNormal = geo.attributes.normal.array;
    var geoIndex = geo.index ? geo.index.array : undefined;

    var n = d.position.length / 3;
    var m = geoPosition.length / 3;

    var size = n * m;

    var meshPosition = new Float32Array(size * 3);
    var meshNormal = new Float32Array(size * 3);
    var meshColor = new Float32Array(size * 3);

    var meshIndex;
    if (geoIndex) {
      meshIndex = getUintArray(n * geoIndex.length, size);
    }

    MeshBuffer$$1.call(this, {
      position: meshPosition,
      color: meshColor,
      index: meshIndex,
      normal: meshNormal,
      primitiveId: d.primitiveId || serialBlockArray(n, m),
      picking: d.picking
    }, p);

    this.setAttributes(d);

    this.geoPosition = geoPosition;
    this.geoNormal = geoNormal;
    this.geoIndex = geoIndex;

    this.positionCount = n;
    this.geoPositionCount = m;

    this.transformedGeoPosition = new Float32Array(m * 3);
    this.transformedGeoNormal = new Float32Array(m * 3);

    this.meshPosition = meshPosition;
    this.meshColor = meshColor;
    this.meshIndex = meshIndex;
    this.meshNormal = meshNormal;

    this.meshIndex = meshIndex;
    this.makeIndex();
  }

  if ( MeshBuffer$$1 ) GeometryBuffer.__proto__ = MeshBuffer$$1;
  GeometryBuffer.prototype = Object.create( MeshBuffer$$1 && MeshBuffer$$1.prototype );
  GeometryBuffer.prototype.constructor = GeometryBuffer;

  var prototypeAccessors = { updateNormals: {} };

  GeometryBuffer.prototype.applyPositionTransform = function applyPositionTransform () {};

  GeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
    var this$1 = this;

    var attributes = this.geometry.attributes;

    var position, color;
    var geoPosition, geoNormal;
    var transformedGeoPosition, transformedGeoNormal;
    var meshPosition, meshColor, meshNormal;

    var updateNormals = this.updateNormals;

    if (data.position) {
      position = data.position;
      geoPosition = this.geoPosition;
      meshPosition = this.meshPosition;
      transformedGeoPosition = this.transformedGeoPosition;
      attributes.position.needsUpdate = true;
      if (updateNormals || initNormals) {
        geoNormal = this.geoNormal;
        meshNormal = this.meshNormal;
        transformedGeoNormal = this.transformedGeoNormal;
        attributes.normal.needsUpdate = true;
      }
    }

    if (data.color) {
      color = data.color;
      meshColor = this.meshColor;
      attributes.color.needsUpdate = true;
    }

    var n = this.positionCount;
    var m = this.geoPositionCount;

    for (var i = 0; i < n; ++i) {
      var j = (void 0), l = (void 0);
      var k = i * m * 3;
      var i3 = i * 3;

      if (position) {
        transformedGeoPosition.set(geoPosition);
        matrix$1.makeTranslation(
                    position[ i3 ], position[ i3 + 1 ], position[ i3 + 2 ]
                );
        this$1.applyPositionTransform(matrix$1, i, i3);
        applyMatrix4toVector3array(matrix$1.elements, transformedGeoPosition);

        meshPosition.set(transformedGeoPosition, k);

        if (updateNormals) {
          transformedGeoNormal.set(geoNormal);
          normalMatrix.getNormalMatrix(matrix$1);
          applyMatrix3toVector3array(normalMatrix.elements, transformedGeoNormal);

          meshNormal.set(transformedGeoNormal, k);
        } else if (initNormals) {
          meshNormal.set(geoNormal, k);
        }
      }

      if (color) {
        for (j = 0; j < m; ++j) {
          l = k + 3 * j;

          meshColor[ l ] = color[ i3 ];
          meshColor[ l + 1 ] = color[ i3 + 1 ];
          meshColor[ l + 2 ] = color[ i3 + 2 ];
        }
      }
    }
  };

  GeometryBuffer.prototype.makeIndex = function makeIndex () {
    var geoIndex = this.geoIndex;
    var meshIndex = this.meshIndex;

    if (!geoIndex) { return }

    var n = this.positionCount;
    var m = this.geoPositionCount;
    var o = geoIndex.length / 3;

    var o3 = o * 3;

    for (var i = 0; i < n; ++i) {
      var j = i * o3;
      var q = j + o3;

      meshIndex.set(geoIndex, j);
      for (var p = j; p < q; ++p) { meshIndex[ p ] += i * m; }
    }
  };

  prototypeAccessors.updateNormals.get = function () { return false };

  Object.defineProperties( GeometryBuffer.prototype, prototypeAccessors );

  return GeometryBuffer;
}(MeshBuffer));

/**
 * @file Sphere Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var scale = new Vector3();

/**
 * Sphere geometry buffer.
 *
 * @example
 * var sphereGeometryBuffer = new SphereGeometryBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
var SphereGeometryBuffer = (function (GeometryBuffer$$1) {
  function SphereGeometryBuffer (data, params) {
    var p = params || {};
    var detail = defaults(p.sphereDetail, 1);
    var geo = new IcosahedronBufferGeometry(1, detail);

    GeometryBuffer$$1.call(this, data, p, geo);

    this.setAttributes(data, true);
  }

  if ( GeometryBuffer$$1 ) SphereGeometryBuffer.__proto__ = GeometryBuffer$$1;
  SphereGeometryBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
  SphereGeometryBuffer.prototype.constructor = SphereGeometryBuffer;

  SphereGeometryBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i) {
    var r = this._radius[ i ];
    scale.set(r, r, r);
    matrix.scale(scale);
  };

  SphereGeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
    if (data.radius) {
      this._radius = data.radius;
    }

    GeometryBuffer$$1.prototype.setAttributes.call(this, data, initNormals);
  };

  return SphereGeometryBuffer;
}(GeometryBuffer));

ShaderRegistry.add('shader/SphereImpostor.vert', "uniform mat4 projectionMatrixInverse;\nuniform float nearClip;\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\nattribute vec2 mapping;\nattribute float radius;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#endif\n#include matrix_scale\nconst mat4 D = mat4(\n1.0, 0.0, 0.0, 0.0,\n0.0, 1.0, 0.0, 0.0,\n0.0, 0.0, 1.0, 0.0,\n0.0, 0.0, 0.0, -1.0\n);\nmat4 transpose( in mat4 inMatrix ) {\nvec4 i0 = inMatrix[0];\nvec4 i1 = inMatrix[1];\nvec4 i2 = inMatrix[2];\nvec4 i3 = inMatrix[3];\nmat4 outMatrix = mat4(\nvec4(i0.x, i1.x, i2.x, i3.x),\nvec4(i0.y, i1.y, i2.y, i3.y),\nvec4(i0.z, i1.z, i2.z, i3.z),\nvec4(i0.w, i1.w, i2.w, i3.w)\n);\nreturn outMatrix;\n}\nvoid ComputePointSizeAndPositionInClipCoordSphere(){\nvec2 xbc;\nvec2 ybc;\nmat4 T = mat4(\nradius, 0.0, 0.0, 0.0,\n0.0, radius, 0.0, 0.0,\n0.0, 0.0, radius, 0.0,\nposition.x, position.y, position.z, 1.0\n);\nmat4 R = transpose( projectionMatrix * modelViewMatrix * T );\nfloat A = dot( R[ 3 ], D * R[ 3 ] );\nfloat B = -2.0 * dot( R[ 0 ], D * R[ 3 ] );\nfloat C = dot( R[ 0 ], D * R[ 0 ] );\nxbc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nxbc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nfloat sx = abs( xbc[ 0 ] - xbc[ 1 ] ) * 0.5;\nA = dot( R[ 3 ], D * R[ 3 ] );\nB = -2.0 * dot( R[ 1 ], D * R[ 3 ] );\nC = dot( R[ 1 ], D * R[ 1 ] );\nybc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nybc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\nfloat sy = abs( ybc[ 0 ] - ybc[ 1 ] ) * 0.5;\ngl_Position.xy = vec2( 0.5 * ( xbc.x + xbc.y ), 0.5 * ( ybc.x + ybc.y ) );\ngl_Position.xy -= mapping * vec2( sx, sy );\ngl_Position.xy *= gl_Position.w;\n}\nvoid main(void){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\nvRadius = radius * matrixScale( modelViewMatrix );\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nmvPosition.z -= vRadius;\ngl_Position = projectionMatrix * vec4( mvPosition.xyz, 1.0 );\nComputePointSizeAndPositionInClipCoordSphere();\nvRadiusSq = vRadius * vRadius;\nvec4 vPoint4 = projectionMatrixInverse * gl_Position;\nvPoint = vPoint4.xyz / vPoint4.w;\nvPointViewPosition = -mvPosition.xyz / mvPosition.w;\n}");

ShaderRegistry.add('shader/SphereImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float nearClip;\nuniform mat4 projectionMatrix;\nuniform float ortho;\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars\n#include lights_physical_pars_fragment\n#endif\nbool flag2 = false;\nbool interior = false;\nvec3 cameraPos;\nvec3 cameraNormal;\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nfloat calcClip( vec3 cameraPos ){\nreturn dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, nearClip - 0.5 ) );\n}\nbool Impostor( out vec3 cameraPos, out vec3 cameraNormal ){\nvec3 cameraSpherePos = -vPointViewPosition;\ncameraSpherePos.z += vRadius;\nvec3 rayOrigin = mix( vec3( 0.0, 0.0, 0.0 ), vPoint, ortho );\nvec3 rayDirection = mix( normalize( vPoint ), vec3( 0.0, 0.0, 1.0 ), ortho );\nvec3 cameraSphereDir = mix( cameraSpherePos, rayOrigin - cameraSpherePos, ortho );\nfloat B = dot( rayDirection, cameraSphereDir );\nfloat det = B * B + vRadiusSq - dot( cameraSphereDir, cameraSphereDir );\nif( det < 0.0 ){\ndiscard;\nreturn false;\n}else{\nfloat sqrtDet = sqrt( det );\nfloat posT = mix( B + sqrtDet, B + sqrtDet, ortho );\nfloat negT = mix( B - sqrtDet, sqrtDet - B, ortho );\ncameraPos = rayDirection * negT + rayOrigin;\n#ifdef NEAR_CLIP\nif( calcDepth( cameraPos ) <= 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\nreturn false;\n}else if( calcClip( cameraPos ) > 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\nflag2 = true;\nreturn false;\n}else{\ncameraNormal = normalize( cameraPos - cameraSpherePos );\n}\n#else\nif( calcDepth( cameraPos ) <= 0.0 ){\ncameraPos = rayDirection * posT + rayOrigin;\ninterior = true;\nreturn false;\n}else{\ncameraNormal = normalize( cameraPos - cameraSpherePos );\n}\n#endif\nreturn true;\n}\nreturn false;\n}\nvoid main(void){\nbool flag = Impostor( cameraPos, cameraNormal );\n#ifdef NEAR_CLIP\nif( calcClip( cameraPos ) > 0.0 )\ndiscard;\n#endif\ngl_FragDepthEXT = calcDepth( cameraPos );\nif( !flag ){\n#ifdef NEAR_CLIP\nif( flag2 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( nearClip - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n}else if( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n#else\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n#endif\n}\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\n#ifdef PICKING\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vNormal = cameraNormal;\nvec3 vViewPosition = -cameraPos;\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\n#include normal_flip\n#include normal_fragment\nif( interior ){\nnormal = vec3( 0.0, 0.0, 0.4 );\n}\n#include lights_physical_fragment\n#include lights_template\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Mapped Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Mapped buffer. Sends mapping attribute to the GPU and repeats data in
 * others attributes. Used to render imposters.
 * @interface
 */
var MappedBuffer = (function (Buffer$$1) {
  function MappedBuffer (data, params) {
    Buffer$$1.call(this, data, params);

    this.index = getUintArray(this.indexSize, this.attributeSize);
    this.makeIndex();
    this.initIndex(this.index, 1);

    this.addAttributes({
      'mapping': { type: this.mappingType, value: null }
    });

    this.setAttributes({ primitiveId: serialArray(this.size) });
  }

  if ( Buffer$$1 ) MappedBuffer.__proto__ = Buffer$$1;
  MappedBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
  MappedBuffer.prototype.constructor = MappedBuffer;

  var prototypeAccessors = { attributeSize: {},indexSize: {},mapping: {},mappingIndices: {},mappingIndicesSize: {},mappingType: {},mappingSize: {},mappingItemSize: {} };

  prototypeAccessors.attributeSize.get = function () {
    return this.size * this.mappingSize
  };

  prototypeAccessors.indexSize.get = function () {
    return this.size * this.mappingIndicesSize
  };

    /**
     * @abstract
     */
  prototypeAccessors.mapping.get = function () {};

    /**
     * @abstract
     */
  prototypeAccessors.mappingIndices.get = function () {};

    /**
     * @abstract
     */
  prototypeAccessors.mappingIndicesSize.get = function () {};

    /**
     * @abstract
     */
  prototypeAccessors.mappingType.get = function () {};

    /**
     * @abstract
     */
  prototypeAccessors.mappingSize.get = function () {};

    /**
     * @abstract
     */
  prototypeAccessors.mappingItemSize.get = function () {};

  MappedBuffer.prototype.addAttributes = function addAttributes (attributes) {
    var nullValueAttributes = {};
    for (var name in attributes) {
      var a = attributes[ name ];
      nullValueAttributes[ name ] = {
        type: a.type,
        value: null
      };
    }

    Buffer$$1.prototype.addAttributes.call(this, nullValueAttributes);
  };

  MappedBuffer.prototype.getAttributeIndex = function getAttributeIndex (dataIndex) {
    return dataIndex * 3 * this.mappingSize
  };

  MappedBuffer.prototype.setAttributes = function setAttributes (data) {
    if (data && !data.position && data.position1 && data.position2) {
      data.position = calculateCenterArray(data.position1, data.position2);
    }

    var size = this.size;
    var mappingSize = this.mappingSize;
    var attributes = this.geometry.attributes;

    var a, d, itemSize, array, n, i, j;

    for (var name in data) {
      if (name === 'index' || name === 'picking') { continue }

      d = data[ name ];
      a = attributes[ name ];
      itemSize = a.itemSize;
      array = a.array;

      for (var k = 0; k < size; ++k) {
        n = k * itemSize;
        i = n * mappingSize;

        for (var l = 0; l < mappingSize; ++l) {
          j = i + (itemSize * l);

          for (var m = 0; m < itemSize; ++m) {
            array[ j + m ] = d[ n + m ];
          }
        }
      }

      a.needsUpdate = true;
    }
  };

  MappedBuffer.prototype.makeMapping = function makeMapping () {
    var size = this.size;
    var mapping = this.mapping;
    var mappingSize = this.mappingSize;
    var mappingItemSize = this.mappingItemSize;

    var aMapping = this.geometry.attributes.mapping.array;

    for (var v = 0; v < size; v++) {
      aMapping.set(mapping, v * mappingItemSize * mappingSize);
    }
  };

  MappedBuffer.prototype.makeIndex = function makeIndex () {
    var size = this.size;
    var mappingSize = this.mappingSize;
    var mappingIndices = this.mappingIndices;
    var mappingIndicesSize = this.mappingIndicesSize;

    var index = this.index;

    var ix, it;

    for (var v = 0; v < size; v++) {
      ix = v * mappingIndicesSize;
      it = v * mappingSize;

      index.set(mappingIndices, ix);

      for (var s = 0; s < mappingIndicesSize; ++s) {
        index[ ix + s ] += it;
      }
    }
  };

  Object.defineProperties( MappedBuffer.prototype, prototypeAccessors );

  return MappedBuffer;
}(Buffer));

/**
 * @file Quad Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var mapping = new Float32Array([
  -1.0, 1.0,
  -1.0, -1.0,
  1.0, 1.0,
  1.0, -1.0
]);

var mappingIndices = new Uint16Array([
  0, 1, 2,
  1, 3, 2
]);

/**
 * Quad buffer. Draws screen-aligned quads. Used to render impostors.
 * @interface
 */
var QuadBuffer = (function (MappedBuffer$$1) {
  function QuadBuffer () {
    MappedBuffer$$1.apply(this, arguments);
  }

  if ( MappedBuffer$$1 ) QuadBuffer.__proto__ = MappedBuffer$$1;
  QuadBuffer.prototype = Object.create( MappedBuffer$$1 && MappedBuffer$$1.prototype );
  QuadBuffer.prototype.constructor = QuadBuffer;

  var prototypeAccessors = { mapping: {},mappingIndices: {},mappingIndicesSize: {},mappingType: {},mappingSize: {},mappingItemSize: {} };

  prototypeAccessors.mapping.get = function () { return mapping };
  prototypeAccessors.mappingIndices.get = function () { return mappingIndices };
  prototypeAccessors.mappingIndicesSize.get = function () { return 6 };
  prototypeAccessors.mappingType.get = function () { return 'v2' };
  prototypeAccessors.mappingSize.get = function () { return 4 };
  prototypeAccessors.mappingItemSize.get = function () { return 2 };

  Object.defineProperties( QuadBuffer.prototype, prototypeAccessors );

  return QuadBuffer;
}(MappedBuffer));

/**
 * @file Sphere Impostor Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Sphere impostor buffer.
 *
 * @example
 * var sphereImpostorBuffer = new SphereImpostorBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
var SphereImpostorBuffer = (function (QuadBuffer$$1) {
  function SphereImpostorBuffer (data, params) {
    QuadBuffer$$1.call(this, data, params);

    this.addUniforms({
      'projectionMatrixInverse': { value: new Matrix4() },
      'ortho': { value: 0.0 }
    });

    this.addAttributes({
      'radius': { type: 'f', value: null }
    });

    this.setAttributes(data);
    this.makeMapping();
  }

  if ( QuadBuffer$$1 ) SphereImpostorBuffer.__proto__ = QuadBuffer$$1;
  SphereImpostorBuffer.prototype = Object.create( QuadBuffer$$1 && QuadBuffer$$1.prototype );
  SphereImpostorBuffer.prototype.constructor = SphereImpostorBuffer;

  var prototypeAccessors = { isImpostor: {},vertexShader: {},fragmentShader: {} };

  prototypeAccessors.isImpostor.get = function () { return true };
  prototypeAccessors.vertexShader.get = function () { return 'SphereImpostor.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'SphereImpostor.frag' };

  Object.defineProperties( SphereImpostorBuffer.prototype, prototypeAccessors );

  return SphereImpostorBuffer;
}(QuadBuffer));

/**
 * @file Sphere Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Sphere buffer. Depending on the value {@link ExtensionFragDepth} and
 * `params.disableImpostor` the constructor returns either a
 * {@link SphereGeometryBuffer} or a {@link SphereImpostorBuffer}
 * @implements {Buffer}
 *
 * @example
 * var sphereBuffer = new SphereBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
var SphereBuffer = function SphereBuffer (data, params) {
  if (!ExtensionFragDepth || (params && params.disableImpostor)) {
    return new SphereGeometryBuffer(data, params)
  } else {
    return new SphereImpostorBuffer(data, params)
  }
};

/**
 * @file Ellipsoid Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var scale$1 = new Vector3();
var target = new Vector3();
var up = new Vector3();
var eye = new Vector3(0, 0, 0);

/**
 * Ellipsoid geometry buffer. Draws ellipsoids.
 *
 * @example
 * var ellipsoidGeometryBuffer = new EllipsoidGeometryBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] ),
 *     majorAxis: new Float32Array( [ 1, 1, 0 ] ),
 *     minorAxis: new Float32Array( [ 0.5, 0, 0.5 ] ),
 * } );
 */
var EllipsoidGeometryBuffer = (function (GeometryBuffer$$1) {
  function EllipsoidGeometryBuffer (data, params) {
    var p = params || {};
    var detail = defaults(p.sphereDetail, 2);
    var geo = new IcosahedronBufferGeometry(1, detail);

    GeometryBuffer$$1.call(this, data, p, geo);

    this.setAttributes(data, true);
  }

  if ( GeometryBuffer$$1 ) EllipsoidGeometryBuffer.__proto__ = GeometryBuffer$$1;
  EllipsoidGeometryBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
  EllipsoidGeometryBuffer.prototype.constructor = EllipsoidGeometryBuffer;

  var prototypeAccessors = { updateNormals: {} };

  EllipsoidGeometryBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
    target.fromArray(this._majorAxis, i3);
    up.fromArray(this._minorAxis, i3);
    matrix.lookAt(eye, target, up);

    scale$1.set(this._radius[ i ], up.length(), target.length());
    matrix.scale(scale$1);
  };

  EllipsoidGeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
    if (data.radius) {
      this._radius = data.radius;
    }

    if (data.majorAxis) {
      this._majorAxis = data.majorAxis;
    }

    if (data.minorAxis) {
      this._minorAxis = data.minorAxis;
    }

    GeometryBuffer$$1.prototype.setAttributes.call(this, data, initNormals);
  };

  prototypeAccessors.updateNormals.get = function () { return true };

  Object.defineProperties( EllipsoidGeometryBuffer.prototype, prototypeAccessors );

  return EllipsoidGeometryBuffer;
}(GeometryBuffer));

/**
 * @file Ellipsoid Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Ellipsoid buffer. Returns an {@link EllipsoidGeometryBuffer}
 *
 * @example
 * var ellipsoidBuffer = new EllipsoidBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] ),
 *     majorAxis: new Float32Array( [ 1, 1, 0 ] ),
 *     minorAxis: new Float32Array( [ 0.5, 0, 0.5 ] ),
 * } );
 */
var EllipsoidBuffer = function EllipsoidBuffer (data, params) {
  return new EllipsoidGeometryBuffer(data, params)
};

/**
 * @file Cylinder Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var scale$2 = new Vector3();
var eye$1 = new Vector3();
var target$1 = new Vector3();
var up$1 = new Vector3(0, 1, 0);

/**
 * Cylinder geometry buffer.
 *
 * @example
 * var cylinderGeometryBuffer = new CylinderGeometryBuffer( {
 *     position1: new Float32Array( [ 0, 0, 0 ] ),
 *     position2: new Float32Array( [ 1, 1, 1 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     color2: new Float32Array( [ 0, 1, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
var CylinderGeometryBuffer = (function (GeometryBuffer$$1) {
  function CylinderGeometryBuffer (data, params) {
    var d = data || {};
    var p = params || {};

    var radialSegments = defaults(p.radialSegments, 10);
    var openEnded = defaults(p.openEnded, true);
    var matrix = new Matrix4().makeRotationX(Math.PI / 2);

    var geo = new CylinderBufferGeometry(
            1,  // radiusTop,
            1,  // radiusBottom,
            1,  // height,
            radialSegments,  // radialSegments,
            1,  // heightSegments,
            openEnded  // openEnded
        );
    geo.applyMatrix(matrix);

    var n = d.position1.length;
    var m = d.radius.length;

        //

    var geoLength = geo.attributes.position.array.length / 3;
    var count = n / 3;
    var primitiveId = new Float32Array(count * 2 * geoLength);
    serialBlockArray(count, geoLength, 0, primitiveId);
    serialBlockArray(count, geoLength, count * geoLength, primitiveId);

        //

    var position = new Float32Array(n * 2);
    var color = new Float32Array(n * 2);

    GeometryBuffer$$1.call(this, {
      position: position,
      color: color,
      primitiveId: primitiveId,
      picking: d.picking
    }, p, geo);

    this.__center = new Float32Array(n);

    this._position = position;
    this._color = color;
    this._from = new Float32Array(n * 2);
    this._to = new Float32Array(n * 2);
    this._radius = new Float32Array(m * 2);

    this.setAttributes(d, true);
  }

  if ( GeometryBuffer$$1 ) CylinderGeometryBuffer.__proto__ = GeometryBuffer$$1;
  CylinderGeometryBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
  CylinderGeometryBuffer.prototype.constructor = CylinderGeometryBuffer;

  var prototypeAccessors = { updateNormals: {} };

  CylinderGeometryBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
    eye$1.fromArray(this._from, i3);
    target$1.fromArray(this._to, i3);
    matrix.lookAt(eye$1, target$1, up$1);

    var r = this._radius[ i ];
    scale$2.set(r, r, eye$1.distanceTo(target$1));
    matrix.scale(scale$2);
  };

  CylinderGeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
    var meshData = {};

    if (data.position1 && data.position2) {
      calculateCenterArray(
                data.position1, data.position2, this.__center
            );
      calculateCenterArray(
                data.position1, this.__center, this._position
            );
      calculateCenterArray(
                this.__center, data.position2, this._position, data.position1.length
            );
      this._from.set(data.position1);
      this._from.set(this.__center, data.position1.length);
      this._to.set(this.__center);
      this._to.set(data.position2, this.__center.length);
      meshData.position = this._position;
    }

    if (data.color && data.color2) {
      this._color.set(data.color);
      this._color.set(data.color2, data.color.length);
      meshData.color = this._color;
    }

    if (data.radius) {
      this._radius.set(data.radius);
      this._radius.set(data.radius, data.radius.length);
      meshData.radius = this._radius;
    }

    GeometryBuffer$$1.prototype.setAttributes.call(this, meshData, initNormals);
  };

  prototypeAccessors.updateNormals.get = function () { return true };

  Object.defineProperties( CylinderGeometryBuffer.prototype, prototypeAccessors );

  return CylinderGeometryBuffer;
}(GeometryBuffer));

ShaderRegistry.add('shader/CylinderImpostor.vert', "\nattribute vec3 mapping;\nattribute vec3 position1;\nattribute vec3 position2;\nattribute float radius;\nvarying vec3 axis;\nvarying vec4 base_radius;\nvarying vec4 end_b;\nvarying vec3 U;\nvarying vec3 V;\nvarying vec4 w;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#endif\nuniform mat4 modelViewMatrixInverse;\nuniform float ortho;\n#include matrix_scale\nvoid main(){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nvColor1 = color;\nvColor2 = color2;\n#endif\nbase_radius.w = radius * matrixScale( modelViewMatrix );\nvec3 center = position;\nvec3 dir = normalize( position2 - position1 );\nfloat ext = length( position2 - position1 ) / 2.0;\nvec3 cam_dir;\nif( ortho == 0.0 ){\ncam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 0, 1 ) ).xyz - center;\n}else{\ncam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 1, 0 ) ).xyz;\n}\ncam_dir = normalize( cam_dir );\nvec3 ldir;\nfloat b = dot( cam_dir, dir );\nend_b.w = b;\nif( b < 0.0 )\nldir = -ext * dir;\nelse\nldir = ext * dir;\nvec3 left = normalize( cross( cam_dir, ldir ) );\nleft = radius * left;\nvec3 up = radius * normalize( cross( left, ldir ) );\naxis = normalize( normalMatrix * ldir );\nU = normalize( normalMatrix * up );\nV = normalize( normalMatrix * left );\nvec4 base4 = modelViewMatrix * vec4( center - ldir, 1.0 );\nbase_radius.xyz = base4.xyz / base4.w;\nvec4 top_position = modelViewMatrix * vec4( center + ldir, 1.0 );\nvec4 end4 = top_position;\nend_b.xyz = end4.xyz / end4.w;\nw = modelViewMatrix * vec4(\ncenter + mapping.x*ldir + mapping.y*left + mapping.z*up, 1.0\n);\ngl_Position = projectionMatrix * w;\ngl_Position.z = 0.99;\n}");

ShaderRegistry.add('shader/CylinderImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float nearClip;\nuniform mat4 projectionMatrix;\nuniform float ortho;\nvarying vec3 axis;\nvarying vec4 base_radius;\nvarying vec4 end_b;\nvarying vec3 U;\nvarying vec3 V;\nvarying vec4 w;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#include common\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars\n#include lights_physical_pars_fragment\n#endif\nbool interior = false;\nfloat distSq3( vec3 v3a, vec3 v3b ){\nreturn (\n( v3a.x - v3b.x ) * ( v3a.x - v3b.x ) +\n( v3a.y - v3b.y ) * ( v3a.y - v3b.y ) +\n( v3a.z - v3b.z ) * ( v3a.z - v3b.z )\n);\n}\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nfloat calcClip( vec3 cameraPos ){\nreturn dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, nearClip - 0.5 ) );\n}\nvoid main(){\nvec3 point = w.xyz / w.w;\nvec3 base = base_radius.xyz;\nfloat vRadius = base_radius.w;\nvec3 end = end_b.xyz;\nfloat b = end_b.w;\nvec3 end_cyl = end;\nvec3 surface_point = point;\nvec3 ray_target = surface_point;\nvec3 ray_origin = vec3(0.0);\nvec3 ray_direction = mix(normalize(ray_origin - ray_target), vec3(0.0, 0.0, 1.0), ortho);\nmat3 basis = mat3( U, V, axis );\nvec3 diff = ray_target - 0.5 * (base + end_cyl);\nvec3 P = diff * basis;\nfloat dz = dot( axis, ray_direction );\nfloat radius2 = vRadius*vRadius;\nvec3 D = vec3(dot(U, ray_direction),\ndot(V, ray_direction),\ndz);\nfloat a0 = P.x*P.x + P.y*P.y - radius2;\nfloat a1 = P.x*D.x + P.y*D.y;\nfloat a2 = D.x*D.x + D.y*D.y;\nfloat d = a1*a1 - a0*a2;\nif (d < 0.0)\ndiscard;\nfloat dist = (-a1 + sqrt(d)) / a2;\nvec3 new_point = ray_target + dist * ray_direction;\nvec3 tmp_point = new_point - base;\nvec3 _normal = normalize( tmp_point - axis * dot(tmp_point, axis) );\nray_origin = mix( ray_origin, surface_point, ortho );\nfloat front_cap_test = dot( tmp_point, axis );\nfloat end_cap_test = dot((new_point - end_cyl), axis);\n#ifndef CAP\nvec3 new_point2 = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\nvec3 tmp_point2 = new_point2 - base;\n#endif\nif (front_cap_test < 0.0)\n{\nfloat dNV = dot(-axis, ray_direction);\nif (dNV < 0.0)\ndiscard;\nfloat near = dot(-axis, (base)) / dNV;\nvec3 front_point = ray_direction * near + ray_origin;\nif (dot(front_point - base, front_point-base) > radius2)\ndiscard;\n#ifdef CAP\nnew_point = front_point;\n_normal = axis;\n#else\nnew_point = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\ndNV = dot(-axis, ray_direction);\nnear = dot(axis, end_cyl) / dNV;\nnew_point2 = ray_direction * near + ray_origin;\nif (dot(new_point2 - end_cyl, new_point2-base) < radius2)\ndiscard;\ninterior = true;\n#endif\n}\nif( end_cap_test > 0.0 )\n{\nfloat dNV = dot(axis, ray_direction);\nif (dNV < 0.0)\ndiscard;\nfloat near = dot(axis, end_cyl) / dNV;\nvec3 end_point = ray_direction * near + ray_origin;\nif( dot(end_point - end_cyl, end_point-base) > radius2 )\ndiscard;\n#ifdef CAP\nnew_point = end_point;\n_normal = axis;\n#else\nnew_point = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\ndNV = dot(-axis, ray_direction);\nnear = dot(-axis, (base)) / dNV;\nnew_point2 = ray_direction * near + ray_origin;\nif (dot(new_point2 - base, new_point2-base) < radius2)\ndiscard;\ninterior = true;\n#endif\n}\ngl_FragDepthEXT = calcDepth( new_point );\n#ifdef NEAR_CLIP\nif( calcClip( new_point ) > 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nnew_point = ray_target + dist * ray_direction;\nif( calcClip( new_point ) > 0.0 )\ndiscard;\ninterior = true;\ngl_FragDepthEXT = calcDepth( new_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( nearClip - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n}\n}else if( gl_FragDepthEXT <= 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nnew_point = ray_target + dist * ray_direction;\ninterior = true;\ngl_FragDepthEXT = calcDepth( new_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n}\n#else\nif( gl_FragDepthEXT <= 0.0 ){\ndist = (-a1 - sqrt(d)) / a2;\nnew_point = ray_target + dist * ray_direction;\ninterior = true;\ngl_FragDepthEXT = calcDepth( new_point );\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n}\n}\n#endif\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\n#ifdef PICKING\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vViewPosition = -new_point;\nvec3 vNormal = _normal;\nvec3 vColor;\nif( distSq3( new_point, end_cyl ) < distSq3( new_point, base ) ){\nif( b < 0.0 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\n}else{\nif( b > 0.0 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\n}\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\nvec3 normal = normalize( vNormal );\nif( interior ){\nnormal = vec3( 0.0, 0.0, 0.4 );\n}\n#include lights_physical_fragment\n#include lights_template\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Aligned Box Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var mapping$1 = new Float32Array([
  -1.0, 1.0, -1.0,
  -1.0, -1.0, -1.0,
  1.0, 1.0, -1.0,
  1.0, 1.0, 1.0,
  1.0, -1.0, -1.0,
  1.0, -1.0, 1.0
]);

var mappingIndices$1 = new Uint16Array([
  0, 1, 2,
  1, 4, 2,
  2, 4, 3,
  4, 5, 3
]);

/**
 * Aligned box buffer. Draws boxes where one side is always screen-space aligned.
 * Used to render cylinder imposters.
 * @interface
 */
var AlignedBoxBuffer = (function (MappedBuffer$$1) {
  function AlignedBoxBuffer () {
    MappedBuffer$$1.apply(this, arguments);
  }

  if ( MappedBuffer$$1 ) AlignedBoxBuffer.__proto__ = MappedBuffer$$1;
  AlignedBoxBuffer.prototype = Object.create( MappedBuffer$$1 && MappedBuffer$$1.prototype );
  AlignedBoxBuffer.prototype.constructor = AlignedBoxBuffer;

  var prototypeAccessors = { mapping: {},mappingIndices: {},mappingIndicesSize: {},mappingType: {},mappingSize: {},mappingItemSize: {} };

  prototypeAccessors.mapping.get = function () { return mapping$1 };
  prototypeAccessors.mappingIndices.get = function () { return mappingIndices$1 };
  prototypeAccessors.mappingIndicesSize.get = function () { return 12 };
  prototypeAccessors.mappingType.get = function () { return 'v3' };
  prototypeAccessors.mappingSize.get = function () { return 6 };
  prototypeAccessors.mappingItemSize.get = function () { return 3 };

  Object.defineProperties( AlignedBoxBuffer.prototype, prototypeAccessors );

  return AlignedBoxBuffer;
}(MappedBuffer));

/**
 * @file Cylinder Impostor Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Cylinder impostor buffer.
 *
 * @example
 * var cylinderimpostorBuffer = new CylinderImpostorBuffer( {
 *     position1: new Float32Array( [ 0, 0, 0 ] ),
 *     position2: new Float32Array( [ 1, 1, 1 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     color2: new Float32Array( [ 0, 1, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
var CylinderImpostorBuffer = (function (AlignedBoxBuffer$$1) {
  function CylinderImpostorBuffer (data, params) {
    AlignedBoxBuffer$$1.call(this, data, params);

    var p = params || {};

    this.openEnded = defaults(p.openEnded, false);

    this.addUniforms({
      'modelViewMatrixInverse': { value: new Matrix4() },
      'ortho': { value: 0.0 }
    });

    this.addAttributes({
      'position1': { type: 'v3', value: null },
      'position2': { type: 'v3', value: null },
      'color2': { type: 'c', value: null },
      'radius': { type: 'f', value: null }
    });

    this.setAttributes(data);
    this.makeMapping();
  }

  if ( AlignedBoxBuffer$$1 ) CylinderImpostorBuffer.__proto__ = AlignedBoxBuffer$$1;
  CylinderImpostorBuffer.prototype = Object.create( AlignedBoxBuffer$$1 && AlignedBoxBuffer$$1.prototype );
  CylinderImpostorBuffer.prototype.constructor = CylinderImpostorBuffer;

  var prototypeAccessors = { parameters: {},isImpostor: {},vertexShader: {},fragmentShader: {} };

  prototypeAccessors.parameters.get = function () {
    return Object.assign.call(this, {

      openEnded: { updateShader: true }

    }, AlignedBoxBuffer$$1.prototype.parameters)
  };

  CylinderImpostorBuffer.prototype.getDefines = function getDefines (type) {
    var defines = AlignedBoxBuffer$$1.prototype.getDefines.call(this, type);

    if (!this.openEnded) {
      defines.CAP = 1;
    }

    return defines
  };

  prototypeAccessors.isImpostor.get = function () { return true };
  prototypeAccessors.vertexShader.get = function () { return 'CylinderImpostor.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'CylinderImpostor.frag' };

  Object.defineProperties( CylinderImpostorBuffer.prototype, prototypeAccessors );

  return CylinderImpostorBuffer;
}(AlignedBoxBuffer));

/**
 * @file Cylinder Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Cylinder buffer. Depending on the value {@link ExtensionFragDepth} and
 * `params.disableImpostor` the constructor returns either a
 * {@link CylinderGeometryBuffer} or a {@link CylinderImpostorBuffer}
 * @implements {Buffer}
 *
 * @example
 * var cylinderBuffer = new CylinderBuffer( {
 *     position1: new Float32Array( [ 0, 0, 0 ] ),
 *     position2: new Float32Array( [ 1, 1, 1 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     color2: new Float32Array( [ 0, 1, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
var CylinderBuffer = function CylinderBuffer (data, params) {
  if (!ExtensionFragDepth || (params && params.disableImpostor)) {
    return new CylinderGeometryBuffer(data, params)
  } else {
    return new CylinderImpostorBuffer(data, params)
  }
};

/**
 * @file Cone Geometry Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var scale$3 = new Vector3();
var eye$2 = new Vector3();
var target$2 = new Vector3();
var up$2 = new Vector3(0, 1, 0);

/**
 * Cone geometry buffer.
 *
 * @example
 * var coneGeometryBuffer = new ConeGeometryBuffer( {
 *     position1: new Float32Array( [ 0, 0, 0 ] ),
 *     position2: new Float32Array( [ 1, 1, 1 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     color2: new Float32Array( [ 0, 1, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
var ConeGeometryBuffer = (function (GeometryBuffer$$1) {
  function ConeGeometryBuffer (data, params) {
    var p = params || {};

    var radialSegments = defaults(p.radialSegments, 60);
    var openEnded = defaults(p.openEnded, false);
    var matrix = new Matrix4().makeRotationX(-Math.PI / 2);

    var geo = new ConeBufferGeometry(
            1,  // radius
            1,  // height
            radialSegments,  // radialSegments
            1,  // heightSegments
            openEnded  // openEnded
        );
    geo.applyMatrix(matrix);

    var n = data.position1.length;
    var m = data.radius.length;

    var position = new Float32Array(n);

    GeometryBuffer$$1.call(this, {
      position: position,
      color: data.color,
      picking: data.picking
    }, p, geo);

    this._position = position;
    this._from = new Float32Array(n);
    this._to = new Float32Array(n);
    this._radius = new Float32Array(m);

    this.setAttributes(data, true);
  }

  if ( GeometryBuffer$$1 ) ConeGeometryBuffer.__proto__ = GeometryBuffer$$1;
  ConeGeometryBuffer.prototype = Object.create( GeometryBuffer$$1 && GeometryBuffer$$1.prototype );
  ConeGeometryBuffer.prototype.constructor = ConeGeometryBuffer;

  var prototypeAccessors = { updateNormals: {} };

  ConeGeometryBuffer.prototype.applyPositionTransform = function applyPositionTransform (matrix, i, i3) {
    eye$2.fromArray(this._from, i3);
    target$2.fromArray(this._to, i3);
    matrix.lookAt(eye$2, target$2, up$2);

    var r = this._radius[ i ];
    scale$3.set(r, r, eye$2.distanceTo(target$2));
    matrix.scale(scale$3);
  };

  ConeGeometryBuffer.prototype.setAttributes = function setAttributes (data, initNormals) {
    var meshData = {};

    if (data.position1 && data.position2) {
      calculateCenterArray(
                data.position1, data.position2, this._position
            );
      this._from.set(data.position1);
      this._to.set(data.position2);
      meshData.position = this._position;
    }

    if (data.color) {
      meshData.color = data.color;
    }

    if (data.radius) {
      this._radius.set(data.radius);
    }

    GeometryBuffer$$1.prototype.setAttributes.call(this, meshData, initNormals);
  };

  prototypeAccessors.updateNormals.get = function () { return true };

  Object.defineProperties( ConeGeometryBuffer.prototype, prototypeAccessors );

  return ConeGeometryBuffer;
}(GeometryBuffer));

/**
 * @file Cone Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Cone buffer. Returns a {@link ConeGeometryBuffer}
 * @implements {Buffer}
 *
 * @example
 * var coneBuffer = new ConeBuffer( {
 *     position1: new Float32Array( [ 0, 0, 0 ] ),
 *     position2: new Float32Array( [ 1, 1, 1 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     color2: new Float32Array( [ 0, 1, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
var ConeBuffer = function ConeBuffer (data, params) {
  return new ConeGeometryBuffer(data, params)
};

/**
 * @file Geometry Group
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var GeometryGroup = function GeometryGroup (geometryList) {
  this.geometryList = geometryList;
  this.boundingBox = null;
};

GeometryGroup.prototype.computeBoundingBox = function computeBoundingBox () {
    var this$1 = this;

  if (!this.boundingBox) {
    this.boundingBox = new Box3();
  } else {
    this.boundingBox.empty();
  }

  this.geometryList.forEach(function (geo) {
    if (!geo.boundingBox) { geo.computeBoundingBox(); }
    this$1.boundingBox.union(geo.boundingBox);
  });
};

/**
 * @file Arrow Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Arrow buffer. Draws arrows made from a cylinder and a cone.
 * @implements {Buffer}
 *
 * @example
 * var arrowBuffer = new ArrowBuffer( {
 *     position1: new Float32Array( [ 0, 0, 0 ] ),
 *     position2: new Float32Array( [ 10, 1, 1 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 */
var ArrowBuffer = function ArrowBuffer (data, params) {
  var d = data || {};
  var p = params || {};

  this.aspectRatio = defaults(p.aspectRatio, 1.5);
  this.wireframe = defaults(p.wireframe, false);

  this.splitPosition = new Float32Array(d.position1.length);
  this.cylinderRadius = new Float32Array(d.radius.length);

  var attr = this.makeAttributes(d);
  var bufferParams = {
    radialSegments: defaults(p.radialSegments, 50),
    openEnded: defaults(p.openEnded, false),
    disableImpostor: defaults(p.disableImpostor, false)
  };

  this.cylinderBuffer = new CylinderBuffer(
          attr.cylinder, bufferParams
      );
  this.coneBuffer = new ConeBuffer(
          attr.cone, bufferParams
      );

  this.geometry = new GeometryGroup([
    this.cylinderBuffer.geometry,
    this.coneBuffer.geometry
  ]);

  this.group = new Group();
  this.wireframeGroup = new Group();
  this.pickingGroup = new Group();

      // requires Group objects to be present
  this.matrix = defaults(p.matrix, new Matrix4());

  this.picking = d.picking;
};

var prototypeAccessors$25 = { matrix: {},pickable: {} };

prototypeAccessors$25.matrix.set = function (m) {
  Buffer.prototype.setMatrix.call(this, m);
};
prototypeAccessors$25.matrix.get = function () {
  return this.group.matrix.clone()
};

prototypeAccessors$25.pickable.get = function () {
  return !!this.picking
};

ArrowBuffer.prototype.makeAttributes = function makeAttributes (data) {
  var splitPosition = this.splitPosition;
  var cylinderRadius = this.cylinderRadius;

  var aspectRatio = this.aspectRatio;

  var i, il;
  var cylinder = {};
  var cone = {};

  if (data.radius) {
    for (i = 0, il = cylinderRadius.length; i < il; ++i) {
      cylinderRadius[ i ] = data.radius[ i ] / aspectRatio;
    }
    cylinder.radius = cylinderRadius;
    cone.radius = data.radius;
  }

  if (data.position1 && data.position2) {
    var vFrom = new Vector3();
    var vTo = new Vector3();
    var vDir = new Vector3();
    var vSplit = new Vector3();
    for (i = 0, il = splitPosition.length; i < il; i += 3) {
      vFrom.fromArray(data.position1, i);
      vTo.fromArray(data.position2, i);
      vDir.subVectors(vFrom, vTo);
      var fullLength = vDir.length();
      var coneLength = cylinderRadius[ i / 3 ] * aspectRatio * 2;
      var length = Math.min(fullLength, coneLength);
      vDir.setLength(length);
      vSplit.copy(vTo).add(vDir);
      vSplit.toArray(splitPosition, i);
    }
    cylinder.position1 = data.position1;
    cylinder.position2 = splitPosition;
    cone.position1 = splitPosition;
    cone.position2 = data.position2;
  }

  if (data.color) {
    cylinder.color = data.color;
    cylinder.color2 = data.color;
    cone.color = data.color;
  }

  return {
    cylinder: cylinder,
    cone: cone
  }
};

ArrowBuffer.prototype.getMesh = function getMesh (picking) {
  return new Group().add(
          this.cylinderBuffer.getMesh(picking),
          this.coneBuffer.getMesh(picking)
      )
};

ArrowBuffer.prototype.getWireframeMesh = function getWireframeMesh () {
  return new Group().add(
          this.cylinderBuffer.getWireframeMesh(),
          this.coneBuffer.getWireframeMesh()
      )
};

ArrowBuffer.prototype.getPickingMesh = function getPickingMesh () {
  return new Group().add(
          this.cylinderBuffer.getPickingMesh(),
          this.coneBuffer.getPickingMesh()
      )
};

ArrowBuffer.prototype.setAttributes = function setAttributes (data) {
  var attr = this.makeAttributes(data);

  this.cylinderBuffer.setAttributes(attr.cylinder);
  this.coneBuffer.setAttributes(attr.cone);
};

  /**
   * Set buffer parameters
   * @param {BufferParameters} params - buffer parameters object
   * @return {undefined}
   */
ArrowBuffer.prototype.setParameters = function setParameters (params) {
  params = Object.assign({}, params);

  if (params && params.matrix !== undefined) {
    this.matrix = params.matrix;
  }
  delete params.matrix;

  if (params && params.wireframe !== undefined) {
    this.wireframe = params.wireframe;
    this.setVisibility(this.visible);
  }

  this.cylinderBuffer.setParameters(params);
  this.coneBuffer.setParameters(params);
};

ArrowBuffer.prototype.setVisibility = function setVisibility () {
  Buffer.prototype.setVisibility.apply(this, arguments);
};

ArrowBuffer.prototype.dispose = function dispose () {
  this.cylinderBuffer.dispose();
  this.coneBuffer.dispose();
};

Object.defineProperties( ArrowBuffer.prototype, prototypeAccessors$25 );

ShaderRegistry.add('shader/SDFFont.vert', "uniform float nearClip;\nuniform float clipRadius;\nuniform vec3 clipCenter;\nuniform float xOffset;\nuniform float yOffset;\nuniform float zOffset;\nuniform bool ortho;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvarying vec3 vViewPosition;\n#endif\nvarying vec2 texCoord;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#endif\nattribute vec2 mapping;\nattribute vec2 inputTexCoord;\nattribute float inputSize;\n#include matrix_scale\n#include common\nvoid main(void){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\ntexCoord = inputTexCoord;\nfloat scale = matrixScale( modelViewMatrix );\nfloat _zOffset = zOffset * scale;\nif( texCoord.x == 10.0 ){\n_zOffset -= 0.001;\n}\nvec3 pos = position;\nif( ortho ){\npos += normalize( cameraPosition ) * _zOffset;\n}\nvec4 cameraPos = modelViewMatrix * vec4( pos, 1.0 );\nvec4 cameraCornerPos = vec4( cameraPos.xyz, 1.0 );\ncameraCornerPos.xy += mapping * inputSize * 0.01 * scale;\ncameraCornerPos.x += xOffset * scale;\ncameraCornerPos.y += yOffset * scale;\nif( !ortho ){\ncameraCornerPos.xyz += normalize( -cameraCornerPos.xyz ) * _zOffset;\n}\ngl_Position = projectionMatrix * cameraCornerPos;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\nvViewPosition = -cameraCornerPos.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n#include radiusclip_vertex\n}");

ShaderRegistry.add('shader/SDFFont.frag', "uniform sampler2D fontTexture;\nuniform float opacity;\nuniform bool showBorder;\nuniform vec3 borderColor;\nuniform float borderWidth;\nuniform vec3 backgroundColor;\nuniform float backgroundOpacity;\nuniform float nearClip;\nuniform float clipRadius;\nvarying vec3 vViewPosition;\nvarying vec2 texCoord;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\nconst vec3 vColor = vec3( 0.0 );\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#endif\n#ifdef SDF\nconst float smoothness = 16.0;\n#else\nconst float smoothness = 256.0;\n#endif\nconst float gamma = 2.2;\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\nif( texCoord.x > 1.0 ){\ngl_FragColor = vec4( backgroundColor, backgroundOpacity );\n}else{\nfloat sdf = texture2D( fontTexture, texCoord ).a;\nif( showBorder ) sdf += borderWidth;\nfloat w = clamp(\nsmoothness * ( abs( dFdx( texCoord.x ) ) + abs( dFdy( texCoord.y ) ) ),\n0.0,\n0.5\n);\nfloat a = smoothstep( 0.5 - w, 0.5 + w, sdf );\na = pow( a, 1.0 / gamma );\nif( a < 0.2 ) discard;\na *= opacity;\nvec3 outgoingLight = vColor;\nif( showBorder && sdf < ( 0.5 + borderWidth ) ){\noutgoingLight = borderColor;\n}\ngl_FragColor = vec4( outgoingLight, a );\n}\n#if defined( PICKING )\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Text Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var TextAtlasCache = {};

function getTextAtlas (params) {
  var hash = JSON.stringify(params);
  if (TextAtlasCache[ hash ] === undefined) {
    TextAtlasCache[ hash ] = new TextAtlas(params);
  }
  return TextAtlasCache[ hash ]
}

var TextAtlas = function TextAtlas (params) {
      // adapted from https://github.com/unconed/mathbox
      // MIT License Copyright (C) 2013+ Steven Wittens and contributors

  var p = Object.assign({}, params);

  this.font = defaults(p.font, [ 'sans-serif' ]);
  this.size = defaults(p.size, 36);
  this.style = defaults(p.style, 'normal');
  this.variant = defaults(p.variant, 'normal');
  this.weight = defaults(p.weight, 'normal');
  this.outline = defaults(p.outline, 0);
  this.width = defaults(p.width, 2048);
  this.height = defaults(p.height, 2048);

  this.gamma = 1;
  if (typeof navigator !== 'undefined') {
    var ua = navigator.userAgent;
    if (ua.match(/Chrome/) && ua.match(/OS X/)) {
      this.gamma = 0.5;
    }
  }

  this.mapped = {};
  this.scratchW = 0;
  this.scratchH = 0;
  this.currentX = 0;
  this.currentY = 0;

  this.build();
  this.populate();

  this.texture = new CanvasTexture(this.canvas2);
  this.texture.flipY = false;
  this.texture.needsUpdate = true;
};

TextAtlas.prototype.build = function build () {
      // Prepare line-height with room for outline and descenders/ascenders
  var lineHeight = this.size + 2 * this.outline + Math.round(this.size / 4);
  var maxWidth = this.width / 4;

      // Prepare scratch canvas
  var canvas = document.createElement('canvas');
  canvas.width = maxWidth;
  canvas.height = lineHeight;

  var ctx = canvas.getContext('2d');
  ctx.font = this.style + ' ' + this.variant + ' ' + this.weight + ' ' + this.size + 'px ' + this.font;
  ctx.fillStyle = '#FF0000';
  ctx.textAlign = 'left';
  ctx.textBaseline = 'bottom';
  ctx.lineJoin = 'round';

  var colors = [];
  var dilate = this.outline * 3;
  for (var i = 0; i < dilate; ++i) {
          // 8 rgb levels = 1 step = .5 pixel increase
    var val = Math.max(0, -i * 8 + 128 - (!i) * 8);
    var hex = ('00' + val.toString(16)).slice(-2);
    colors.push('#' + hex + hex + hex);
  }
  var scratch = new Uint8Array(maxWidth * lineHeight * 2);

  this.canvas = canvas;
  this.context = ctx;
  this.lineHeight = lineHeight;
  this.maxWidth = maxWidth;
  this.colors = colors;
  this.scratch = scratch;

  this.data = new Uint8Array(this.width * this.height * 4);

  this.canvas2 = document.createElement('canvas');
  this.canvas2.width = this.width;
  this.canvas2.height = this.height;
  this.context2 = this.canvas2.getContext('2d');
};

TextAtlas.prototype.map = function map (text) {
  if (this.mapped[ text ] === undefined) {
    this.draw(text);

    if (this.currentX + this.scratchW > this.width) {
      this.currentX = 0;
      this.currentY += this.scratchH;
    }
    if (this.currentY + this.scratchH > this.height) {
      console.warn('canvas to small');
    }

    this.mapped[ text ] = {
      x: this.currentX,
      y: this.currentY,
      w: this.scratchW,
      h: this.scratchH
    };

    this.context2.drawImage(
              this.canvas,
              0, 0,
              this.scratchW, this.scratchH,
              this.currentX, this.currentY,
              this.scratchW, this.scratchH
          );

    this.currentX += this.scratchW;
  }

  return this.mapped[ text ]
};

TextAtlas.prototype.get = function get (text) {
  return this.mapped[ text ] || this.placeholder
};

TextAtlas.prototype.draw = function draw (text) {
  var h = this.lineHeight;
  var o = this.outline;
  var ctx = this.context;
  var dst = this.scratch;
  var max = this.maxWidth;
  var colors = this.colors;

      // Bottom aligned, take outline into account
  var x = o;
  var y = h - this.outline;

      // Measure text
  var m = ctx.measureText(text);
  var w = Math.min(max, Math.ceil(m.width + 2 * x + 1));

      // Clear scratch area
  ctx.clearRect(0, 0, w, h);

  var i, il, j, imageData, data;

  if (this.outline === 0) {
    ctx.fillText(text, x, y);
    imageData = ctx.getImageData(0, 0, w, h);
    data = imageData.data;

    j = 3;// Skip to alpha channel
    for (i = 0, il = data.length / 4; i < il; ++i) {
      dst[ i ] = data[ j ];
      j += 4;
    }
  } else {
    ctx.globalCompositeOperation = 'source-over';
          // Draw strokes of decreasing width to create
          // nested outlines (absolute distance)
    for (i = o + 1; i > 0; --i) {
              // Eliminate odd strokes once past > 1px,
              // don't need the detail
      j = i > 1 ? i * 2 - 2 : i;
      ctx.strokeStyle = colors[ j - 1 ];
      ctx.lineWidth = j;
      ctx.strokeText(text, x, y);
    }
    ctx.globalCompositeOperation = 'multiply';
    ctx.fillStyle = '#FF00FF';
    ctx.fillText(text, x, y);
    imageData = ctx.getImageData(0, 0, w, h);
    data = imageData.data;

    j = 0;
    var gamma = this.gamma;
    for (i = 0, il = data.length / 4; i < il; ++i) {
              // Get value + mask
      var a = data[ j ];
      var mask = a ? data[ j + 1 ] / a : 1;
      if (gamma === 0.5) {
        mask = Math.sqrt(mask);
      }
      mask = Math.min(1, Math.max(0, mask));

              // Blend between positive/outside and negative/inside
      var b = 256 - a;
      var c = b + (a - b) * mask;

              // Clamp (slight expansion to hide errors around the transition)
      dst[ i ] = Math.max(0, Math.min(255, c + 2));
      data[ j + 3 ] = dst[ i ];
      j += 4;
    }
  }

  ctx.putImageData(imageData, 0, 0);
  this.scratchW = w;
  this.scratchH = h;
};

TextAtlas.prototype.populate = function populate () {
    var this$1 = this;

      // Replacement Character
  this.placeholder = this.map(String.fromCharCode(0xFFFD));

      // Basic Latin
  for (var i = 0x0000; i < 0x007F; ++i) {
    this$1.map(String.fromCharCode(i));
  }

      // Latin-1 Supplement
  for (var i$1 = 0x0080; i$1 < 0x00FF; ++i$1) {
    this$1.map(String.fromCharCode(i$1));
  }

      // Greek and Coptic
  for (var i$2 = 0x0370; i$2 < 0x03FF; ++i$2) {
    this$1.map(String.fromCharCode(i$2));
  }

      // Cyrillic
  for (var i$3 = 0x0400; i$3 < 0x04FF; ++i$3) {
    this$1.map(String.fromCharCode(i$3));
  }

      // Angstrom Sign
  this.map(String.fromCharCode(0x212B));
};

/**
 * Text buffer parameter object.
 * @typedef {Object} TextBufferParameters - text buffer parameters
 *
 * @property {Float} opacity - translucency: 1 is fully opaque, 0 is fully transparent
 * @property {Integer} clipNear - position of camera near/front clipping plane
 *                                in percent of scene bounding box
 * @property {String} labelType - type of the label, one of:
 *                                 "atomname", "atomindex", "occupancy", "bfactor",
 *                                 "serial", "element", "atom", "resname", "resno",
 *                                 "res", "text", "qualified". When set to "text", the
 *                                 `labelText` list is used.
 * @property {String[]} labelText - list of label strings, must set `labelType` to "text"
 *                                   to take effect
 * @property {String} fontFamily - font family, one of: "sans-serif", "monospace", "serif"
 * @property {String} fontStyle - font style, "normal" or "italic"
 * @property {String} fontWeight - font weight, "normal" or "bold"
 * @property {Boolean} sdf - use "signed distance field"-based rendering for sharper edges
 * @property {Float} xOffset - offset in x-direction
 * @property {Float} yOffset - offset in y-direction
 * @property {Float} zOffset - offset in z-direction (i.e. in camera direction)
 * @property {String} attachment - attachment of the label, one of:
 *                                 "bottom-left", "bottom-center", "bottom-right",
 *                                 "middle-left", "middle-center", "middle-right",
 *                                 "top-left", "top-center", "top-right"
 * @property {Boolean} showBorder - show border/outline
 * @property {Color} borderColor - color of the border/outline
 * @property {Float} borderWidth - width of the border/outline
 * @property {Boolean} showBackground - show background rectangle
 * @property {Color} backgroundColor - color of the background
 * @property {Float} backgroundMargin - width of the background
 * @property {Float} backgroundOpacity - opacity of the background
 */

/**
 * Text buffer. Renders screen-aligned text strings.
 *
 * @example
 * var textBuffer = new TextBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     size: new Float32Array( [ 2 ] ),
 *     text: [ "Hello" ]
 * } );
 */
var TextBuffer = (function (QuadBuffer$$1) {
  function TextBuffer (data, params) {
    var d = data || {};
    var p = params || {};

    p.forceTransparent = true;

    var n = d.position.length / 3;
    var charCount = 0;
    for (var i = 0; i < n; ++i) {
      charCount += d.text[ i ].length;
    }

    var count = charCount;
    if (p.showBackground) { count += n; }

    QuadBuffer$$1.call(this, {
      position: new Float32Array(count * 3),
      color: new Float32Array(count * 3),
      picking: new IgnorePicker()
    }, p);

    this.fontFamily = defaults(p.fontFamily, 'sans-serif');
    this.fontStyle = defaults(p.fontStyle, 'normal');
    this.fontWeight = defaults(p.fontWeight, 'bold');
    this.fontSize = defaults(p.fontSize, 48);
    this.sdf = defaults(p.sdf, Browser === 'Chrome');
    this.xOffset = defaults(p.xOffset, 0.0);
    this.yOffset = defaults(p.yOffset, 0.0);
    this.zOffset = defaults(p.zOffset, 0.5);
    this.attachment = defaults(p.attachment, 'bottom-left');
    this.showBorder = defaults(p.showBorder, false);
    this.borderColor = defaults(p.borderColor, 'lightgrey');
    this.borderWidth = defaults(p.borderWidth, 0.15);
    this.showBackground = defaults(p.showBackground, false);
    this.backgroundColor = defaults(p.backgroundColor, 'lightgrey');
    this.backgroundMargin = defaults(p.backgroundMargin, 0.5);
    this.backgroundOpacity = defaults(p.backgroundOpacity, 1.0);

    this.text = d.text;
    this.positionCount = n;

    this.addUniforms({
      'fontTexture': { value: null },
      'xOffset': { value: this.xOffset },
      'yOffset': { value: this.yOffset },
      'zOffset': { value: this.zOffset },
      'ortho': { value: false },
      'showBorder': { value: this.showBorder },
      'borderColor': { value: new Color(this.borderColor) },
      'borderWidth': { value: this.borderWidth },
      'backgroundColor': { value: new Color(this.backgroundColor) },
      'backgroundOpacity': { value: this.backgroundOpacity }
    });

    this.addAttributes({
      'inputTexCoord': { type: 'v2', value: null },
      'inputSize': { type: 'f', value: null }
    });

    this.setAttributes(data);

    this.makeTexture();
    this.makeMapping();
  }

  if ( QuadBuffer$$1 ) TextBuffer.__proto__ = QuadBuffer$$1;
  TextBuffer.prototype = Object.create( QuadBuffer$$1 && QuadBuffer$$1.prototype );
  TextBuffer.prototype.constructor = TextBuffer;

  var prototypeAccessors = { parameters: {},wireframe: {},isText: {},vertexShader: {},fragmentShader: {} };

  prototypeAccessors.parameters.get = function () {
    return Object.assign.call(this, {

      fontFamily: { uniform: true },
      fontStyle: { uniform: true },
      fontWeight: { uniform: true },
      fontSize: { uniform: true },
      sdf: { updateShader: true, uniform: true },
      xOffset: { uniform: true },
      yOffset: { uniform: true },
      zOffset: { uniform: true },
      showBorder: { uniform: true },
      borderColor: { uniform: true },
      borderWidth: { uniform: true },
      backgroundColor: { uniform: true },
      backgroundOpacity: { uniform: true }

    }, QuadBuffer$$1.prototype.parameters, {

      flatShaded: undefined

    })
  };

  TextBuffer.prototype.makeMaterial = function makeMaterial () {
    QuadBuffer$$1.prototype.makeMaterial.call(this);

    var tex = this.texture;

    var m = this.material;
    m.extensions.derivatives = true;
    m.lights = false;
    m.uniforms.fontTexture.value = tex;
    m.needsUpdate = true;

    var wm = this.wireframeMaterial;
    wm.extensions.derivatives = true;
    wm.lights = false;
    wm.uniforms.fontTexture.value = tex;
    wm.needsUpdate = true;

    var pm = this.pickingMaterial;
    pm.extensions.derivatives = true;
    pm.lights = false;
    pm.uniforms.fontTexture.value = tex;
    pm.needsUpdate = true;
  };

  TextBuffer.prototype.setAttributes = function setAttributes (data) {
    var this$1 = this;

    var position, size, color;
    var aPosition, inputSize, aColor;

    var text = this.text;
    var attributes = this.geometry.attributes;

    if (data.position) {
      position = data.position;
      aPosition = attributes.position.array;
      attributes.position.needsUpdate = true;
    }

    if (data.size) {
      size = data.size;
      inputSize = attributes.inputSize.array;
      attributes.inputSize.needsUpdate = true;
    }

    if (data.color) {
      color = data.color;
      aColor = attributes.color.array;
      attributes.color.needsUpdate = true;
    }

    var n = this.positionCount;

    var j, o;
    var iCharAll = 0;
    var txt, iChar, nChar;

    for (var v = 0; v < n; ++v) {
      o = 3 * v;
      txt = text[ v ];
      nChar = txt.length;
      if (this$1.showBackground) { nChar += 1; }

      for (iChar = 0; iChar < nChar; ++iChar, ++iCharAll) {
        for (var m = 0; m < 4; m++) {
          j = iCharAll * 4 * 3 + (3 * m);

          if (position) {
            aPosition[ j ] = position[ o ];
            aPosition[ j + 1 ] = position[ o + 1 ];
            aPosition[ j + 2 ] = position[ o + 2 ];
          }

          if (size) {
            inputSize[ (iCharAll * 4) + m ] = size[ v ];
          }

          if (color) {
            aColor[ j ] = color[ o ];
            aColor[ j + 1 ] = color[ o + 1 ];
            aColor[ j + 2 ] = color[ o + 2 ];
          }
        }
      }
    }
  };

  TextBuffer.prototype.makeTexture = function makeTexture () {
    this.textAtlas = getTextAtlas({
      font: [ this.fontFamily ],
      style: this.fontStyle,
      weight: this.fontWeight,
      size: this.fontSize,
      outline: this.sdf ? 5 : 0
    });

    this.texture = this.textAtlas.texture;
  };

  TextBuffer.prototype.makeMapping = function makeMapping () {
    var this$1 = this;

    var ta = this.textAtlas;
    var text = this.text;
    var attachment = this.attachment;
    var margin = (ta.lineHeight * this.backgroundMargin * 0.1) - 10;

    var inputTexCoord = this.geometry.attributes.inputTexCoord.array;
    var inputMapping = this.geometry.attributes.mapping.array;

    var n = this.positionCount;
    var iCharAll = 0;
    var c, i, txt, xadvance, iChar, nChar, xShift, yShift;

    for (var v = 0; v < n; ++v) {
      txt = text[ v ];
      xadvance = 0;
      nChar = txt.length;

            // calculate width
      for (iChar = 0; iChar < nChar; ++iChar) {
        c = ta.get(txt[ iChar ]);
        xadvance += c.w - 2 * ta.outline;
      }

            // attachment
      if (attachment.startsWith('top')) {
        yShift = ta.lineHeight / 1.25;
      } else if (attachment.startsWith('middle')) {
        yShift = ta.lineHeight / 2.5;
      } else {
        yShift = 0;  // "bottom"
      }
      if (attachment.endsWith('right')) {
        xShift = xadvance;
      } else if (attachment.endsWith('center')) {
        xShift = xadvance / 2;
      } else {
        xShift = 0;  // "left"
      }
      xShift += ta.outline;
      yShift += ta.outline;

            // background
      if (this$1.showBackground) {
        i = iCharAll * 2 * 4;
        inputMapping[ i + 0 ] = -ta.lineHeight / 6 - xShift - margin;  // top left
        inputMapping[ i + 1 ] = ta.lineHeight - yShift + margin;
        inputMapping[ i + 2 ] = -ta.lineHeight / 6 - xShift - margin;  // bottom left
        inputMapping[ i + 3 ] = 0 - yShift - margin;
        inputMapping[ i + 4 ] = xadvance + ta.lineHeight / 6 - xShift + 2 * ta.outline + margin;  // top right
        inputMapping[ i + 5 ] = ta.lineHeight - yShift + margin;
        inputMapping[ i + 6 ] = xadvance + ta.lineHeight / 6 - xShift + 2 * ta.outline + margin;  // bottom right
        inputMapping[ i + 7 ] = 0 - yShift - margin;
        inputTexCoord[ i + 0 ] = 10;
        inputTexCoord[ i + 2 ] = 10;
        inputTexCoord[ i + 4 ] = 10;
        inputTexCoord[ i + 6 ] = 10;
        iCharAll += 1;
      }

      xadvance = 0;

      for (iChar = 0; iChar < nChar; ++iChar, ++iCharAll) {
        c = ta.get(txt[ iChar ]);
        i = iCharAll * 2 * 4;

        inputMapping[ i + 0 ] = xadvance - xShift;  // top left
        inputMapping[ i + 1 ] = c.h - yShift;
        inputMapping[ i + 2 ] = xadvance - xShift;  // bottom left
        inputMapping[ i + 3 ] = 0 - yShift;
        inputMapping[ i + 4 ] = xadvance + c.w - xShift;  // top right
        inputMapping[ i + 5 ] = c.h - yShift;
        inputMapping[ i + 6 ] = xadvance + c.w - xShift;  // bottom right
        inputMapping[ i + 7 ] = 0 - yShift;

        var texWidth = ta.width;
        var texHeight = ta.height;

        var texCoords = [
          c.x / texWidth, c.y / texHeight,             // top left
          c.x / texWidth, (c.y + c.h) / texHeight,       // bottom left
          (c.x + c.w) / texWidth, c.y / texHeight,       // top right
          (c.x + c.w) / texWidth, (c.y + c.h) / texHeight  // bottom right
        ];
        inputTexCoord.set(texCoords, i);

        xadvance += c.w - 2 * ta.outline;
      }
    }

    this.geometry.attributes.inputTexCoord.needsUpdate = true;
    this.geometry.attributes.mapping.needsUpdate = true;
  };

  TextBuffer.prototype.getDefines = function getDefines (type) {
    var defines = QuadBuffer$$1.prototype.getDefines.call(this, type);

    if (this.sdf) {
      defines.SDF = 1;
    }

    return defines
  };

  TextBuffer.prototype.setUniforms = function setUniforms (data) {
    if (data && (
                data.fontFamily !== undefined ||
                data.fontStyle !== undefined ||
                data.fontWeight !== undefined ||
                data.fontSize !== undefined ||
                data.sdf !== undefined
            )
        ) {
      this.makeTexture();
      this.makeMapping();
      this.texture.needsUpdate = true;
      data.fontTexture = this.texture;
    }

    QuadBuffer$$1.prototype.setUniforms.call(this, data);
  };

  prototypeAccessors.wireframe.set = function (value) {};
  prototypeAccessors.wireframe.get = function () { return false };

  prototypeAccessors.isText.get = function () { return true };
  prototypeAccessors.vertexShader.get = function () { return 'SDFFont.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'SDFFont.frag' };

  Object.defineProperties( TextBuffer.prototype, prototypeAccessors );

  return TextBuffer;
}(QuadBuffer));

/**
 * @file Shape
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function addElement (elm, array) {
  if (elm.toArray !== undefined) {
    elm = elm.toArray();
  } else if (elm.x !== undefined) {
    elm = [ elm.x, elm.y, elm.z ];
  } else if (elm.r !== undefined) {
    elm = [ elm.r, elm.g, elm.b ];
  }
  array.push.apply(array, elm);
}

var tmpVec = new Vector3();
var tmpBox = new Box3();

/**
 * Class for building custom shapes.
 *
 * @example
 * var shape = new NGL.Shape( "shape", { disableImpostor: true } );
 * shape.addSphere( [ 0, 0, 9 ], [ 1, 0, 0 ], 1.5 );
 * shape.addEllipsoid( [ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ] );
 * shape.addCylinder( [ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5 );
 * shape.addCone( [ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5 );
 * shape.addArrow( [ 1, 2, 7 ], [ 30, 3, 3 ], [ 1, 0, 1 ], 1.0 );
 * var shapeComp = stage.addComponentFromObject( shape );
 * geoComp.addRepresentation( "buffer" );
 */
var Shape$1 = function Shape$$1 (name, params) {
  this.name = defaults(name, 'shape');

  var p = params || {};

  this.aspectRatio = defaults(p.aspectRatio, 1.5);
  this.sphereDetail = defaults(p.sphereDetail, 2);
  this.radialSegments = defaults(p.radialSegments, 50);
  this.disableImpostor = defaults(p.disableImpostor, false);
  this.openEnded = defaults(p.openEnded, false);
  this.labelParams = defaults(p.labelParams, {});

  this.boundingBox = new Box3();

  this.bufferList = [];
  this.meshCount = 0;

  this.spherePosition = [];
  this.sphereColor = [];
  this.sphereRadius = [];
  this.sphereName = [];

  this.ellipsoidPosition = [];
  this.ellipsoidColor = [];
  this.ellipsoidRadius = [];
  this.ellipsoidMajorAxis = [];
  this.ellipsoidMinorAxis = [];
  this.ellipsoidName = [];

  this.cylinderPosition1 = [];
  this.cylinderPosition2 = [];
  this.cylinderColor = [];
  this.cylinderRadius = [];
  this.cylinderName = [];

  this.conePosition1 = [];
  this.conePosition2 = [];
  this.coneColor = [];
  this.coneRadius = [];
  this.coneName = [];

  this.arrowPosition1 = [];
  this.arrowPosition2 = [];
  this.arrowColor = [];
  this.arrowRadius = [];
  this.arrowName = [];

  this.labelPosition = [];
  this.labelColor = [];
  this.labelSize = [];
  this.labelText = [];
};

var prototypeAccessors$23 = { center: {},type: {} };

  /**
   * Add a buffer
   * @param {Buffer} buffer - buffer object
   * @return {Shape} this object
   */
Shape$1.prototype.addBuffer = function addBuffer (buffer) {
  this.bufferList.push(buffer);

  var geometry = buffer.geometry;
  if (!geometry.boundingBox) {
    geometry.computeBoundingBox();
  }
  this.boundingBox.union(geometry.boundingBox);

  return this
};

  /**
   * Add a mesh
   * @example
   * shape.addMesh(
   *   [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1 ],
   *   [ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 ]
   * );
   *
   * @param {Float32Array|Array} position - positions
   * @param {Float32Array|Array} color - colors
   * @param {Uint32Array|Uint16Array|Array} [index] - indices
   * @param {Float32Array|Array} [normal] - normals
   * @param {String} [name] - text
   * @return {Shape} this object
   */
Shape$1.prototype.addMesh = function addMesh (position, color, index, normal, name) {
  position = ensureFloat32Array(position);
  color = ensureFloat32Array(color);
  if (Array.isArray(index)) {
    index = getUintArray(index, position.length);
  }
  if (normal) {
    normal = ensureFloat32Array(normal);
  }

  var data = { position: position, color: color, index: index, normal: normal };
  var picking = new MeshPicker(
          this, Object.assign({ serial: this.meshCount, name: name }, data)
      );
  var meshBuffer = new MeshBuffer(
          Object.assign({ picking: picking }, data)
      );
  this.bufferList.push(meshBuffer);

  tmpBox.setFromArray(position);
  this.boundingBox.union(tmpBox);
  this.meshCount += 1;

  return this
};

  /**
   * Add a sphere
   * @example
   * shape.addSphere( [ 0, 0, 9 ], [ 1, 0, 0 ], 1.5 );
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
Shape$1.prototype.addSphere = function addSphere (position, color, radius, name) {
  addElement(position, this.spherePosition);
  addElement(color, this.sphereColor);
  this.sphereRadius.push(radius);
  this.sphereName.push(name);

  this.boundingBox.expandByPoint(tmpVec.fromArray(position));

  return this
};

  /**
   * Add an ellipsoid
   * @example
   * shape.addEllipsoid( [ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ] );
   *
   * @param {Vector3|Array} position - position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {Vector3|Array} majorAxis - major axis vector or array
   * @param {Vector3|Array} minorAxis - minor axis vector or array
   * @param {String} [name] - text
   * @return {Shape} this object
   */
Shape$1.prototype.addEllipsoid = function addEllipsoid (position, color, radius, majorAxis, minorAxis, name) {
  addElement(position, this.ellipsoidPosition);
  addElement(color, this.ellipsoidColor);
  this.ellipsoidRadius.push(radius);
  addElement(majorAxis, this.ellipsoidMajorAxis);
  addElement(minorAxis, this.ellipsoidMinorAxis);
  this.ellipsoidName.push(name);

  this.boundingBox.expandByPoint(tmpVec.fromArray(position));

  return this
};

  /**
   * Add a cylinder
   * @example
   * shape.addCylinder( [ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5 );
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
Shape$1.prototype.addCylinder = function addCylinder (position1, position2, color, radius, name) {
  addElement(position1, this.cylinderPosition1);
  addElement(position2, this.cylinderPosition2);
  addElement(color, this.cylinderColor);
  this.cylinderRadius.push(radius);
  this.cylinderName.push(name);

  this.boundingBox.expandByPoint(tmpVec.fromArray(position1));
  this.boundingBox.expandByPoint(tmpVec.fromArray(position2));

  return this
};

  /**
   * Add a cone
   * @example
   * shape.addCone( [ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5 );
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
Shape$1.prototype.addCone = function addCone (position1, position2, color, radius, name) {
  addElement(position1, this.conePosition1);
  addElement(position2, this.conePosition2);
  addElement(color, this.coneColor);
  this.coneRadius.push(radius);
  this.coneName.push(name);

  this.boundingBox.expandByPoint(tmpVec.fromArray(position1));
  this.boundingBox.expandByPoint(tmpVec.fromArray(position2));

  return this
};

  /**
   * Add an arrow
   * @example
   * shape.addArrow( [ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5 );
   *
   * @param {Vector3|Array} position1 - from position vector or array
   * @param {Vector3|Array} position2 - to position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} radius - radius value
   * @param {String} [name] - text
   * @return {Shape} this object
   */
Shape$1.prototype.addArrow = function addArrow (position1, position2, color, radius, name) {
  addElement(position1, this.arrowPosition1);
  addElement(position2, this.arrowPosition2);
  addElement(color, this.arrowColor);
  this.arrowRadius.push(radius);
  this.arrowName.push(name);

  this.boundingBox.expandByPoint(tmpVec.fromArray(position1));
  this.boundingBox.expandByPoint(tmpVec.fromArray(position2));

  return this
};

  /**
   * Add a label
   * @example
   * shape.addLabel( [ 10, -2, 4 ], [ 0.2, 0.5, 0.8 ], 0.5, "Hello" );
   *
   * @param {Vector3|Array} position - from position vector or array
   * @param {Color|Array} color - color object or array
   * @param {Float} size - size value
   * @param {String} text - text value
   * @return {Shape} this object
   */
Shape$1.prototype.addLabel = function addLabel (position, color, size, text) {
  addElement(position, this.labelPosition);
  addElement(color, this.labelColor);
  this.labelSize.push(size);
  this.labelText.push(text);

  this.boundingBox.expandByPoint(tmpVec.fromArray(position));

  return this
};

Shape$1.prototype.getBufferList = function getBufferList () {
  var buffers = [];

  if (this.spherePosition.length) {
    var sphereBuffer = new SphereBuffer(
      {
        position: new Float32Array(this.spherePosition),
        color: new Float32Array(this.sphereColor),
        radius: new Float32Array(this.sphereRadius),
        picking: new SpherePicker(this)
      },
      {
        sphereDetail: this.sphereDetail,
        disableImpostor: this.disableImpostor
      }
          );
    buffers.push(sphereBuffer);
  }

  if (this.ellipsoidPosition.length) {
    var ellipsoidBuffer = new EllipsoidBuffer(
      {
        position: new Float32Array(this.ellipsoidPosition),
        color: new Float32Array(this.ellipsoidColor),
        radius: new Float32Array(this.ellipsoidRadius),
        majorAxis: new Float32Array(this.ellipsoidMajorAxis),
        minorAxis: new Float32Array(this.ellipsoidMinorAxis),
        picking: new EllipsoidPicker(this)
      },
      {
        sphereDetail: this.sphereDetail,
        disableImpostor: this.disableImpostor
      }
          );
    buffers.push(ellipsoidBuffer);
  }

  if (this.cylinderPosition1.length) {
    var cylinderBuffer = new CylinderBuffer(
      {
        position1: new Float32Array(this.cylinderPosition1),
        position2: new Float32Array(this.cylinderPosition2),
        color: new Float32Array(this.cylinderColor),
        color2: new Float32Array(this.cylinderColor),
        radius: new Float32Array(this.cylinderRadius),
        picking: new CylinderPicker(this)
      },
      {
        radialSegments: this.radialSegments,
        disableImpostor: this.disableImpostor,
        openEnded: this.openEnded
      }
          );
    buffers.push(cylinderBuffer);
  }

  if (this.conePosition1.length) {
    var coneBuffer = new ConeBuffer(
      {
        position1: new Float32Array(this.conePosition1),
        position2: new Float32Array(this.conePosition2),
        color: new Float32Array(this.coneColor),
        radius: new Float32Array(this.coneRadius),
        picking: new ConePicker(this)
      },
      {
        radialSegments: this.radialSegments,
        disableImpostor: this.disableImpostor,
        openEnded: this.openEnded
      }
          );
    buffers.push(coneBuffer);
  }

  if (this.arrowPosition1.length) {
    var arrowBuffer = new ArrowBuffer(
      {
        position1: new Float32Array(this.arrowPosition1),
        position2: new Float32Array(this.arrowPosition2),
        color: new Float32Array(this.arrowColor),
        radius: new Float32Array(this.arrowRadius),
        picking: new ArrowPicker(this)
      },
      {
        aspectRatio: this.aspectRatio,
        radialSegments: this.radialSegments,
        disableImpostor: this.disableImpostor,
        openEnded: this.openEnded
      }
          );
    buffers.push(arrowBuffer);
  }

  if (this.labelPosition.length) {
    var labelBuffer = new TextBuffer(
      {
        position: new Float32Array(this.labelPosition),
        color: new Float32Array(this.labelColor),
        size: new Float32Array(this.labelSize),
        text: this.labelText
      },
              this.labelParams
          );
    buffers.push(labelBuffer);
  }

  return this.bufferList.concat(buffers)
};

Shape$1.prototype.dispose = function dispose () {
  this.bufferList.forEach(function (buffer) {
    buffer.dispose();
  });
  this.bufferList.length = 0;

  this.spherePosition.length = 0;
  this.sphereColor.length = 0;
  this.sphereRadius.length = 0;
  this.sphereName.length = 0;

  this.ellipsoidPosition.length = 0;
  this.ellipsoidColor.length = 0;
  this.ellipsoidRadius.length = 0;
  this.ellipsoidMajorAxis.length = 0;
  this.ellipsoidMinorAxis.length = 0;
  this.ellipsoidName.length = 0;

  this.cylinderPosition1.length = 0;
  this.cylinderPosition2.length = 0;
  this.cylinderColor.length = 0;
  this.cylinderRadius.length = 0;
  this.cylinderName.length = 0;

  this.conePosition1.length = 0;
  this.conePosition2.length = 0;
  this.coneColor.length = 0;
  this.coneRadius.length = 0;
  this.coneName.length = 0;

  this.arrowPosition1.length = 0;
  this.arrowPosition2.length = 0;
  this.arrowColor.length = 0;
  this.arrowRadius.length = 0;
  this.arrowName.length = 0;

  this.labelPosition.length = 0;
  this.labelColor.length = 0;
  this.labelSize.length = 0;
  this.labelText.length = 0;
};

prototypeAccessors$23.center.get = function () {
  if (!this._center) {
    this._center = this.boundingBox.getCenter();
  }
  return this._center
};

prototypeAccessors$23.type.get = function () { return 'Shape' };

Object.defineProperties( Shape$1.prototype, prototypeAccessors$23 );

/**
 * @file Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Representation parameter object.
 * @typedef {Object} RepresentationParameters - representation parameters
 * @property {Boolean} [lazy] - only build & update the representation when visible
 *                            otherwise defer changes until set visible again
 * @property {Integer} [clipNear] - position of camera near/front clipping plane
 *                                in percent of scene bounding box
 * @property {Integer} [clipRadius] - radius of clipping sphere
 * @property {Vector3} [clipCenter] - position of for spherical clipping
 * @property {Boolean} [flatShaded] - render flat shaded
 * @property {Float} [opacity] - translucency: 1 is fully opaque, 0 is fully transparent
 * @property {Boolean} [depthWrite] - depth write
 * @property {String} [side] - which triangle sides to render, "front" front-side,
 *                            "back" back-side, "double" front- and back-side
 * @property {Boolean} [wireframe] - render as wireframe
 * @property {Integer} [linewidth] - width of lines (when applicable)
 * @property {String} [colorScheme] - color scheme
 * @property {String} [colorScale] - color scale, either a string for a
 *                                 predefined scale or an array of
 *                                 colors to be used as the scale
 * @property {Boolean} [colorReverse] - reverse color scale
 * @property {Color} [colorValue] - color value
 * @property {Integer[]} [colorDomain] - scale value range
 * @property {Integer} colorDomain.0 - min value
 * @property {Integer} colorDomain.1 - max value
 * @property {String} [colorMode] - color mode, one of rgb, hsv, hsl, hsi, lab, hcl
 * @property {Float} [roughness] - how rough the material is, between 0 and 1
 * @property {Float} [metalness] - how metallic the material is, between 0 and 1
 * @property {Color} [diffuse] - diffuse color for lighting
 * @property {Boolean} [disablePicking] - disable picking
 */

/**
 * Representation object
 * @interface
 * @param {Object} object - the object to be represented
 * @param {Viewer} viewer - a viewer object
 * @param {RepresentationParameters} [params] - representation parameters
 */
var Representation = function Representation (object, viewer, params) {
      // eslint-disable-next-line no-unused-vars
  var p = params || {};

  this.type = '';

  this.parameters = {

    lazy: {
      type: 'boolean'
    },

    clipNear: {
      type: 'range', step: 1, max: 100, min: 0, buffer: true
    },
    clipRadius: {
      type: 'number', precision: 1, max: 1000, min: 0, buffer: true
    },
    clipCenter: {
      type: 'vector3', precision: 1, buffer: true
    },
    flatShaded: {
      type: 'boolean', buffer: true
    },
    opacity: {
      type: 'range', step: 0.01, max: 1, min: 0, buffer: true
    },
    depthWrite: {
      type: 'boolean', buffer: true
    },
    side: {
      type: 'select',
      buffer: true,
      options: { front: 'front', back: 'back', double: 'double' }
    },
    wireframe: {
      type: 'boolean', buffer: true
    },
    linewidth: {
      type: 'integer', max: 50, min: 1, buffer: true
    },

    colorScheme: {
      type: 'select',
      update: 'color',
      options: {}
    },
    colorScale: {
      type: 'select',
      update: 'color',
      options: ColormakerRegistry.getScales()
    },
    colorReverse: {
      type: 'boolean', update: 'color'
    },
    colorValue: {
      type: 'color', update: 'color'
    },
    colorDomain: {
      type: 'hidden', update: 'color'
    },
    colorMode: {
      type: 'select',
      update: 'color',
      options: ColormakerRegistry.getModes()
    },

    roughness: {
      type: 'range', step: 0.01, max: 1, min: 0, buffer: true
    },
    metalness: {
      type: 'range', step: 0.01, max: 1, min: 0, buffer: true
    },
    diffuse: {
      type: 'color', buffer: true
    },

    matrix: {
      type: 'hidden', buffer: true
    },

    disablePicking: {
      type: 'boolean', rebuild: true
    }

  };

      /**
       * @member {Viewer}
       */
  this.viewer = viewer;

      /**
       * Counter that keeps track of tasks related to the creation of
       * the representation, including surface calculations.
       * @member {Counter}
       */
  this.tasks = new Counter();

      /**
       * @member {Queue}
       * @private
       */
  this.queue = new Queue(this.make.bind(this));

      /**
       * @member {Array}
       * @private
       */
  this.bufferList = [];

  if (this.parameters.colorScheme) {
    this.parameters.colorScheme.options = ColormakerRegistry.getSchemes();
  }
};

Representation.prototype.init = function init (params) {
  var p = params || {};

  this.clipNear = defaults(p.clipNear, 0);
  this.clipRadius = defaults(p.clipRadius, 0);
  this.clipCenter = defaults(p.clipCenter, new Vector3());
  this.flatShaded = defaults(p.flatShaded, false);
  this.side = defaults(p.side, 'double');
  this.opacity = defaults(p.opacity, 1.0);
  this.depthWrite = defaults(p.depthWrite, true);
  this.wireframe = defaults(p.wireframe, false);
  this.linewidth = defaults(p.linewidth, 2);

  this.setColor(p.color, p);

  this.colorScheme = defaults(p.colorScheme, 'uniform');
  this.colorScale = defaults(p.colorScale, '');
  this.colorReverse = defaults(p.colorReverse, false);
  this.colorValue = defaults(p.colorValue, 0x909090);
  this.colorDomain = defaults(p.colorDomain, undefined);
  this.colorMode = defaults(p.colorMode, 'hcl');

  this.visible = defaults(p.visible, true);
  this.quality = defaults(p.quality, undefined);

  this.roughness = defaults(p.roughness, 0.4);
  this.metalness = defaults(p.metalness, 0.0);
  this.diffuse = defaults(p.diffuse, 0xffffff);

  this.lazy = defaults(p.lazy, false);
  this.lazyProps = {
    build: false,
    bufferParams: {},
    what: {}
  };

  this.matrix = defaults(p.matrix, new Matrix4());

  this.disablePicking = defaults(p.disablePicking, false);

      // handle common parameters when applicable

  var tp = this.parameters;

  if (tp.sphereDetail === true) {
    tp.sphereDetail = {
      type: 'integer', max: 3, min: 0, rebuild: 'impostor'
    };
  }
  if (tp.radialSegments === true) {
    tp.radialSegments = {
      type: 'integer', max: 25, min: 5, rebuild: 'impostor'
    };
  }
  if (tp.openEnded === true) {
    tp.openEnded = {
      type: 'boolean', rebuild: 'impostor', buffer: true
    };
  }
  if (tp.disableImpostor === true) {
    tp.disableImpostor = {
      type: 'boolean', rebuild: true
    };
  }

  if (p.quality === 'low') {
    if (tp.sphereDetail) { this.sphereDetail = 0; }
    if (tp.radialSegments) { this.radialSegments = 5; }
  } else if (p.quality === 'medium') {
    if (tp.sphereDetail) { this.sphereDetail = 1; }
    if (tp.radialSegments) { this.radialSegments = 10; }
  } else if (p.quality === 'high') {
    if (tp.sphereDetail) { this.sphereDetail = 2; }
    if (tp.radialSegments) { this.radialSegments = 20; }
  } else {
    if (tp.sphereDetail) {
      this.sphereDetail = defaults(p.sphereDetail, 1);
    }
    if (tp.radialSegments) {
      this.radialSegments = defaults(p.radialSegments, 10);
    }
  }

  if (tp.openEnded) {
    this.openEnded = defaults(p.openEnded, true);
  }

  if (tp.disableImpostor) {
    this.disableImpostor = defaults(p.disableImpostor, false);
  }
};

Representation.prototype.getColorParams = function getColorParams (p) {
  return Object.assign({

    scheme: this.colorScheme,
    scale: this.colorScale,
    reverse: this.colorReverse,
    value: this.colorValue,
    domain: this.colorDomain,
    mode: this.colorMode

  }, p)
};

Representation.prototype.getBufferParams = function getBufferParams (p) {
  return Object.assign({

    clipNear: this.clipNear,
    clipRadius: this.clipRadius,
    clipCenter: this.clipCenter,
    flatShaded: this.flatShaded,
    opacity: this.opacity,
    depthWrite: this.depthWrite,
    side: this.side,
    wireframe: this.wireframe,
    linewidth: this.linewidth,

    roughness: this.roughness,
    metalness: this.metalness,
    diffuse: this.diffuse,

    matrix: this.matrix,

    disablePicking: this.disablePicking

  }, p)
};

Representation.prototype.setColor = function setColor (value, p) {
  var types = Object.keys(ColormakerRegistry.getSchemes());

  if (types.includes(value)) {
    if (p) {
      p.colorScheme = value;
    } else {
      this.setParameters({ colorScheme: value });
    }
  } else if (value !== undefined) {
    value = new Color(value).getHex();
    if (p) {
      p.colorScheme = 'uniform';
      p.colorValue = value;
    } else {
      this.setParameters({
        colorScheme: 'uniform', colorValue: value
      });
    }
  }

  return this
};

  // TODO
  // get prepare(){ return false; }

Representation.prototype.create = function create () {

      // this.bufferList.length = 0;

};

Representation.prototype.update = function update () {
  this.build();
};

Representation.prototype.build = function build (updateWhat) {
  if (this.lazy && !this.visible) {
    this.lazyProps.build = true;
    return
  }

  if (!this.prepare) {
    this.tasks.increment();
    this.make();
    return
  }

      // don't let tasks accumulate
  if (this.queue.length() > 0) {
    this.tasks.change(1 - this.queue.length());
    this.queue.kill();
  } else {
    this.tasks.increment();
  }

  this.queue.push(updateWhat || false);
};

Representation.prototype.make = function make (updateWhat, callback) {
  if (Debug) { Log.time('Representation.make ' + this.type); }

  var _make = function () {
    if (updateWhat) {
      this.update(updateWhat);
      this.viewer.requestRender();
      this.tasks.decrement();
      if (callback) { callback(); }
    } else {
      this.clear();
      this.create();
      if (!this.manualAttach && !this.disposed) {
        if (Debug) { Log.time('Representation.attach ' + this.type); }
        this.attach(function () {
          if (Debug) { Log.timeEnd('Representation.attach ' + this.type); }
          this.tasks.decrement();
          if (callback) { callback(); }
        }.bind(this));
      }
    }

    if (Debug) { Log.timeEnd('Representation.make ' + this.type); }
  }.bind(this);

  if (this.prepare) {
    this.prepare(_make);
  } else {
    _make();
  }
};

Representation.prototype.attach = function attach (callback) {
  this.setVisibility(this.visible);

  callback();
};

  /**
   * Set the visibility of the representation
   * @param {Boolean} value - visibility flag
   * @param {Boolean} [noRenderRequest] - whether or not to request a re-render from the viewer
   * @return {Representation} this object
   */
Representation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
  this.visible = value;

  if (this.visible) {
    var lazyProps = this.lazyProps;
    var bufferParams = lazyProps.bufferParams;
    var what = lazyProps.what;

    if (lazyProps.build) {
      lazyProps.build = false;
      this.build();
      return
    } else if (Object.keys(bufferParams).length || Object.keys(what).length) {
      lazyProps.bufferParams = {};
      lazyProps.what = {};
      this.updateParameters(bufferParams, what);
    }
  }

  this.bufferList.forEach(function (buffer) {
    buffer.setVisibility(value);
  });

  if (!noRenderRequest) { this.viewer.requestRender(); }

  return this
};

  /**
   * Set the visibility of the representation
   * @param {RepresentationParameters} params - parameters object
   * @param {Object} [what] - buffer data attributes to be updated,
   *                      note that this needs to be implemented in the
   *                      derived classes. Generally it allows more
   *                      fine-grained control over updating than
   *                      forcing a rebuild.
   * @param {Boolean} what.position - update position data
   * @param {Boolean} what.color - update color data
   * @param {Boolean} [rebuild] - whether or not to rebuild the representation
   * @return {Representation} this object
   */
Representation.prototype.setParameters = function setParameters (params, what, rebuild) {
    var this$1 = this;

  var p = params || {};
  var tp = this.parameters;

  what = what || {};
  rebuild = rebuild || false;

  var bufferParams = {};

  for (var name in p) {
    if (p[ name ] === undefined) { continue }
    if (tp[ name ] === undefined) { continue }

    if (tp[ name ].int) { p[ name ] = parseInt(p[ name ]); }
    if (tp[ name ].float) { p[ name ] = parseFloat(p[ name ]); }

          // no value change
    if (p[ name ] === this$1[ name ] && (
                  !p[ name ].equals || p[ name ].equals(this$1[ name ])
              )
          ) { continue }

    if (this$1[ name ].set) {
      this$1[ name ].set(p[ name ]);
    } else {
      this$1[ name ] = p[ name ];
    }

          // buffer param
    if (tp[ name ].buffer) {
      if (tp[ name ].buffer === true) {
        bufferParams[ name ] = p[ name ];
      } else {
        bufferParams[ tp[ name ].buffer ] = p[ name ];
      }
    }

          // mark for update
    if (tp[ name ].update) {
      what[ tp[ name ].update ] = true;
    }

          // mark for rebuild
    if (tp[ name ].rebuild &&
              !(tp[ name ].rebuild === 'impostor' &&
                  ExtensionFragDepth && !this$1.disableImpostor)
          ) {
      rebuild = true;
    }
  }

      //

  if (rebuild) {
    this.build();
  } else {
    this.updateParameters(bufferParams, what);
  }

  return this
};

Representation.prototype.updateParameters = function updateParameters (bufferParams, what) {
  if (this.lazy && !this.visible) {
    Object.assign(this.lazyProps.bufferParams, bufferParams);
    Object.assign(this.lazyProps.what, what);
    return
  }

  this.bufferList.forEach(function (buffer) {
    buffer.setParameters(bufferParams);
  });

  if (Object.keys(what).length) {
    this.update(what);// update buffer attribute
  }

  this.viewer.requestRender();
};

Representation.prototype.getParameters = function getParameters () {
    var this$1 = this;

  var params = {
    lazy: this.lazy,
    visible: this.visible,
    quality: this.quality
  };

  Object.keys(this.parameters).forEach(function (name) {
    if (this$1.parameters[ name ] !== null) {
      params[ name ] = this$1[ name ];
    }
  });

  return params
};

Representation.prototype.clear = function clear () {
    var this$1 = this;

  this.bufferList.forEach(function (buffer) {
    this$1.viewer.remove(buffer);
    buffer.dispose();
  });
  this.bufferList.length = 0;

  this.viewer.requestRender();
};

Representation.prototype.dispose = function dispose () {
  this.disposed = true;
  this.queue.kill();
  this.tasks.dispose();
  this.clear();
};

/**
 * @file Buffer Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Representation for showing buffer objects. Good for efficiently showing
 * large amounts of geometric primitives e.g. spheres via {@link SphereBuffer}.
 * Smaller numbers of geometric primitives are more easily shown with help
 * from the {@link Shape} class.
 *
 * __Name:__ _buffer_
 *
 * @example
 * // add a single red sphere from a buffer to a shape instance
 * var shape = new NGL.Shape( "shape" );
 * var sphereBuffer = new NGL.SphereBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 * shape.addBuffer( sphereBuffer );
 * var shapeComp = stage.addComponentFromObject( shape );
 * shapeComp.addRepresentation( "buffer" );
 *
 * @example
 * // add a single red sphere from a buffer to a structure component instance
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     var sphereBuffer = new NGL.SphereBuffer( {
 *         position: new Float32Array( [ 0, 0, 0 ] ),
 *         color: new Float32Array( [ 1, 0, 0 ] ),
 *         radius: new Float32Array( [ 1 ] )
 *     } );
 *     o.addBufferRepresentation( sphereBuffer, { opacity: 0.5 } );
 * } );
 */
var BufferRepresentation = (function (Representation$$1) {
  function BufferRepresentation (buffer, viewer, params) {
    if (!Array.isArray(buffer)) {
      buffer = [ buffer ];
    }

    Representation$$1.call(this, buffer, viewer, params);

    this.type = 'buffer';

    this.parameters = Object.assign({

    }, this.parameters, {

      colorScheme: null,
      colorScale: null,
      colorValue: null,
      colorDomain: null,
      colorMode: null

    });

    this.buffer = buffer;

    this.init(params);
  }

  if ( Representation$$1 ) BufferRepresentation.__proto__ = Representation$$1;
  BufferRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
  BufferRepresentation.prototype.constructor = BufferRepresentation;

  BufferRepresentation.prototype.init = function init (params) {
    Representation$$1.prototype.init.call(this, params);

    this.build();
  };

  BufferRepresentation.prototype.create = function create () {
    this.bufferList.push.apply(this.bufferList, this.buffer);
  };

  BufferRepresentation.prototype.attach = function attach (callback) {
    var this$1 = this;

    this.bufferList.forEach(function (buffer) {
      this$1.viewer.add(buffer);
      buffer.setParameters(this$1.getBufferParams());
    });
    this.setVisibility(this.visible);

    callback();
  };

  return BufferRepresentation;
}(Representation));

/**
 * @file Surface Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Surface buffer. Like a {@link MeshBuffer}, but with `.isSurface` set to `true`.
 */
var SurfaceBuffer = (function (MeshBuffer$$1) {
  function SurfaceBuffer () {
    MeshBuffer$$1.apply(this, arguments);
  }

  if ( MeshBuffer$$1 ) SurfaceBuffer.__proto__ = MeshBuffer$$1;
  SurfaceBuffer.prototype = Object.create( MeshBuffer$$1 && MeshBuffer$$1.prototype );
  SurfaceBuffer.prototype.constructor = SurfaceBuffer;

  var prototypeAccessors = { isSurface: {} };

  prototypeAccessors.isSurface.get = function () { return true };

  Object.defineProperties( SurfaceBuffer.prototype, prototypeAccessors );

  return SurfaceBuffer;
}(MeshBuffer));

/**
 * @file Double Sided Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function setVisibilityTrue (m) { m.visible = true; }
function setVisibilityFalse (m) { m.visible = false; }

/**
 * A double-sided mesh buffer. Takes a buffer and renders the front and
 * the back as seperate objects to avoid some artifacts when rendering
 * transparent meshes. Also allows to render the back of a mesh opaque
 * while the front is transparent.
 * @implements {Buffer}
 *
 * @example
 * var sphereGeometryBuffer = new SphereGeometryBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     radius: new Float32Array( [ 1 ] )
 * } );
 * var doubleSidedBuffer = new DoubleSidedBuffer( sphereGeometryBuffer );
 */
var DoubleSidedBuffer = function DoubleSidedBuffer (buffer) {
  this.size = buffer.size;
  this.side = buffer.side;
  this.wireframe = buffer.wireframe;
  this.visible = buffer.visible;
  this.geometry = buffer.geometry;
  this.picking = buffer.picking;
  this.background = buffer.background;
  this.disablePicking = buffer.disablePicking;

  this.group = new Group();
  this.wireframeGroup = new Group();
  this.pickingGroup = new Group();

      // requires Group objects to be present
  this.matrix = buffer.matrix;

  this.frontMeshes = [];
  this.backMeshes = [];

  var frontBuffer = buffer;
  var backBuffer = new buffer.constructor();

  frontBuffer.makeMaterial();
  backBuffer.makeMaterial();

  backBuffer.picking = buffer.picking;
  backBuffer.geometry = buffer.geometry;
  backBuffer.wireframeGeometry = buffer.wireframeGeometry;
  backBuffer.setParameters(buffer.getParameters());
  backBuffer.updateShader();

  frontBuffer.setParameters({
    side: 'front'
  });
  backBuffer.setParameters({
    side: 'back',
    opacity: backBuffer.opacity
  });

  this.buffer = buffer;
  this.frontBuffer = frontBuffer;
  this.backBuffer = backBuffer;
};

var prototypeAccessors$26 = { matrix: {},pickable: {} };

prototypeAccessors$26.matrix.set = function (m) {
  Buffer.prototype.setMatrix.call(this, m);
};
prototypeAccessors$26.matrix.get = function () {
  return this.group.matrix.clone()
};

prototypeAccessors$26.pickable.get = function () {
  return !!this.picking && !this.disablePicking
};

DoubleSidedBuffer.prototype.getMesh = function getMesh (picking) {
  var front, back;

  if (picking) {
    back = this.backBuffer.getPickingMesh();
    front = this.frontBuffer.getPickingMesh();
  } else {
    back = this.backBuffer.getMesh();
    front = this.frontBuffer.getMesh();
  }

  this.frontMeshes.push(front);
  this.backMeshes.push(back);

  this.setParameters({ side: this.side });

  return new Group().add(back, front)
};

DoubleSidedBuffer.prototype.getWireframeMesh = function getWireframeMesh () {
  return this.buffer.getWireframeMesh()
};

DoubleSidedBuffer.prototype.getPickingMesh = function getPickingMesh () {
  return this.getMesh(true)
};

DoubleSidedBuffer.prototype.setAttributes = function setAttributes (data) {
  this.buffer.setAttributes(data);
};

DoubleSidedBuffer.prototype.setParameters = function setParameters (data) {
  data = Object.assign({}, data);

  if (data.side === 'front') {
    this.frontMeshes.forEach(setVisibilityTrue);
    this.backMeshes.forEach(setVisibilityFalse);
  } else if (data.side === 'back') {
    this.frontMeshes.forEach(setVisibilityFalse);
    this.backMeshes.forEach(setVisibilityTrue);
  } else if (data.side === 'double') {
    this.frontMeshes.forEach(setVisibilityTrue);
    this.backMeshes.forEach(setVisibilityTrue);
  }

  if (data.matrix !== undefined) {
    this.matrix = data.matrix;
  }
  delete data.matrix;

  if (data.side !== undefined) {
    this.side = data.side;
  }
  delete data.side;

  this.frontBuffer.setParameters(data);

  if (data.wireframe !== undefined) {
    this.wireframe = data.wireframe;
    this.setVisibility(this.visible);
  }
  delete data.wireframe;

  this.backBuffer.setParameters(data);
};

DoubleSidedBuffer.prototype.dispose = function dispose () {
  this.frontBuffer.dispose();
  this.backBuffer.dispose();
};

Object.defineProperties( DoubleSidedBuffer.prototype, prototypeAccessors$26 );

DoubleSidedBuffer.prototype.setVisibility = Buffer.prototype.setVisibility;

ShaderRegistry.add('shader/Line.vert', "uniform float nearClip;\nuniform vec3 clipCenter;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#include color_pars_vertex\nvoid main(){\n#include color_vertex\n#include begin_vertex\n#include project_vertex\nvViewPosition = -mvPosition.xyz;\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

ShaderRegistry.add('shader/Line.frag', "uniform float opacity;\nuniform float nearClip;\nuniform float clipRadius;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\ngl_FragColor = vec4( vColor, opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n}");

/**
 * @file Contour Buffer
 * @author Fred ludlow <fred.ludlow@gmail.com>
 * @private
 */

/**
 * Contour buffer. A buffer that draws lines (instead of triangle meshes).
 */
var ContourBuffer = (function (Buffer$$1) {
  function ContourBuffer () {
    Buffer$$1.apply(this, arguments);
  }

  if ( Buffer$$1 ) ContourBuffer.__proto__ = Buffer$$1;
  ContourBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
  ContourBuffer.prototype.constructor = ContourBuffer;

  var prototypeAccessors = { isLine: {},vertexShader: {},fragmentShader: {} };

  prototypeAccessors.isLine.get = function () { return true };
  prototypeAccessors.vertexShader.get = function () { return 'Line.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'Line.frag' };

  Object.defineProperties( ContourBuffer.prototype, prototypeAccessors );

  return ContourBuffer;
}(Buffer));

/**
 * @file Surface Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Surface representation parameter object. Extends {@link RepresentationParameters}
 *
 * @typedef {Object} SurfaceRepresentationParameters - surface representation parameters
 *
 * @property {String} isolevelType - Meaning of the isolevel value. Either *value* for the literal value or *sigma* as a factor of the sigma of the data. For volume data only.
 * @property {Float} isolevel - The value at which to create the isosurface. For volume data only.
 * @property {Integer} smooth - How many iterations of laplacian smoothing after surface triangulation. For volume data only.
 * @property {Boolean} background - Render the surface in the background, unlit.
 * @property {Boolean} opaqueBack - Render the back-faces (where normals point away from the camera) of the surface opaque, ignoring the transparency parameter.
 * @property {Integer} boxSize - Size of the box to triangulate volume data in. Set to zero to triangulate the whole volume. For volume data only.
 * @property {Boolean} useWorker - Weather or not to triangulate the volume asynchronously in a Web Worker. For volume data only.
 * @property {Boolean} wrap - Wrap volume data around the edges; use in conjuction with boxSize but not larger than the volume dimension. For volume data only.
 */

/**
 * Surface representation
 */
var SurfaceRepresentation = (function (Representation$$1) {
  function SurfaceRepresentation (surface, viewer, params) {
    Representation$$1.call(this, surface, viewer, params);

    this.type = 'surface';

    this.parameters = Object.assign({

      isolevelType: {
        type: 'select',
        options: {
          'value': 'value', 'sigma': 'sigma'
        }
      },
      isolevel: {
        type: 'number', precision: 2, max: 1000, min: -1000
      },
      negateIsolevel: {
        type: 'boolean'
      },
      smooth: {
        type: 'integer', precision: 1, max: 10, min: 0
      },
      background: {
        type: 'boolean', rebuild: true  // FIXME
      },
      opaqueBack: {
        type: 'boolean', buffer: true
      },
      boxSize: {
        type: 'integer', precision: 1, max: 100, min: 0
      },
      colorVolume: {
        type: 'hidden'
      },
      contour: {
        type: 'boolean', rebuild: true
      },
      useWorker: {
        type: 'boolean', rebuild: true
      },
      wrap: {
        type: 'boolean', rebuild: true
      }

    }, this.parameters);

    if (surface instanceof Volume) {
      this.surface = undefined;
      this.volume = surface;
    } else {
      this.surface = surface;
      this.volume = undefined;
    }

    this.boxCenter = new Vector3();
    this.__boxCenter = new Vector3();
    this.box = new Box3();
    this.__box = new Box3();

    this._position = new Vector3();
    this.setBox = function setBox () {
      this._position.copy(viewer.translationGroup.position).negate();
      if (!this._position.equals(this.boxCenter)) {
        this.setParameters({ 'boxCenter': this._position });
      }
    };

    this.viewer.signals.ticked.add(this.setBox, this);

    this.init(params);
  }

  if ( Representation$$1 ) SurfaceRepresentation.__proto__ = Representation$$1;
  SurfaceRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
  SurfaceRepresentation.prototype.constructor = SurfaceRepresentation;

  SurfaceRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'uniform');
    p.colorValue = defaults(p.colorValue, 0xDDDDDD);

    this.isolevelType = defaults(p.isolevelType, 'sigma');
    this.isolevel = defaults(p.isolevel, 2.0);
    this.negateIsolevel = defaults(p.negateIsolevel, false);
    this.smooth = defaults(p.smooth, 0);
    this.background = defaults(p.background, false);
    this.opaqueBack = defaults(p.opaqueBack, true);
    this.boxSize = defaults(p.boxSize, 0);
    this.colorVolume = defaults(p.colorVolume, undefined);
    this.contour = defaults(p.contour, false);
    this.useWorker = defaults(p.useWorker, true);
    this.wrap = defaults(p.wrap, false);

    Representation$$1.prototype.init.call(this, p);

    this.build();
  };

  SurfaceRepresentation.prototype.attach = function attach (callback) {
    var this$1 = this;

    this.bufferList.forEach(function (buffer) {
      this$1.viewer.add(buffer);
    });

    this.setVisibility(this.visible);

    callback();
  };

  SurfaceRepresentation.prototype.prepare = function prepare (callback) {
    var this$1 = this;

    if (this.volume) {
      var isolevel;

      if (this.isolevelType === 'sigma') {
        isolevel = this.volume.getValueForSigma(this.isolevel);
      } else {
        isolevel = this.isolevel;
      }
      if (this.negateIsolevel) { isolevel *= -1; }

      if (!this.surface ||
        this.__isolevel !== isolevel ||
        this.__smooth !== this.smooth ||
        this.__contour !== this.contour ||
        this.__wrap !== this.wrap ||
        this.__boxSize !== this.boxSize ||
        (this.boxSize > 0 &&
            !this.__boxCenter.equals(this.boxCenter))
      ) {
        this.__isolevel = isolevel;
        this.__smooth = this.smooth;
        this.__contour = this.contour;
        this.__wrap = this.wrap;
        this.__boxSize = this.boxSize;
        this.__boxCenter.copy(this.boxCenter);
        this.__box.copy(this.box);

        var onSurfaceFinish = function (surface) {
          this$1.surface = surface;
          callback();
        };

        if (this.useWorker) {
          this.volume.getSurfaceWorker(
            isolevel, this.smooth, this.boxCenter, this.boxSize,
            this.contour, this.wrap, onSurfaceFinish
          );
        } else {
          onSurfaceFinish(
            this.volume.getSurface(
              isolevel, this.smooth, this.boxCenter, this.boxSize,
              this.contour, this.wrap
            )
          );
        }
      } else {
        callback();
      }
    } else {
      callback();
    }
  };

  SurfaceRepresentation.prototype.create = function create () {
    var sd = {
      position: this.surface.getPosition(),
      color: this.surface.getColor(this.getColorParams()),
      index: this.surface.getIndex()
    };

    var buffer;

    if (this.contour) {
      buffer = new ContourBuffer(
        sd,
        this.getBufferParams({ wireframe: false })
      );
    } else {
      sd.normal = this.surface.getNormal();
      sd.picking = this.surface.getPicking();

      var surfaceBuffer = new SurfaceBuffer(
        sd,
        this.getBufferParams({
          background: this.background,
          opaqueBack: this.opaqueBack,
          dullInterior: false
        })
      );

      buffer = new DoubleSidedBuffer(surfaceBuffer);
    }

    this.bufferList.push(buffer);
  };

  SurfaceRepresentation.prototype.update = function update (what) {
    if (this.bufferList.length === 0) { return }

    what = what || {};

    var surfaceData = {};

    if (what.position) {
      surfaceData.position = this.surface.getPosition();
    }

    if (what.color) {
      surfaceData.color = this.surface.getColor(
        this.getColorParams()
      );
    }

    if (what.index) {
      surfaceData.index = this.surface.getIndex();
    }

    if (what.normal) {
      surfaceData.normal = this.surface.getNormal();
    }

    this.bufferList.forEach(function (buffer) {
      buffer.setAttributes(surfaceData);
    });
  };

    /**
     * Set representation parameters
     * @alias SurfaceRepresentation#setParameters
     * @param {SurfaceRepresentationParameters} params - surface parameter object
     * @param {Object} [what] - buffer data attributes to be updated,
     *                        note that this needs to be implemented in the
     *                        derived classes. Generally it allows more
     *                        fine-grained control over updating than
     *                        forcing a rebuild.
     * @param {Boolean} what.position - update position data
     * @param {Boolean} what.color - update color data
     * @param {Boolean} [rebuild] - whether or not to rebuild the representation
     * @return {SurfaceRepresentation} this object
     */
  SurfaceRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
    if (params && params.isolevelType !== undefined &&
      this.volume
    ) {
      if (this.isolevelType === 'value' &&
        params.isolevelType === 'sigma'
      ) {
        this.isolevel = this.volume.getSigmaForValue(this.isolevel);
      } else if (this.isolevelType === 'sigma' &&
        params.isolevelType === 'value'
      ) {
        this.isolevel = this.volume.getValueForSigma(this.isolevel);
      }

      this.isolevelType = params.isolevelType;
    }

    if (params && params.boxCenter) {
      this.boxCenter.copy(params.boxCenter);
      delete params.boxCenter;
    }

        // Forbid wireframe && contour as in molsurface
    if (params && params.wireframe && (
      params.contour || (params.contour === undefined && this.contour)
    )) {
      params.wireframe = false;
    }

    Representation$$1.prototype.setParameters.call(this, params, what, rebuild);

    if (this.volume) {
      this.volume.getBox(this.boxCenter, this.boxSize, this.box);
    }

    if (params && params.colorVolume !== undefined) {
      what.color = true;
    }

    if (this.surface && (
      params.isolevel !== undefined ||
      params.negateIsolevel !== undefined ||
      params.smooth !== undefined ||
      params.wrap !== undefined ||
      params.boxSize !== undefined ||
      (this.boxSize > 0 &&
        !this.__box.equals(this.box))
    )) {
      this.build({
        'position': true,
        'color': true,
        'index': true,
        'normal': !this.contour
      });
    }

    return this
  };

  SurfaceRepresentation.prototype.getColorParams = function getColorParams () {
    var p = Representation$$1.prototype.getColorParams.call(this);

    p.volume = this.colorVolume;

    return p
  };

  SurfaceRepresentation.prototype.dispose = function dispose () {
    this.viewer.signals.ticked.remove(this.setBox, this);

    Representation$$1.prototype.dispose.call(this);
  };

  return SurfaceRepresentation;
}(Representation));

ShaderRegistry.add('shader/Point.vert', "uniform float nearClip;\nuniform float clipRadius;\nuniform vec3 clipCenter;\nuniform float size;\nuniform float canvasHeight;\nuniform float pixelRatio;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#endif\n#include common\nvoid main(){\n#if defined( PICKING )\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#endif\n#include begin_vertex\n#include project_vertex\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * pixelRatio * ( ( canvasHeight / 2.0 ) / -mvPosition.z );\n#else\ngl_PointSize = size * pixelRatio;\n#endif\nvViewPosition = -mvPosition.xyz;\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n#include radiusclip_vertex\n}");

ShaderRegistry.add('shader/Point.frag', "uniform vec3 diffuse;\nuniform float opacity;\nuniform float nearClip;\nuniform float clipRadius;\nvarying vec3 vViewPosition;\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif\n#if defined( PICKING )\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( PICKING )\n#ifdef USE_MAP\nif( texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) ).a < 0.5 )\ndiscard;\n#endif\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 outgoingLight = vec3( 0.0 );\nvec4 diffuseColor = vec4( diffuse, 1.0 );\n#ifdef USE_MAP\ndiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif\n#include color_fragment\n#include alphatest_fragment\noutgoingLight = diffuseColor.rgb;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a * opacity );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Point Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function distance (x0, y0, x1, y1) {
  var dx = x1 - x0;
  var dy = y1 - y0;
  return Math.sqrt(dx * dx + dy * dy)
}

function makePointTexture (params) {
  var p = params || {};

  var width = defaults(p.width, 256);
  var height = defaults(p.height, 256);
  var center = [ width / 2, height / 2 ];
  var radius = Math.min(width / 2, height / 2);
  var delta = defaults(p.delta, 1 / (radius + 1)) * radius;

  var x = 0;
  var y = 0;
  var data = new Uint8Array(width * height * 4);

  for (var i = 0, il = data.length; i < il; i += 4) {
    var dist = distance(x, y, center[ 0 ], center[ 1 ]);
    var value = 1 - smoothstep(radius - delta, radius, dist);

    data[ i ] = value * 255;
    data[ i + 1 ] = value * 255;
    data[ i + 2 ] = value * 255;
    data[ i + 3 ] = value * 255;

    if (++x === width) {
      x = 0;
      y++;
    }
  }

  var tex = new DataTexture(data, width, height);
  tex.needsUpdate = true;

  return tex
}

/**
 * Point buffer. Draws points. Optionally textured.
 *
 * @example
 * var pointBuffer = new PointBuffer( {
 *     position: new Float32Array( [ 0, 0, 0 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] )
 * } );
 */
var PointBuffer = (function (Buffer$$1) {
  function PointBuffer (data, params) {
    var d = data || {};
    var p = params || {};

    if (!d.primitiveId) {
      d.primitiveId = serialArray(d.position.length / 3);
    }

    Buffer$$1.call(this, d, p);

    this.pointSize = defaults(p.pointSize, 1);
    this.sizeAttenuation = defaults(p.sizeAttenuation, true);
    this.sortParticles = defaults(p.sortParticles, false);
    this.alphaTest = defaults(p.alphaTest, 0.5);
    this.useTexture = defaults(p.useTexture, false);
    this.forceTransparent = defaults(p.forceTransparent, false);
    this.edgeBleach = defaults(p.edgeBleach, 0.0);

    this.addUniforms({
      'size': { value: this.pointSize },
      'canvasHeight': { value: 1.0 },
      'pixelRatio': { value: 1.0 },
      'map': { value: null }
    });
  }

  if ( Buffer$$1 ) PointBuffer.__proto__ = Buffer$$1;
  PointBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
  PointBuffer.prototype.constructor = PointBuffer;

  var prototypeAccessors = { parameters: {},isPoint: {},vertexShader: {},fragmentShader: {} };

  prototypeAccessors.parameters.get = function () {
    return Object.assign.call(this, {

      pointSize: { uniform: 'size' },
      sizeAttenuation: { updateShader: true },
      sortParticles: {},
      alphaTest: { updateShader: true },
      useTexture: { updateShader: true },
      forceTransparent: {},
      edgeBleach: { uniform: true }

    }, Buffer$$1.prototype.parameters)
  };

  PointBuffer.prototype.makeMaterial = function makeMaterial () {
    Buffer$$1.prototype.makeMaterial.call(this);

    this.makeTexture();

    var m = this.material;
    var wm = this.wireframeMaterial;
    var pm = this.pickingMaterial;

    m.uniforms.map.value = this.tex;
    m.needsUpdate = true;

    wm.uniforms.map.value = this.tex;
    wm.needsUpdate = true;

    pm.uniforms.map.value = this.tex;
    pm.needsUpdate = true;
  };

  PointBuffer.prototype.makeTexture = function makeTexture () {
    if (this.tex) { this.tex.dispose(); }
    this.tex = makePointTexture({ delta: this.edgeBleach });
  };

  PointBuffer.prototype.getDefines = function getDefines (type) {
    var defines = Buffer$$1.prototype.getDefines.call(this, type);

    if (this.sizeAttenuation) {
      defines.USE_SIZEATTENUATION = 1;
    }

    if (this.useTexture) {
      defines.USE_MAP = 1;
    }

    if (this.alphaTest > 0 && this.alphaTest <= 1) {
      defines.ALPHATEST = this.alphaTest.toPrecision(2);
    }

    return defines
  };

  PointBuffer.prototype.setUniforms = function setUniforms (data) {
    if (data && data.edgeBleach !== undefined) {
      this.makeTexture();
      data.map = this.tex;
    }

    Buffer$$1.prototype.setUniforms.call(this, data);
  };

  PointBuffer.prototype.dispose = function dispose () {
    Buffer$$1.prototype.dispose.call(this);

    if (this.tex) { this.tex.dispose(); }
  };

  prototypeAccessors.isPoint.get = function () { return true };
  prototypeAccessors.vertexShader.get = function () { return 'Point.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'Point.frag' };

  Object.defineProperties( PointBuffer.prototype, prototypeAccessors );

  return PointBuffer;
}(Buffer));

/**
 * @file Dot Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Dot representation parameter object. Extends {@link RepresentationParameters}
 *
 * @typedef {Object} DotRepresentationParameters - dot representation parameters
 *
 * @property {String} thresholdType - Meaning of the threshold values. Either *value* for the literal value or *sigma* as a factor of the sigma of the data. For volume data only.
 * @property {Number} thresholdMin - Minimum value to be displayed. For volume data only.
 * @property {Number} thresholdMax - Maximum value to be displayed. For volume data only.
 * @property {Number} thresholdOut - Show only values falling outside of the treshold minumum and maximum. For volume data only.
 */

/**
 * Dot representation
 */
var DotRepresentation = (function (Representation$$1) {
  function DotRepresentation (surface, viewer, params) {
    Representation$$1.call(this, surface, viewer, params);

    this.type = 'dot';

    this.parameters = Object.assign({

      thresholdType: {
        type: 'select',
        rebuild: true,
        options: {
          'value': 'value', 'sigma': 'sigma'
        }
      },
      thresholdMin: {
        type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
      },
      thresholdMax: {
        type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
      },
      thresholdOut: {
        type: 'boolean', rebuild: true
      },
      dotType: {
        type: 'select',
        rebuild: true,
        options: {
          '': '',
          'sphere': 'sphere',
          'point': 'point'
        }
      },
      radiusType: {
        type: 'select',
        options: {
          '': '',
          'value': 'value',
          'abs-value': 'abs-value',
          'value-min': 'value-min',
          'deviation': 'deviation',
          'size': 'size'
        }
      },
      radius: {
        type: 'number', precision: 3, max: 10.0, min: 0.001, property: 'size'
      },
      scale: {
        type: 'number', precision: 3, max: 10.0, min: 0.001
      },
      sphereDetail: true,
      disableImpostor: true,

      pointSize: {
        type: 'number', precision: 1, max: 100, min: 0, buffer: true
      },
      sizeAttenuation: {
        type: 'boolean', buffer: true
      },
      sortParticles: {
        type: 'boolean', rebuild: true
      },
      useTexture: {
        type: 'boolean', buffer: true
      },
      alphaTest: {
        type: 'range', step: 0.001, max: 1, min: 0, buffer: true
      },
      forceTransparent: {
        type: 'boolean', buffer: true
      },
      edgeBleach: {
        type: 'range', step: 0.001, max: 1, min: 0, buffer: true
      }

    }, this.parameters, {

      colorScheme: {
        type: 'select',
        update: 'color',
        options: {
          '': '',
          'value': 'value',
          'uniform': 'uniform',
          'random': 'random'
        }
      }

    });

    if (surface instanceof Volume) {
      this.surface = undefined;
      this.volume = new FilteredVolume(surface);
    } else {
      this.surface = surface;
      this.volume = undefined;
    }

    this.init(params);
  }

  if ( Representation$$1 ) DotRepresentation.__proto__ = Representation$$1;
  DotRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
  DotRepresentation.prototype.constructor = DotRepresentation;

  DotRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'uniform');
    p.colorValue = defaults(p.colorValue, 0xDDDDDD);

    this.thresholdType = defaults(p.thresholdType, 'sigma');
    this.thresholdMin = defaults(p.thresholdMin, 2.0);
    this.thresholdMax = defaults(p.thresholdMax, Infinity);
    this.thresholdOut = defaults(p.thresholdOut, false);
    this.dotType = defaults(p.dotType, 'point');
    this.radius = defaults(p.radius, 0.1);
    this.scale = defaults(p.scale, 1.0);

    this.pointSize = defaults(p.pointSize, 1);
    this.sizeAttenuation = defaults(p.sizeAttenuation, true);
    this.sortParticles = defaults(p.sortParticles, false);
    this.useTexture = defaults(p.useTexture, false);
    this.alphaTest = defaults(p.alphaTest, 0.5);
    this.forceTransparent = defaults(p.forceTransparent, false);
    this.edgeBleach = defaults(p.edgeBleach, 0.0);

    Representation$$1.prototype.init.call(this, p);

    this.build();
  };

  DotRepresentation.prototype.attach = function attach (callback) {
    var this$1 = this;

    this.bufferList.forEach(function (buffer) {
      this$1.viewer.add(buffer);
    });
    this.setVisibility(this.visible);

    callback();
  };

  DotRepresentation.prototype.create = function create () {
    var dotData = {};

    if (this.volume) {
      var volume = this.volume;
      var thresholdMin, thresholdMax;

      if (this.thresholdType === 'sigma') {
        thresholdMin = volume.getValueForSigma(this.thresholdMin);
        thresholdMax = volume.getValueForSigma(this.thresholdMax);
      } else {
        thresholdMin = this.thresholdMin;
        thresholdMax = this.thresholdMax;
      }
      volume.setFilter(thresholdMin, thresholdMax, this.thresholdOut);

      dotData.position = volume.getDataPosition();
      dotData.color = volume.getDataColor(this.getColorParams());
      if (this.dotType === 'sphere') {
        dotData.radius = volume.getDataSize(this.radius, this.scale);
        dotData.picking = volume.getDataPicking();
      }
    } else {
      var surface = this.surface;
      dotData.position = surface.getPosition();
      dotData.color = surface.getColor(this.getColorParams());
      if (this.dotType === 'sphere') {
        dotData.radius = surface.getSize(this.radius, this.scale);
        dotData.picking = surface.getPicking();
      }
    }

    if (this.dotType === 'sphere') {
      this.dotBuffer = new SphereBuffer(
                dotData,
                this.getBufferParams({
                  sphereDetail: this.sphereDetail,
                  disableImpostor: this.disableImpostor,
                  dullInterior: false
                })
            );
    } else {
      this.dotBuffer = new PointBuffer(
                dotData,
                this.getBufferParams({
                  pointSize: this.pointSize,
                  sizeAttenuation: this.sizeAttenuation,
                  sortParticles: this.sortParticles,
                  useTexture: this.useTexture,
                  alphaTest: this.alphaTest,
                  forceTransparent: this.forceTransparent,
                  edgeBleach: this.edgeBleach
                })
            );
    }

    this.bufferList.push(this.dotBuffer);
  };

  DotRepresentation.prototype.update = function update (what) {
    if (this.bufferList.length === 0) { return }

    what = what || {};

    var dotData = {};

    if (what.color) {
      if (this.volume) {
        dotData.color = this.volume.getDataColor(
                    this.getColorParams()
                );
      } else {
        dotData.color = this.surface.getColor(
                    this.getColorParams()
                );
      }
    }

    if (this.dotType === 'sphere' && (what.radius || what.scale)) {
      if (this.volume) {
        dotData.radius = this.volume.getDataSize(
                    this.radius, this.scale
                );
      } else {
        dotData.radius = this.surface.getSize(
                    this.radius, this.scale
                );
      }
    }

    this.dotBuffer.setAttributes(dotData);
  };

  DotRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
    what = what || {};

    if (params && params.thresholdType !== undefined &&
            this.volume instanceof Volume
        ) {
      if (this.thresholdType === 'value' &&
                params.thresholdType === 'sigma'
            ) {
        this.thresholdMin = this.volume.getSigmaForValue(
                    this.thresholdMin
                );
        this.thresholdMax = this.volume.getSigmaForValue(
                    this.thresholdMax
                );
      } else if (this.thresholdType === 'sigma' &&
                params.thresholdType === 'value'
            ) {
        this.thresholdMin = this.volume.getValueForSigma(
                    this.thresholdMin
                );
        this.thresholdMax = this.volume.getValueForSigma(
                    this.thresholdMax
                );
      }

      this.thresholdType = params.thresholdType;
    }

    if (params && params.radiusType !== undefined) {
      if (params.radiusType === 'radius') {
        this.radius = 0.1;
      } else {
        this.radius = params.radiusType;
      }
      what.radius = true;
      if (this.dotType === 'sphere' &&
                (!ExtensionFragDepth || this.disableImpostor)
            ) {
        rebuild = true;
      }
    }

    if (params && params.radius !== undefined) {
      what.radius = true;
      if (this.dotType === 'sphere' &&
                (!ExtensionFragDepth || this.disableImpostor)
            ) {
        rebuild = true;
      }
    }

    if (params && params.scale !== undefined) {
      what.scale = true;
      if (this.dotType === 'sphere' &&
                (!ExtensionFragDepth || this.disableImpostor)
            ) {
        rebuild = true;
      }
    }

    Representation$$1.prototype.setParameters.call(this, params, what, rebuild);

    return this
  };

  return DotRepresentation;
}(Representation));

ShaderRegistry.add('shader/Image.vert', "uniform float clipRadius;\nuniform vec3 clipCenter;\nvarying vec2 vUv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nvoid main() {\n#include begin_vertex\n#include project_vertex\nvUv = uv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n}");

ShaderRegistry.add('shader/Image.frag', "uniform sampler2D map;\nuniform float opacity;\nuniform vec2 mapSize;\nuniform float nearClip;\nuniform float clipRadius;\nvarying vec2 vUv;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\n#if defined( PICKING )\nuniform sampler2D pickingMap;\nuniform float objectId;\n#else\n#include fog_pars_fragment\n#endif\n#if defined( CUBIC_INTERPOLATION )\n#if defined( CATMULROM_FILTER ) || defined( MITCHELL_FILTER )\n#if defined( CATMULROM_FILTER )\nconst float B = 0.0;\nconst float C = 0.5;\n#elif defined( MITCHELL_FILTER )\nconst float B = 0.333;\nconst float C = 0.333;\n#endif\nfloat filter( float x ){\nfloat f = x;\nif( f < 0.0 ){\nf = -f;\n}\nif( f < 1.0 ){\nreturn ( ( 12.0 - 9.0 * B - 6.0 * C ) * ( f * f * f ) +\n( -18.0 + 12.0 * B + 6.0 *C ) * ( f * f ) +\n( 6.0 - 2.0 * B ) ) / 6.0;\n}else if( f >= 1.0 && f < 2.0 ){\nreturn ( ( -B - 6.0 * C ) * ( f * f * f )\n+ ( 6.0 * B + 30.0 * C ) * ( f *f ) +\n( - ( 12.0 * B ) - 48.0 * C ) * f +\n8.0 * B + 24.0 * C ) / 6.0;\n}else{\nreturn 0.0;\n}\n}\n#elif defined( BSPLINE_FILTER )\nfloat filter( float x ){\nfloat f = x;\nif( f < 0.0 ){\nf = -f;\n}\nif( f >= 0.0 && f <= 1.0 ){\nreturn ( 2.0 / 3.0 ) + ( 0.5 ) * ( f * f * f ) - ( f * f );\n}else if( f > 1.0 && f <= 2.0 ){\nreturn 1.0 / 6.0 * pow( ( 2.0 - f ), 3.0 );\n}\nreturn 1.0;\n}\n#else\nfloat filter( float x ){\nreturn 1.0;\n}\n#endif\nvec4 biCubic( sampler2D tex, vec2 texCoord ){\nvec2 texelSize = 1.0 / mapSize;\ntexCoord -= texelSize / 2.0;\nvec4 nSum = vec4( 0.0 );\nfloat nDenom = 0.0;\nvec2 cell = fract( texCoord * mapSize );\nfor( float m = -1.0; m <= 2.0; ++m ){\nfor( float n = -1.0; n <= 2.0; ++n ){\nvec4 vecData = texture2D(\ntex, texCoord + texelSize * vec2( m, n )\n);\nfloat c = filter( m - cell.x ) * filter( -n + cell.y );\nnSum += vecData * c;\nnDenom += c;\n}\n}\nreturn nSum / nDenom;\n}\n#endif\nvoid main(){\n#include nearclip_fragment\n#include radiusclip_fragment\n#if defined( CUBIC_INTERPOLATION )\ngl_FragColor = biCubic( map, vUv );\n#else\ngl_FragColor = texture2D( map, vUv );\n#endif\n#if defined( PICKING )\nif( gl_FragColor.a < 0.7 )\ndiscard;\ngl_FragColor = vec4( texture2D( pickingMap, vUv ).xyz, objectId );\n#else\nif( gl_FragColor.a < 0.01 )\ndiscard;\ngl_FragColor.a *= opacity;\n#include fog_fragment\n#endif\n}");

/**
 * @file Image Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var quadIndices = new Uint16Array([
  0, 1, 2,
  1, 3, 2
]);

var quadUvs = new Float32Array([
  0, 1,
  0, 0,
  1, 1,
  1, 0
]);

/**
 * Image buffer. Draw a single image. Optionally interpolate.
 */
var ImageBuffer = (function (Buffer$$1) {
  function ImageBuffer (data, params) {
    var d = data || {};
    var p = params || {};

    Buffer$$1.call(this, {
      position: d.position,
      index: quadIndices,
      picking: d.picking
    }, p);

    this.forceTransparent = true;
    this.filter = defaults(p.filter, 'nearest');

    var tex = new DataTexture(d.imageData, d.width, d.height);
    tex.flipY = true;
    this.tex = tex;

    var n = d.imageData.length;
    var pickingData = new Uint8Array(n);
    for (var i = 0; i < n; i += 4) {
      var j = i / 4;
      pickingData[ i ] = j >> 16 & 255;
      pickingData[ i + 1 ] = j >> 8 & 255;
      pickingData[ i + 2 ] = j & 255;
    }

    var pickingTex = new DataTexture(pickingData, d.width, d.height);
    pickingTex.flipY = true;
    pickingTex.minFilter = NearestFilter;
    pickingTex.magFilter = NearestFilter;
    this.pickingTex = pickingTex;

    this.addUniforms({
      'map': { value: tex },
      'pickingMap': { value: pickingTex },
      'mapSize': { value: new Vector2(d.width, d.height) }
    });

    this.geometry.addAttribute('uv', new BufferAttribute(quadUvs, 2));
  }

  if ( Buffer$$1 ) ImageBuffer.__proto__ = Buffer$$1;
  ImageBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
  ImageBuffer.prototype.constructor = ImageBuffer;

  var prototypeAccessors = { parameters: {},vertexShader: {},fragmentShader: {} };

  prototypeAccessors.parameters.get = function () {
    return Object.assign.call(this, {

      filter: { updateShader: true, uniform: true }

    }, Buffer$$1.prototype.parameters)
  };

  ImageBuffer.prototype.getDefines = function getDefines (type) {
    var defines = Buffer$$1.prototype.getDefines.call(this, type);

    if (this.filter.startsWith('cubic')) {
      defines.CUBIC_INTERPOLATION = 1;
      if (this.filter.endsWith('bspline')) {
        defines.BSPLINE_FILTER = 1;
      } else if (this.filter.endsWith('catmulrom')) {
        defines.CATMULROM_FILTER = 1;
      } else if (this.filter.endsWith('mitchell')) {
        defines.MITCHELL_FILTER = 1;
      }
    }

    return defines
  };

  ImageBuffer.prototype.updateTexture = function updateTexture () {
    var tex = this.tex;

    if (this.filter.startsWith('cubic')) {
      tex.minFilter = NearestFilter;
      tex.magFilter = NearestFilter;
    } else if (this.filter === 'linear') {
      tex.minFilter = LinearFilter;
      tex.magFilter = LinearFilter;
    } else {  // this.filter === "nearest"
      tex.minFilter = NearestFilter;
      tex.magFilter = NearestFilter;
    }

    tex.needsUpdate = true;
    this.pickingTex.needsUpdate = true;
  };

  ImageBuffer.prototype.makeMaterial = function makeMaterial () {
    Buffer$$1.prototype.makeMaterial.call(this);
    this.updateTexture();

    var m = this.material;
    m.uniforms.map.value = this.tex;
    m.blending = NormalBlending;
    m.needsUpdate = true;

    var wm = this.wireframeMaterial;
    wm.uniforms.map.value = this.tex;
    wm.blending = NormalBlending;
    wm.needsUpdate = true;

    var pm = this.pickingMaterial;
    pm.uniforms.map.value = this.tex;
    pm.uniforms.pickingMap.value = this.pickingTex;
    pm.blending = NormalBlending;
    pm.needsUpdate = true;
  };

  ImageBuffer.prototype.setUniforms = function setUniforms (data) {
    if (data && data.filter !== undefined) {
      this.updateTexture();
      data.map = this.tex;
    }

    Buffer$$1.prototype.setUniforms.call(this, data);
  };

  prototypeAccessors.vertexShader.get = function () { return 'Image.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'Image.frag' };

  Object.defineProperties( ImageBuffer.prototype, prototypeAccessors );

  return ImageBuffer;
}(Buffer));

/**
 * @file Volume Slice
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var VolumeSlice = function VolumeSlice (volume, params) {
  var p = params || {};

  this.dimension = defaults(p.dimension, 'x');
  this.positionType = defaults(p.positionType, 'percent');
  this.position = defaults(p.position, 30);
  this.thresholdType = defaults(p.thresholdType, 'sigma');
  this.thresholdMin = defaults(p.thresholdMin, -Infinity);
  this.thresholdMax = defaults(p.thresholdMax, Infinity);
  this.normalize = defaults(p.normalize, false);

  this.volume = volume;
};

VolumeSlice.prototype.getPositionFromCoordinate = function getPositionFromCoordinate (coord) {
  var dim = this.dimension;
  var v = this.volume;
  var m = v.matrix;

  var mp = new Vector3().setFromMatrixPosition(m)[ dim ];
  var ms = new Vector3().setFromMatrixScale(m)[ dim ];

  var vn;
  if (dim === 'x') {
    vn = v.nx;
  } else if (dim === 'y') {
    vn = v.ny;
  } else {
    vn = v.nz;
  }

  return Math.round((((coord - mp) / (vn / 100)) + 1) / ms)
};

VolumeSlice.prototype.getData = function getData (params) {
    var this$1 = this;

  params = params || {};

  var v = this.volume;
  var d = v.data;
  var m = v.matrix;

  var p;
  if (this.positionType === 'coordinate') {
    p = this.getPositionFromCoordinate(this.position);
  } else {
    p = this.position;
  }

  function pos (dimLen) {
    return Math.round((dimLen / 100) * (p - 1))
  }

  function index (x, y, z, i) {
    return (z * v.ny * v.nx + y * v.nx + x) * 3 + i
  }

  var position = new Float32Array(4 * 3);
  var vec = new Vector3();

  var width, height;
  var x;
  var y;
  var z;
  var x0 = 0;
  var y0 = 0;
  var z0 = 0;
  var nx = v.nx;
  var ny = v.ny;
  var nz = v.nz;

  function setVec (x, y, z, offset) {
    vec.set(x, y, z).applyMatrix4(m).toArray(position, offset);
  }

  if (this.dimension === 'x') {
    x = pos(v.nx);
    y = v.ny - 1;
    z = v.nz - 1;

    width = v.nz;
    height = v.ny;

    x0 = x;
    nx = x0 + 1;

    setVec(x, 0, 0, 0);
    setVec(x, y, 0, 3);
    setVec(x, 0, z, 6);
    setVec(x, y, z, 9);
  } else if (this.dimension === 'y') {
    x = v.nx - 1;
    y = pos(v.ny);
    z = v.nz - 1;

    width = v.nz;
    height = v.nx;

    y0 = y;
    ny = y0 + 1;

    setVec(0, y, 0, 0);
    setVec(x, y, 0, 3);
    setVec(0, y, z, 6);
    setVec(x, y, z, 9);
  } else if (this.dimension === 'z') {
    x = v.nx - 1;
    y = v.ny - 1;
    z = pos(v.nz);

    width = v.nx;
    height = v.ny;

    z0 = z;
    nz = z0 + 1;

    setVec(0, 0, z, 0);
    setVec(0, y, z, 3);
    setVec(x, 0, z, 6);
    setVec(x, y, z, 9);
  }

  var i = 0;
  var j = 0;
  var imageData = new Uint8Array(width * height * 4);
  var pickingArray = new Float32Array(width * height);

  var tMin, tMax;
  if (this.thresholdType === 'sigma') {
    tMin = v.getValueForSigma(this.thresholdMin);
    tMax = v.getValueForSigma(this.thresholdMax);
  } else {
    tMin = this.thresholdMin;
    tMax = this.thresholdMax;
  }

  var cp = Object.assign({}, params.colorParams, { volume: v });
  if (this.normalize) {
    cp.domain = [ 0, 1 ];
  }
  var colormaker = ColormakerRegistry.getScheme(cp);
  var tmp = new Float32Array(3);
  var scale = colormaker.getScale();

  var min, max, diff;
  if (this.normalize) {
    min = +Infinity;
    max = -Infinity;
    for (var iy = y0; iy < ny; ++iy) {
      for (var ix = x0; ix < nx; ++ix) {
        for (var iz = z0; iz < nz; ++iz) {
          var idx = index(ix, iy, iz, 0) / 3;
          var val = d[ idx ];
          if (val < min) { min = val; }
          if (val > max) { max = val; }
        }
      }
    }
    diff = max - min;
  }

  for (var iy$1 = y0; iy$1 < ny; ++iy$1) {
    for (var ix$1 = x0; ix$1 < nx; ++ix$1) {
      for (var iz$1 = z0; iz$1 < nz; ++iz$1) {
        var idx$1 = index(ix$1, iy$1, iz$1, 0) / 3;
        var val$1 = d[ idx$1 ];
        if (this$1.normalize) {
          val$1 = (val$1 - min) / diff;
        }

        colormaker.colorToArray(scale(val$1), tmp);
        imageData[ i ] = Math.round(tmp[ 0 ] * 255);
        imageData[ i + 1 ] = Math.round(tmp[ 1 ] * 255);
        imageData[ i + 2 ] = Math.round(tmp[ 2 ] * 255);
        imageData[ i + 3 ] = (val$1 > tMin && val$1 < tMax) ? 255 : 0;

        pickingArray[ j ] = idx$1;

        ++j;
        i += 4;
      }
    }
  }

  var picking = new SlicePicker(pickingArray, v);

  return { position: position, imageData: imageData, width: width, height: height, picking: picking }
};

/**
 * @file Slice Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Slice representation parameter object. Extends {@link RepresentationParameters}
 *
 * @typedef {Object} SliceRepresentationParameters - slice representation parameters
 *
 * @property {String} filter - filter applied to map the volume data on the slice, one of "nearest", "linear", "cubic-bspline", "cubic-catmulrom", "cubic-mitchell".
 * @property {String} positionType - Meaning of the position value. Either "persent" od "coordinate".
 * @property {Number} position - position of the slice.
 * @property {String} dimension - one of "x", "y" or "z"
 * @property {String} thresholdType - Meaning of the threshold values. Either *value* for the literal value or *sigma* as a factor of the sigma of the data. For volume data only.
 * @property {Number} thresholdMin - Minimum value to be displayed. For volume data only.
 * @property {Number} thresholdMax - Maximum value to be displayed. For volume data only.
 * @property {Boolean} normalize - Flag indicating wheather to normalize the data in a slice when coloring.
 */

/**
 * Slice representation
 */
var SliceRepresentation = (function (Representation$$1) {
  function SliceRepresentation (volume, viewer, params) {
    Representation$$1.call(this, volume, viewer, params);

    this.type = 'slice';

    this.parameters = Object.assign({

      filter: {
        type: 'select',
        buffer: true,
        options: {
          'nearest': 'nearest',
          'linear': 'linear',
          'cubic-bspline': 'cubic-bspline',
          'cubic-catmulrom': 'cubic-catmulrom',
          'cubic-mitchell': 'cubic-mitchell'
        }
      },
      positionType: {
        type: 'select',
        rebuild: true,
        options: {
          'percent': 'percent', 'coordinate': 'coordinate'
        }
      },
      position: {
        type: 'range',
        step: 0.1,
        max: 100,
        min: 1,
        rebuild: true
      },
      dimension: {
        type: 'select',
        rebuild: true,
        options: {
          'x': 'x', 'y': 'y', 'z': 'z'
        }
      },
      thresholdType: {
        type: 'select',
        rebuild: true,
        options: {
          'value': 'value', 'sigma': 'sigma'
        }
      },
      thresholdMin: {
        type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
      },
      thresholdMax: {
        type: 'number', precision: 3, max: Infinity, min: -Infinity, rebuild: true
      },
      normalize: {
        type: 'boolean', rebuild: true
      }

    }, this.parameters, {

      flatShaded: null,
      side: null,
      wireframe: null,
      linewidth: null,
      colorScheme: null,

      roughness: null,
      metalness: null,
      diffuse: null

    });

    this.volume = volume;

    this.init(params);
  }

  if ( Representation$$1 ) SliceRepresentation.__proto__ = Representation$$1;
  SliceRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
  SliceRepresentation.prototype.constructor = SliceRepresentation;

  SliceRepresentation.prototype.init = function init (params) {
    var v = this.volume;
    var p = params || {};
    p.colorDomain = defaults(p.colorDomain, [ v.min, v.max ]);
    p.colorScheme = defaults(p.colorScheme, 'value');
    p.colorScale = defaults(p.colorScale, 'Spectral');

    this.colorScheme = 'value';
    this.dimension = defaults(p.dimension, 'x');
    this.filter = defaults(p.filter, 'cubic-bspline');
    this.positionType = defaults(p.positionType, 'percent');
    this.position = defaults(p.position, 30);
    this.thresholdType = defaults(p.thresholdType, 'sigma');
    this.thresholdMin = defaults(p.thresholdMin, -Infinity);
    this.thresholdMax = defaults(p.thresholdMax, Infinity);
    this.normalize = defaults(p.normalize, false);

    Representation$$1.prototype.init.call(this, p);

    this.build();
  };

  SliceRepresentation.prototype.attach = function attach (callback) {
    var this$1 = this;

    this.bufferList.forEach(function (buffer) {
      this$1.viewer.add(buffer);
    });
    this.setVisibility(this.visible);

    callback();
  };

  SliceRepresentation.prototype.create = function create () {
    var volumeSlice = new VolumeSlice(this.volume, {
      positionType: this.positionType,
      position: this.position,
      dimension: this.dimension,
      thresholdType: this.thresholdType,
      thresholdMin: this.thresholdMin,
      thresholdMax: this.thresholdMax,
      normalize: this.normalize
    });

    var sliceBuffer = new ImageBuffer(
            volumeSlice.getData({ colorParams: this.getColorParams() }),
            this.getBufferParams({
              filter: this.filter
            })
        );

    this.bufferList.push(sliceBuffer);
  };

  return SliceRepresentation;
}(Representation));

/**
 * @file Structure Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Structure representation parameter object.
 * @typedef {Object} StructureRepresentationParameters - structure representation parameters
 * @mixes RepresentationParameters
 *
 * @property {String} radiusType - A list of possible sources of the radius used for rendering the representation. The radius can be based on the *vdW radius*, the *covalent radius* or the *B-factor* value of the corresponding atom. Additionally the radius can be based on the *secondary structure*. Alternatively, when set to *size*, the value from the *radius* parameter is used for all atoms.
 * @property {Float} radius - A number providing a fixed radius used for rendering the representation.
 * @property {Float} scale - A number that scales the value defined by the *radius* or the *radiusType* parameter.
 * @property {String} assembly - name of an assembly object. Included are the asymmetric unit (*AU*) corresponding to the coordinates given in the structure file, biological assemblies from *PDB*, *mmCIF* or *MMTF* files (*BU1*, *BU2*, ...), a filled (crystallographic) unitcell of a given space group (*UNITCELL*), a supercell consisting of a center unitcell and its 26 direct neighbors (*SUPERCELL*). Set to *default* to use the default asemmbly of the structure object.
 */

/**
 * Structure representation
 * @interface
 */
var StructureRepresentation = (function (Representation$$1) {
  function StructureRepresentation (structure, viewer, params) {
    var p = params || {};

    Representation$$1.call(this, structure, viewer, p);

    this.type = 'structure';

    this.parameters = Object.assign({

      radiusType: {
        type: 'select', options: RadiusFactory.types
      },
      radius: {
        type: 'number', precision: 3, max: 10.0, min: 0.001
      },
      scale: {
        type: 'number', precision: 3, max: 10.0, min: 0.001
      },
      assembly: null,
      defaultAssembly: {
        type: 'hidden'
      }

    }, this.parameters);

        /**
         * @member {Selection}
         * @private
         */
    this.selection = new Selection(p.sele);

        /**
         * @member {Array}
         * @private
         */
    this.dataList = [];

        /**
         * @member {Structure}
         */
    this.structure = structure;

        /**
         * @member {StructureView}
         */
    this.structureView = this.structure.getView(this.selection);

    if (structure.biomolDict) {
      var biomolOptions = {
        'default': 'default',
        '': (structure.unitcell ? 'AU' : 'FULL')
      };
      Object.keys(structure.biomolDict).forEach(function (k) {
        biomolOptions[ k ] = k;
      });
      this.parameters.assembly = {
        type: 'select',
        options: biomolOptions,
        rebuild: true
      };
    } else {
      this.parameters.assembly = null;
    }
  }

  if ( Representation$$1 ) StructureRepresentation.__proto__ = Representation$$1;
  StructureRepresentation.prototype = Object.create( Representation$$1 && Representation$$1.prototype );
  StructureRepresentation.prototype.constructor = StructureRepresentation;

  var prototypeAccessors = { defaultScale: {} };

  prototypeAccessors.defaultScale.get = function () {
    return {
      'vdw': 1.0,
      'covalent': 1.0,
      'bfactor': 0.01,
      'sstruc': 1.0
    }
  };

  StructureRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'element');

    this.radius = defaults(p.radius, 'vdw');
    this.scale = defaults(p.scale, 1.0);
    this.assembly = defaults(p.assembly, 'default');
    this.defaultAssembly = defaults(p.defaultAssembly, '');

    if (p.quality === 'auto') {
      p.quality = this.getQuality();
    }

    Representation$$1.prototype.init.call(this, p);

    this.selection.signals.stringChanged.add(function (/* sele */) {
      this.build();
    }, this);

    this.build();
  };

  StructureRepresentation.prototype.getAssembly = function getAssembly () {
    var name = this.assembly === 'default' ? this.defaultAssembly : this.assembly;
    return this.structure.biomolDict[ name ]
  };

  StructureRepresentation.prototype.getQuality = function getQuality () {
    var atomCount;
    var s = this.structureView;
    var assembly = this.getAssembly();
    if (assembly) {
      atomCount = assembly.getAtomCount(s);
    } else {
      atomCount = s.atomCount;
    }
    if (Mobile) {
      atomCount *= 4;
    }
    var backboneOnly = s.atomStore.count / s.residueStore.count < 2;
    if (backboneOnly) {
      atomCount *= 10;
    }

    if (atomCount < 15000) {
      return 'high'
    } else if (atomCount < 80000) {
      return 'medium'
    } else {
      return 'low'
    }
  };

  StructureRepresentation.prototype.create = function create () {
    if (this.structureView.atomCount === 0) { return }

    var assembly = this.getAssembly();

    if (assembly) {
      assembly.partList.forEach(function (part, i) {
        var sview = part.getView(this.structureView);
        if (sview.atomCount === 0) { return }
        var data = this.createData(sview, i);
        if (data) {
          data.sview = sview;
          data.instanceList = part.getInstanceList();
          this.dataList.push(data);
        }
      }, this);
    } else {
      var data = this.createData(this.structureView, 0);
      if (data) {
        data.sview = this.structureView;
        this.dataList.push(data);
      }
    }
  };

  StructureRepresentation.prototype.createData = function createData (/* sview */) {
    console.error('createData not implemented');
  };

  StructureRepresentation.prototype.update = function update (what) {
    if (this.lazy && !this.visible) {
      Object.assign(this.lazyProps.what, what);
      return
    }

    this.dataList.forEach(function (data) {
      if (data.bufferList.length > 0) {
        this.updateData(what, data);
      }
    }, this);
  };

  StructureRepresentation.prototype.updateData = function updateData (/* what, data */) {
    this.build();
  };

  StructureRepresentation.prototype.getColorParams = function getColorParams () {
    var p = Representation$$1.prototype.getColorParams.call(this);
    p.structure = this.structure;

    return p
  };

  StructureRepresentation.prototype.getAtomParams = function getAtomParams (what, params) {
    return Object.assign({
      what: what,
      colorParams: this.getColorParams(),
      radiusParams: { 'radius': this.radius, 'scale': this.scale }
    }, params)
  };

  StructureRepresentation.prototype.getBondParams = function getBondParams (what, params) {
    return Object.assign({
      what: what,
      colorParams: this.getColorParams(),
      radiusParams: { 'radius': this.radius, 'scale': this.scale }
    }, params)
  };

    /**
     * Set representation parameters
     * @alias StructureRepresentation#setSelection
     * @param {String} string - selection string, see {@tutorial selection-language}
     * @param {Boolean} [silent] - don't trigger a change event in the selection
     * @return {StructureRepresentation} this object
     */
  StructureRepresentation.prototype.setSelection = function setSelection (string, silent) {
    this.selection.setString(string, silent);

    return this
  };

    /**
     * Set representation parameters
     * @alias StructureRepresentation#setParameters
     * @param {StructureRepresentationParameters} params - structure parameter object
     * @param {Object} [what] - buffer data attributes to be updated,
     *                        note that this needs to be implemented in the
     *                        derived classes. Generally it allows more
     *                        fine-grained control over updating than
     *                        forcing a rebuild.
     * @param {Boolean} what.position - update position data
     * @param {Boolean} what.color - update color data
     * @param {Boolean} [rebuild] - whether or not to rebuild the representation
     * @return {StructureRepresentation} this object
     */
  StructureRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
    what = what || {};

    if (params && params.radiusType !== undefined) {
      if (params.radiusType === 'size') {
        this.radius = 1.0;
      } else {
        this.radius = params.radiusType;
      }
      delete params.radiusType;
      what.radius = true;
      if (!ExtensionFragDepth || this.disableImpostor) {
        rebuild = true;
      }
    }

    if (params && params.radius !== undefined) {
      what.radius = true;
      if (!ExtensionFragDepth || this.disableImpostor) {
        rebuild = true;
      }
    }

    if (params && params.scale !== undefined) {
      what.radius = true;
      if (!ExtensionFragDepth || this.disableImpostor) {
        rebuild = true;
      }
    }

    if (params && params.defaultAssembly !== undefined) {
      rebuild = true;
    }

    Representation$$1.prototype.setParameters.call(this, params, what, rebuild);

    return this
  };

  StructureRepresentation.prototype.getParameters = function getParameters () {
    var params = Object.assign(
            Representation$$1.prototype.getParameters.call(this),
      {
        sele: this.selection ? this.selection.string : undefined,
        defaultAssembly: this.defaultAssembly
      }
        );

    return params
  };

  StructureRepresentation.prototype.attach = function attach (callback) {
    var viewer = this.viewer;
    var bufferList = this.bufferList;

    this.dataList.forEach(function (data) {
      data.bufferList.forEach(function (buffer) {
        bufferList.push(buffer);
        viewer.add(buffer, data.instanceList);
      });
    });

    this.setVisibility(this.visible);
    callback();
  };

  StructureRepresentation.prototype.clear = function clear () {
    this.dataList.length = 0;

    Representation$$1.prototype.clear.call(this);
  };

  StructureRepresentation.prototype.dispose = function dispose () {
    this.structureView.dispose();

    delete this.structure;
    delete this.structureView;

    Representation$$1.prototype.dispose.call(this);
  };

  Object.defineProperties( StructureRepresentation.prototype, prototypeAccessors );

  return StructureRepresentation;
}(Representation));

/**
 * @file Line Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Line buffer. Draws lines with a fixed width in pixels.
 *
 * @example
 * var lineBuffer = new LineBuffer( {
 *     position1: new Float32Array( [ 0, 0, 0 ] ),
 *     position2: new Float32Array( [ 1, 1, 1 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     color2: new Float32Array( [ 0, 1, 0 ] )
 * } );
 */
var LineBuffer = (function (Buffer$$1) {
  function LineBuffer (data, params) {
    var size = data.position1.length / 3;
    var attrSize = size * 4;

    Buffer$$1.call(this, {
      position: new Float32Array(attrSize * 3),
      color: new Float32Array(attrSize * 3)
    }, params);

    this.setAttributes(data);
  }

  if ( Buffer$$1 ) LineBuffer.__proto__ = Buffer$$1;
  LineBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
  LineBuffer.prototype.constructor = LineBuffer;

  var prototypeAccessors = { isLine: {},vertexShader: {},fragmentShader: {} };

  LineBuffer.prototype.setAttributes = function setAttributes (data) {
    var position1, position2, color, color2;
    var aPosition, aColor;

    var attributes = this.geometry.attributes;

    if (data.position1 && data.position2) {
      position1 = data.position1;
      position2 = data.position2;
      aPosition = attributes.position.array;
      attributes.position.needsUpdate = true;
    }

    if (data.color && data.color2) {
      color = data.color;
      color2 = data.color2;
      aColor = attributes.color.array;
      attributes.color.needsUpdate = true;
    }

    var n = this.size;

    var i, j;
    var x, y, z, x1, y1, z1, x2, y2, z2;

    for (var v = 0; v < n; v++) {
      j = v * 3;
      i = v * 4 * 3;

      if (position1 && position2) {
        x1 = position1[ j ];
        y1 = position1[ j + 1 ];
        z1 = position1[ j + 2 ];

        x2 = position2[ j ];
        y2 = position2[ j + 1 ];
        z2 = position2[ j + 2 ];

        x = (x1 + x2) / 2.0;
        y = (y1 + y2) / 2.0;
        z = (z1 + z2) / 2.0;

        aPosition[ i ] = x1;
        aPosition[ i + 1 ] = y1;
        aPosition[ i + 2 ] = z1;
        aPosition[ i + 3 ] = x;
        aPosition[ i + 4 ] = y;
        aPosition[ i + 5 ] = z;

        aPosition[ i + 6 ] = x;
        aPosition[ i + 7 ] = y;
        aPosition[ i + 8 ] = z;
        aPosition[ i + 9 ] = x2;
        aPosition[ i + 10 ] = y2;
        aPosition[ i + 11 ] = z2;
      }

      if (color && color2) {
        aColor[ i ] = aColor[ i + 3 ] = color[ j ];
        aColor[ i + 1 ] = aColor[ i + 4 ] = color[ j + 1 ];
        aColor[ i + 2 ] = aColor[ i + 5 ] = color[ j + 2 ];

        aColor[ i + 6 ] = aColor[ i + 9 ] = color2[ j ];
        aColor[ i + 7 ] = aColor[ i + 10 ] = color2[ j + 1 ];
        aColor[ i + 8 ] = aColor[ i + 11 ] = color2[ j + 2 ];
      }
    }
  };

  prototypeAccessors.isLine.get = function () { return true };
  prototypeAccessors.vertexShader.get = function () { return 'Line.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'Line.frag' };

  Object.defineProperties( LineBuffer.prototype, prototypeAccessors );

  return LineBuffer;
}(Buffer));

/**
 * @file Trajectory Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Trajectory representation parameter object.
 * @typedef {Object} TrajectoryRepresentationParameters - parameters
 *
 * @property {Boolean} drawLine - draw lines
 * @property {Boolean} drawCylinder - draw cylinders
 * @property {Boolean} drawPoint - draw points
 * @property {Boolean} drawSphere - draw sphere
 * @property {Integer} linewidth - line width
 * @property {Integer} pointSize - point size
 * @property {Boolean} sizeAttenuation - size attenuation
 * @property {Boolean} sort - sort flag for points
 */

/**
 * Trajectory representation
 */
var TrajectoryRepresentation = (function (StructureRepresentation$$1) {
  function TrajectoryRepresentation (trajectory, viewer, params) {
    StructureRepresentation$$1.call(this, trajectory.structure, viewer, params);

    this.type = 'trajectory';

    this.parameters = Object.assign({

      drawLine: {
        type: 'boolean', rebuild: true
      },
      drawCylinder: {
        type: 'boolean', rebuild: true
      },
      drawPoint: {
        type: 'boolean', rebuild: true
      },
      drawSphere: {
        type: 'boolean', rebuild: true
      },

      linewidth: {
        type: 'integer', max: 20, min: 1, rebuild: true
      },
      pointSize: {
        type: 'integer', max: 20, min: 1, rebuild: true
      },
      sizeAttenuation: {
        type: 'boolean', rebuild: true
      },
      sort: {
        type: 'boolean', rebuild: true
      }

    }, this.parameters);

    this.manualAttach = true;

    this.trajectory = trajectory;

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) TrajectoryRepresentation.__proto__ = StructureRepresentation$$1;
  TrajectoryRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  TrajectoryRepresentation.prototype.constructor = TrajectoryRepresentation;

  TrajectoryRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'uniform');
    p.colorValue = defaults(p.colorValue, 0xDDDDDD);

    this.drawLine = defaults(p.drawLine, true);
    this.drawCylinder = defaults(p.drawCylinder, false);
    this.drawPoint = defaults(p.drawPoint, false);
    this.drawSphere = defaults(p.drawSphere, false);

    this.pointSize = defaults(p.pointSize, 1);
    this.sizeAttenuation = defaults(p.sizeAttenuation, false);
    this.sort = defaults(p.sort, true);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  TrajectoryRepresentation.prototype.attach = function attach (callback) {
    var this$1 = this;

    this.bufferList.forEach(function (buffer) {
      this$1.viewer.add(buffer);
    });
    this.setVisibility(this.visible);

    callback();
  };

  TrajectoryRepresentation.prototype.prepare = function prepare (callback) {
        // TODO
    callback();
  };

  TrajectoryRepresentation.prototype.create = function create () {
        // Log.log( this.selection )
        // Log.log( this.atomSet )

    if (this.atomSet.atomCount === 0) { return }

    var scope = this;

    var index = this.atomSet.atoms[ 0 ].index;

    this.trajectory.getPath(index, function (path) {
      var n = path.length / 3;
      var tc = new Color(scope.colorValue);

      if (scope.drawSphere) {
        var sphereBuffer = new SphereBuffer(
          {
            position: path,
            color: uniformArray3(n, tc.r, tc.g, tc.b),
            radius: uniformArray(n, 0.2)
          },
                    scope.getBufferParams({
                      sphereDetail: scope.sphereDetail,
                      dullInterior: true,
                      disableImpostor: scope.disableImpostor
                    })
                );

        scope.bufferList.push(sphereBuffer);
      }

      if (scope.drawCylinder) {
        var cylinderBuffer = new CylinderBuffer(
          {
            position1: path.subarray(0, -3),
            position2: path.subarray(3),
            color: uniformArray3(n - 1, tc.r, tc.g, tc.b),
            color2: uniformArray3(n - 1, tc.r, tc.g, tc.b),
            radius: uniformArray(n, 0.05)
          },
                    scope.getBufferParams({
                      openEnded: false,
                      radialSegments: scope.radialSegments,
                      disableImpostor: scope.disableImpostor,
                      dullInterior: true
                    })

                );

        scope.bufferList.push(cylinderBuffer);
      }

      if (scope.drawPoint) {
        var pointBuffer = new PointBuffer(
          {
            position: path,
            color: uniformArray3(n, tc.r, tc.g, tc.b)
          },
                    scope.getBufferParams({
                      pointSize: scope.pointSize,
                      sizeAttenuation: scope.sizeAttenuation,
                      sort: scope.sort
                    })
                );

        scope.bufferList.push(pointBuffer);
      }

      if (scope.drawLine) {
        var lineBuffer = new LineBuffer(
          {
            position1: path.subarray(0, -3),
            position2: path.subarray(3),
            color: uniformArray3(n - 1, tc.r, tc.g, tc.b),
            color2: uniformArray3(n - 1, tc.r, tc.g, tc.b)
          },
                    scope.getBufferParams()
                );

        scope.bufferList.push(lineBuffer);
      }

      scope.attach();
    });
  };

  return TrajectoryRepresentation;
}(StructureRepresentation));

/**
 * @file Representation Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function logReprUnknown (type) {
  Log.error('makeRepresentation: representation type ' + type + ' unknown');
}

function makeRepresentation (type, object, viewer, params) {
  if (Debug) { Log.time('makeRepresentation ' + type); }

  var ReprClass;

  if (object instanceof Structure) {
    ReprClass = RepresentationRegistry.get(type);

    if (!ReprClass) {
      logReprUnknown(type);
      return
    }
  } else if (object instanceof Surface) {
    if (type === 'surface') {
      ReprClass = SurfaceRepresentation;
    } else if (type === 'dot') {
      ReprClass = DotRepresentation;
    } else {
      logReprUnknown(type);
      return
    }
  } else if (object instanceof Volume) {
    if (type === 'surface') {
      ReprClass = SurfaceRepresentation;
    } else if (type === 'dot') {
      ReprClass = DotRepresentation;
    } else if (type === 'slice') {
      ReprClass = SliceRepresentation;
    } else {
      logReprUnknown(type);
      return
    }
  } else if (object instanceof Trajectory) {
    ReprClass = TrajectoryRepresentation;
  } else if (object instanceof Shape$1) {
    ReprClass = BufferRepresentation;
    object = object.getBufferList();
  } else if (type === 'buffer') {
    ReprClass = BufferRepresentation;
  } else {
    Log.error('makeRepresentation: object ' + object + ' unknown');
    return
  }

  var repr = new ReprClass(object, viewer, params);

  if (Debug) { Log.timeEnd('makeRepresentation ' + type); }

  return repr
}

/**
 * @file Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// import RepresentationComponent from "./representation-component.js";

var nextComponentId = 0;

var _m = new Matrix4();
var _v = new Vector3();

/**
 * Component parameter object.
 * @typedef {Object} ComponentParameters - component parameters
 * @property {String} name - component name
 * @property {Boolean} visible - component visibility
 */

/**
 * @example
 * component.signals.representationAdded.add( function( representationComponent ){ ... } );
 *
 * @typedef {Object} ComponentSignals
 * @property {Signal<RepresentationComponent>} representationAdded - when a representation is added
 * @property {Signal<RepresentationComponent>} representationRemoved - when a representation is removed
 * @property {Signal<Matrix4>} matrixChanged - on matrix change
 * @property {Signal<Boolean>} visibilityChanged - on visibility change
 * @property {Signal<String>} statusChanged - on status change
 * @property {Signal<String>} nameChanged - on name change
 * @property {Signal} disposed - on dispose
 */

/**
 * Base class for components
 * @interface
 */
var Component = function Component (stage, params) {
  Object.defineProperty(this, 'id', { value: nextComponentId++ });

  var p = params || {};

  this.name = p.name;
  this.uuid = generateUUID();
  this.visible = p.visible !== undefined ? p.visible : true;

      /**
       * Events emitted by the component
       * @type {ComponentSignals}
       */
  this.signals = {
    representationAdded: new Signal(),
    representationRemoved: new Signal(),
    visibilityChanged: new Signal(),
    matrixChanged: new Signal(),
    statusChanged: new Signal(),
    nameChanged: new Signal(),
    disposed: new Signal()
  };

  this.stage = stage;
  this.viewer = stage.viewer;

  this.reprList = [];
  this.annotationList = [];

  this.matrix = new Matrix4();
  this.position = new Vector3();
  this.quaternion = new Quaternion();
  this.scale = new Vector3(1, 1, 1);
  this.transform = new Matrix4();

  this.controls = new ComponentControls(this);
};

var prototypeAccessors$10 = { type: {} };

prototypeAccessors$10.type.get = function () { return 'component' };

  /**
   * Set position transform
   *
   * @example
   * // translate by 25 angstrom along x axis
   * component.setPosition( [ 25, 0, 0 ] );
   *
   * @param {Vector3|Array} p - the coordinates
   * @return {Component} this object
   */
Component.prototype.setPosition = function setPosition (p) {
  if (Array.isArray(p)) {
    this.position.fromArray(p);
  } else {
    this.position.copy(p);
  }
  this.updateMatrix();

  return this
};

  /**
   * Set rotation transform
   *
   * @example
   * // rotate by 2 degree radians on x axis
   * component.setRotation( [ 2, 0, 0 ] );
   *
   * @param {Quaternion|Euler|Array} r - the rotation
   * @return {Component} this object
   */
Component.prototype.setRotation = function setRotation (r) {
  if (Array.isArray(r)) {
    if (r.length === 3) {
      var e = new Euler().fromArray(r);
      this.quaternion.setFromEuler(e);
    } else {
      this.quaternion.fromArray(r);
    }
  } else if (r instanceof Euler) {
    this.quaternion.setFromEuler(r);
  } else {
    this.quaternion.copy(r);
  }
  this.updateMatrix();

  return this
};

  /**
   * Set scale transform
   *
   * @example
   * // scale by factor of two
   * component.setScale( 2 );
   *
   * @param {Number} s - the scale
   * @return {Component} this object
   */
Component.prototype.setScale = function setScale (s) {
  this.scale.set(s, s, s);
  this.updateMatrix();

  return this
};

  /**
   * Set general transform. Is applied before and in addition
   * to the position, rotation and scale transformations
   *
   * @example
   * component.setTransform( matrix );
   *
   * @param {Matrix4} m - the matrix
   * @return {Component} this object
   */
Component.prototype.setTransform = function setTransform (m) {
  this.transform.copy(m);
  this.updateMatrix();

  return this
};

Component.prototype.updateMatrix = function updateMatrix () {
    var this$1 = this;

  var c = this.getCenterUntransformed(_v);
  this.matrix.makeTranslation(-c.x, -c.y, -c.z);

  _m.makeRotationFromQuaternion(this.quaternion);
  this.matrix.premultiply(_m);

  _m.makeScale(this.scale.x, this.scale.y, this.scale.z);
  this.matrix.premultiply(_m);

  var p = this.position;
  _m.makeTranslation(p.x + c.x, p.y + c.y, p.z + c.z);
  this.matrix.premultiply(_m);

  this.matrix.premultiply(this.transform);

  this.reprList.forEach(function (repr) {
    repr.setParameters({ matrix: this$1.matrix });
  });
  this.stage.viewer.updateBoundingBox();

  this.signals.matrixChanged.dispatch(this.matrix);
};

  /**
   * Add an anotation object
   * @param {Vector3} position - the 3d position
   * @param {String|Element} content - the HTML content
   * @param {Object} [params] - parameters
   * @param {Integer} params.offsetX - 2d offset in x direction
   * @param {Integer} params.offsetY - 2d offset in y direction
   * @return {Annotation} the added annotation object
   */
Component.prototype.addAnnotation = function addAnnotation (position, content, params) {
  var annotation = new Annotation(this, position, content, params);
  this.annotationList.push(annotation);

  return annotation
};

  /**
   * Remove the give annotation from the component
   * @param {Annotation} annotation - the annotation to remove
   * @return {undefined}
   */
Component.prototype.removeAnnotation = function removeAnnotation (annotation) {
  var idx = this.annotationList.indexOf(annotation);
  if (idx !== -1) {
    this.annotationList.splice(idx, 1);
    annotation.dispose();
  }
};

  /**
   * Remove all annotations from the component
   * @return {undefined}
   */
Component.prototype.removeAllAnnotations = function removeAllAnnotations () {
  this.annotationList.forEach(function (annotation) {
    annotation.dispose();
  });
  this.annotationList.length = 0;
};

  /**
   * Add a new representation to the component
   * @param {String} type - the name of the representation
   * @param {Object} object - the object on which the representation should be based
   * @param {RepresentationParameters} [params] - representation parameters
   * @return {RepresentationComponent} the created representation wrapped into
   *                                 a representation component object
   */
Component.prototype.addRepresentation = function addRepresentation (type, object, params) {
  var p = params || {};
  var sp = this.stage.getParameters();
  p.matrix = this.matrix.clone();
  p.quality = p.quality || sp.quality;
  p.disableImpostor = defaults(p.disableImpostor, !sp.impostor);
  p.useWorker = defaults(p.useWorker, sp.workerDefault);
  p.visible = defaults(p.visible, true);

  var p2 = Object.assign({}, p, { visible: this.visible && p.visible });
  var repr = makeRepresentation(type, object, this.viewer, p2);
  var reprComp = this.__getRepresentationComponent(repr, p);

  this.reprList.push(reprComp);
  this.signals.representationAdded.dispatch(reprComp);

  return reprComp
};

Component.prototype.addBufferRepresentation = function addBufferRepresentation (buffer, params) {
      // always use component base class method
  return Component.prototype.addRepresentation.call(
          this, 'buffer', buffer, params
      )
};

Component.prototype.hasRepresentation = function hasRepresentation (repr) {
  return this.reprList.indexOf(repr) !== -1
};

  /**
   * Removes a representation component
   * @param {RepresentationComponent} repr - the representation component
   * @return {undefined}
   */
Component.prototype.removeRepresentation = function removeRepresentation (repr) {
  var idx = this.reprList.indexOf(repr);
  if (idx !== -1) {
    this.reprList.splice(idx, 1);
    repr.dispose();
    this.signals.representationRemoved.dispatch(repr);
  }
};

Component.prototype.updateRepresentations = function updateRepresentations (what) {
  this.reprList.forEach(function (repr) {
    repr.update(what);
  });

  this.stage.viewer.requestRender();
};

  /**
   * Removes all representation components
   * @return {undefined}
   */
Component.prototype.removeAllRepresentations = function removeAllRepresentations () {
  this.reprList.slice(0).forEach(function (repr) {
    repr.dispose();
  });
};

Component.prototype.dispose = function dispose () {
  this.removeAllAnnotations();
  this.removeAllRepresentations();

  delete this.annotationList;
  delete this.reprList;

  this.signals.disposed.dispatch();
};

  /**
   * Set the visibility of the component, including added representations
   * @param {Boolean} value - visibility flag
   * @return {Component} this object
   */
Component.prototype.setVisibility = function setVisibility (value) {
  this.visible = value;

  this.eachRepresentation(function (repr) {
    repr.updateVisibility();
  });

  this.annotationList.forEach(function (annotation) {
    annotation.updateVisibility();
  });

  this.signals.visibilityChanged.dispatch(value);

  return this
};

Component.prototype.setStatus = function setStatus (value) {
  this.status = value;
  this.signals.statusChanged.dispatch(value);

  return this
};

Component.prototype.setName = function setName (value) {
  this.name = value;
  this.signals.nameChanged.dispatch(value);

  return this
};

  /**
   * @return {Box3} the component's bounding box
   */
Component.prototype.getBox = function getBox () {
  return (ref = this).getBoxUntransformed.apply(ref, arguments)
                  .clone().applyMatrix4(this.matrix)
    var ref;
};

  /**
   * @return {Vector3} the component's center position
   */
Component.prototype.getCenter = function getCenter () {
  return (ref = this).getCenterUntransformed.apply(ref, arguments)
                  .clone().applyMatrix4(this.matrix)
    var ref;
};

Component.prototype.getZoom = function getZoom () {
  return this.stage.getZoomForBox((ref = this).getBox.apply(ref, arguments))
    var ref;
};

  /**
   * @abstract
   * @return {Box3} the untransformed component's bounding box
   */
Component.prototype.getBoxUntransformed = function getBoxUntransformed () {};

Component.prototype.getCenterUntransformed = function getCenterUntransformed () {
  return this.getBoxUntransformed().getCenter()
};

  /**
   * Automatically center and zoom the component
   * @param{Integer} [duration] - duration of the animation, defaults to 0
   * @return {undefined}
   */
Component.prototype.autoView = function autoView (duration) {
  this.stage.animationControls.zoomMove(
          this.getCenter(),
          this.getZoom(),
          defaults(duration, 0)
      );
};

Component.prototype.eachRepresentation = function eachRepresentation (callback) {
  this.reprList.forEach(callback);
};

Object.defineProperties( Component.prototype, prototypeAccessors$10 );

/**
 * @file Representation Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// add here to avoid cyclic import dependency
Component.prototype.__getRepresentationComponent = function (repr, p) {
  return new RepresentationComponent(
        this.stage, repr, p, this
    )
};

/**
 * Extends {@link ComponentSignals}
 *
 * @typedef {Object} RepresentationComponentSignals
 * @property {Signal<String>} parametersChanged - on parameters change
 */

/**
 * Component wrapping a {@link Representation} object
 */
var RepresentationComponent = (function (Component$$1) {
  function RepresentationComponent (stage, repr, params, parent) {
    var p = params || {};
    p.name = defaults(p.name, repr.type);

    Component$$1.call(this, stage, p);

        /**
         * Events emitted by the component
         * @type {RepresentationComponentSignals}
         */
    this.signals = Object.assign(this.signals, {
      parametersChanged: new Signal()
    });

    this.parent = parent;

    this.setRepresentation(repr);
  }

  if ( Component$$1 ) RepresentationComponent.__proto__ = Component$$1;
  RepresentationComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
  RepresentationComponent.prototype.constructor = RepresentationComponent;

  var prototypeAccessors = { type: {} };

    /**
     * Component type
     * @type {String}
     */
  prototypeAccessors.type.get = function () { return 'representation' };

  RepresentationComponent.prototype.getType = function getType () {
    return this.repr.type
  };

  RepresentationComponent.prototype.setRepresentation = function setRepresentation (repr) {
    this.disposeRepresentation();
    this.repr = repr;
        // this.name = repr.type;
    this.stage.tasks.listen(this.repr.tasks);
    this.updateVisibility();
  };

    /**
     * @ignore
     * @alias RepresentationComponent#addRepresentation
     * @return {undefined}
     */
  RepresentationComponent.prototype.addRepresentation = function addRepresentation () {};

    /**
     * @ignore
     * @alias RepresentationComponent#removeRepresentation
     * @return {undefined}
     */
  RepresentationComponent.prototype.removeRepresentation = function removeRepresentation () {};

    /**
     * @ignore
     * @alias RepresentationComponent#hasRepresentation
     * @return {undefined}
     */
  RepresentationComponent.prototype.hasRepresentation = function hasRepresentation () {};

  RepresentationComponent.prototype.disposeRepresentation = function disposeRepresentation () {
    if (this.repr) {
      this.stage.tasks.unlisten(this.repr.tasks);
      this.repr.dispose();
    }
  };

  RepresentationComponent.prototype.dispose = function dispose () {
    if (this.parent && this.parent.hasRepresentation(this)) {
      this.parent.removeRepresentation(this);
    } else {
      this.disposeRepresentation();
      this.signals.disposed.dispatch();
    }
  };

    /**
     * Set the visibility of the component, takes parent visibility into account
     * @param {Boolean} value - visibility flag
     * @return {RepresentationComponent} this object
     */
  RepresentationComponent.prototype.setVisibility = function setVisibility (value) {
    this.visible = value;
    this.updateVisibility();
    this.signals.visibilityChanged.dispatch(this.visible);

    return this
  };

  RepresentationComponent.prototype.getVisibility = function getVisibility () {
    if (this.parent) {
      return this.parent.visible && this.visible
    } else {
      return this.visible
    }
  };

    /**
     * Toggle visibility of the component, takes parent visibility into account
     * @return {RepresentationComponent} this object
     */
  RepresentationComponent.prototype.toggleVisibility = function toggleVisibility () {
    return this.setVisibility(!this.visible)
  };

  RepresentationComponent.prototype.updateVisibility = function updateVisibility () {
    this.repr.setVisibility(this.getVisibility());
  };

    /**
     * Set selection
     * @param {Object} what - flags indicating what attributes to update
     * @param {Boolean} what.position - update position attribute
     * @param {Boolean} what.color - update color attribute
     * @param {Boolean} what.radius - update radius attribute
     * @return {RepresentationComponent} this object
     */
  RepresentationComponent.prototype.update = function update (what) {
    this.repr.update(what);

    return this
  };

  RepresentationComponent.prototype.build = function build (params) {
    this.repr.build(params);

    return this
  };

    /**
     * Set selection
     * @param {String} string - selection string
     * @return {RepresentationComponent} this object
     */
  RepresentationComponent.prototype.setSelection = function setSelection (string) {
    this.repr.setSelection(string);

    return this
  };

    /**
     * Set representation parameters
     * @param {RepresentationParameters} params - parameter object
     * @return {RepresentationComponent} this object
     */
  RepresentationComponent.prototype.setParameters = function setParameters (params) {
    this.repr.setParameters(params);
    this.signals.parametersChanged.dispatch(
            this.repr.getParameters()
        );

    return this
  };

    /**
     * Get representation parameters
     * @return {RepresentationParameters} parameter object
     */
  RepresentationComponent.prototype.getParameters = function getParameters () {
    return this.repr.getParameters()
  };

    /**
     * Set color
     * @param {String|Color|Hex} value - color value
     * @return {RepresentationComponent} this object
     */
  RepresentationComponent.prototype.setColor = function setColor (value) {
    this.repr.setColor(value);

    return this
  };

    /**
     * @ignore
     * @return {undefined}
     */
  RepresentationComponent.prototype.getCenter = function getCenter () {};

    /**
     * @ignore
     * @return {undefined}
     */
  RepresentationComponent.prototype.getZoom = function getZoom () {};

    /**
     * @ignore
     * @return {undefined}
     */
  RepresentationComponent.prototype.getBox = function getBox () {};

  Object.defineProperties( RepresentationComponent.prototype, prototypeAccessors );

  return RepresentationComponent;
}(Component));

/**
 * @file Collection
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var Collection = function Collection (list) {
  var this$1 = this;

  this.list = list || [];

      // remove elements from list when they get disposed

  var n = this.list.length;

  for (var i = 0; i < n; ++i) {
    var elm = this$1.list[ i ];

    elm.signals.disposed.add(this$1._remove, this$1);
  }
};

Collection.prototype._remove = function _remove (elm) {
  var idx = this.list.indexOf(elm);

  if (idx !== -1) {
    this.list.splice(idx, 1);
  }
};

Collection.prototype._invoke = function _invoke (methodName, methodArgs) {
    var this$1 = this;

  var n = this.list.length;

  for (var i = 0; i < n; ++i) {
    var elm = this$1.list[ i ];
    var method = elm[ methodName ];

    if (typeof method === 'function') {
      method.apply(elm, methodArgs);
    }
  }

  return this
};

Collection.prototype.setVisibility = function setVisibility (value) {
  return this._invoke('setVisibility', [ value ])
};

Collection.prototype.setSelection = function setSelection (string) {
  return this._invoke('setSelection', [ string ])
};

Collection.prototype.dispose = function dispose () {
  return this._invoke('dispose')
};

/**
 * @file Component Collection
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var ComponentCollection = (function (Collection$$1) {
  function ComponentCollection () {
    Collection$$1.apply(this, arguments);
  }

  if ( Collection$$1 ) ComponentCollection.__proto__ = Collection$$1;
  ComponentCollection.prototype = Object.create( Collection$$1 && Collection$$1.prototype );
  ComponentCollection.prototype.constructor = ComponentCollection;

  ComponentCollection.prototype.addRepresentation = function addRepresentation (name, params) {
    return this._invoke('addRepresentation', [ name, params ])
  };

  ComponentCollection.prototype.autoView = function autoView (duration) {
    return this._invoke('autoView', [ duration ])
  };

  return ComponentCollection;
}(Collection));

/**
 * @file Component Collection
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var RepresentationCollection = (function (Collection$$1) {
  function RepresentationCollection () {
    Collection$$1.apply(this, arguments);
  }

  if ( Collection$$1 ) RepresentationCollection.__proto__ = Collection$$1;
  RepresentationCollection.prototype = Object.create( Collection$$1 && Collection$$1.prototype );
  RepresentationCollection.prototype.constructor = RepresentationCollection;

  RepresentationCollection.prototype.setParameters = function setParameters (params) {
    return this._invoke('setParameters', [ params ])
  };

  RepresentationCollection.prototype.setColor = function setColor (color) {
    return this._invoke('setColor', [ color ])
  };

  return RepresentationCollection;
}(Collection));

/**
 * @file Stage
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// eslint-disable-next-line no-unused-vars
function matchName (name, comp) {
  if (name instanceof RegExp) {
    return comp.name.match(name) !== null
  } else {
    return comp.name === name
  }
}

var tmpZoomVector = new Vector3();

/**
 * Stage parameter object.
 * @typedef {Object} StageParameters - stage parameters
 * @property {Color} backgroundColor - background color
 * @property {Integer} sampleLevel - sampling level for antialiasing, between -1 and 5;
 *                                   -1: no sampling, 0: only sampling when not moving
 * @property {Boolean} workerDefault - default value for useWorker parameter of representations
 * @property {Float} rotateSpeed - camera-controls rotation speed, between 0 and 10
 * @property {Float} zoomSpeed - camera-controls zoom speed, between 0 and 10
 * @property {Float} panSpeed - camera-controls pan speed, between 0 and 10
 * @property {Integer} clipNear - position of camera near/front clipping plane
 *                                in percent of scene bounding box
 * @property {Integer} clipFar - position of camera far/back clipping plane
 *                               in percent of scene bounding box
 * @property {Float} clipDist - camera clipping distance in Angstrom
 * @property {Integer} fogNear - position of the start of the fog effect
 *                               in percent of scene bounding box
 * @property {Integer} fogFar - position where the fog is in full effect
 *                              in percent of scene bounding box
 * @property {String} cameraType - type of camera, either 'persepective' or 'orthographic'
 * @property {Float} cameraFov - camera field of view in degree, between 15 and 120
 * @property {Color} lightColor - point light color
 * @property {Float} lightIntensity - point light intensity
 * @property {Color} ambientColor - ambient light color
 * @property {Float} ambientIntensity - ambient light intensity
 * @property {Integer} hoverTimeout - timeout for hovering
 */

/**
 * @example
 * stage.signals.componentAdded.add( function( component ){ ... } );
 *
 * @typedef {Object} StageSignals
 * @property {Signal<StageParameters>} parametersChanged - on parameters change
 * @property {Signal<Boolean>} fullscreenChanged - on fullscreen change
 * @property {Signal<Component>} componentAdded - when a component is added
 * @property {Signal<Component>} componentRemoved - when a component is removed
 * @property {Signal<PickingProxy|undefined>} clicked - on click
 * @property {Signal<PickingProxy|undefined>} hovered - on hover
 */

/**
 * Stage class, central for creating molecular scenes with NGL.
 *
 * @example
 * var stage = new Stage( "elementId", { backgroundColor: "white" } );
 */
var Stage = function Stage (idOrElement, params) {
  /**
   * Events emitted by the stage
   * @type {StageSignals}
   */
  this.signals = {
    parametersChanged: new Signal(),
    fullscreenChanged: new Signal(),

    componentAdded: new Signal(),
    componentRemoved: new Signal(),

    clicked: new Signal(),
    hovered: new Signal()
  };

  //

  /**
   * Counter that keeps track of various potentially long-running tasks,
   * including file loading and surface calculation.
   * @type {Counter}
   */
  this.tasks = new Counter();
  this.compList = [];
  this.defaultFileParams = {};

  //

  this.viewer = new Viewer(idOrElement);
  if (!this.viewer.renderer) { return }

  /**
   * Tooltip element
   * @type {Element}
   */
  this.tooltip = document.createElement('div');
  Object.assign(this.tooltip.style, {
    display: 'none',
    position: 'fixed',
    zIndex: 2 + (parseInt(this.viewer.container.style.zIndex) || 0),
    pointerEvents: 'none',
    backgroundColor: 'rgba( 0, 0, 0, 0.6 )',
    color: 'lightgrey',
    padding: '8px',
    fontFamily: 'sans-serif'
  });
  document.body.appendChild(this.tooltip);

  /**
   * @type {MouseObserver}
   */
  this.mouseObserver = new MouseObserver(this.viewer.renderer.domElement);

  /**
   * @type {ViewerControls}
   */
  this.viewerControls = new ViewerControls(this);
  this.trackballControls = new TrackballControls(this);
  this.pickingControls = new PickingControls(this);
  /**
   * @type {AnimationControls}
   */
  this.animationControls = new AnimationControls(this);
  /**
   * @type {MouseControls}
   */
  this.mouseControls = new MouseControls(this);

  this.pickingBehavior = new PickingBehavior(this);
  this.mouseBehavior = new MouseBehavior(this);
  this.animationBehavior = new AnimationBehavior(this);
  this.keyBehavior = new KeyBehavior(this);

  /**
   * @type {SpinAnimation}
   */
  this.spinAnimation = this.animationControls.spin([ 0, 1, 0 ], 0.005);
  this.spinAnimation.pause(true);
  /**
   * @type {RockAnimation}
   */
  this.rockAnimation = this.animationControls.rock([ 0, 1, 0 ], 0.005);
  this.rockAnimation.pause(true);

  var p = Object.assign({
    impostor: true,
    quality: 'medium',
    workerDefault: true,
    sampleLevel: 0,
    backgroundColor: 'black',
    rotateSpeed: 2.0,
    zoomSpeed: 1.2,
    panSpeed: 1.0,
    clipNear: 0,
    clipFar: 100,
    clipDist: 10,
    fogNear: 50,
    fogFar: 100,
    cameraFov: 40,
    cameraType: 'perspective',
    lightColor: 0xdddddd,
    lightIntensity: 1.0,
    ambientColor: 0xdddddd,
    ambientIntensity: 0.2,
    hoverTimeout: 0,
    tooltip: true,
    mousePreset: 'default'
  }, params);

  this.parameters = {
    backgroundColor: {
      type: 'color'
    },
    quality: {
      type: 'select', options: { auto: 'auto', low: 'low', medium: 'medium', high: 'high' }
    },
    sampleLevel: {
      type: 'range', step: 1, max: 5, min: -1
    },
    impostor: {
      type: 'boolean'
    },
    workerDefault: {
      type: 'boolean'
    },
    rotateSpeed: {
      type: 'number', precision: 1, max: 10, min: 0
    },
    zoomSpeed: {
      type: 'number', precision: 1, max: 10, min: 0
    },
    panSpeed: {
      type: 'number', precision: 1, max: 10, min: 0
    },
    clipNear: {
      type: 'range', step: 1, max: 100, min: 0
    },
    clipFar: {
      type: 'range', step: 1, max: 100, min: 0
    },
    clipDist: {
      type: 'integer', max: 200, min: 0
    },
    fogNear: {
      type: 'range', step: 1, max: 100, min: 0
    },
    fogFar: {
      type: 'range', step: 1, max: 100, min: 0
    },
    cameraType: {
      type: 'select', options: { perspective: 'perspective', orthographic: 'orthographic' }
    },
    cameraFov: {
      type: 'range', step: 1, max: 120, min: 15
    },
    lightColor: {
      type: 'color'
    },
    lightIntensity: {
      type: 'number', precision: 2, max: 10, min: 0
    },
    ambientColor: {
      type: 'color'
    },
    ambientIntensity: {
      type: 'number', precision: 2, max: 10, min: 0
    },
    hoverTimeout: {
      type: 'integer', max: 10000, min: -1
    },
    tooltip: {
      type: 'boolean'
    },
    mousePreset: {
      type: 'select', options: { default: 'default', pymol: 'pymol', coot: 'coot' }
    }
  };

  this.setParameters(p);// must come after the viewer has been instantiated

  this.viewer.animate();
};

/**
 * Set stage parameters
 * @param {StageParameters} params - stage parameters
 * @return {Stage} this object
 */
Stage.prototype.setParameters = function setParameters (params) {
  var p = Object.assign({}, params);
  var tp = this.parameters;
  var viewer = this.viewer;
  var controls = this.trackballControls;

  for (var name in p) {
    if (p[ name ] === undefined) { continue }
    if (!tp[ name ]) { continue }

    if (tp[ name ].int) { p[ name ] = parseInt(p[ name ]); }
    if (tp[ name ].float) { p[ name ] = parseFloat(p[ name ]); }

    tp[ name ].value = p[ name ];
  }

  // apply parameters
  if (p.quality !== undefined) { this.setQuality(p.quality); }
  if (p.impostor !== undefined) { this.setImpostor(p.impostor); }
  if (p.rotateSpeed !== undefined) { controls.rotateSpeed = p.rotateSpeed; }
  if (p.zoomSpeed !== undefined) { controls.zoomSpeed = p.zoomSpeed; }
  if (p.panSpeed !== undefined) { controls.panSpeed = p.panSpeed; }
  if (p.mousePreset !== undefined) { this.mouseControls.preset(p.mousePreset); }
  this.mouseObserver.setParameters({ hoverTimeout: p.hoverTimeout });
  viewer.setClip(p.clipNear, p.clipFar, p.clipDist);
  viewer.setFog(undefined, p.fogNear, p.fogFar);
  viewer.setCamera(p.cameraType, p.cameraFov);
  viewer.setSampling(p.sampleLevel);
  viewer.setBackground(p.backgroundColor);
  viewer.setLight(
          p.lightColor, p.lightIntensity, p.ambientColor, p.ambientIntensity
      );

  this.signals.parametersChanged.dispatch(
    this.getParameters()
  );

  return this
};

/**
 * Get stage parameters
 * @return {StageParameters} parameter object
 */
Stage.prototype.getParameters = function getParameters () {
    var this$1 = this;

  var params = {};
  for (var name in this$1.parameters) {
    params[ name ] = this$1.parameters[ name ].value;
  }
  return params
};

/**
 * Create default representations for the given component
 * @param{StructureComponent|SurfaceComponent} object - component to create the representations for
 * @return {undefined}
 */
Stage.prototype.defaultFileRepresentation = function defaultFileRepresentation (object) {
  if (object.type === 'structure') {
    object.setSelection('/0');

    var atomCount, residueCount, instanceCount;
    var structure = object.structure;

    if (structure.biomolDict.BU1) {
      var assembly = structure.biomolDict.BU1;
      atomCount = assembly.getAtomCount(structure);
      residueCount = assembly.getResidueCount(structure);
      instanceCount = assembly.getInstanceCount();
      object.setDefaultAssembly('BU1');
    } else {
      atomCount = structure.getModelProxy(0).atomCount;
      residueCount = structure.getModelProxy(0).residueCount;
      instanceCount = 1;
    }

    var sizeScore = atomCount;

    if (Mobile) {
      sizeScore *= 4;
    }

    var backboneOnly = structure.atomStore.count / structure.residueStore.count < 2;
    if (backboneOnly) {
      sizeScore *= 10;
    }

    var colorScheme = 'chainname';
    var colorScale = 'RdYlBu';
    var colorReverse = false;
    if (structure.getChainnameCount('polymer and /0') === 1) {
      colorScheme = 'residueindex';
      colorScale = 'spectral';
      colorReverse = true;
    }

    if (Debug) { console.log(sizeScore, atomCount, instanceCount, backboneOnly); }

    if (residueCount / instanceCount < 4) {
      object.addRepresentation('ball+stick', {
        colorScheme: 'element',
        scale: 2.0,
        aspectRatio: 1.5,
        bondScale: 0.3,
        bondSpacing: 0.75,
        quality: 'auto'
      });
    } else if (
      (instanceCount > 5 && sizeScore > 15000) ||
      sizeScore > 700000
    ) {
      var scaleFactor = (
        Math.min(
          1.5,
          Math.max(
            0.1,
            2000 / (sizeScore / instanceCount)
          )
        )
      );
      if (backboneOnly) { scaleFactor = Math.min(scaleFactor, 0.15); }

      object.addRepresentation('surface', {
        sele: 'polymer',
        surfaceType: 'sas',
        probeRadius: 1.4,
        scaleFactor: scaleFactor,
        colorScheme: colorScheme,
        colorScale: colorScale,
        colorReverse: colorReverse,
        useWorker: false
      });
    } else if (sizeScore > 250000) {
      object.addRepresentation('backbone', {
        lineOnly: true,
        colorScheme: colorScheme,
        colorScale: colorScale,
        colorReverse: colorReverse
      });
    } else if (sizeScore > 100000) {
      object.addRepresentation('backbone', {
        quality: 'low',
        disableImpostor: true,
        colorScheme: colorScheme,
        colorScale: colorScale,
        colorReverse: colorReverse,
        scale: 2.0
      });
    } else if (sizeScore > 80000) {
      object.addRepresentation('backbone', {
        colorScheme: colorScheme,
        colorScale: colorScale,
        colorReverse: colorReverse,
        scale: 2.0
      });
    } else {
      object.addRepresentation('cartoon', {
        colorScheme: colorScheme,
        colorScale: colorScale,
        colorReverse: colorReverse,
        scale: 0.7,
        aspectRatio: 5,
        quality: 'auto'
      });
      if (sizeScore < 50000) {
        object.addRepresentation('base', {
          colorScheme: colorScheme,
          colorScale: colorScale,
          colorReverse: colorReverse,
          quality: 'auto'
        });
      }
      object.addRepresentation('ball+stick', {
        sele: 'ligand',
        colorScheme: 'element',
        scale: 2.0,
        aspectRatio: 1.5,
        bondScale: 0.3,
        bondSpacing: 0.75,
        quality: 'auto'
      });
    }

    // add frames as trajectory
    if (object.structure.frames.length) {
      object.addTrajectory();
    }
  } else if (object.type === 'surface' || object.type === 'volume') {
    object.addRepresentation('surface');
  }

  this.tasks.onZeroOnce(this.autoView, this);
};

/**
 * Load a file onto the stage
 *
 * @example
 * // load from URL
 * stage.loadFile( "http://files.rcsb.org/download/5IOS.cif" );
 *
 * @example
 * // load binary data in CCP4 format via a Blob
 * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
 * stage.loadFile( binaryBlob, { ext: "ccp4" } );
 *
 * @example
 * // load string data in PDB format via a Blob
 * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
 * stage.loadFile( stringBlob, { ext: "pdb" } );
 *
 * @example
 * // load a File object
 * stage.loadFile( file );
 *
 * @example
 * // load from URL and add a 'ball+stick' representation with double/triple bonds
 * stage.loadFile( "http://files.rcsb.org/download/1crn.cif" ).then( function( comp ){
 *   comp.addRepresentation( "ball+stick", { multipleBond: true } );
 * } );
 *
 * @param{String|File|Blob} path - either a URL or an object containing the file data
 * @param{LoaderParameters} params - loading parameters
 * @param{Boolean} params.asTrajectory - load multi-model structures as a trajectory
 * @return {Promise} A Promise object that resolves to a {@link StructureComponent},
 *                 a {@link SurfaceComponent} or a {@link ScriptComponent} object,
 *                 depending on the type of the loaded file.
 */
Stage.prototype.loadFile = function loadFile (path, params) {
  var p = Object.assign({}, this.defaultFileParams, params);

  // placeholder component
  var component = new Component(this, p);
  component.name = getFileInfo(path).name;
  this.addComponent(component);

  // tasks
  var tasks = this.tasks;
  tasks.increment();

  var onLoadFn = function (object) {
    // remove placeholder component
    this.removeComponent(component);

    component = this.addComponentFromObject(object, p);

    if (component.type === 'script') {
      component.run();
    } else if (p.defaultRepresentation) {
      this.defaultFileRepresentation(component);
    }

    tasks.decrement();

    return component
  }.bind(this);

  var onErrorFn = function (e) {
    component.setStatus(e);
    tasks.decrement();
    throw e
  };

  var ext = defaults(p.ext, getFileInfo(path).ext);
  var promise;

  if (ext === 'dcd') {
    promise = Promise.reject(
      new Error("loadFile: ext 'dcd' must be loaded into a structure component")
    );
  } else {
    promise = autoLoad(path, p);
  }

  return promise.then(onLoadFn, onErrorFn)
};

/**
 * Add the given component to the stage
 * @param {Component} component - the component to add
 * @return {undefined}
 */
Stage.prototype.addComponent = function addComponent (component) {
  if (!component) {
    Log.warn('Stage.addComponent: no component given');
    return
  }

  this.compList.push(component);

  this.signals.componentAdded.dispatch(component);
};

/**
 * Create a component from the given object and add to the stage
 * @param {Script|Shape|Structure|Surface|Volume} object - the object to add
 * @param {ComponentParameters} params - parameter object
 * @return {Component} the created component
 */
Stage.prototype.addComponentFromObject = function addComponentFromObject (object, params) {
  var CompClass = ComponentRegistry.get(object.type);

  if (CompClass) {
    var component = new CompClass(this, object, params);
    this.addComponent(component);
    return component
  }

  Log.warn('no component for object type', object.type);
};

/**
 * Remove the given component
 * @param{Component} component - the component to remove
 * @return {undefined}
 */
Stage.prototype.removeComponent = function removeComponent (component) {
  var idx = this.compList.indexOf(component);
  if (idx !== -1) {
    this.compList.splice(idx, 1);
    component.dispose();
    this.signals.componentRemoved.dispatch(component);
  }
};

/**
 * Remove all components from the stage
 * @param{String} [type] - component type to remove
 * @return {undefined}
 */
Stage.prototype.removeAllComponents = function removeAllComponents (type) {
  this.compList.slice().forEach(function (o) {
    if (!type || o.type === type) {
      this.removeComponent(o);
    }
  }, this);
};

/**
 * Handle any size-changes of the container element
 * @return {undefined}
 */
Stage.prototype.handleResize = function handleResize () {
  this.viewer.handleResize();
};

/**
 * Set width and height
 * @param {String} width - CSS width value
 * @param {String} height - CSS height value
 * @return {undefined}
 */
Stage.prototype.setSize = function setSize (width, height) {
  var container = this.viewer.container;

  if (container !== document.body) {
    if (width !== undefined) { container.style.width = width; }
    if (height !== undefined) { container.style.height = height; }
    this.handleResize();
  }
};

/**
 * Toggle fullscreen
 * @param{Element} [element] - document element to put into fullscreen,
 *                             defaults to the viewer container
 * @return {undefined}
 */
Stage.prototype.toggleFullscreen = function toggleFullscreen (element) {
  if (!document.fullscreenEnabled && !document.mozFullScreenEnabled &&
          !document.webkitFullscreenEnabled && !document.msFullscreenEnabled
      ) {
    Log.log('fullscreen mode (currently) not possible');
    return
  }

  var self = this;
  element = element || this.viewer.container;
  this.lastFullscreenElement = element;

  //

  function getFullscreenElement () {
    return document.fullscreenElement || document.mozFullScreenElement ||
            document.webkitFullscreenElement || document.msFullscreenElement
  }

  function resizeElement () {
    if (!getFullscreenElement() && self.lastFullscreenElement) {
      var element = self.lastFullscreenElement;
      element.style.width = element.dataset.normalWidth;
      element.style.height = element.dataset.normalHeight;

      document.removeEventListener('fullscreenchange', resizeElement);
      document.removeEventListener('mozfullscreenchange', resizeElement);
      document.removeEventListener('webkitfullscreenchange', resizeElement);
      document.removeEventListener('MSFullscreenChange', resizeElement);

      self.handleResize();
      self.signals.fullscreenChanged.dispatch(false);
    }
  }

  //

  if (!getFullscreenElement()) {
    element.dataset.normalWidth = element.style.width;
    element.dataset.normalHeight = element.style.height;
    element.style.width = window.screen.width + 'px';
    element.style.height = window.screen.height + 'px';

    if (element.requestFullscreen) {
      element.requestFullscreen();
    } else if (element.msRequestFullscreen) {
      element.msRequestFullscreen();
    } else if (element.mozRequestFullScreen) {
      element.mozRequestFullScreen();
    } else if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen();
    }

    document.addEventListener('fullscreenchange', resizeElement);
    document.addEventListener('mozfullscreenchange', resizeElement);
    document.addEventListener('webkitfullscreenchange', resizeElement);
    document.addEventListener('MSFullscreenChange', resizeElement);

    this.handleResize();
    this.signals.fullscreenChanged.dispatch(true);

    // workaround for Safari
    setTimeout(function () { self.handleResize(); }, 100);
  } else {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    }
  }
};

/**
 * Set spin
 * @param {Boolean} flag - if true start rocking and stop spinning
 * @return {undefined}
 */
Stage.prototype.setSpin = function setSpin (flag) {
  if (flag) {
    this.spinAnimation.resume(true);
    this.rockAnimation.pause(true);
  } else {
    this.spinAnimation.pause(true);
  }
};

/**
 * Set rock
 * @param {Boolean} flag - if true start rocking and stop spinning
 * @return {undefined}
 */
Stage.prototype.setRock = function setRock (flag) {
  if (flag) {
    this.rockAnimation.resume(true);
    this.spinAnimation.pause(true);
  } else {
    this.rockAnimation.pause(true);
  }
};

/**
 * Toggle spin
 * @return {undefined}
 */
Stage.prototype.toggleSpin = function toggleSpin () {
  this.setSpin(this.spinAnimation.paused);
};

/**
 * Toggle rock
 * @return {undefined}
 */
Stage.prototype.toggleRock = function toggleRock () {
  this.setRock(this.rockAnimation.paused);
};

Stage.prototype.setFocus = function setFocus (value) {
  var clipNear = clamp(value / 2, 0, 49.9);
  var clipFar = 100 - clipNear;
  var diffHalf = (clipFar - clipNear) / 2;

  this.setParameters({
    clipNear: clipNear,
    clipFar: clipFar,
    fogNear: pclamp(clipFar - diffHalf),
    fogFar: pclamp(clipFar + diffHalf)
  });
};

Stage.prototype.getZoomForBox = function getZoomForBox (boundingBox) {
  var bbSize = boundingBox.getSize(tmpZoomVector);
  var maxSize = Math.max(bbSize.x, bbSize.y, bbSize.z);
  var minSize = Math.min(bbSize.x, bbSize.y, bbSize.z);
  var distance = maxSize + Math.sqrt(minSize);

  var fov = degToRad(this.viewer.perspectiveCamera.fov);
  var width = this.viewer.width;
  var height = this.viewer.height;
  var aspect = width / height;
  var aspectFactor = (height < width ? 1 : aspect);

  distance = Math.abs(
          ((distance * 0.5) / aspectFactor) / Math.sin(fov / 2)
      );
  distance += this.parameters.clipDist.value;
  return -distance
};

Stage.prototype.getBox = function getBox () {
  return this.viewer.boundingBox
};

Stage.prototype.getZoom = function getZoom () {
  return this.getZoomForBox(this.getBox())
};

Stage.prototype.getCenter = function getCenter (optionalTarget) {
  return this.getBox().getCenter(optionalTarget)
};

/**
 * Add a zoom and a move animation with automatic targets
 * @param{Integer} duration - animation time in milliseconds
 * @return {undefined}
 */
Stage.prototype.autoView = function autoView (duration) {
  this.animationControls.zoomMove(
          this.getCenter(),
          this.getZoom(),
          defaults(duration, 0)
      );
};

/**
 * Make image from what is shown in a viewer canvas
 * @param{ImageParameters} params - image generation parameters
 * @return {Promise} A Promise object that resolves to an image {@link Blob}.
 */
Stage.prototype.makeImage = function makeImage (params) {
  var viewer = this.viewer;
  var tasks = this.tasks;

  return new Promise(function (resolve, reject) {
    function makeImage () {
      tasks.increment();
      viewer.makeImage(params).then(function (blob) {
        tasks.decrement();
        resolve(blob);
      }).catch(function (e) {
        tasks.decrement();
        reject(e);
      });
    }

    tasks.onZeroOnce(makeImage);
  })
};

Stage.prototype.setImpostor = function setImpostor (value) {
  this.parameters.impostor.value = value;

  var types = [
    'spacefill', 'ball+stick', 'licorice', 'hyperball',
    'backbone', 'rocket', 'helixorient', 'contact', 'distance',
    'dot'
  ];

  this.eachRepresentation(function (repr) {
    if (repr.type === 'script') { return }

    if (!types.includes(repr.getType())) {
      return
    }

    var p = repr.getParameters();
    p.disableImpostor = !value;
    repr.build(p);
  });
};

Stage.prototype.setQuality = function setQuality (value) {
  this.parameters.quality.value = value;

  var types = [
    'tube', 'cartoon', 'ribbon', 'trace', 'rope'
  ];

  var impostorTypes = [
    'spacefill', 'ball+stick', 'licorice', 'hyperball',
    'backbone', 'rocket', 'helixorient', 'contact', 'distance',
    'dot'
  ];

  this.eachRepresentation(function (repr) {
    if (repr.type === 'script') { return }

    var p = repr.getParameters();

    if (!types.includes(repr.getType())) {
      if (!impostorTypes.includes(repr.getType())) {
        return
      }

      if (!p.disableImpostor) {
        repr.repr.quality = value;
        return
      }
    }

    p.quality = value;
    repr.build(p);
  });
};

/**
 * Iterator over each component and executing the callback
 * @param{Function} callback - function to execute
 * @param{String} type - limit iteration to components of this type
 * @return {undefined}
 */
Stage.prototype.eachComponent = function eachComponent (callback, type) {
  this.compList.slice().forEach(function (o, i) {
    if (!type || o.type === type) {
      callback(o, i);
    }
  });
};

/**
 * Iterator over each representation and executing the callback
 * @param{Function} callback - function to execute
 * @param{String} type - limit iteration to components of this type
 * @return {undefined}
 */
Stage.prototype.eachRepresentation = function eachRepresentation (callback, type) {
  this.eachComponent(function (comp) {
    comp.reprList.slice().forEach(function (repr) {
      callback(repr, comp);
    });
  }, type);
};

/**
 * Get collection of components by name
 * @param{String|RegExp} name - the component name
 * @param{String} type - limit iteration to components of this type
 * @return {ComponentCollection} collection of selected components
 */
Stage.prototype.getComponentsByName = function getComponentsByName (name, type) {
  var compList = [];

  this.eachComponent(function (comp) {
    if (name === undefined || matchName(name, comp)) {
      compList.push(comp);
    }
  }, type);

  return new ComponentCollection(compList)
};

/**
 * Get collection of components by object
 * @param{Object} object - the object to find
 * @return {ComponentCollection} collection of selected components
 */
Stage.prototype.getComponentsByObject = function getComponentsByObject (object) {
  var compList = [];

  this.eachComponent(function (comp) {
    if (comp[ comp.type ] === object) {
      compList.push(comp);
    }
  });

  return new ComponentCollection(compList)
};

/**
 * Get collection of representations by name
 * @param{String|RegExp} name - the representation name
 * @param{String} type - limit iteration to components of this type
 * @return {RepresentationCollection} collection of selected components
 */
Stage.prototype.getRepresentationsByName = function getRepresentationsByName (name, type) {
  var compName, reprName;

  if (typeof name !== 'object' || name instanceof RegExp) {
    compName = undefined;
    reprName = name;
  } else {
    compName = name.comp;
    reprName = name.repr;
  }

  var reprList = [];

  this.eachRepresentation(function (repr, comp) {
    if (compName !== undefined && !matchName(compName, comp)) {
      return
    }

    if (reprName === undefined || matchName(reprName, repr)) {
      reprList.push(repr);
    }
  }, type);

  return new RepresentationCollection(reprList)
};

/**
 * Get collection of components and representations by name
 * @param{String|RegExp} name - the component or representation name
 * @return {Collection} collection of selected components and representations
 */
Stage.prototype.getAnythingByName = function getAnythingByName (name) {
  var compList = this.getComponentsByName(name).list;
  var reprList = this.getRepresentationsByName(name).list;

  return new Collection(compList.concat(reprList))
};

/**
 * Cleanup when disposing of a stage object
 * @return {undefined}
 */
Stage.prototype.dispose = function dispose () {
  this.tasks.dispose();
};

/**
 * @file Alignment
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// const nucleotides = 'ACTG';
var aminoacidsX = 'ACDEFGHIKLMNPQRSTVWY';
var aminoacids = 'ARNDCQEGHILKMFPSTWYVBZ?';

var blosum62x = [
  [4, 0, -2, -1, -2, 0, -2, -1, -1, -1, -1, -2, -1, -1, -1, 1, 0, 0, -3, -2],        // A
  [0, 9, -3, -4, -2, -3, -3, -1, -3, -1, -1, -3, -3, -3, -3, -1, -1, -1, -2, -2],    // C
  [-2, -3, 6, 2, -3, -1, -1, -3, -1, -4, -3, 1, -1, 0, -2, 0, -1, -3, -4, -3],       // D
  [-1, -4, 2, 5, -3, -2, 0, -3, 1, -3, -2, 0, -1, 2, 0, 0, -1, -2, -3, -2],          // E
  [-2, -2, -3, -3, 6, -3, -1, 0, -3, 0, 0, -3, -4, -3, -3, -2, -2, -1, 1, 3],        // F
  [0, -3, -1, -2, -3, 6, -2, -4, -2, -4, -3, 0, -2, -2, -2, 0, -2, -3, -2, -3],      // G
  [-2, -3, -1, 0, -1, -2, 8, -3, -1, -3, -2, 1, -2, 0, 0, -1, -2, -3, -2, 2],        // H
  [-1, -1, -3, -3, 0, -4, -3, 4, -3, 2, 1, -3, -3, -3, -3, -2, -1, 3, -3, -1],       // I
  [-1, -3, -1, 1, -3, -2, -1, -3, 5, -2, -1, 0, -1, 1, 2, 0, -1, -2, -3, -2],        // K
  [-1, -1, -4, -3, 0, -4, -3, 2, -2, 4, 2, -3, -3, -2, -2, -2, -1, 1, -2, -1],       // L
  [-1, -1, -3, -2, 0, -3, -2, 1, -1, 2, 5, -2, -2, 0, -1, -1, -1, 1, -1, -1],        // M
  [-2, -3, 1, 0, -3, 0, 1, -3, 0, -3, -2, 6, -2, 0, 0, 1, 0, -3, -4, -2],            // N
  [-1, -3, -1, -1, -4, -2, -2, -3, -1, -3, -2, -2, 7, -1, -2, -1, -1, -2, -4, -3],   // P
  [-1, -3, 0, 2, -3, -2, 0, -3, 1, -2, 0, 0, -1, 5, 1, 0, -1, -2, -2, -1],           // Q
  [-1, -3, -2, 0, -3, -2, 0, -3, 2, -2, -1, 0, -2, 1, 5, -1, -1, -3, -3, -2],        // R
  [1, -1, 0, 0, -2, 0, -1, -2, 0, -2, -1, 1, -1, 0, -1, 4, 1, -2, -3, -2],           // S
  [0, -1, -1, -1, -2, -2, -2, -1, -1, -1, -1, 0, -1, -1, -1, 1, 5, 0, -2, -2],       // T
  [0, -1, -3, -2, -1, -3, -3, 3, -2, 1, 1, -3, -2, -2, -3, -2, 0, 4, -3, -1],        // V
  [-3, -2, -4, -3, 1, -2, -2, -3, -3, -2, -1, -4, -4, -2, -3, -3, -2, -3, 11, 2],    // W
  [-2, -2, -3, -2, 3, -3, 2, -1, -2, -1, -1, -2, -3, -1, -2, -2, -2, -1, 2, 7]       // Y
];

var blosum62 = [
  // A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X
  [4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2, 0, -2, -1, 0], // A
  [-1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2, 2, -1, -3, -2, -1, -1, -3, -2, -3, -1, 0, -1], // R
  [-2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 0, -2, -3, -2, 1, 0, -4, -2, -3, 3, 0, -1], // N
  [-2, -2, 1, 6, -3, 0, 2, -1, -1, -3, -4, -1, -3, -3, -1, 0, -1, -4, -3, -3, 4, 1, -1], // D
  [0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2], // C
  [-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2, 0, 3, -1], // Q
  [-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1], // E
  [0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3, -1, -2, -1], // G
  [-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3, 0, 0, -1], // H
  [-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3, -3, -3, -1], // I
  [-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1, -4, -3, -1], // L
  [-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2, 0, 1, -1], // K
  [-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1, -3, -1, -1], // M
  [-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1, -3, -3, -1], // F
  [-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2, -2, -1, -2], // P
  [1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2, 0, 0, 0], // S
  [0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0, -1, -1, 0], // T
  [-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3, -4, -3, -2], // W
  [-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1, -3, -2, -1], // Y
  [0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4, -3, -2, -1], // V
  [-2, -1, 3, 4, -3, 0, 1, -1, 0, -3, -4, 0, -3, -3, -2, 0, -1, -4, -3, -3, 4, 1, -1], // B
  [-1, 0, 0, 1, -3, 3, 4, -2, 0, -3, -3, 1, -1, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1], // Z
  [0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 0, 0, -2, -1, -1, -1, -1, -1]  // X
];

function prepareMatrix (cellNames, mat) {
  var j;
  var i = 0;
  var matDict = {};
  mat.forEach(function (row) {
    j = 0;
    var rowDict = {};
    row.forEach(function (elm) {
      rowDict[ cellNames[ j++ ] ] = elm;
    });
    matDict[ cellNames[ i++ ] ] = rowDict;
  });
  return matDict
}

var SubstitutionMatrices = (function () {
  return {
    blosum62: prepareMatrix(aminoacids, blosum62),
    blosum62x: prepareMatrix(aminoacidsX, blosum62x)
  }
}());

var Alignment = function Alignment (seq1, seq2, gapPenalty, gapExtensionPenalty, substMatrix) {
  // TODO try encoding seqs as integers and use array subst matrix, maybe faster

  this.seq1 = seq1;
  this.seq2 = seq2;

  this.gapPenalty = gapPenalty || -10;
  this.gapExtensionPenalty = gapExtensionPenalty || -1;
  this.substMatrix = substMatrix || 'blosum62';

  if (this.substMatrix) {
    this.substMatrix = SubstitutionMatrices[ this.substMatrix ];
  }
};

Alignment.prototype.initMatrices = function initMatrices () {
    var this$1 = this;

  this.n = this.seq1.length;
  this.m = this.seq2.length;

  // Log.log(this.n, this.m);

  this.score = undefined;
  this.ali = '';

  this.S = [];
  this.V = [];
  this.H = [];

  var i, j;

  for (i = 0; i <= this.n; ++i) {
    this$1.S[ i ] = [];
    this$1.V[ i ] = [];
    this$1.H[ i ] = [];

    for (j = 0; j <= this.m; ++j) {
      this$1.S[ i ][ j ] = 0;
      this$1.V[ i ][ j ] = 0;
      this$1.H[ i ][ j ] = 0;
    }
  }

  for (i = 0; i <= this.n; ++i) {
    this$1.S[ i ][ 0 ] = this$1.gap(0);
    this$1.H[ i ][ 0 ] = -Infinity;
  }

  for (j = 0; j <= this.m; ++j) {
    this$1.S[ 0 ][ j ] = this$1.gap(0);
    this$1.V[ 0 ][ j ] = -Infinity;
  }

  this.S[ 0 ][ 0 ] = 0;

  // Log.log(this.S, this.V, this.H);
};

Alignment.prototype.gap = function gap (len) {
  return this.gapPenalty + len * this.gapExtensionPenalty
};

Alignment.prototype.makeScoreFn = function makeScoreFn () {
  var seq1 = this.seq1;
  var seq2 = this.seq2;

  var substMatrix = this.substMatrix;

  var c1, c2;

  if (substMatrix) {
    return function score (i, j) {
      c1 = seq1[ i ];
      c2 = seq2[ j ];

      try {
        return substMatrix[ c1 ][ c2 ]
      } catch (e) {
        return -4
      }
    }
  } else {
    Log.warn('Alignment: no subst matrix');

    return function scoreNoSubstMat (i, j) {
      c1 = seq1[ i ];
      c2 = seq2[ j ];

      return c1 === c2 ? 5 : -3
    }
  }
};

Alignment.prototype.calc = function calc () {
  if (Debug) { Log.time('Alignment.calc'); }

  this.initMatrices();

  var gap0 = this.gap(0);
  var scoreFn = this.makeScoreFn();
  var gapExtensionPenalty = this.gapExtensionPenalty;

  var V = this.V;
  var H = this.H;
  var S = this.S;

  var n = this.n;
  var m = this.m;

  var Vi1, Si1, Vi, Hi, Si;

  var i, j;

  for (i = 1; i <= n; ++i) {
    Si1 = S[ i - 1 ];
    Vi1 = V[ i - 1 ];

    Vi = V[ i ];
    Hi = H[ i ];
    Si = S[ i ];

    for (j = 1; j <= m; ++j) {
      Vi[j] = Math.max(
        Si1[ j ] + gap0,
        Vi1[ j ] + gapExtensionPenalty
      );

      Hi[j] = Math.max(
        Si[ j - 1 ] + gap0,
        Hi[ j - 1 ] + gapExtensionPenalty
      );

      Si[j] = Math.max(
        Si1[ j - 1 ] + scoreFn(i - 1, j - 1), // match
        Vi[ j ], // del
        Hi[ j ]// ins
      );
    }
  }

  if (Debug) { Log.timeEnd('Alignment.calc'); }

  if (Debug) { Log.log(this.S, this.V, this.H); }
};

Alignment.prototype.trace = function trace () {
    var this$1 = this;

  if (Debug) { Log.time('Alignment.trace'); }

  this.ali1 = '';
  this.ali2 = '';

  var scoreFn = this.makeScoreFn();

  var i = this.n;
  var j = this.m;
  var mat;

  if (this.S[i][j] >= this.V[i][j]) {
    mat = 'S';
    this.score = this.S[i][j];
  } else if (this.V[i][j] >= this.H[i][j]) {
    mat = 'V';
    this.score = this.V[i][j];
  } else {
    mat = 'H';
    this.score = this.H[i][j];
  }

  if (Debug) { Log.log('Alignment: SCORE', this.score); }
  if (Debug) { Log.log('Alignment: S, V, H', this.S[i][j], this.V[i][j], this.H[i][j]); }

  while (i > 0 && j > 0) {
    if (mat === 'S') {
      if (this$1.S[i][j] === this$1.S[i - 1][j - 1] + scoreFn(i - 1, j - 1)) {
        this$1.ali1 = this$1.seq1[i - 1] + this$1.ali1;
        this$1.ali2 = this$1.seq2[j - 1] + this$1.ali2;
        --i;
        --j;
        mat = 'S';
      } else if (this$1.S[i][j] === this$1.V[i][j]) {
        mat = 'V';
      } else if (this$1.S[i][j] === this$1.H[i][j]) {
        mat = 'H';
      } else {
        // Log.debug('Alignment: S');
        --i;
        --j;
      }
    } else if (mat === 'V') {
      if (this$1.V[i][j] === this$1.V[i - 1][j] + this$1.gapExtensionPenalty) {
        this$1.ali1 = this$1.seq1[i - 1] + this$1.ali1;
        this$1.ali2 = '-' + this$1.ali2;
        --i;
        mat = 'V';
      } else if (this$1.V[i][j] === this$1.S[i - 1][j] + this$1.gap(0)) {
        this$1.ali1 = this$1.seq1[i - 1] + this$1.ali1;
        this$1.ali2 = '-' + this$1.ali2;
        --i;
        mat = 'S';
      } else {
        // Log.debug('Alignment: V');
        --i;
      }
    } else if (mat === 'H') {
      if (this$1.H[i][j] === this$1.H[i][j - 1] + this$1.gapExtensionPenalty) {
        this$1.ali1 = '-' + this$1.ali1;
        this$1.ali2 = this$1.seq2[j - 1] + this$1.ali2;
        --j;
        mat = 'H';
      } else if (this$1.H[i][j] === this$1.S[i][j - 1] + this$1.gap(0)) {
        this$1.ali1 = '-' + this$1.ali1;
        this$1.ali2 = this$1.seq2[j - 1] + this$1.ali2;
        --j;
        mat = 'S';
      } else {
        // Log.debug('Alignment: H');
        --j;
      }
    } else {
      Log.error('Alignment: no matrix');
    }
  }

  while (i > 0) {
    this$1.ali1 = this$1.seq1[ i - 1 ] + this$1.ali1;
    this$1.ali2 = '-' + this$1.ali2;
    --i;
  }

  while (j > 0) {
    this$1.ali1 = '-' + this$1.ali1;
    this$1.ali2 = this$1.seq2[ j - 1 ] + this$1.ali2;
    --j;
  }

  if (Debug) { Log.timeEnd('Alignment.trace'); }

  if (Debug) { Log.log([this.ali1, this.ali2]); }
};

/**
 * @file Align Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Perform structural superposition of two structures,
 * optionally guided by a sequence alignment
 * @param  {Structure|StructureView} s1 - structure 1 which is superposed onto structure 2
 * @param  {Structure|StructureView} s2 - structure 2 onto which structure 1 is superposed
 * @param  {Boolean} [align] - guide the superposition by a sequence alignment
 * @param  {String} [sele1] - selection string for structure 1
 * @param  {String} [sele2] - selection string for structure 2
 * @return {undefined}
 */
function superpose (s1, s2, align, sele1, sele2) {
  align = defaults(align, false);
  sele1 = defaults(sele1, '');
  sele2 = defaults(sele2, '');

  var i, j, n, atoms1, atoms2;

  if (align) {
    var _s1 = s1;
    var _s2 = s2;

    if (sele1 && sele2) {
      _s1 = s1.getView(new Selection(sele1));
      _s2 = s2.getView(new Selection(sele2));
    }

    var seq1 = _s1.getSequence();
    var seq2 = _s2.getSequence();

    // Log.log( seq1.join("") );
    // Log.log( seq2.join("") );

    var ali = new Alignment(seq1.join(''), seq2.join(''));

    ali.calc();
    ali.trace();

    // Log.log( "superpose alignment score", ali.score );

    // Log.log( ali.ali1 );
    // Log.log( ali.ali2 );

    var l, _i, _j, x, y;
    i = 0;
    j = 0;
    n = ali.ali1.length;
    var aliIdx1 = [];
    var aliIdx2 = [];

    for (l = 0; l < n; ++l) {
      x = ali.ali1[ l ];
      y = ali.ali2[ l ];

      _i = 0;
      _j = 0;

      if (x === '-') {
        aliIdx2[ j ] = false;
      } else {
        aliIdx2[ j ] = true;
        _i = 1;
      }

      if (y === '-') {
        aliIdx1[ i ] = false;
      } else {
        aliIdx1[ i ] = true;
        _j = 1;
      }

      i += _i;
      j += _j;
    }

    // Log.log( i, j );

    // Log.log( aliIdx1 );
    // Log.log( aliIdx2 );

    var _atoms1 = [];
    var _atoms2 = [];
    var ap1 = _s1.getAtomProxy();
    var ap2 = _s2.getAtomProxy();

    i = 0;
    _s1.eachResidue(function (r) {
      if (r.traceAtomIndex === undefined ||
            r.traceAtomIndex !== r.getAtomIndexByName('CA')) { return }

      if (aliIdx1[ i ]) {
        ap1.index = r.getAtomIndexByName('CA');
        _atoms1.push(ap1.x, ap1.y, ap1.z);
      }
      i += 1;
    });

    i = 0;
    _s2.eachResidue(function (r) {
      if (r.traceAtomIndex === undefined ||
            r.traceAtomIndex !== r.getAtomIndexByName('CA')) { return }

      if (aliIdx2[ i ]) {
        ap2.index = r.getAtomIndexByName('CA');
        _atoms2.push(ap2.x, ap2.y, ap2.z);
      }
      i += 1;
    });

    atoms1 = new Float32Array(_atoms1);
    atoms2 = new Float32Array(_atoms2);
  } else {
    var sviewCa1 = s1.getView(new Selection(sele1 + ' and .CA'));
    var sviewCa2 = s2.getView(new Selection(sele2 + ' and .CA'));

    atoms1 = sviewCa1;
    atoms2 = sviewCa2;
  }

  var superpose = new Superposition(atoms1, atoms2);
  superpose.transform(s1);
  s1.refreshPosition();
}

/**
 * @file Atomindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by atom index. The {@link AtomProxy.index} property is used for coloring.
 * Each {@link ModelProxy} of a {@link Structure} is colored seperately. The
 * `params.domain` parameter is ignored.
 *
 * __Name:__ _atomindex_
 *
 * @example
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     o.addRepresentation( "ball+stick", { colorScheme: "atomindex" } );
 *     o.autoView();
 * } );
 */
var AtomindexColormaker = (function (Colormaker$$1) {
  function AtomindexColormaker (params) {
    var this$1 = this;

    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'rainbow';
      this.reverse = defaults(params.reverse, true);
    }

    this.scalePerModel = {};

    this.structure.eachModel(function (mp) {
      this$1.domain = [ mp.atomOffset, mp.atomEnd ];
      this$1.scalePerModel[ mp.index ] = this$1.getScale();
    });
  }

  if ( Colormaker$$1 ) AtomindexColormaker.__proto__ = Colormaker$$1;
  AtomindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  AtomindexColormaker.prototype.constructor = AtomindexColormaker;

    /**
     * get color for an atom
     * @param  {AtomProxy} atom - atom to get color for
     * @return {Integer} hex atom color
     */
  AtomindexColormaker.prototype.atomColor = function atomColor (atom) {
    return this.scalePerModel[ atom.modelIndex ](atom.index)
  };

  return AtomindexColormaker;
}(Colormaker));

ColormakerRegistry.add('atomindex', AtomindexColormaker);

/**
 * @file Bfactor Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by b-factor. The {@link AtomProxy.bfactor} property is used for coloring.
 * By default the min and max b-factor values are used for the scale`s domain.
 *
 * __Name:__ _bfactor_
 *
 * @example
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     o.addRepresentation( "ball+stick", { colorScheme: "bfactor" } );
 *     o.autoView();
 * } );
 */
var BfactorColormaker = (function (Colormaker$$1) {
  function BfactorColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'OrRd';
    }

    if (!params.domain) {
      var selection;
      var min = Infinity;
      var max = -Infinity;

      if (params.sele) {
        selection = new Selection(params.sele);
      }

      this.structure.eachAtom(function (a) {
        var bfactor = a.bfactor;
        min = Math.min(min, bfactor);
        max = Math.max(max, bfactor);
      }, selection);

      this.domain = [ min, max ];
    }

    this.bfactorScale = this.getScale();
  }

  if ( Colormaker$$1 ) BfactorColormaker.__proto__ = Colormaker$$1;
  BfactorColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  BfactorColormaker.prototype.constructor = BfactorColormaker;

  BfactorColormaker.prototype.atomColor = function atomColor (a) {
    return this.bfactorScale(a.bfactor)
  };

  return BfactorColormaker;
}(Colormaker));

ColormakerRegistry.add('bfactor', BfactorColormaker);

/**
 * @file Chainid Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by chain id
 */
var ChainidColormaker = (function (Colormaker$$1) {
  function ChainidColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'Spectral';
    }

    var chainidDictPerModel = {};
    var scalePerModel = {};

    this.structure.eachModel(function (mp) {
      var i = 0;
      var chainidDict = {};
      mp.eachChain(function (cp) {
        if (chainidDict[ cp.chainid ] === undefined) {
          chainidDict[ cp.chainid ] = i;
          i += 1;
        }
      });
      this.domain = [ 0, i - 1 ];
      chainidDictPerModel[ mp.index ] = chainidDict;
      scalePerModel[ mp.index ] = this.getScale();
    }.bind(this));

    this.atomColor = function (a) {
      var chainidDict = chainidDictPerModel[ a.modelIndex ];
      return scalePerModel[ a.modelIndex ](chainidDict[ a.chainid ])
    };
  }

  if ( Colormaker$$1 ) ChainidColormaker.__proto__ = Colormaker$$1;
  ChainidColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  ChainidColormaker.prototype.constructor = ChainidColormaker;

  return ChainidColormaker;
}(Colormaker));

ColormakerRegistry.add('chainid', ChainidColormaker);

/**
 * @file Chainindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by chain index
 */
var ChainindexColormaker = (function (Colormaker$$1) {
  function ChainindexColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'Spectral';
    }
    if (!params.domain) {
      var scalePerModel = {};

      this.structure.eachModel(function (mp) {
        this.domain = [ mp.chainOffset, mp.chainEnd ];
        scalePerModel[ mp.index ] = this.getScale();
      }.bind(this));

      this.atomColor = function (a) {
        return scalePerModel[ a.modelIndex ](a.chainIndex)
      };
    } else {
      var chainindexScale = this.getScale();

      this.atomColor = function (a) {
        return chainindexScale(a.chainIndex)
      };
    }
  }

  if ( Colormaker$$1 ) ChainindexColormaker.__proto__ = Colormaker$$1;
  ChainindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  ChainindexColormaker.prototype.constructor = ChainindexColormaker;

  return ChainindexColormaker;
}(Colormaker));

ColormakerRegistry.add('chainindex', ChainindexColormaker);

/**
 * @file Chainname Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by chain name
 */
var ChainnameColormaker = (function (Colormaker$$1) {
  function ChainnameColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'Spectral';
    }

    var chainnameDictPerModel = {};
    var scalePerModel = {};

    this.structure.eachModel(function (mp) {
      var i = 0;
      var chainnameDict = {};
      mp.eachChain(function (cp) {
        if (chainnameDict[ cp.chainname ] === undefined) {
          chainnameDict[ cp.chainname ] = i;
          i += 1;
        }
      });
      this.domain = [ 0, i - 1 ];
      chainnameDictPerModel[ mp.index ] = chainnameDict;
      scalePerModel[ mp.index ] = this.getScale();
    }.bind(this));

    this.atomColor = function (a) {
      var chainnameDict = chainnameDictPerModel[ a.modelIndex ];
      return scalePerModel[ a.modelIndex ](chainnameDict[ a.chainname ])
    };
  }

  if ( Colormaker$$1 ) ChainnameColormaker.__proto__ = Colormaker$$1;
  ChainnameColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  ChainnameColormaker.prototype.constructor = ChainnameColormaker;

  return ChainnameColormaker;
}(Colormaker));

ColormakerRegistry.add('chainname', ChainnameColormaker);

/**
 * @file Densityfit Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by validation density fit
 */
var DensityfitColormaker = (function (Colormaker$$1) {
  function DensityfitColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'RdYlBu';
    }

    this.rsrzScale = this.getScale({ domain: [ 2, 0 ] });
    this.rsccScale = this.getScale({ domain: [ 0.678, 1.0 ] });

    var val = params.structure.validation || {};
    this.rsrzDict = val.rsrzDict || {};
    this.rsccDict = val.rsccDict || {};
  }

  if ( Colormaker$$1 ) DensityfitColormaker.__proto__ = Colormaker$$1;
  DensityfitColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  DensityfitColormaker.prototype.constructor = DensityfitColormaker;

  DensityfitColormaker.prototype.atomColor = function atomColor (atom) {
    var sele = atom.resno;
    if (atom.inscode) { sele += '^' + atom.inscode; }
    if (atom.chainname) { sele += ':' + atom.chainname; }
    sele += '/' + atom.modelIndex;

    var rsrz = this.rsrzDict[ sele ];
    if (rsrz !== undefined) {
      return this.rsrzScale(rsrz)
    }

    var rscc = this.rsccDict[ sele ];
    if (rscc !== undefined) {
      return this.rsccScale(rscc)
    }

    return 0x909090
  };

  return DensityfitColormaker;
}(Colormaker));

ColormakerRegistry.add('densityfit', DensityfitColormaker);

/**
 * @file Atomindex Colormaker
 * @author Fred Ludlow <Fred.Ludlow@astx.com>
 * @private
 */

// from CHARMM
var partialCharges = {
  'ARG': {
    'CD': 0.1,
    'CZ': 0.5,
    'NE': -0.1
  },
  'ASN': {
    'CG': 0.55,
    'OD1': -0.55
  },
  'ASP': {
    'CB': -0.16,
    'CG': 0.36,
    'OD1': -0.6,
    'OD2': -0.6
  },
  'CYS': {
    'CB': 0.19,
    'SG': -0.19
  },
  'GLN': {
    'CD': 0.55,
    'OE1': -0.55
  },
  'GLU': {
    'CD': 0.36,
    'CG': -0.16,
    'OE1': -0.6,
    'OE2': -0.6
  },
  'HIS': {
    'CB': 0.1,
    'CD2': 0.2,
    'CE1': 0.45,
    'CG': 0.15,
    'ND1': 0.05,
    'NE2': 0.05
  },
  'LYS': {
    'CE': 0.25,
    'NZ': 0.75
  },
  'MET': {
    'CE': 0.06,
    'CG': 0.06,
    'SD': -0.12
  },
  'PTR': {
    'C': 0.55,
    'CA': 0.1,
    'CZ': 0.25,
    'N': -0.35,
    'O': -0.55,
    'O1P': -0.85,
    'O2P': -0.85,
    'O3P': -0.85,
    'OG1': -1.1,
    'P': 1.4
  },
  'SEP': {
    'C': 0.55,
    'CA': 0.1,
    'CB': 0.25,
    'N': -0.35,
    'O': -0.55,
    'O1P': -0.85,
    'O2P': -0.85,
    'O3P': -0.85,
    'OG1': -1.1,
    'P': 1.4
  },
  'SER': {
    'CB': 0.25,
    'OG': -0.25
  },
  'THR': {
    'CB': 0.25,
    'OG1': -0.25
  },
  'TPO': {
    'C': 0.55,
    'CA': 0.1,
    'CB': 0.25,
    'N': -0.35,
    'O': -0.55,
    'OG1': -1.1,
    'O1P': -0.85,
    'O2P': -0.85,
    'O3P': -0.85,
    'P': 1.4
  },
  'TRP': {
    'CD1': 0.06,
    'CD2': 0.1,
    'CE2': -0.04,
    'CE3': -0.03,
    'CG': -0.03,
    'NE1': -0.06
  },
  'TYR': {
    'CZ': 0.25,
    'OH': -0.25
  },
  'backbone': {
    'C': 0.55,
    'O': -0.55,
    'N': -0.35,
    'CA': 0.1
  }
};

var maxRadius = 12.0;
var nHBondDistance = 1.04;
var nHCharge = 0.25;

/**
 * Populates position vector with location of implicit or explicit H
 * Returns position or undefined if not able to locate H
 *
 * @param {AtomProxy} ap - the nitrogen atom
 * @param {Vector3} [position] - optional target
 * @return {Vectors|undefined} the hydrogen atom position
 */
function backboneNHPosition (ap, position) {
  position = position || new Vector3();

  var h = false;
  var ca = false;
  var c = false;
  position.set(2 * ap.x, 2 * ap.y, 2 * ap.z);

  ap.eachBondedAtom(function (a2) {
    // Any time we detect H, reset position and skip
    // future tests
    if (h) { return }
    if (a2.atomname === 'H') {
      position.set(a2);
      h = true;
      return
    }
    if (!ca && a2.atomname === 'CA') {
      position.sub(a2);
      ca = true;
    } else if (!c && a2.atomname === 'C') {
      c = true;
      position.sub(a2);
    }
  });

  if (h) { return position }

  if (ca && c) {
    position.normalize();
    position.multiplyScalar(nHBondDistance);
    position.add(ap);
    return position
  }
}

/**
 * Takes an array of Vector3 objects and
 * converts to an object that looks like an AtomStore
 *
 * @param {Vector3[]} positions - array of positions
 * @return {Object} AtomStore-like object
 */
function buildStoreLike (positions) {
  var n = positions.length;
  var x = new Float32Array(n);
  var y = new Float32Array(n);
  var z = new Float32Array(n);

  for (var i = 0; i < positions.length; i++) {
    var v = positions[ i ];
    x[ i ] = v.x;
    y[ i ] = v.y;
    z[ i ] = v.z;
  }

  return { x: x, y: y, z: z, count: n }
}

/**
 * Color a surface by electrostatic charge. This is a highly approximate
 * calculation! The partial charges are CHARMM with hydrogens added to heavy
 * atoms and hydrogen positions generated for amides.
 *
 * __Name:__ _electrostatic_
 *
 * @example
 * stage.loadFile( "rcsb://3dqb" ).then( function( o ){
 *     o.addRepresentation( "surface", { colorScheme: "electrostatic" } );
 *     o.autoView();
 * } );
 */
var ElectrostaticColormaker = (function (Colormaker$$1) {
  function ElectrostaticColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'rwb';
    }
    if (!params.domain) {
      this.domain = [ -0.5, 0, 0.5 ];
    }

    var scale = this.getScale();

    function chargeForAtom (a) {
      if (!a.isProtein()) { return 0.0 }
      return (
        (partialCharges[ a.resname ] &&
            partialCharges[ a.resname ][ a.atomname ]) ||
        partialCharges[ 'backbone' ][ a.atomname ] || 0.0
      )
    }

    var structure = this.structure;
    var charges = new Float32Array(structure.atomCount);
    var hPositions = [];
    var hCharges = [];

    structure.eachAtom(function (ap) {
      charges[ ap.index ] = chargeForAtom(ap) * ap.occupancy;
      if (ap.atomname === 'N') {
        var hPos = backboneNHPosition(ap);
        if (hPos !== undefined) {
          hPositions.push(hPos);
          hCharges.push(nHCharge * ap.occupancy);
        }
      }
    });

    var bbox = this.structure.getBoundingBox();
    bbox.expandByScalar(nHBondDistance); // Worst case

    // SpatialHash requires x,y,z and count
    var hStore = buildStoreLike(hPositions);
    var hHash = new SpatialHash(hStore, bbox);
    var hash = new SpatialHash(this.structure.atomStore, bbox);

    var ap = this.atomProxy;
    var delta = new Vector3();
    var maxRadius2 = maxRadius * maxRadius;

    this.positionColor = function (v) {
      var p = 0.0;
      var neighbours = hash.within(v.x, v.y, v.z, maxRadius);

      for (var i = 0; i < neighbours.length; i++) {
        var neighbour = neighbours[ i ];
        var charge = charges[ neighbour ];
        if (charge !== 0.0) {
          ap.index = neighbour;
          delta.x = v.x - ap.x;
          delta.y = v.y - ap.y;
          delta.z = v.z - ap.z;
          var r2 = delta.lengthSq();
          if (r2 < maxRadius2) {
            p += charge / r2;
          }
        }
      }

      var hNeighbours = hHash.within(v.x, v.y, v.z, maxRadius);
      for (var i$1 = 0; i$1 < hNeighbours.length; i$1++) {
        var neighbour$1 = hNeighbours[ i$1 ];
        delta.x = v.x - hStore.x[ neighbour$1 ];
        delta.y = v.y - hStore.y[ neighbour$1 ];
        delta.z = v.z - hStore.z[ neighbour$1 ];
        var r2$1 = delta.lengthSq();
        if (r2$1 < maxRadius2) {
          p += hCharges[ neighbour$1 ] / r2$1;
        }
      }
      return scale(p)
    };
  }

  if ( Colormaker$$1 ) ElectrostaticColormaker.__proto__ = Colormaker$$1;
  ElectrostaticColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  ElectrostaticColormaker.prototype.constructor = ElectrostaticColormaker;

  return ElectrostaticColormaker;
}(Colormaker));

ColormakerRegistry.add('electrostatic', ElectrostaticColormaker);

/**
 * @file Element Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// from Jmol http://jmol.sourceforge.net/jscolors/ (or 0xFFFFFF)
var ElementColors = {
  'H': 0xFFFFFF,
  'HE': 0xD9FFFF,
  'LI': 0xCC80FF,
  'BE': 0xC2FF00,
  'B': 0xFFB5B5,
  'C': 0x909090,
  'N': 0x3050F8,
  'O': 0xFF0D0D,
  'F': 0x90E050,
  'NE': 0xB3E3F5,
  'NA': 0xAB5CF2,
  'MG': 0x8AFF00,
  'AL': 0xBFA6A6,
  'SI': 0xF0C8A0,
  'P': 0xFF8000,
  'S': 0xFFFF30,
  'CL': 0x1FF01F,
  'AR': 0x80D1E3,
  'K': 0x8F40D4,
  'CA': 0x3DFF00,
  'SC': 0xE6E6E6,
  'TI': 0xBFC2C7,
  'V': 0xA6A6AB,
  'CR': 0x8A99C7,
  'MN': 0x9C7AC7,
  'FE': 0xE06633,
  'CO': 0xF090A0,
  'NI': 0x50D050,
  'CU': 0xC88033,
  'ZN': 0x7D80B0,
  'GA': 0xC28F8F,
  'GE': 0x668F8F,
  'AS': 0xBD80E3,
  'SE': 0xFFA100,
  'BR': 0xA62929,
  'KR': 0x5CB8D1,
  'RB': 0x702EB0,
  'SR': 0x00FF00,
  'Y': 0x94FFFF,
  'ZR': 0x94E0E0,
  'NB': 0x73C2C9,
  'MO': 0x54B5B5,
  'TC': 0x3B9E9E,
  'RU': 0x248F8F,
  'RH': 0x0A7D8C,
  'PD': 0x006985,
  'AG': 0xC0C0C0,
  'CD': 0xFFD98F,
  'IN': 0xA67573,
  'SN': 0x668080,
  'SB': 0x9E63B5,
  'TE': 0xD47A00,
  'I': 0x940094,
  'XE': 0x940094,
  'CS': 0x57178F,
  'BA': 0x00C900,
  'LA': 0x70D4FF,
  'CE': 0xFFFFC7,
  'PR': 0xD9FFC7,
  'ND': 0xC7FFC7,
  'PM': 0xA3FFC7,
  'SM': 0x8FFFC7,
  'EU': 0x61FFC7,
  'GD': 0x45FFC7,
  'TB': 0x30FFC7,
  'DY': 0x1FFFC7,
  'HO': 0x00FF9C,
  'ER': 0x00E675,
  'TM': 0x00D452,
  'YB': 0x00BF38,
  'LU': 0x00AB24,
  'HF': 0x4DC2FF,
  'TA': 0x4DA6FF,
  'W': 0x2194D6,
  'RE': 0x267DAB,
  'OS': 0x266696,
  'IR': 0x175487,
  'PT': 0xD0D0E0,
  'AU': 0xFFD123,
  'HG': 0xB8B8D0,
  'TL': 0xA6544D,
  'PB': 0x575961,
  'BI': 0x9E4FB5,
  'PO': 0xAB5C00,
  'AT': 0x754F45,
  'RN': 0x428296,
  'FR': 0x420066,
  'RA': 0x007D00,
  'AC': 0x70ABFA,
  'TH': 0x00BAFF,
  'PA': 0x00A1FF,
  'U': 0x008FFF,
  'NP': 0x0080FF,
  'PU': 0x006BFF,
  'AM': 0x545CF2,
  'CM': 0x785CE3,
  'BK': 0x8A4FE3,
  'CF': 0xA136D4,
  'ES': 0xB31FD4,
  'FM': 0xB31FBA,
  'MD': 0xB30DA6,
  'NO': 0xBD0D87,
  'LR': 0xC70066,
  'RF': 0xCC0059,
  'DB': 0xD1004F,
  'SG': 0xD90045,
  'BH': 0xE00038,
  'HS': 0xE6002E,
  'MT': 0xEB0026,
  'DS': 0xFFFFFF,
  'RG': 0xFFFFFF,
  'CN': 0xFFFFFF,
  'UUT': 0xFFFFFF,
  'FL': 0xFFFFFF,
  'UUP': 0xFFFFFF,
  'LV': 0xFFFFFF,
  'UUH': 0xFFFFFF,

  'D': 0xFFFFC0,
  'T': 0xFFFFA0
};
var DefaultElementColor = 0xFFFFFF;

/**
 * Color by element
 */
var ElementColormaker = (function (Colormaker$$1) {
  function ElementColormaker (params) {
    var p = params || {};
    p.value = defaults(p.value, ElementColors.C);

    Colormaker$$1.call(this, p);
  }

  if ( Colormaker$$1 ) ElementColormaker.__proto__ = Colormaker$$1;
  ElementColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  ElementColormaker.prototype.constructor = ElementColormaker;

  ElementColormaker.prototype.atomColor = function atomColor (a) {
    var element = a.element;

    if (element === 'C') {
      return this.value
    } else {
      return ElementColors[ element ] || DefaultElementColor
    }
  };

  return ElementColormaker;
}(Colormaker));

ColormakerRegistry.add('element', ElementColormaker);

/**
 * @file Entityindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by entiry index
 */
var EntityindexColormaker = (function (Colormaker$$1) {
  function EntityindexColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'Spectral';
    }
    if (!params.domain) {
      this.domain = [ 0, this.structure.entityList.length - 1 ];
    }
    var entityindexScale = this.getScale();

    this.atomColor = function (a) {
      return entityindexScale(a.entityIndex)
    };
  }

  if ( Colormaker$$1 ) EntityindexColormaker.__proto__ = Colormaker$$1;
  EntityindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  EntityindexColormaker.prototype.constructor = EntityindexColormaker;

  return EntityindexColormaker;
}(Colormaker));

ColormakerRegistry.add('entityindex', EntityindexColormaker);

/**
 * @file Entitytype Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by entity type
 */
var EntitytypeColormaker = (function (Colormaker$$1) {
  function EntitytypeColormaker () {
    Colormaker$$1.apply(this, arguments);
  }

  if ( Colormaker$$1 ) EntitytypeColormaker.__proto__ = Colormaker$$1;
  EntitytypeColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  EntitytypeColormaker.prototype.constructor = EntitytypeColormaker;

  EntitytypeColormaker.prototype.atomColor = function atomColor (a) {
    var e = a.entity;
    var et = e ? e.entityType : undefined;
    switch (et) {
      case PolymerEntity:
        return 0x7fc97f
      case NonPolymerEntity:
        return 0xfdc086
      case MacrolideEntity:
        return 0xbeaed4
      case WaterEntity:
        return 0x386cb0
      default:
        return 0xffff99
    }
  };

  return EntitytypeColormaker;
}(Colormaker));

ColormakerRegistry.add('entitytype', EntitytypeColormaker);

/**
 * @file Geoquality Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by validation gometry quality
 */
var GeoqualityColormaker = (function (Colormaker$$1) {
  function GeoqualityColormaker (params) {
    Colormaker$$1.call(this, params);

    var val = params.structure.validation || {};
    this.geoAtomDict = val.geoAtomDict || {};
    this.geoDict = val.geoDict || {};
  }

  if ( Colormaker$$1 ) GeoqualityColormaker.__proto__ = Colormaker$$1;
  GeoqualityColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  GeoqualityColormaker.prototype.constructor = GeoqualityColormaker;

  GeoqualityColormaker.prototype.atomColor = function atomColor (atom) {
    var sele = atom.resno;
    if (atom.inscode) { sele += '^' + atom.inscode; }
    if (atom.chainname) { sele += ':' + atom.chainname; }
    sele += '/' + atom.modelIndex;

    var geoProblemCount;
    var geoAtom = this.geoAtomDict[ sele ];
    if (geoAtom !== undefined) {
      var atomProblems = geoAtom[ atom.atomname ] || 0;
      geoProblemCount = countSetBits(atomProblems);
    } else {
      geoProblemCount = this.geoDict[ sele ] || 0;
    }

    if (geoProblemCount === 0) {
      return 0x2166ac
    } else if (geoProblemCount === 1) {
      return 0xfee08b
    } else if (geoProblemCount === 2) {
      return 0xf46d43
    } else if (geoProblemCount >= 3) {
      return 0xa50026
    }
    return 0x909090
  };

  return GeoqualityColormaker;
}(Colormaker));

ColormakerRegistry.add('geoquality', GeoqualityColormaker);

/**
 * @file Hydrophobicity Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by hydrophobicity
 */
var HydrophobicityColormaker = (function (Colormaker$$1) {
  function HydrophobicityColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'RdYlGn';
    }

    var name;
    var idx = 0;  // 0: DGwif, 1: DGwoct, 2: Oct-IF

    var resHF = {};
    for (name in ResidueHydrophobicity) {
      resHF[ name ] = ResidueHydrophobicity[ name ][ idx ];
    }

    if (!params.domain) {
      var val;
      var min = Infinity;
      var max = -Infinity;

      for (name in resHF) {
        val = resHF[ name ];
        min = Math.min(min, val);
        max = Math.max(max, val);
      }

      this.domain = [ min, 0, max ];
    }

    var hfScale = this.getScale();

    this.atomColor = function (a) {
      return hfScale(resHF[ a.resname ] || DefaultResidueHydrophobicity)
    };
  }

  if ( Colormaker$$1 ) HydrophobicityColormaker.__proto__ = Colormaker$$1;
  HydrophobicityColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  HydrophobicityColormaker.prototype.constructor = HydrophobicityColormaker;

  return HydrophobicityColormaker;
}(Colormaker));

ColormakerRegistry.add('hydrophobicity', HydrophobicityColormaker);

/**
 * @file Modelindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by model index
 */
var ModelindexColormaker = (function (Colormaker$$1) {
  function ModelindexColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'rainbow';
    }
    if (!params.domain) {
      this.domain = [ 0, this.structure.modelStore.count ];
    }
    var modelindexScale = this.getScale();

    this.atomColor = function (a) {
      return modelindexScale(a.modelIndex)
    };
  }

  if ( Colormaker$$1 ) ModelindexColormaker.__proto__ = Colormaker$$1;
  ModelindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  ModelindexColormaker.prototype.constructor = ModelindexColormaker;

  return ModelindexColormaker;
}(Colormaker));

ColormakerRegistry.add('modelindex', ModelindexColormaker);

/**
 * @file Moleculetype Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by molecule type
 */
var MoleculetypeColormaker = (function (Colormaker$$1) {
  function MoleculetypeColormaker () {
    Colormaker$$1.apply(this, arguments);
  }

  if ( Colormaker$$1 ) MoleculetypeColormaker.__proto__ = Colormaker$$1;
  MoleculetypeColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  MoleculetypeColormaker.prototype.constructor = MoleculetypeColormaker;

  MoleculetypeColormaker.prototype.atomColor = function atomColor (a) {
    switch (a.residueType.moleculeType) {
      case WaterType:
        return 0x386cb0
      case IonType:
        return 0xf0027f
      case ProteinType:
        return 0xbeaed4
      case RnaType:
        return 0xfdc086
      case DnaType:
        return 0xbf5b17
      case SaccharideType:
        return 0x7fc97f
      default:
        return 0xffff99
    }
  };

  return MoleculetypeColormaker;
}(Colormaker));

ColormakerRegistry.add('moleculetype', MoleculetypeColormaker);

/**
 * @file Occupancy Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by occupancy
 */
var OccupancyColormaker = (function (Colormaker$$1) {
  function OccupancyColormaker (params) {
    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'PuBu';
    }

    if (!params.domain) {
      this.domain = [ 0.0, 1.0 ];
    }

    var occupancyScale = this.getScale();

    this.atomColor = function (a) {
      return occupancyScale(a.occupancy)
    };
  }

  if ( Colormaker$$1 ) OccupancyColormaker.__proto__ = Colormaker$$1;
  OccupancyColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  OccupancyColormaker.prototype.constructor = OccupancyColormaker;

  return OccupancyColormaker;
}(Colormaker));

ColormakerRegistry.add('occupancy', OccupancyColormaker);

/**
 * @file Random Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function randomColor () {
  return Math.random() * 0xFFFFFF
}

/**
 * Class by random color
 */
var RandomColormaker = (function (Colormaker$$1) {
  function RandomColormaker () {
    Colormaker$$1.apply(this, arguments);
  }

  if ( Colormaker$$1 ) RandomColormaker.__proto__ = Colormaker$$1;
  RandomColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  RandomColormaker.prototype.constructor = RandomColormaker;

  RandomColormaker.prototype.atomColor = function atomColor () {
    return randomColor()
  };

    /**
     * get color for volume cell
     * @return {Integer} random hex color
     */
  RandomColormaker.prototype.volumeColor = function volumeColor () {
    return randomColor()
  };

    /**
     * get color for coordinates in space
     * @return {Integer} random hex color
     */
  RandomColormaker.prototype.positionColor = function positionColor () {
    return randomColor()
  };

  return RandomColormaker;
}(Colormaker));

ColormakerRegistry.add('random', RandomColormaker);

/**
 * @file Residueindex Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by residue index
 */
var ResidueindexColormaker = (function (Colormaker$$1) {
  function ResidueindexColormaker (params) {
    var this$1 = this;

    Colormaker$$1.call(this, params);

    if (!params.scale) {
      this.scale = 'rainbow';
      this.reverse = defaults(params.reverse, true);
    }
    if (!params.domain) {
      var scalePerChain = {};

      this.structure.eachChain(function (cp) {
        this$1.domain = [ cp.residueOffset, cp.residueEnd ];
        scalePerChain[ cp.index ] = this$1.getScale();
      });

      this.atomColor = function (a) {
        return scalePerChain[ a.chainIndex ](a.residueIndex)
      };
    } else {
      var residueindexScale = this.getScale();

      this.atomColor = function (a) {
        return residueindexScale(a.residueIndex)
      };
    }
  }

  if ( Colormaker$$1 ) ResidueindexColormaker.__proto__ = Colormaker$$1;
  ResidueindexColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  ResidueindexColormaker.prototype.constructor = ResidueindexColormaker;

  return ResidueindexColormaker;
}(Colormaker));

ColormakerRegistry.add('residueindex', ResidueindexColormaker);

/**
 * @file Resname Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// from Jmol http://jmol.sourceforge.net/jscolors/ (protein + shapely for nucleic)
var ResidueColors = {
  'ALA': 0x8CFF8C,
  'ARG': 0x00007C,
  'ASN': 0xFF7C70,
  'ASP': 0xA00042,
  'CYS': 0xFFFF70,
  'GLN': 0xFF4C4C,
  'GLU': 0x660000,
  'GLY': 0xFFFFFF,
  'HIS': 0x7070FF,
  'ILE': 0x004C00,
  'LEU': 0x455E45,
  'LYS': 0x4747B8,
  'MET': 0xB8A042,
  'PHE': 0x534C52,
  'PRO': 0x525252,
  'SER': 0xFF7042,
  'THR': 0xB84C00,
  'TRP': 0x4F4600,
  'TYR': 0x8C704C,
  'VAL': 0xFF8CFF,

  'ASX': 0xFF00FF,
  'GLX': 0xFF00FF,
  'ASH': 0xFF00FF,
  'GLH': 0xFF00FF,

  'A': 0xA0A0FF,
  'G': 0xFF7070,
  'I': 0x80FFFF,
  'C': 0xFF8C4B,
  'T': 0xA0FFA0,
  'U': 0xFF8080,

  'DA': 0xA0A0FF,
  'DG': 0xFF7070,
  'DI': 0x80FFFF,
  'DC': 0xFF8C4B,
  'DT': 0xA0FFA0,
  'DU': 0xFF8080
};
var DefaultResidueColor = 0xFF00FF;

/**
 * Color by residue name
 */
var ResnameColormaker = (function (Colormaker$$1) {
  function ResnameColormaker () {
    Colormaker$$1.apply(this, arguments);
  }

  if ( Colormaker$$1 ) ResnameColormaker.__proto__ = Colormaker$$1;
  ResnameColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  ResnameColormaker.prototype.constructor = ResnameColormaker;

  ResnameColormaker.prototype.atomColor = function atomColor (a) {
    return ResidueColors[ a.resname ] || DefaultResidueColor
  };

  return ResnameColormaker;
}(Colormaker));

ColormakerRegistry.add('resname', ResnameColormaker);

/**
 * @file Sstruc Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// from Jmol http://jmol.sourceforge.net/jscolors/ (shapely)
var StructureColors = {
  'alphaHelix': 0xFF0080,
  'threeTenHelix': 0xA00080,
  'piHelix': 0x600080,
  'betaStrand': 0xFFC800,
  'betaTurn': 0x6080FF,
  'coil': 0xFFFFFF,

  'dna': 0xAE00FE,
  'rna': 0xFD0162,

  'carbohydrate': 0xA6A6FA
};
var DefaultStructureColor = 0x808080;

/**
 * Color by secondary structure
 */
var SstrucColormaker = (function (Colormaker$$1) {
  function SstrucColormaker (params) {
    Colormaker$$1.call(this, params);

    this.rp = this.structure.getResidueProxy();
  }

  if ( Colormaker$$1 ) SstrucColormaker.__proto__ = Colormaker$$1;
  SstrucColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  SstrucColormaker.prototype.constructor = SstrucColormaker;

  SstrucColormaker.prototype.atomColor = function atomColor (ap) {
    var sstruc = ap.sstruc;
    var rp = this.rp;

    if (sstruc === 'h') {
      return StructureColors.alphaHelix
    } else if (sstruc === 'g') {
      return StructureColors.threeTenHelix
    } else if (sstruc === 'i') {
      return StructureColors.piHelix
    } else if (sstruc === 'e' || sstruc === 'b') {
      return StructureColors.betaStrand
    } else if (sstruc === 't') {
      return StructureColors.betaTurn
    } else {
      rp.index = ap.residueIndex;
      if (rp.isDna()) {
        return StructureColors.dna
      } else if (rp.isRna()) {
        return StructureColors.rna
      } else if (rp.isSaccharide()) {
        return StructureColors.carbohydrate
      } else if (rp.isProtein() || sstruc === 's' || sstruc === 'l') {
        return StructureColors.coil
      } else {
        return DefaultStructureColor
      }
    }
  };

  return SstrucColormaker;
}(Colormaker));

ColormakerRegistry.add('sstruc', SstrucColormaker);

/**
 * @file Uniform Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by uniform color
 */
var UniformColormaker = (function (Colormaker$$1) {
  function UniformColormaker () {
    Colormaker$$1.apply(this, arguments);
  }

  if ( Colormaker$$1 ) UniformColormaker.__proto__ = Colormaker$$1;
  UniformColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  UniformColormaker.prototype.constructor = UniformColormaker;

  UniformColormaker.prototype.atomColor = function atomColor () {
    return this.value
  };

  UniformColormaker.prototype.bondColor = function bondColor () {
    return this.value
  };

  UniformColormaker.prototype.valueColor = function valueColor () {
    return this.value
  };

  UniformColormaker.prototype.volumeColor = function volumeColor () {
    return this.value
  };

  return UniformColormaker;
}(Colormaker));

ColormakerRegistry.add('uniform', UniformColormaker);

/**
 * @file Value Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by volume value
 */
var ValueColormaker = (function (Colormaker$$1) {
  function ValueColormaker (params) {
    Colormaker$$1.call(this, params);
    this.valueScale = this.getScale();
  }

  if ( Colormaker$$1 ) ValueColormaker.__proto__ = Colormaker$$1;
  ValueColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  ValueColormaker.prototype.constructor = ValueColormaker;

    /**
     * return the color for a volume cell
     * @param  {Integer} index - volume cell index
     * @return {Integer} hex cell color
     */
  ValueColormaker.prototype.volumeColor = function volumeColor (index) {
    return this.valueScale(this.volume.data[ index ])
  };

  return ValueColormaker;
}(Colormaker));

ColormakerRegistry.add('value', ValueColormaker);

/**
 * @file Volume Colormaker
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Color by volume position
 */
var VolumeColormaker = (function (Colormaker$$1) {
  function VolumeColormaker (params) {
    Colormaker$$1.call(this, params);

    var volume = this.volume;

    if (volume && volume.inverseMatrix) {
      var valueScale = this.getScale();
      var inverseMatrix = volume.inverseMatrix;
      var data = volume.data;
      var nx = volume.nx;
      var ny = volume.ny;
      var nxy = nx * ny;
      var vec = new Vector3();

      this.positionColor = function (coords) {
        vec.copy(coords);
        vec.applyMatrix4(inverseMatrix);

                // position of grid cell
        var x0 = Math.floor(vec.x);
        var y0 = Math.floor(vec.y);
        var z0 = Math.floor(vec.z);

                // Indices
        var i = ((((z0 * ny) + y0) * nx) + x0);
        var i1 = i + 1;
        var iy = i + nx;
        var iz = i + nxy;
        var i1y = iy + 1;
        var i1z = iz + 1;
        var iyz = iy + nxy;
        var i1yz = iyz + 1;

                // Values
        var v = data[ i ];
        var v1 = data[ i1 ];
        var vy = data[ iy ];
        var vz = data[ iz ];
        var v1y = data[ i1y ];
        var v1z = data[ i1z ];
        var vyz = data[ iyz ];
        var v1yz = data[ i1yz ];

                // Position of point in fraction of grid
        var xd = vec.x - x0;
        var yd = vec.y - y0;
        var zd = vec.z - z0;

                // 1st Dimension
        var c00 = lerp(v, v1, xd);
        var c01 = lerp(vz, v1z, xd);
        var c10 = lerp(vy, v1y, xd);
        var c11 = lerp(vyz, v1yz, xd);

                // 2nd Dimension
        var c0 = lerp(c00, c10, yd);
        var c1 = lerp(c01, c11, yd);

                // 3rd Dimension
        var c = lerp(c0, c1, zd);

        return valueScale(c)
      };
    } else {
      var colorValue = this.value;
      this.positionColor = function () { return colorValue };
    }
  }

  if ( Colormaker$$1 ) VolumeColormaker.__proto__ = Colormaker$$1;
  VolumeColormaker.prototype = Object.create( Colormaker$$1 && Colormaker$$1.prototype );
  VolumeColormaker.prototype.constructor = VolumeColormaker;

    /**
     * return the color for coordinates in space
     * @param  {Vector3} coords - xyz coordinates
     * @return {Integer} hex coords color
     */
  VolumeColormaker.prototype.positionColor = function positionColor (/* coords */) {};

  return VolumeColormaker;
}(Colormaker));

ColormakerRegistry.add('volume', VolumeColormaker);

/**
 * @file Script Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Component wrapping a {@link Script} object
 */
var ScriptComponent = (function (Component$$1) {
  function ScriptComponent (stage, script, params) {
    var this$1 = this;

    var p = params || {};
    p.name = defaults(p.name, script.name);

    Component$$1.call(this, stage, p);

    this.script = script;
    this.status = 'loaded';

    this.script.signals.nameChanged.add(function (value) {
      this$1.setName(value);
    });
  }

  if ( Component$$1 ) ScriptComponent.__proto__ = Component$$1;
  ScriptComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
  ScriptComponent.prototype.constructor = ScriptComponent;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'script' };

  ScriptComponent.prototype.addRepresentation = function addRepresentation () {};

  ScriptComponent.prototype.removeRepresentation = function removeRepresentation () {};

  ScriptComponent.prototype.run = function run () {
    var this$1 = this;

    this.setStatus('running');

    this.script.call(this.stage).then(function () {
      this$1.setStatus('finished');
    });

    this.setStatus('called');
  };

  ScriptComponent.prototype.dispose = function dispose () {
        // TODO dispose script
    this.signals.disposed.dispatch();
  };

  ScriptComponent.prototype.setVisibility = function setVisibility () {};

  ScriptComponent.prototype.getCenter = function getCenter () {};

  ScriptComponent.prototype.getZoom = function getZoom () {};

  ScriptComponent.prototype.getBox = function getBox () {};

  Object.defineProperties( ScriptComponent.prototype, prototypeAccessors );

  return ScriptComponent;
}(Component));

ComponentRegistry.add('script', ScriptComponent);

/**
 * @file Shape Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Component wrapping a {@link Shape} object
 *
 * @example
 * // get a shape component by adding a shape object to the stage
 * var shape = new NGL.Shape( "shape" );
 * shape.addSphere( [ 0, 0, 0 ], [ 1, 0, 0 ], 1.5 );
 * var shapeComponent = stage.addComponentFromObject( shape );
 * shapeComponent.addRepresentation( "buffer" );
 */
var ShapeComponent = (function (Component$$1) {
  function ShapeComponent (stage, shape, params) {
    var p = params || {};
    p.name = defaults(p.name, shape.name);

    Component$$1.call(this, stage, p);

    this.shape = shape;
  }

  if ( Component$$1 ) ShapeComponent.__proto__ = Component$$1;
  ShapeComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
  ShapeComponent.prototype.constructor = ShapeComponent;

  var prototypeAccessors = { type: {} };

    /**
     * Component type
     * @type {String}
     */
  prototypeAccessors.type.get = function () { return 'shape' };

    /**
     * Add a new shape representation to the component
     * @param {String} type - the name of the representation, one of:
     *                        buffer.
     * @param {BufferRepresentationParameters} params - representation parameters
     * @return {RepresentationComponent} the created representation wrapped into
     *                                   a representation component object
     */
  ShapeComponent.prototype.addRepresentation = function addRepresentation (type, params) {
    return Component$$1.prototype.addRepresentation.call(this, type, this.shape, params)
  };

  ShapeComponent.prototype.getBoxUntransformed = function getBoxUntransformed () {
    return this.shape.boundingBox
  };

  ShapeComponent.prototype.getCenterUntransformed = function getCenterUntransformed () {
    return this.shape.center
  };

  ShapeComponent.prototype.dispose = function dispose () {
    this.shape.dispose();
    Component$$1.prototype.dispose.call(this);
  };

  Object.defineProperties( ShapeComponent.prototype, prototypeAccessors );

  return ShapeComponent;
}(Component));

ComponentRegistry.add('shape', ShapeComponent);

/**
 * @file Trajectory Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Trajectory component parameter object.
 * @typedef {Object} TrajectoryComponentParameters - component parameters
 *
 * @property {String} name - component name
 * @property {Integer} initialFrame - initial frame the trajectory is set to
 * @property {Integer} defaultStep - default step size to be used by trajectory players
 * @property {Integer} defaultTimeout - default timeout to be used by trajectory players
 * @property {String} defaultInterpolateType - one of "" (empty string), "linear" or "spline"
 * @property {Integer} defaultInterpolateStep - window size used for interpolation
 * @property {String} defaultMode - either "loop" or "once"
 * @property {String} defaultDirection - either "forward" or "backward"
 */

/**
 * Extends {@link ComponentSignals}
 *
 * @example
 * component.signals.representationAdded.add( function( representationComponent ){ ... } );
 *
 * @typedef {Object} TrajectoryComponentSignals
 * @property {Signal<RepresentationComponent>} frameChanged - on frame change
 * @property {Signal<RepresentationComponent>} playerChanged - on player change
 * @property {Signal<String>} gotNumframes - when frame count is available
 * @property {Signal<String>} parametersChanged - on parameters change
 */

/**
 * Component wrapping a {@link Trajectory} object
 */
var TrajectoryComponent = (function (Component$$1) {
  function TrajectoryComponent (stage, trajectory, params, parent) {
    var this$1 = this;

    var p = params || {};
    p.name = defaults(p.name, trajectory.name);

    Component$$1.call(this, stage, p);

        /**
         * Events emitted by the component
         * @type {TrajectoryComponentSignals}
         */
    this.signals = Object.assign(this.signals, {
      frameChanged: new Signal(),
      playerChanged: new Signal(),
      gotNumframes: new Signal(),
      parametersChanged: new Signal()
    });

    this.trajectory = trajectory;
    this.parent = parent;
    this.status = 'loaded';

    this.defaultStep = defaults(p.defaultStep, undefined);
    this.defaultTimeout = defaults(p.defaultTimeout, 50);
    this.defaultInterpolateType = defaults(p.defaultInterpolateType, '');
    this.defaultInterpolateStep = defaults(p.defaultInterpolateStep, 5);
    this.defaultMode = defaults(p.defaultMode, 'loop');
    this.defaultDirection = defaults(p.defaultDirection, 'forward');

        // signals

    trajectory.signals.frameChanged.add(function (i) {
      this$1.signals.frameChanged.dispatch(i);
    });

    trajectory.signals.playerChanged.add(function (player) {
      this$1.signals.playerChanged.dispatch(player);
    });

    trajectory.signals.gotNumframes.add(function (n) {
      this$1.signals.gotNumframes.dispatch(n);
    });

        //

    if (p.initialFrame !== undefined) {
      this.setFrame(p.initialFrame);
    }
  }

  if ( Component$$1 ) TrajectoryComponent.__proto__ = Component$$1;
  TrajectoryComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
  TrajectoryComponent.prototype.constructor = TrajectoryComponent;

  var prototypeAccessors = { type: {} };

    /**
     * Component type
     * @type {String}
     */
  prototypeAccessors.type.get = function () { return 'trajectory' };

    /**
     * Add trajectory representation
     * @param {String} type - representation type, currently only: "trajectory"
     * @param {RepresentationParameters} params - parameters
     * @return {RepresentationComponent} the added representation component
     */
  TrajectoryComponent.prototype.addRepresentation = function addRepresentation (type, params) {
    return Component$$1.prototype.addRepresentation.call(this, type, this.trajectory, params)
  };

    /**
     * Set the frame of the trajectory
     * @param {Integer} i - frame number
     * @return {undefined}
     */
  TrajectoryComponent.prototype.setFrame = function setFrame (i) {
    this.trajectory.setFrame(i);
  };

    /**
     * Set trajectory parameters
     * @param {TrajectoryParameters} params - trajectory parameters
     * @return {undefined}
     */
  TrajectoryComponent.prototype.setParameters = function setParameters (params) {
    this.trajectory.setParameters(params);
    this.signals.parametersChanged.dispatch(params);
  };

  TrajectoryComponent.prototype.dispose = function dispose () {
    this.trajectory.dispose();
    Component$$1.prototype.dispose.call(this);
  };

  TrajectoryComponent.prototype.getCenter = function getCenter () {};

  Object.defineProperties( TrajectoryComponent.prototype, prototypeAccessors );

  return TrajectoryComponent;
}(Component));

/**
 * @file Frames Trajectory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var FramesTrajectory = (function (Trajectory$$1) {
  function FramesTrajectory (frames, structure, params) {
    Trajectory$$1.call(this, '', structure, params);

    this.name = frames.name;
    this.path = frames.path;

    this.frames = frames.coordinates;
    this.boxes = frames.boxes;

    this.getNumframes();
  }

  if ( Trajectory$$1 ) FramesTrajectory.__proto__ = Trajectory$$1;
  FramesTrajectory.prototype = Object.create( Trajectory$$1 && Trajectory$$1.prototype );
  FramesTrajectory.prototype.constructor = FramesTrajectory;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'frames' };

  FramesTrajectory.prototype.makeAtomIndices = function makeAtomIndices () {
    if (this.structure.type === 'StructureView') {
      this.atomIndices = this.structure.getAtomIndices();
    } else {
      this.atomIndices = null;
    }
  };

  FramesTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
    var coords;
    var frame = this.frames[ i ];

    if (this.atomIndices) {
      var indices = this.atomIndices;
      var m = indices.length;

      coords = new Float32Array(m * 3);

      for (var j = 0; j < m; ++j) {
        var j3 = j * 3;
        var idx3 = indices[ j ] * 3;

        coords[ j3 + 0 ] = frame[ idx3 + 0 ];
        coords[ j3 + 1 ] = frame[ idx3 + 1 ];
        coords[ j3 + 2 ] = frame[ idx3 + 2 ];
      }
    } else {
      coords = new Float32Array(frame);
    }

    var box = this.boxes[ i ];
    var numframes = this.frames.length;

    this.process(i, box, coords, numframes);

    if (typeof callback === 'function') {
      callback();
    }
  };

  FramesTrajectory.prototype.getNumframes = function getNumframes () {
    if (this.frames) {
      this.setNumframes(this.frames.length);
    }
  };

  FramesTrajectory.prototype.getPath = function getPath (index, callback) {
    var this$1 = this;

    var i, j, f;
    var n = this.numframes;
    var k = index * 3;

    var path = new Float32Array(n * 3);

    for (i = 0; i < n; ++i) {
      j = 3 * i;
      f = this$1.frames[ i ];

      path[ j + 0 ] = f[ k + 0 ];
      path[ j + 1 ] = f[ k + 1 ];
      path[ j + 2 ] = f[ k + 2 ];
    }

    callback(path);
  };

  Object.defineProperties( FramesTrajectory.prototype, prototypeAccessors );

  return FramesTrajectory;
}(Trajectory));

/**
 * @file Structure Trajectory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var StructureTrajectory = (function (Trajectory$$1) {
  function StructureTrajectory (trajPath, structure, params) {
    Trajectory$$1.call(this, '', structure, params);
  }

  if ( Trajectory$$1 ) StructureTrajectory.__proto__ = Trajectory$$1;
  StructureTrajectory.prototype = Object.create( Trajectory$$1 && Trajectory$$1.prototype );
  StructureTrajectory.prototype.constructor = StructureTrajectory;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'structure' };

  StructureTrajectory.prototype.makeAtomIndices = function makeAtomIndices () {
    if (this.structure.atomSet.getSize() < this.structure.atomStore.count) {
      this.atomIndices = this.structure.getAtomIndices();
    } else {
      this.atomIndices = null;
    }
  };

  StructureTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
    var coords;
    var structure = this.structure;
    var frame = structure.frames[ i ];

    if (this.atomIndices) {
      var indices = this.atomIndices;
      var m = indices.length;

      coords = new Float32Array(m * 3);

      for (var j = 0; j < m; ++j) {
        var j3 = j * 3;
        var idx3 = indices[ j ] * 3;

        coords[ j3 + 0 ] = frame[ idx3 + 0 ];
        coords[ j3 + 1 ] = frame[ idx3 + 1 ];
        coords[ j3 + 2 ] = frame[ idx3 + 2 ];
      }
    } else {
      coords = new Float32Array(frame);
    }

    var box = structure.boxes[ i ];
    var numframes = structure.frames.length;

    this.process(i, box, coords, numframes);

    if (typeof callback === 'function') {
      callback();
    }
  };

  StructureTrajectory.prototype.getNumframes = function getNumframes () {
    this.setNumframes(this.structure.frames.length);
  };

  StructureTrajectory.prototype.getPath = function getPath (index, callback) {
    var this$1 = this;

    var i, j, f;
    var n = this.numframes;
    var k = index * 3;

    var path = new Float32Array(n * 3);

    for (i = 0; i < n; ++i) {
      j = 3 * i;
      f = this$1.structure.frames[ i ];

      path[ j + 0 ] = f[ k + 0 ];
      path[ j + 1 ] = f[ k + 1 ];
      path[ j + 2 ] = f[ k + 2 ];
    }

    callback(path);
  };

  Object.defineProperties( StructureTrajectory.prototype, prototypeAccessors );

  return StructureTrajectory;
}(Trajectory));

/**
 * @file Remote Trajectory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var RemoteTrajectory = (function (Trajectory$$1) {
  function RemoteTrajectory () {
    Trajectory$$1.apply(this, arguments);
  }

  if ( Trajectory$$1 ) RemoteTrajectory.__proto__ = Trajectory$$1;
  RemoteTrajectory.prototype = Object.create( Trajectory$$1 && Trajectory$$1.prototype );
  RemoteTrajectory.prototype.constructor = RemoteTrajectory;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'remote' };

  RemoteTrajectory.prototype.makeAtomIndices = function makeAtomIndices () {
    var atomIndices = [];

    if (this.structure.type === 'StructureView') {
      var indices = this.structure.getAtomIndices();

      var i, r;
      var p = indices[ 0 ];
      var q = indices[ 0 ];
      var n = indices.length;

      for (i = 1; i < n; ++i) {
        r = indices[ i ];

        if (q + 1 < r) {
          atomIndices.push([ p, q + 1 ]);
          p = r;
        }

        q = r;
      }

      atomIndices.push([ p, q + 1 ]);
    } else {
      atomIndices.push([ 0, this.atomCount ]);
    }

    this.atomIndices = atomIndices;
  };

  RemoteTrajectory.prototype._loadFrame = function _loadFrame (i, callback) {
        // TODO implement max frameCache size, re-use arrays

    var request = new window.XMLHttpRequest();

    var ds = DatasourceRegistry.trajectory;
    var url = ds.getFrameUrl(this.trajPath, i);
    var params = ds.getFrameParams(this.trajPath, this.atomIndices);

    request.open('POST', url, true);
    request.responseType = 'arraybuffer';
    request.setRequestHeader(
            'Content-type', 'application/x-www-form-urlencoded'
        );

    request.addEventListener('load', function () {
      var arrayBuffer = request.response;
      if (!arrayBuffer) {
        Log.error("empty arrayBuffer for '" + url + "'");
        return
      }

      var numframes = new Int32Array(arrayBuffer, 0, 1)[ 0 ];
            // var time = new Float32Array( arrayBuffer, 1 * 4, 1 )[ 0 ];
      var box = new Float32Array(arrayBuffer, 2 * 4, 9);
      var coords = new Float32Array(arrayBuffer, 11 * 4);

      this.process(i, box, coords, numframes);
      if (typeof callback === 'function') {
        callback();
      }
    }.bind(this), false);

    request.send(params);
  };

  RemoteTrajectory.prototype.getNumframes = function getNumframes () {
    var request = new window.XMLHttpRequest();

    var ds = DatasourceRegistry.trajectory;
    var url = ds.getNumframesUrl(this.trajPath);

    request.open('GET', url, true);
    request.addEventListener('load', function () {
      this.setNumframes(parseInt(request.response));
    }.bind(this), false);
    request.send(null);
  };

  RemoteTrajectory.prototype.getPath = function getPath (index, callback) {
    if (this.pathCache[ index ]) {
      callback(this.pathCache[ index ]);
      return
    }

    Log.time('loadPath');

    var request = new window.XMLHttpRequest();

    var ds = DatasourceRegistry.trajectory;
    var url = ds.getPathUrl(this.trajPath, index);
    var params = '';

    request.open('POST', url, true);
    request.responseType = 'arraybuffer';
    request.setRequestHeader(
            'Content-type', 'application/x-www-form-urlencoded'
        );

    request.addEventListener('load', function () {
      Log.timeEnd('loadPath');

      var arrayBuffer = request.response;
      if (!arrayBuffer) {
        Log.error("empty arrayBuffer for '" + url + "'");
        return
      }

      var path = new Float32Array(arrayBuffer);
            // Log.log( path )
      this.pathCache[ index ] = path;
      callback(path);
    }.bind(this), false);

    request.send(params);
  };

  Object.defineProperties( RemoteTrajectory.prototype, prototypeAccessors );

  return RemoteTrajectory;
}(Trajectory));

/**
 * @file Trajectory Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function makeTrajectory (trajSrc, structure, params) {
  var traj;

  if (trajSrc && trajSrc.type === 'Frames') {
    traj = new FramesTrajectory(trajSrc, structure, params);
  } else if (!trajSrc && structure.frames) {
    traj = new StructureTrajectory(trajSrc, structure, params);
  } else {
    traj = new RemoteTrajectory(trajSrc, structure, params);
  }

  return traj
}

/**
 * @file Structure View
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Get view on structure restricted to the selection
 * @param  {Selection} selection - the selection
 * @return {StructureView} the view on the structure
 */
Structure.prototype.getView = function (selection) {
    // added here to avoid cyclic import dependency
  return new StructureView(this, selection)
};

/**
 * View on the structure, restricted to the selection
 */
var StructureView = (function (Structure$$1) {
  function StructureView (structure, selection) {
    Structure$$1.call(this);

    this.structure = structure;
    this.selection = selection;

    this.center = new Vector3();
    this.boundingBox = new Box3();

    this._bp = this.getBondProxy();
    this._ap = this.getAtomProxy();
    this._rp = this.getResidueProxy();
    this._cp = this.getChainProxy();

    if (this.selection) {
      this.selection.signals.stringChanged.add(this.refresh, this);
    }

    this.structure.signals.refreshed.add(this.refresh, this);

    this.refresh();
  }

  if ( Structure$$1 ) StructureView.__proto__ = Structure$$1;
  StructureView.prototype = Object.create( Structure$$1 && Structure$$1.prototype );
  StructureView.prototype.constructor = StructureView;

  var prototypeAccessors = { type: {},name: {},path: {},title: {},id: {},atomSetDict: {},biomolDict: {},entityList: {},unitcell: {},frames: {},boxes: {},validation: {},bondStore: {},backboneBondStore: {},rungBondStore: {},atomStore: {},residueStore: {},chainStore: {},modelStore: {},atomMap: {},residueMap: {},bondHash: {},spatialHash: {} };

  StructureView.prototype.init = function init () {};

  prototypeAccessors.type.get = function () { return 'StructureView' };

  prototypeAccessors.name.get = function () { return this.structure.name };
  prototypeAccessors.path.get = function () { return this.structure.path };
  prototypeAccessors.title.get = function () { return this.structure.title };
  prototypeAccessors.id.get = function () { return this.structure.id };
  prototypeAccessors.atomSetDict.get = function () { return this.structure.atomSetDict };
  prototypeAccessors.biomolDict.get = function () { return this.structure.biomolDict };
  prototypeAccessors.entityList.get = function () { return this.structure.entityList };
  prototypeAccessors.unitcell.get = function () { return this.structure.unitcell };
  prototypeAccessors.frames.get = function () { return this.structure.frames };
  prototypeAccessors.boxes.get = function () { return this.structure.boxes };
  prototypeAccessors.validation.get = function () { return this.structure.validation };
  prototypeAccessors.bondStore.get = function () { return this.structure.bondStore };
  prototypeAccessors.backboneBondStore.get = function () { return this.structure.backboneBondStore };
  prototypeAccessors.rungBondStore.get = function () { return this.structure.rungBondStore };
  prototypeAccessors.atomStore.get = function () { return this.structure.atomStore };
  prototypeAccessors.residueStore.get = function () { return this.structure.residueStore };
  prototypeAccessors.chainStore.get = function () { return this.structure.chainStore };
  prototypeAccessors.modelStore.get = function () { return this.structure.modelStore };
  prototypeAccessors.atomMap.get = function () { return this.structure.atomMap };
  prototypeAccessors.residueMap.get = function () { return this.structure.residueMap };
  prototypeAccessors.bondHash.get = function () { return this.structure.bondHash };
  prototypeAccessors.spatialHash.get = function () { return this.structure.spatialHash };

    /**
     * Updates atomSet, bondSet, atomSetCache, atomCount, bondCount, boundingBox, center.
     * @emits {Structure.signals.refreshed} when refreshed
     * @return {undefined}
     */
  StructureView.prototype.refresh = function refresh () {
    var this$1 = this;

    if (Debug) { Log.time('StructureView.refresh'); }

    this.atomSetCache = {};

    this.atomSet = this.getAtomSet(this.selection, true);
    if (this.structure.atomSet) {
      this.atomSet = this.atomSet.intersection(this.structure.atomSet);
    }

    this.bondSet = this.getBondSet();

    for (var name in this$1.atomSetDict) {
      var atomSet = this$1.atomSetDict[ name ];
      this$1.atomSetCache[ '__' + name ] = atomSet.makeIntersection(this$1.atomSet);
    }

    this.atomCount = this.atomSet.getSize();
    this.bondCount = this.bondSet.getSize();

    this.boundingBox = this.getBoundingBox();
    this.center = this.boundingBox.getCenter();

    if (Debug) { Log.timeEnd('StructureView.refresh'); }

    this.signals.refreshed.dispatch();
  };

    //

  StructureView.prototype.setSelection = function setSelection (selection) {
    this.selection = selection;

    this.refresh();
  };

  StructureView.prototype.getSelection = function getSelection (selection) {
    var seleList = [];

    if (selection && selection.string) {
      seleList.push(selection.string);
    }

    var parentSelection = this.structure.getSelection();
    if (parentSelection && parentSelection.string) {
      seleList.push(parentSelection.string);
    }

    if (this.selection && this.selection.string) {
      seleList.push(this.selection.string);
    }

    var sele = '';
    if (seleList.length > 0) {
      sele = '( ' + seleList.join(' ) AND ( ') + ' )';
    }

    return new Selection(sele)
  };

  StructureView.prototype.getStructure = function getStructure () {
    return this.structure.getStructure()
  };

    //

  StructureView.prototype.eachBond = function eachBond (callback, selection) {
    this.structure.eachBond(callback, this.getSelection(selection));
  };

  StructureView.prototype.eachAtom = function eachAtom (callback, selection) {
    var ap = this.getAtomProxy();
    var atomSet = this.getAtomSet(selection);
    var n = this.atomStore.count;

    if (atomSet.getSize() < n) {
      atomSet.forEach(function (index) {
        ap.index = index;
        callback(ap);
      });
    } else {
      for (var i = 0; i < n; ++i) {
        ap.index = i;
        callback(ap);
      }
    }
  };

  StructureView.prototype.eachResidue = function eachResidue (callback, selection) {
    this.structure.eachResidue(callback, this.getSelection(selection));
  };

    /**
     * Not implemented
     * @alias StructureView#eachResidueN
     * @return {undefined}
     */
  StructureView.prototype.eachResidueN = function eachResidueN (/* n, callback */) {
    console.error('StructureView.eachResidueN() not implemented');
  };

  StructureView.prototype.eachChain = function eachChain (callback, selection) {
    this.structure.eachChain(callback, this.getSelection(selection));
  };

  StructureView.prototype.eachModel = function eachModel (callback, selection) {
    this.structure.eachModel(callback, this.getSelection(selection));
  };

    //

  StructureView.prototype.getAtomSet = function getAtomSet (selection, ignoreView) {
    var atomSet = this.structure.getAtomSet(selection);
    if (!ignoreView && this.atomSet) {
      atomSet = atomSet.makeIntersection(this.atomSet);
    }

    return atomSet
  };

    //

  StructureView.prototype.getAtomIndices = function getAtomIndices (selection) {
    return this.structure.getAtomIndices(this.getSelection(selection))
  };

  StructureView.prototype.refreshPosition = function refreshPosition () {
    return this.structure.refreshPosition()
  };

    //

  StructureView.prototype.dispose = function dispose () {
    if (this.selection) {
      this.selection.signals.stringChanged.remove(this.refresh, this);
    }

    this.structure.signals.refreshed.remove(this.refresh, this);

    delete this.structure;

    delete this.atomSet;
    delete this.bondSet;

    delete this.atomCount;
    delete this.bondCount;
  };

  Object.defineProperties( StructureView.prototype, prototypeAccessors );

  return StructureView;
}(Structure));

/**
 * @file Sturucture Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Extends {@link ComponentSignals}
 *
 * @example
 * component.signals.representationAdded.add( function( representationComponent ){ ... } );
 *
 * @typedef {Object} StructureComponentSignals
 * @property {Signal<RepresentationComponent>} trajectoryAdded - when a trajectory is added
 * @property {Signal<RepresentationComponent>} trajectoryRemoved - when a trajectory is removed
 * @property {Signal<String>} defaultAssemblyChanged - on default assembly change
 */

/**
 * Component wrapping a {@link Structure} object
 *
 * @example
 * // get a structure component by loading a structure file into the stage
 * stage.loadFile( "rcsb://4opj" ).then( function( structureComponent ){
 *     structureComponent.addRepresentation( "cartoon" );
 *     structureComponent.autoView();
 * } );
 */
var StructureComponent = (function (Component$$1) {
  function StructureComponent (stage, structure, params) {
    var p = params || {};
    p.name = defaults(p.name, structure.name);

    Component$$1.call(this, stage, p);

        /**
         * Events emitted by the component
         * @type {StructureComponentSignals}
         */
    this.signals = Object.assign(this.signals, {
      trajectoryAdded: new Signal(),
      trajectoryRemoved: new Signal(),
      defaultAssemblyChanged: new Signal()
    });

        /**
         * The wrapped structure
         * @type {Structure}
         */
    this.structure = structure;

    this.trajList = [];
    this.initSelection(p.sele);
    this.setDefaultAssembly(p.assembly || '');
  }

  if ( Component$$1 ) StructureComponent.__proto__ = Component$$1;
  StructureComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
  StructureComponent.prototype.constructor = StructureComponent;

  var prototypeAccessors = { type: {} };

    /**
     * Component type
     * @type {String}
     */
  prototypeAccessors.type.get = function () { return 'structure' };

    /**
     * Initialize selection
     * @private
     * @param {String} sele - selection string
     * @return {undefined}
     */
  StructureComponent.prototype.initSelection = function initSelection (sele) {
    var this$1 = this;

        /**
         * Selection for {@link StructureComponent#structureView}
         * @private
         * @type {Selection}
         */
    this.selection = new Selection(sele);

        /**
         * View on {@link StructureComponent#structure}.
         * Change its selection via {@link StructureComponent#setSelection}.
         * @type {StructureView}
         */
    this.structureView = new StructureView(
            this.structure, this.selection
        );

    this.selection.signals.stringChanged.add(function () {
      this$1.structureView.setSelection(this$1.selection);

      this$1.rebuildRepresentations();
      this$1.rebuildTrajectories();
    });
  };

    /**
     * Set selection of {@link StructureComponent#structureView}
     * @param {String} string - selection string
     * @return {StructureComponent} this object
     */
  StructureComponent.prototype.setSelection = function setSelection (string) {
    this.selection.setString(string);

    return this
  };

    /**
     * Set the default assembly
     * @param {String} value - assembly name
     * @return {undefined}
     */
  StructureComponent.prototype.setDefaultAssembly = function setDefaultAssembly (value) {
    var this$1 = this;

    this.defaultAssembly = value;
    this.reprList.forEach(function (repr) {
      repr.setParameters({ defaultAssembly: this$1.defaultAssembly });
    });
    this.signals.defaultAssemblyChanged.dispatch(value);
  };

    /**
     * Rebuild all representations
     * @return {undefined}
     */
  StructureComponent.prototype.rebuildRepresentations = function rebuildRepresentations () {
    this.reprList.forEach(function (repr) {
      repr.build();
    });
  };

    /**
     * Rebuild all trajectories
     * @return {undefined}
     */
  StructureComponent.prototype.rebuildTrajectories = function rebuildTrajectories () {
    var this$1 = this;

    this.trajList.slice().forEach(function (trajComp) {
      trajComp.trajectory.setStructure(this$1.structureView);
    });
  };

    /**
     * Add a new structure representation to the component
     * @param {String} type - the name of the representation, one of:
     *                        axes, backbone, ball+stick, base, cartoon, contact,
     *                        distance, helixorient, hyperball, label, licorice, line
     *                        surface, ribbon, rocket, rope, spacefill, trace, tube,
     *                        unitcell.
     * @param {StructureRepresentationParameters} params - representation parameters
     * @return {RepresentationComponent} the created representation wrapped into
     *                                   a representation component object
     */
  StructureComponent.prototype.addRepresentation = function addRepresentation (type, params) {
    var p = params || {};
    p.defaultAssembly = this.defaultAssembly;

    return Component$$1.prototype.addRepresentation.call(this, type, this.structureView, p)
  };

    /**
     * Add a new trajectory component to the structure
     * @param {String|Frames} trajPath - path or frames object
     * @param {TrajectoryComponentParameters|TrajectoryParameters} params - parameters
     * @return {TrajectoryComponent} the created trajectory component object
     */
  StructureComponent.prototype.addTrajectory = function addTrajectory (trajPath, params) {
    var this$1 = this;

    var traj = makeTrajectory(trajPath, this.structureView, params);

    traj.signals.frameChanged.add(function () {
      this$1.updateRepresentations({ 'position': true });
    });

    var trajComp = new TrajectoryComponent(this.stage, traj, params, this);
    this.trajList.push(trajComp);
    this.signals.trajectoryAdded.dispatch(trajComp);

    return trajComp
  };

  StructureComponent.prototype.removeTrajectory = function removeTrajectory (traj) {
    var idx = this.trajList.indexOf(traj);
    if (idx !== -1) {
      this.trajList.splice(idx, 1);
    }

    traj.dispose();

    this.signals.trajectoryRemoved.dispatch(traj);
  };

  StructureComponent.prototype.dispose = function dispose () {
        // copy via .slice because side effects may change trajList
    this.trajList.slice().forEach(function (traj) {
      traj.dispose();
    });

    this.trajList.length = 0;
    this.structure.dispose();

    Component$$1.prototype.dispose.call(this);
  };

    /**
     * Automatically center and zoom the component
     * @param  {String|Integer} [sele] - selection string or duration if integer
     * @param  {Integer} [duration] - duration of the animation, defaults to 0
     * @return {undefined}
     */
  StructureComponent.prototype.autoView = function autoView (sele, duration) {
    if (Number.isInteger(sele)) {
      duration = sele;
      sele = undefined;
    }

    this.stage.animationControls.zoomMove(
            this.getCenter(sele),
            this.getZoom(sele),
            defaults(duration, 0)
        );
  };

  StructureComponent.prototype.getBoxUntransformed = function getBoxUntransformed (sele) {
    var bb;

    if (sele) {
      bb = this.structureView.getBoundingBox(new Selection(sele));
    } else {
      bb = this.structureView.boundingBox;
    }

    return bb
  };

  StructureComponent.prototype.getCenterUntransformed = function getCenterUntransformed (sele) {
    if (sele && typeof sele === 'string') {
      return this.structure.atomCenter(new Selection(sele))
    } else {
      return this.structure.center
    }
  };

  StructureComponent.prototype.superpose = function superpose$1 (component, align, sele1, sele2) {
    superpose(
            this.structureView, component.structureView, align, sele1, sele2
        );

    this.updateRepresentations({ 'position': true });

    return this
  };

  StructureComponent.prototype.setVisibility = function setVisibility (value) {
    Component$$1.prototype.setVisibility.call(this, value);

    this.trajList.forEach(function (traj) {
            // FIXME ???
      traj.setVisibility(value);
    });

    return this
  };

  Object.defineProperties( StructureComponent.prototype, prototypeAccessors );

  return StructureComponent;
}(Component));

ComponentRegistry.add('structure', StructureComponent);
ComponentRegistry.add('structureview', StructureComponent);

/**
 * @file Surface Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Component wrapping a {@link Surface} object
 *
 * @example
 * // get a surface component by loading a surface file into the stage
 * stage.loadFile( "url/for/surface" ).then( function( surfaceComponent ){
 *     surfaceComponent.addRepresentation( "surface" );
 *     surfaceComponent.autoView();
 * } );
 */
var SurfaceComponent = (function (Component$$1) {
  function SurfaceComponent (stage, surface, params) {
    var p = params || {};
    p.name = defaults(p.name, surface.name);

    Component$$1.call(this, stage, p);

    this.surface = surface;
  }

  if ( Component$$1 ) SurfaceComponent.__proto__ = Component$$1;
  SurfaceComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
  SurfaceComponent.prototype.constructor = SurfaceComponent;

  var prototypeAccessors = { type: {} };

    /**
     * Component type
     * @type {String}
     */
  prototypeAccessors.type.get = function () { return 'surface' };

    /**
     * Add a new surface representation to the component
     * @param {String} type - the name of the representation, one of:
     *                        surface, dot.
     * @param {SurfaceRepresentationParameters} params - representation parameters
     * @return {RepresentationComponent} the created representation wrapped into
     *                                   a representation component object
     */
  SurfaceComponent.prototype.addRepresentation = function addRepresentation (type, params) {
    return Component$$1.prototype.addRepresentation.call(this, type, this.surface, params)
  };

  SurfaceComponent.prototype.getBoxUntransformed = function getBoxUntransformed () {
    return this.surface.boundingBox
  };

  SurfaceComponent.prototype.getCenterUntransformed = function getCenterUntransformed () {
    return this.surface.center
  };

  SurfaceComponent.prototype.dispose = function dispose () {
    this.surface.dispose();
    Component$$1.prototype.dispose.call(this);
  };

  Object.defineProperties( SurfaceComponent.prototype, prototypeAccessors );

  return SurfaceComponent;
}(Component));

ComponentRegistry.add('surface', SurfaceComponent);

/**
 * @file Volume Component
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Component wrapping a {@link Volume} object
 *
 * @example
 * // get a volume component by loading a volume file into the stage
 * stage.loadFile( "url/for/volume" ).then( function( volumeComponent ){
 *     volumeComponent.addRepresentation( "surface" );
 *     volumeComponent.autoView();
 * } );
 */
var VolumeComponent = (function (Component$$1) {
  function VolumeComponent (stage, volume, params) {
    var p = params || {};
    p.name = defaults(p.name, volume.name);

    Component$$1.call(this, stage, p);

    this.volume = volume;
  }

  if ( Component$$1 ) VolumeComponent.__proto__ = Component$$1;
  VolumeComponent.prototype = Object.create( Component$$1 && Component$$1.prototype );
  VolumeComponent.prototype.constructor = VolumeComponent;

  var prototypeAccessors = { type: {} };

    /**
     * Component type
     * @type {String}
     */
  prototypeAccessors.type.get = function () { return 'volume' };

    /**
     * Add a new volume representation to the component
     * @param {String} type - the name of the representation, one of:
     *                        surface, dot.
     * @param {VolumeRepresentationParameters} params - representation parameters
     * @return {RepresentationComponent} the created representation wrapped into
     *                                   a representation component object
     */
  VolumeComponent.prototype.addRepresentation = function addRepresentation (type, params) {
    return Component$$1.prototype.addRepresentation.call(this, type, this.volume, params)
  };

  VolumeComponent.prototype.getBoxUntransformed = function getBoxUntransformed () {
    return this.volume.boundingBox
  };

  VolumeComponent.prototype.getCenterUntransformed = function getCenterUntransformed () {
    return this.volume.center
  };

  VolumeComponent.prototype.dispose = function dispose () {
    this.volume.dispose();

    Component$$1.prototype.dispose.call(this);
  };

  Object.defineProperties( VolumeComponent.prototype, prototypeAccessors );

  return VolumeComponent;
}(Component));

ComponentRegistry.add('volume', VolumeComponent);

/**
 * @file Axes Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Axes representation. Show principal axes and/or a box aligned with them
 * that fits the structure or selection.
 *
 * __Name:__ _axes_
 *
 * @example
 * stage.loadFile( "rcsb://3pqr", {
 *     assembly: "BU1"
 * } ).then( function( o ){
 *     o.addRepresentation( "cartoon" );
 *     o.addRepresentation( "axes", {
 *         sele: "RET", showAxes: false, showBox: true, radius: 0.2
 *     } );
 *     o.addRepresentation( "ball+stick", { sele: "RET" } );
 *     o.addRepresentation( "axes", {
 *         sele: ":B and backbone", showAxes: false, showBox: true, radius: 0.2
 *     } );
 *     stage.autoView();
 *     var pa = o.structure.getPrincipalAxes();
 *     stage.animationControls.rotate( pa.getRotationQuaternion(), 1500 );
 * } );
 */
var AxesRepresentation = (function (StructureRepresentation$$1) {
  function AxesRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'axes';

    this.parameters = Object.assign({

      radius: {
        type: 'number', precision: 3, max: 10.0, min: 0.001
      },
      sphereDetail: true,
      radialSegments: true,
      disableImpostor: true,
      showAxes: {
        type: 'boolean', rebuild: true
      },
      showBox: {
        type: 'boolean', rebuild: true
      }

    }, this.parameters, {
      assembly: null
    });

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) AxesRepresentation.__proto__ = StructureRepresentation$$1;
  AxesRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  AxesRepresentation.prototype.constructor = AxesRepresentation;

  AxesRepresentation.prototype.init = function init (params) {
    var p = params || {};

    p.radius = defaults(p.radius, 0.5);
    p.colorValue = defaults(p.colorValue, 'lightgreen');

    this.showAxes = defaults(p.showAxes, true);
    this.showBox = defaults(p.showBox, false);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  AxesRepresentation.prototype.getPrincipalAxes = function getPrincipalAxes (/* sview */) {
    var selection;
    var assembly = this.getAssembly();

    if (assembly) {
      selection = assembly.partList[ 0 ].getSelection();
    }

    return this.structureView.getPrincipalAxes(selection)
  };

  AxesRepresentation.prototype.getAxesData = function getAxesData (sview) {
    var pa = this.getPrincipalAxes(sview);
    var c = new Color(this.colorValue);

    var vn = 0;
    var en = 0;

    if (this.showAxes) {
      vn += 6;
      en += 3;
    }

    if (this.showBox) {
      vn += 8;
      en += 12;
    }

    var vertexPosition = new Float32Array(3 * vn);
    var vertexColor = uniformArray3(vn, c.r, c.g, c.b);
    var vertexRadius = uniformArray(vn, this.radius);

    var edgePosition1 = new Float32Array(3 * en);
    var edgePosition2 = new Float32Array(3 * en);
    var edgeColor = uniformArray3(en, c.r, c.g, c.b);
    var edgeRadius = uniformArray(en, this.radius);

    var offset = 0;

    if (this.showAxes) {
      var addAxis = function (v1, v2) {
        v1.toArray(vertexPosition, offset * 2);
        v2.toArray(vertexPosition, offset * 2 + 3);
        v1.toArray(edgePosition1, offset);
        v2.toArray(edgePosition2, offset);
        offset += 3;
      };

      addAxis(pa.begA, pa.endA);
      addAxis(pa.begB, pa.endB);
      addAxis(pa.begC, pa.endC);
    }

    if (this.showBox) {
      var v = new Vector3();
      var ref = pa.getProjectedScaleForAtoms(sview);
      var d1a = ref.d1a;
      var d2a = ref.d2a;
      var d3a = ref.d3a;
      var d1b = ref.d1b;
      var d2b = ref.d2b;
      var d3b = ref.d3b;

      console.log(d1a, d2a, d3a, d1b, d2b, d3b);

      var offset2 = offset * 2;
      var addCorner = function (d1, d2, d3) {
        v.copy(pa.center)
                    .addScaledVector(pa.normVecA, d1)
                    .addScaledVector(pa.normVecB, d2)
                    .addScaledVector(pa.normVecC, d3);
        v.toArray(vertexPosition, offset2);
        offset2 += 3;
      };
      addCorner(d1a, d2a, d3a);
      addCorner(d1a, d2a, d3b);
      addCorner(d1a, d2b, d3b);
      addCorner(d1a, d2b, d3a);
      addCorner(d1b, d2b, d3b);
      addCorner(d1b, d2b, d3a);
      addCorner(d1b, d2a, d3a);
      addCorner(d1b, d2a, d3b);

      var edgeOffset = offset;
      var addEdge = function (a, b) {
        v.fromArray(vertexPosition, offset * 2 + a * 3)
                    .toArray(edgePosition1, edgeOffset);
        v.fromArray(vertexPosition, offset * 2 + b * 3)
                    .toArray(edgePosition2, edgeOffset);
        edgeOffset += 3;
      };
      addEdge(0, 1);
      addEdge(0, 3);
      addEdge(0, 6);
      addEdge(1, 2);
      addEdge(1, 7);
      addEdge(2, 3);
      addEdge(2, 4);
      addEdge(3, 5);
      addEdge(4, 5);
      addEdge(4, 7);
      addEdge(5, 6);
      addEdge(6, 7);
    }

    var picker = new AxesPicker(pa);

    return {
      vertex: {
        position: vertexPosition,
        color: vertexColor,
        radius: vertexRadius,
        picking: picker
      },
      edge: {
        position1: edgePosition1,
        position2: edgePosition2,
        color: edgeColor,
        color2: edgeColor,
        radius: edgeRadius,
        picking: picker
      }
    }
  };

  AxesRepresentation.prototype.create = function create () {
    var axesData = this.getAxesData(this.structureView);

    this.sphereBuffer = new SphereBuffer(
            axesData.vertex,
            this.getBufferParams({
              sphereDetail: this.sphereDetail,
              disableImpostor: this.disableImpostor,
              dullInterior: true
            })
        );

    this.cylinderBuffer = new CylinderBuffer(
            axesData.edge,
            this.getBufferParams({
              openEnded: true,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
            })
        );

    this.dataList.push({
      sview: this.structureView,
      bufferList: [ this.sphereBuffer, this.cylinderBuffer ]
    });
  };

  AxesRepresentation.prototype.updateData = function updateData (what, data) {
    var axesData = this.getAxesData(data.sview);
    var sphereData = {};
    var cylinderData = {};

    if (!what || what.position) {
      sphereData.position = axesData.vertex.position;
      cylinderData.position1 = axesData.edge.position1;
      cylinderData.position2 = axesData.edge.position2;
    }

    if (!what || what.color) {
      sphereData.color = axesData.vertex.color;
      cylinderData.color = axesData.edge.color;
      cylinderData.color2 = axesData.edge.color;
    }

    if (!what || what.radius) {
      sphereData.radius = axesData.vertex.radius;
      cylinderData.radius = axesData.edge.radius;
    }

    this.sphereBuffer.setAttributes(sphereData);
    this.cylinderBuffer.setAttributes(cylinderData);
  };

  return AxesRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('axes', AxesRepresentation);

/**
 * @file Ball And Stick Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Ball And Stick representation parameter object. Extends {@link RepresentationParameters} and
 * {@link StructureRepresentationParameters}.
 *
 * @typedef {Object} BallAndStickRepresentationParameters - ball and stick representation parameters
 *
 * @property {Integer} sphereDetail - sphere quality (icosahedron subdivisions)
 * @property {Integer} radialSegments - cylinder quality (number of segments)
 * @property {Boolean} openEnded - capped or not
 * @property {Boolean} disableImpostor - disable use of raycasted impostors for rendering
 * @property {Float} aspectRatio - size difference between atom and bond radii
 * @property {Boolean} lineOnly - render only bonds, and only as lines
 * @property {Boolean} cylinderOnly - render only bonds (no atoms)
 * @property {String} multipleBond - one off "off", "symmetric", "offset"
 * @property {Float} bondSpacing - spacing for multiple bond rendering
 * @property {Float} bondScale - scale/radius for multiple bond rendering
 */

/**
 * Ball And Stick representation. Show atoms as spheres and bonds as cylinders.
 *
 * __Name:__ _ball+stick_
 *
 * @example
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     o.addRepresentation( "ball+stick" );
 *     o.autoView();
 * } );
 */
var BallAndStickRepresentation = (function (StructureRepresentation$$1) {
  function BallAndStickRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'ball+stick';

    this.parameters = Object.assign({

      sphereDetail: true,
      radialSegments: true,
      openEnded: true,
      disableImpostor: true,
      aspectRatio: {
        type: 'number', precision: 1, max: 10.0, min: 1.0
      },
      lineOnly: {
        type: 'boolean', rebuild: true
      },
      cylinderOnly: {
        type: 'boolean', rebuild: true
      },
      multipleBond: {
        type: 'select',
        rebuild: true,
        options: {
          'off': 'off',
          'symmetric': 'symmetric',
          'offset': 'offset'
        }
      },
      bondScale: {
        type: 'number', precision: 2, max: 1.0, min: 0.01
      },
      bondSpacing: {
        type: 'number', precision: 2, max: 2.0, min: 0.5
      }

    }, this.parameters);

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) BallAndStickRepresentation.__proto__ = StructureRepresentation$$1;
  BallAndStickRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  BallAndStickRepresentation.prototype.constructor = BallAndStickRepresentation;

  BallAndStickRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.radius = defaults(p.radius, 0.15);

    this.aspectRatio = defaults(p.aspectRatio, 2.0);
    this.lineOnly = defaults(p.lineOnly, false);
    this.cylinderOnly = defaults(p.cylinderOnly, false);
    this.multipleBond = defaults(p.multipleBond, 'off');
    this.bondSpacing = defaults(p.bondSpacing, 1.0);
    this.bondScale = defaults(p.bondScale, 0.4);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  BallAndStickRepresentation.prototype.getAtomParams = function getAtomParams (what, params) {
    params = Object.assign({
      radiusParams: { 'radius': this.radius, 'scale': this.scale * this.aspectRatio }
    }, params);

    return StructureRepresentation$$1.prototype.getAtomParams.call(this, what, params)
  };

  BallAndStickRepresentation.prototype.getAtomData = function getAtomData (sview, what, params) {
    return sview.getAtomData(this.getAtomParams(what, params))
  };

  BallAndStickRepresentation.prototype.getBondParams = function getBondParams (what, params) {
    params = Object.assign({
      multipleBond: this.multipleBond,
      bondSpacing: this.bondSpacing,
      bondScale: this.bondScale
    }, params);

    return StructureRepresentation$$1.prototype.getBondParams.call(this, what, params)
  };

  BallAndStickRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
    return sview.getBondData(this.getBondParams(what, params))
  };

  BallAndStickRepresentation.prototype.createData = function createData (sview) {
    var bondData = this.getBondData(sview);
    var bufferList = [];

    if (this.lineOnly) {
      this.lineBuffer = new LineBuffer(
                bondData,
                this.getBufferParams()
            );

      bufferList.push(this.lineBuffer);
    } else {
      var cylinderBuffer = new CylinderBuffer(
                bondData,
                this.getBufferParams({
                  openEnded: this.openEnded,
                  radialSegments: this.radialSegments,
                  disableImpostor: this.disableImpostor,
                  dullInterior: true
                })
            );

      bufferList.push(cylinderBuffer);

      if (!this.cylinderOnly) {
        var sphereBuffer = new SphereBuffer(
                    this.getAtomData(sview),
                    this.getBufferParams({
                      sphereDetail: this.sphereDetail,
                      disableImpostor: this.disableImpostor,
                      dullInterior: true
                    })
                );

        bufferList.push(sphereBuffer);
      }
    }

    return {
      bufferList: bufferList
    }
  };

  BallAndStickRepresentation.prototype.updateData = function updateData (what, data) {
    if (this.multipleBond !== 'off' && what && what.radius) {
      what.position = true;
    }

    var bondData = this.getBondData(data.sview, what);

    if (this.lineOnly) {
      var lineData = {};

      if (!what || what.position) {
        lineData.position1 = bondData.position1;
        lineData.position2 = bondData.position2;
      }

      if (!what || what.color) {
        lineData.color = bondData.color;
        lineData.color2 = bondData.color2;
      }

      data.bufferList[ 0 ].setAttributes(lineData);
    } else {
      var cylinderData = {};

      if (!what || what.position) {
        cylinderData.position1 = bondData.position1;
        cylinderData.position2 = bondData.position2;
      }

      if (!what || what.color) {
        cylinderData.color = bondData.color;
        cylinderData.color2 = bondData.color2;
      }

      if (!what || what.radius) {
        cylinderData.radius = bondData.radius;
      }

      data.bufferList[ 0 ].setAttributes(cylinderData);

      if (!this.cylinderOnly) {
        var atomData = this.getAtomData(data.sview, what);

        var sphereData = {};

        if (!what || what.position) {
          sphereData.position = atomData.position;
        }

        if (!what || what.color) {
          sphereData.color = atomData.color;
        }

        if (!what || what.radius) {
          sphereData.radius = atomData.radius;
        }

        data.bufferList[ 1 ].setAttributes(sphereData);
      }
    }
  };

  BallAndStickRepresentation.prototype.setParameters = function setParameters (params) {
    var rebuild = false;
    var what = {};

    if (params && (params.aspectRatio || params.bondSpacing || params.bondScale)) {
      what.radius = true;
      if (!ExtensionFragDepth || this.disableImpostor) {
        rebuild = true;
      }
    }

    StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);

    return this
  };

  return BallAndStickRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('ball+stick', BallAndStickRepresentation);

/**
 * @file Backbone Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Backbone representation. Show cylinders (or lines) connecting .CA (protein)
 * or .C4'/.C3' (RNA/DNA) of polymers.
 *
 * __Name:__ _backbone_
 *
 * @example
 * stage.loadFile( "rcsb://1sfi" ).then( function( o ){
 *     o.addRepresentation( "backbone" );
 *     o.autoView();
 * } );
 */
var BackboneRepresentation = (function (BallAndStickRepresentation$$1) {
  function BackboneRepresentation (structure, viewer, params) {
    BallAndStickRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'backbone';

    this.parameters = Object.assign({

    }, this.parameters, {

      multipleBond: null,
      bondSpacing: null

    });

    this.init(params);
  }

  if ( BallAndStickRepresentation$$1 ) BackboneRepresentation.__proto__ = BallAndStickRepresentation$$1;
  BackboneRepresentation.prototype = Object.create( BallAndStickRepresentation$$1 && BallAndStickRepresentation$$1.prototype );
  BackboneRepresentation.prototype.constructor = BackboneRepresentation;

  BackboneRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.aspectRatio = defaults(p.aspectRatio, 1.0);
    p.radius = defaults(p.radius, 0.25);

    BallAndStickRepresentation$$1.prototype.init.call(this, p);
  };

  BackboneRepresentation.prototype.getAtomData = function getAtomData (sview, what, params) {
    return sview.getBackboneAtomData(this.getAtomParams(what, params))
  };

  BackboneRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
    return sview.getBackboneBondData(this.getBondParams(what, params))
  };

  return BackboneRepresentation;
}(BallAndStickRepresentation));

RepresentationRegistry.add('backbone', BackboneRepresentation);

/**
 * @file Base Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Base representation. Show cylinders for RNA/DNA ladders.
 *
 * __Name:__ _base_
 *
 * @example
 * stage.loadFile( "rcsb://1d66" ).then( function( o ){
 *     o.addRepresentation( "cartoon", { sele: "nucleic" } );
 *     o.addRepresentation( "base", { color: "resname" } );
 *     o.autoView( "nucleic" );
 * } );
 */
var BaseRepresentation = (function (BallAndStickRepresentation$$1) {
  function BaseRepresentation (structure, viewer, params) {
    BallAndStickRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'base';

    this.parameters = Object.assign({

    }, this.parameters, {

      multipleBond: null,
      bondSpacing: null

    });
  }

  if ( BallAndStickRepresentation$$1 ) BaseRepresentation.__proto__ = BallAndStickRepresentation$$1;
  BaseRepresentation.prototype = Object.create( BallAndStickRepresentation$$1 && BallAndStickRepresentation$$1.prototype );
  BaseRepresentation.prototype.constructor = BaseRepresentation;

  BaseRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.aspectRatio = defaults(p.aspectRatio, 1.0);
    p.radius = defaults(p.radius, 0.3);

    BallAndStickRepresentation$$1.prototype.init.call(this, p);
  };

  BaseRepresentation.prototype.getAtomData = function getAtomData (sview, what, params) {
    return sview.getRungAtomData(this.getAtomParams(what, params))
  };

  BaseRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
    var p = this.getBondParams(what, params);
    p.colorParams.rung = true;

    return sview.getRungBondData(p)
  };

  return BaseRepresentation;
}(BallAndStickRepresentation));

RepresentationRegistry.add('base', BaseRepresentation);

/**
 * @file Spline
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function Interpolator (m, tension) {
  var dt = 1.0 / m;
  var delta = 0.0001;

  var vec1 = new Vector3();
  var vec2 = new Vector3();

  function interpolateToArr (v0, v1, v2, v3, t, arr, offset) {
    arr[ offset + 0 ] = spline(v0.x, v1.x, v2.x, v3.x, t, tension);
    arr[ offset + 1 ] = spline(v0.y, v1.y, v2.y, v3.y, t, tension);
    arr[ offset + 2 ] = spline(v0.z, v1.z, v2.z, v3.z, t, tension);
  }

  function interpolateToVec (v0, v1, v2, v3, t, vec) {
    vec.x = spline(v0.x, v1.x, v2.x, v3.x, t, tension);
    vec.y = spline(v0.y, v1.y, v2.y, v3.y, t, tension);
    vec.z = spline(v0.z, v1.z, v2.z, v3.z, t, tension);
  }

  function interpolatePosition (v0, v1, v2, v3, pos, offset) {
    for (var j = 0; j < m; ++j) {
      var l = offset + j * 3;
      var d = dt * j;
      interpolateToArr(v0, v1, v2, v3, d, pos, l);
    }
  }

  function interpolateTangent (v0, v1, v2, v3, tan, offset) {
    for (var j = 0; j < m; ++j) {
      var d = dt * j;
      var d1 = d - delta;
      var d2 = d + delta;
      var l = offset + j * 3;
            // capping as a precation
      if (d1 < 0) { d1 = 0; }
      if (d2 > 1) { d2 = 1; }
            //
      interpolateToVec(v0, v1, v2, v3, d1, vec1);
      interpolateToVec(v0, v1, v2, v3, d2, vec2);
            //
      vec2.sub(vec1).normalize();
      vec2.toArray(tan, l);
    }
  }

  function vectorSubdivide (interpolationFn, iterator, array, offset, isCyclic) {
    var v0;
    var v1 = iterator.next();
    var v2 = iterator.next();
    var v3 = iterator.next();
        //
    var n = iterator.size;
    var n1 = n - 1;
    var k = offset || 0;
    for (var i = 0; i < n1; ++i) {
      v0 = v1;
      v1 = v2;
      v2 = v3;
      v3 = iterator.next();
      interpolationFn(v0, v1, v2, v3, array, k);
      k += 3 * m;
    }
    if (isCyclic) {
      v0 = iterator.get(n - 2);
      v1 = iterator.get(n - 1);
      v2 = iterator.get(0);
      v3 = iterator.get(1);
      interpolationFn(v0, v1, v2, v3, array, k);
      k += 3 * m;
    }
  }

    //

  this.getPosition = function (iterator, array, offset, isCyclic) {
    iterator.reset();
    vectorSubdivide(
            interpolatePosition, iterator, array, offset, isCyclic
        );
    var n1 = iterator.size - 1;
    var k = n1 * m * 3;
    if (isCyclic) { k += m * 3; }
    var v = iterator.get(isCyclic ? 0 : n1);
    array[ k ] = v.x;
    array[ k + 1 ] = v.y;
    array[ k + 2 ] = v.z;
  };

  this.getTangent = function (iterator, array, offset, isCyclic) {
    iterator.reset();
    vectorSubdivide(
            interpolateTangent, iterator, array, offset, isCyclic
        );
    var n1 = iterator.size - 1;
    var k = n1 * m * 3;
    if (isCyclic) { k += m * 3; }
    copyArray(array, array, k - 3, k, 3);
  };

    //

  var vDir = new Vector3();
  var vTan = new Vector3();
  var vNorm = new Vector3();
  var vBin = new Vector3();

  var m2 = Math.ceil(m / 2);

  function interpolateNormalDir (u0, u1, u2, u3, v0, v1, v2, v3, tan, norm, bin, offset, shift) {
    for (var j = 0; j < m; ++j) {
      var l = offset + j * 3;
      if (shift) { l += m2 * 3; }
      var d = dt * j;
      interpolateToVec(u0, u1, u2, u3, d, vec1);
      interpolateToVec(v0, v1, v2, v3, d, vec2);
      vDir.subVectors(vec2, vec1).normalize();
      vTan.fromArray(tan, l);
      vBin.crossVectors(vDir, vTan).normalize();
      vBin.toArray(bin, l);
      vNorm.crossVectors(vTan, vBin).normalize();
      vNorm.toArray(norm, l);
    }
  }

  function interpolateNormal (vDir, tan, norm, bin, offset) {
    for (var j = 0; j < m; ++j) {
      var l = offset + j * 3;
      vDir.copy(vNorm);
      vTan.fromArray(tan, l);
      vBin.crossVectors(vDir, vTan).normalize();
      vBin.toArray(bin, l);
      vNorm.crossVectors(vTan, vBin).normalize();
      vNorm.toArray(norm, l);
    }
  }

  this.getNormal = function (size, tan, norm, bin, offset, isCyclic) {
    vNorm.set(0, 0, 1);
    var n = size;
    var n1 = n - 1;
    var k = offset || 0;
    for (var i = 0; i < n1; ++i) {
      interpolateNormal(vDir, tan, norm, bin, k);
      k += 3 * m;
    }
    if (isCyclic) {
      interpolateNormal(vDir, tan, norm, bin, k);
      k += 3 * m;
    }
    vBin.toArray(bin, k);
    vNorm.toArray(norm, k);
  };

  this.getNormalDir = function (iterDir1, iterDir2, tan, norm, bin, offset, isCyclic, shift) {
    iterDir1.reset();
    iterDir2.reset();
        //
    var vSub1 = new Vector3();
    var vSub2 = new Vector3();
    var vSub3 = new Vector3();
    var vSub4 = new Vector3();
        //
    var d1v1 = new Vector3();
    var d1v2 = new Vector3().copy(iterDir1.next());
    var d1v3 = new Vector3().copy(iterDir1.next());
    var d1v4 = new Vector3().copy(iterDir1.next());
    var d2v1 = new Vector3();
    var d2v2 = new Vector3().copy(iterDir2.next());
    var d2v3 = new Vector3().copy(iterDir2.next());
    var d2v4 = new Vector3().copy(iterDir2.next());
        //
    vNorm.set(0, 0, 1);
    var n = iterDir1.size;
    var n1 = n - 1;
    var k = offset || 0;
    for (var i = 0; i < n1; ++i) {
      d1v1.copy(d1v2);
      d1v2.copy(d1v3);
      d1v3.copy(d1v4);
      d1v4.copy(iterDir1.next());
      d2v1.copy(d2v2);
      d2v2.copy(d2v3);
      d2v3.copy(d2v4);
      d2v4.copy(iterDir2.next());
            //
      if (i === 0) {
        vSub1.subVectors(d2v1, d1v1);
        vSub2.subVectors(d2v2, d1v2);
        if (vSub1.dot(vSub2) < 0) {
          vSub2.multiplyScalar(-1);
          d2v2.addVectors(d1v2, vSub2);
        }
        vSub3.subVectors(d2v3, d1v3);
        if (vSub2.dot(vSub3) < 0) {
          vSub3.multiplyScalar(-1);
          d2v3.addVectors(d1v3, vSub3);
        }
      } else {
        vSub3.copy(vSub4);
      }
      vSub4.subVectors(d2v4, d1v4);
      if (vSub3.dot(vSub4) < 0) {
        vSub4.multiplyScalar(-1);
        d2v4.addVectors(d1v4, vSub4);
      }
      interpolateNormalDir(
                d1v1, d1v2, d1v3, d1v4,
                d2v1, d2v2, d2v3, d2v4,
                tan, norm, bin, k, shift
            );
      k += 3 * m;
    }
    if (isCyclic) {
      d1v1.copy(iterDir1.get(n - 2));
      d1v2.copy(iterDir1.get(n - 1));
      d1v3.copy(iterDir1.get(0));
      d1v4.copy(iterDir1.get(1));
      d2v1.copy(iterDir2.get(n - 2));
      d2v2.copy(iterDir2.get(n - 1));
      d2v3.copy(iterDir2.get(0));
      d2v4.copy(iterDir2.get(1));
            //
      vSub3.copy(vSub4);
      vSub4.subVectors(d2v4, d1v4);
      if (vSub3.dot(vSub4) < 0) {
        vSub4.multiplyScalar(-1);
        d2v4.addVectors(d1v4, vSub4);
      }
      interpolateNormalDir(
                d1v1, d1v2, d1v3, d1v4,
                d2v1, d2v2, d2v3, d2v4,
                tan, norm, bin, k, shift
            );
      k += 3 * m;
    }
    if (shift) {
            // FIXME shift requires data from one more preceeding residue
      vBin.fromArray(bin, m2 * 3);
      vNorm.fromArray(norm, m2 * 3);
      for (var j = 0; j < m2; ++j) {
        vBin.toArray(bin, j * 3);
        vNorm.toArray(norm, j * 3);
      }
    } else {
      vBin.toArray(bin, k);
      vNorm.toArray(norm, k);
    }
  };

    //

  function interpolateColor (item1, item2, colFn, col, offset) {
    var j, l;
    for (j = 0; j < m2; ++j) {
      l = offset + j * 3;
      colFn(item1, col, l);  // itemColorToArray
    }
    for (j = m2; j < m; ++j) {
      l = offset + j * 3;
      colFn(item2, col, l);  // itemColorToArray
    }
  }

  this.getColor = function (iterator, colFn, col, offset, isCyclic) {
    iterator.reset();
    iterator.next();  // first element not needed
    var i0;
    var i1 = iterator.next();
        //
    var n = iterator.size;
    var n1 = n - 1;
    var k = offset || 0;
    for (var i = 0; i < n1; ++i) {
      i0 = i1;
      i1 = iterator.next();
      interpolateColor(i0, i1, colFn, col, k);
      k += 3 * m;
    }
    if (isCyclic) {
      i0 = iterator.get(n - 1);
      i1 = iterator.get(0);
      interpolateColor(i0, i1, colFn, col, k);
      k += 3 * m;
    }
        //
    col[ k ] = col[ k - 3 ];
    col[ k + 1 ] = col[ k - 2 ];
    col[ k + 2 ] = col[ k - 1 ];
  };

    //

  function interpolatePicking (item1, item2, pickFn, pick, offset) {
    var j;
    for (j = 0; j < m2; ++j) {
      pick[ offset + j ] = pickFn(item1);
    }
    for (j = m2; j < m; ++j) {
      pick[ offset + j ] = pickFn(item2);
    }
  }

  this.getPicking = function (iterator, pickFn, pick, offset, isCyclic) {
    iterator.reset();
    iterator.next();  // first element not needed
    var i0;
    var i1 = iterator.next();
        //
    var n = iterator.size;
    var n1 = n - 1;
    var k = offset || 0;
    for (var i = 0; i < n1; ++i) {
      i0 = i1;
      i1 = iterator.next();
      interpolatePicking(i0, i1, pickFn, pick, k);
      k += m;
    }
    if (isCyclic) {
      i0 = iterator.get(n - 1);
      i1 = iterator.get(0);
      interpolatePicking(i0, i1, pickFn, pick, k);
      k += m;
    }
        //
    pick[ k ] = pick[ k - 1 ];
  };

    //

  function interpolateSize (item1, item2, sizeFn, size, offset) {
    var s1 = sizeFn(item1);
    var s2 = sizeFn(item2);
    for (var j = 0; j < m; ++j) {
            // linear interpolation
      var t = j / m;
      size[ offset + j ] = (1 - t) * s1 + t * s2;
    }
  }

  this.getSize = function (iterator, sizeFn, size, offset, isCyclic) {
    iterator.reset();
    iterator.next();  // first element not needed
    var i0;
    var i1 = iterator.next();
        //
    var n = iterator.size;
    var n1 = n - 1;
    var k = offset || 0;
    for (var i = 0; i < n1; ++i) {
      i0 = i1;
      i1 = iterator.next();
      interpolateSize(i0, i1, sizeFn, size, k);
      k += m;
    }
    if (isCyclic) {
      i0 = iterator.get(n - 1);
      i1 = iterator.get(0);
      interpolateSize(i0, i1, sizeFn, size, k);
      k += m;
    }
        //
    size[ k ] = size[ k - 1 ];
  };
}

function Spline$1 (polymer, params) {
  this.polymer = polymer;
  this.size = polymer.residueCount;

  var p = params || {};
  this.directional = p.directional || false;
  this.positionIterator = p.positionIterator || false;
  this.subdiv = p.subdiv || 1;
  this.smoothSheet = p.smoothSheet || false;

  if (isNaN(p.tension)) {
    this.tension = this.polymer.isNucleic() ? 0.5 : 0.9;
  } else {
    this.tension = p.tension || 0.5;
  }

  this.interpolator = new Interpolator(this.subdiv, this.tension);
}

Spline$1.prototype = {

  constructor: Spline$1,

  getAtomIterator: function (type, smooth) {
    var polymer = this.polymer;
    var structure = polymer.structure;
    var n = polymer.residueCount;

    var i = 0;
    var j = -1;

    var cache = [
      structure.getAtomProxy(),
      structure.getAtomProxy(),
      structure.getAtomProxy(),
      structure.getAtomProxy()
    ];

    var cache2 = [
      new Vector3(),
      new Vector3(),
      new Vector3(),
      new Vector3()
    ];

    function next () {
      var atomProxy = this.get(j);
      j += 1;
      return atomProxy
    }

    var apPrev = structure.getAtomProxy();
    var apNext = structure.getAtomProxy();

    function get (idx) {
      var atomProxy = cache[ i % 4 ];
      atomProxy.index = polymer.getAtomIndexByType(idx, type);
      if (smooth && idx > 0 && idx < n && atomProxy.sstruc === 'e') {
        var vec = cache2[ i % 4 ];
        apPrev.index = polymer.getAtomIndexByType(idx + 1, type);
        apNext.index = polymer.getAtomIndexByType(idx - 1, type);
        vec.addVectors(apPrev, apNext)
                    .add(atomProxy).add(atomProxy)
                    .multiplyScalar(0.25);
        i += 1;
        return vec
      }
      i += 1;
      return atomProxy
    }

    function reset () {
      i = 0;
      j = -1;
    }

    return {
      size: n,
      next: next,
      get: get,
      reset: reset
    }
  },

  getSubdividedColor: function (params) {
    var m = this.subdiv;
    var polymer = this.polymer;
    var n = polymer.residueCount;
    var n1 = n - 1;
    var nCol = n1 * m * 3 + 3;
    if (polymer.isCyclic) { nCol += m * 3; }

    var col = new Float32Array(nCol);
    var iterator = this.getAtomIterator('trace');

    var p = params || {};
    p.structure = polymer.structure;

    var colormaker = ColormakerRegistry.getScheme(p);

    function colFn (item, array, offset) {
      colormaker.atomColorToArray(item, array, offset);
    }

    this.interpolator.getColor(
            iterator, colFn, col, 0, polymer.isCyclic
        );

    return {
      'color': col
    }
  },

  getSubdividedPicking: function () {
    var m = this.subdiv;
    var polymer = this.polymer;
    var n = polymer.residueCount;
    var n1 = n - 1;
    var nCol = n1 * m + 1;
    if (polymer.isCyclic) { nCol += m; }

    var structure = polymer.structure;
    var iterator = this.getAtomIterator('trace');
    var pick = new Float32Array(nCol);

    function pickFn (item) {
      return item.index
    }

    this.interpolator.getPicking(
            iterator, pickFn, pick, 0, polymer.isCyclic
        );

    return {
      'picking': new AtomPicker(pick, structure)
    }
  },

  getSubdividedPosition: function () {
    var pos = this.getPosition();

    return {
      'position': pos
    }
  },

  getSubdividedOrientation: function () {
    var tan = this.getTangent();
    var normals = this.getNormals(tan);

    return {
      'tangent': tan,
      'normal': normals.normal,
      'binormal': normals.binormal
    }
  },

  getSubdividedSize: function (type, scale) {
    var m = this.subdiv;
    var polymer = this.polymer;
    var n = polymer.residueCount;
    var n1 = n - 1;
    var nSize = n1 * m + 1;
    if (polymer.isCyclic) { nSize += m; }

    var size = new Float32Array(nSize);
    var iterator = this.getAtomIterator('trace');

    var radiusFactory = new RadiusFactory(type, scale);

    function sizeFn (item) {
      return radiusFactory.atomRadius(item)
    }

    this.interpolator.getSize(
            iterator, sizeFn, size, 0, polymer.isCyclic
        );

    return {
      'size': size
    }
  },

  getPosition: function () {
    var m = this.subdiv;
    var polymer = this.polymer;
    var n = polymer.residueCount;
    var n1 = n - 1;
    var nPos = n1 * m * 3 + 3;
    if (polymer.isCyclic) { nPos += m * 3; }

    var pos = new Float32Array(nPos);
    var iterator = this.positionIterator || this.getAtomIterator('trace', this.smoothSheet);

    this.interpolator.getPosition(
            iterator, pos, 0, polymer.isCyclic
        );

    return pos
  },

  getTangent: function () {
    var m = this.subdiv;
    var polymer = this.polymer;
    var n = this.size;
    var n1 = n - 1;
    var nTan = n1 * m * 3 + 3;
    if (polymer.isCyclic) { nTan += m * 3; }

    var tan = new Float32Array(nTan);
    var iterator = this.positionIterator || this.getAtomIterator('trace', this.smoothSheet);

    this.interpolator.getTangent(
            iterator, tan, 0, polymer.isCyclic
        );

    return tan
  },

  getNormals: function (tan) {
    var m = this.subdiv;
    var polymer = this.polymer;
    var isProtein = polymer.isProtein();
    var n = this.size;
    var n1 = n - 1;
    var nNorm = n1 * m * 3 + 3;
    if (polymer.isCyclic) { nNorm += m * 3; }

    var norm = new Float32Array(nNorm);
    var bin = new Float32Array(nNorm);

    if (this.directional && !this.polymer.isCg()) {
      var iterDir1 = this.getAtomIterator('direction1');
      var iterDir2 = this.getAtomIterator('direction2');
      this.interpolator.getNormalDir(
                iterDir1, iterDir2, tan, norm, bin, 0, polymer.isCyclic, isProtein
            );
    } else {
      this.interpolator.getNormal(
                n, tan, norm, bin, 0, polymer.isCyclic, isProtein
            );
    }

    return {
      'normal': norm,
      'binormal': bin
    }
  }

};

/**
 * @file Tube Mesh Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var vTangent = new Vector3();
var vMeshNormal = new Vector3();

/**
 * Tube mesh buffer. Draws a tube.
 */
var TubeMeshBuffer = (function (MeshBuffer$$1) {
  function TubeMeshBuffer (data, params) {
    var d = data || {};
    var p = params || {};

    var radialSegments = defaults(p.radialSegments, 4);
    var capped = defaults(p.capped, false);

    var capVertices = capped ? radialSegments : 0;
    var capTriangles = capped ? radialSegments - 2 : 0;

    var n = d.position.length / 3;
    var n1 = n - 1;
    var x = n * radialSegments * 3 + 2 * capVertices * 3;
    var xi = n1 * 2 * radialSegments * 3 + 2 * capTriangles * 3;

    var meshPosition = new Float32Array(x);
    var meshColor = new Float32Array(x);
    var meshNormal = new Float32Array(x);
    var meshIndex = getUintArray(xi, x / 3);

    MeshBuffer$$1.call(this, {
      position: meshPosition,
      color: meshColor,
      index: meshIndex,
      normal: meshNormal,
      picking: d.picking
    }, p);

        //

    this.aspectRatio = defaults(p.aspectRatio, 1.0);
    this.radialSegments = radialSegments;
    this.capped = capped;

    this.capVertices = capVertices;
    this.capTriangles = capTriangles;
    this.size2 = n;

    d.primitiveId = serialArray(n);
    this.setAttributes(d);

    this.meshIndex = meshIndex;
    this.makeIndex();
  }

  if ( MeshBuffer$$1 ) TubeMeshBuffer.__proto__ = MeshBuffer$$1;
  TubeMeshBuffer.prototype = Object.create( MeshBuffer$$1 && MeshBuffer$$1.prototype );
  TubeMeshBuffer.prototype.constructor = TubeMeshBuffer;

  TubeMeshBuffer.prototype.setAttributes = function setAttributes (data) {
    var aspectRatio = this.aspectRatio;

    var n = this.size2;
    var n1 = n - 1;
    var radialSegments = this.radialSegments;

    var attributes = this.geometry.attributes;

    var position, normal, binormal, tangent, color, size, primitiveId;
    var meshPosition, meshColor, meshNormal, meshPrimitiveId;

    if (data.position) {
      position = data.position;
      normal = data.normal;
      binormal = data.binormal;
      tangent = data.tangent;
      size = data.size;

      meshPosition = attributes.position.array;
      meshNormal = attributes.normal.array;

      attributes.position.needsUpdate = true;
      attributes.normal.needsUpdate = true;
    }

    if (data.color) {
      color = data.color;
      meshColor = attributes.color.array;
      attributes.color.needsUpdate = true;
    }

    if (data.primitiveId) {
      primitiveId = data.primitiveId;
      meshPrimitiveId = attributes.primitiveId.array;
      attributes.primitiveId.needsUpdate = true;
    }

    var i, j, k, l, s, t;
    var v, cx, cy;
    var cx1, cy1, cx2, cy2;
    var radius;

    var normX, normY, normZ;
    var biX, biY, biZ;
    var posX, posY, posZ;

    var cxArr = [];
    var cyArr = [];
    var cx1Arr = [];
    var cy1Arr = [];
    var cx2Arr = [];
    var cy2Arr = [];

    if (position) {
      for (j = 0; j < radialSegments; ++j) {
        v = (j / radialSegments) * 2 * Math.PI;

        cxArr[ j ] = aspectRatio * Math.cos(v);
        cyArr[ j ] = Math.sin(v);

        cx1Arr[ j ] = aspectRatio * Math.cos(v - 0.01);
        cy1Arr[ j ] = Math.sin(v - 0.01);
        cx2Arr[ j ] = aspectRatio * Math.cos(v + 0.01);
        cy2Arr[ j ] = Math.sin(v + 0.01);
      }
    }

    for (i = 0; i < n; ++i) {
      k = i * 3;
      l = k * radialSegments;

      if (position) {
        vTangent.set(
                    tangent[ k ], tangent[ k + 1 ], tangent[ k + 2 ]
                );

        normX = normal[ k ];
        normY = normal[ k + 1 ];
        normZ = normal[ k + 2 ];

        biX = binormal[ k ];
        biY = binormal[ k + 1 ];
        biZ = binormal[ k + 2 ];

        posX = position[ k ];
        posY = position[ k + 1 ];
        posZ = position[ k + 2 ];

        radius = size[ i ];
      }

      for (j = 0; j < radialSegments; ++j) {
        s = l + j * 3;

        if (position) {
          cx = -radius * cxArr[ j ]; // TODO: Hack: Negating it so it faces outside.
          cy = radius * cyArr[ j ];

          cx1 = -radius * cx1Arr[ j ];
          cy1 = radius * cy1Arr[ j ];
          cx2 = -radius * cx2Arr[ j ];
          cy2 = radius * cy2Arr[ j ];

          meshPosition[ s ] = posX + cx * normX + cy * biX;
          meshPosition[ s + 1 ] = posY + cx * normY + cy * biY;
          meshPosition[ s + 2 ] = posZ + cx * normZ + cy * biZ;

                    // TODO half of these are symmetric
          vMeshNormal.set(
                        // ellipse tangent approximated as vector from/to adjacent points
                        (cx2 * normX + cy2 * biX) -
                            (cx1 * normX + cy1 * biX),
                        (cx2 * normY + cy2 * biY) -
                            (cx1 * normY + cy1 * biY),
                        (cx2 * normZ + cy2 * biZ) -
                            (cx1 * normZ + cy1 * biZ)
                    ).cross(vTangent);

          meshNormal[ s ] = vMeshNormal.x;
          meshNormal[ s + 1 ] = vMeshNormal.y;
          meshNormal[ s + 2 ] = vMeshNormal.z;
        }

        if (color) {
          meshColor[ s ] = color[ k ];
          meshColor[ s + 1 ] = color[ k + 1 ];
          meshColor[ s + 2 ] = color[ k + 2 ];
        }

        if (primitiveId) {
          meshPrimitiveId[ i * radialSegments + j ] = primitiveId[ i ];
        }
      }
    }

        // front cap

    k = 0;
    l = n * 3 * radialSegments;

    for (j = 0; j < radialSegments; ++j) {
      s = k + j * 3;
      t = l + j * 3;

      if (position) {
        meshPosition[ t ] = meshPosition[ s ];
        meshPosition[ t + 1 ] = meshPosition[ s + 1 ];
        meshPosition[ t + 2 ] = meshPosition[ s + 2 ];

        meshNormal[ t ] = tangent[ k ];
        meshNormal[ t + 1 ] = tangent[ k + 1 ];
        meshNormal[ t + 2 ] = tangent[ k + 2 ];
      }

      if (color) {
        meshColor[ t ] = meshColor[ s ];
        meshColor[ t + 1 ] = meshColor[ s + 1 ];
        meshColor[ t + 2 ] = meshColor[ s + 2 ];
      }

      if (primitiveId) {
        meshPrimitiveId[ n * radialSegments + j ] = meshPrimitiveId[ 0 + j ];
      }
    }

        // back cap

    k = (n - 1) * 3 * radialSegments;
    l = (n + 1) * 3 * radialSegments;

    for (j = 0; j < radialSegments; ++j) {
      s = k + j * 3;
      t = l + j * 3;

      if (position) {
        meshPosition[ t ] = meshPosition[ s ];
        meshPosition[ t + 1 ] = meshPosition[ s + 1 ];
        meshPosition[ t + 2 ] = meshPosition[ s + 2 ];

        meshNormal[ t ] = tangent[ n1 * 3 ];
        meshNormal[ t + 1 ] = tangent[ n1 * 3 + 1 ];
        meshNormal[ t + 2 ] = tangent[ n1 * 3 + 2 ];
      }

      if (color) {
        meshColor[ t ] = meshColor[ s ];
        meshColor[ t + 1 ] = meshColor[ s + 1 ];
        meshColor[ t + 2 ] = meshColor[ s + 2 ];
      }

      if (primitiveId) {
        meshPrimitiveId[ (n + 1) * radialSegments + j ] = meshPrimitiveId[ (n - 1) * radialSegments + j ];
      }
    }
  };

  TubeMeshBuffer.prototype.makeIndex = function makeIndex () {
    var meshIndex = this.meshIndex;

    var n = this.size2;
    var n1 = n - 1;
    var capTriangles = this.capTriangles;
    var radialSegments = this.radialSegments;
    var radialSegments1 = this.radialSegments + 1;

    var i, k, irs, irs1, l, j;

    for (i = 0; i < n1; ++i) {
      k = i * radialSegments * 3 * 2;

      irs = i * radialSegments;
      irs1 = (i + 1) * radialSegments;

      for (j = 0; j < radialSegments; ++j) {
        l = k + j * 3 * 2;

                // meshIndex[ l + 0 ] = irs + ( ( j + 0 ) % radialSegments );
        meshIndex[ l ] = irs + j;
        meshIndex[ l + 1 ] = irs + ((j + 1) % radialSegments);
                // meshIndex[ l + 2 ] = irs1 + ( ( j + 0 ) % radialSegments );
        meshIndex[ l + 2 ] = irs1 + j;

                // meshIndex[ l + 3 ] = irs1 + ( ( j + 0 ) % radialSegments );
        meshIndex[ l + 3 ] = irs1 + j;
        meshIndex[ l + 4 ] = irs + ((j + 1) % radialSegments);
        meshIndex[ l + 5 ] = irs1 + ((j + 1) % radialSegments);
      }
    }

        // capping

    var strip = [ 0 ];

    for (j = 1; j < radialSegments1 / 2; ++j) {
      strip.push(j);
      if (radialSegments - j !== j) {
        strip.push(radialSegments - j);
      }
    }

        // front cap

    l = n1 * radialSegments * 3 * 2;
    k = n * radialSegments;

    for (j = 0; j < strip.length - 2; ++j) {
      if (j % 2 === 0) {
        meshIndex[ l + j * 3 + 0 ] = k + strip[ j + 0 ];
        meshIndex[ l + j * 3 + 1 ] = k + strip[ j + 1 ];
        meshIndex[ l + j * 3 + 2 ] = k + strip[ j + 2 ];
      } else {
        meshIndex[ l + j * 3 + 0 ] = k + strip[ j + 2 ];
        meshIndex[ l + j * 3 + 1 ] = k + strip[ j + 1 ];
        meshIndex[ l + j * 3 + 2 ] = k + strip[ j + 0 ];
      }
    }

        // back cap

    l = n1 * radialSegments * 3 * 2 + 3 * capTriangles;
    k = n * radialSegments + radialSegments;

    for (j = 0; j < strip.length - 2; ++j) {
      if (j % 2 === 0) {
        meshIndex[ l + j * 3 + 0 ] = k + strip[ j + 0 ];
        meshIndex[ l + j * 3 + 1 ] = k + strip[ j + 1 ];
        meshIndex[ l + j * 3 + 2 ] = k + strip[ j + 2 ];
      } else {
        meshIndex[ l + j * 3 + 0 ] = k + strip[ j + 2 ];
        meshIndex[ l + j * 3 + 1 ] = k + strip[ j + 1 ];
        meshIndex[ l + j * 3 + 2 ] = k + strip[ j + 0 ];
      }
    }
  };

  return TubeMeshBuffer;
}(MeshBuffer));

/**
 * @file Cartoon Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Cartoon representation. Show a thick ribbon that
 * smoothly connecting backbone atoms in polymers.
 *
 * __Name:__ _cartoon_
 *
 * @example
 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
 *     o.addRepresentation( "cartoon" );
 *     o.autoView();
 * } );
 */
var CartoonRepresentation = (function (StructureRepresentation$$1) {
  function CartoonRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'cartoon';

    this.parameters = Object.assign({

      aspectRatio: {
        type: 'number', precision: 1, max: 10.0, min: 1.0
      },
      subdiv: {
        type: 'integer', max: 50, min: 1, rebuild: true
      },
      radialSegments: {
        type: 'integer', max: 50, min: 1, rebuild: true
      },
      tension: {
        type: 'number', precision: 1, max: 1.0, min: 0.1
      },
      capped: {
        type: 'boolean', rebuild: true
      },
      smoothSheet: {
        type: 'boolean', rebuild: true
      }

    }, this.parameters);

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) CartoonRepresentation.__proto__ = StructureRepresentation$$1;
  CartoonRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  CartoonRepresentation.prototype.constructor = CartoonRepresentation;

  CartoonRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'chainname');
    p.colorScale = defaults(p.colorScale, 'RdYlBu');
    p.radius = defaults(p.radius, 'sstruc');
    p.scale = defaults(p.scale, 0.7);

    this.aspectRatio = defaults(p.aspectRatio, 5.0);
    this.tension = defaults(p.tension, NaN);
    this.capped = defaults(p.capped, true);
    this.smoothSheet = defaults(p.smoothSheet, false);

    if (p.quality === 'low') {
      this.subdiv = 3;
      this.radialSegments = 6;
    } else if (p.quality === 'medium') {
      this.subdiv = 6;
    } else if (p.quality === 'high') {
      this.subdiv = 12;
    } else {
      this.subdiv = defaults(p.subdiv, 6);
    }

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  CartoonRepresentation.prototype.getSplineParams = function getSplineParams (params) {
    return Object.assign({
      subdiv: this.subdiv,
      tension: this.tension,
      directional: this.aspectRatio !== 1.0,
      smoothSheet: this.smoothSheet
    }, params)
  };

  CartoonRepresentation.prototype.getSpline = function getSpline (polymer) {
    return new Spline$1(polymer, this.getSplineParams())
  };

  CartoonRepresentation.prototype.getScale = function getScale (polymer) {
    return polymer.isCg() ? this.scale * this.aspectRatio : this.scale
  };

  CartoonRepresentation.prototype.getAspectRatio = function getAspectRatio (polymer) {
    return polymer.isCg() ? 1.0 : this.aspectRatio
  };

  CartoonRepresentation.prototype.createData = function createData (sview) {
    var this$1 = this;

    var bufferList = [];
    var polymerList = [];

    this.structure.eachPolymer(function (polymer) {
      if (polymer.residueCount < 4) { return }
      polymerList.push(polymer);

      var spline = this$1.getSpline(polymer);

      var subPos = spline.getSubdividedPosition();
      var subOri = spline.getSubdividedOrientation();
      var subCol = spline.getSubdividedColor(this$1.getColorParams());
      var subPick = spline.getSubdividedPicking();
      var subSize = spline.getSubdividedSize(this$1.radius, this$1.getScale(polymer));

      bufferList.push(
                new TubeMeshBuffer(
                    Object.assign({}, subPos, subOri, subCol, subPick, subSize),
                    this$1.getBufferParams({
                      radialSegments: this$1.radialSegments,
                      aspectRatio: this$1.getAspectRatio(polymer),
                      capped: this$1.capped,
                      dullInterior: true
                    })
                )
            );
    }, sview.getSelection());

    return {
      bufferList: bufferList,
      polymerList: polymerList
    }
  };

  CartoonRepresentation.prototype.updateData = function updateData (what, data) {
    var this$1 = this;

    if (Debug) { Log.time(this.type + ' repr update'); }

    what = what || {};

    for (var i = 0, il = data.polymerList.length; i < il; ++i) {
      var bufferData = {};
      var polymer = data.polymerList[ i ];
      var spline = this$1.getSpline(polymer);

      data.bufferList[ i ].aspectRatio = this$1.getAspectRatio(polymer);

      if (what.position || what.radius) {
        var subPos = spline.getSubdividedPosition();
        var subOri = spline.getSubdividedOrientation();
        var subSize = spline.getSubdividedSize(this$1.radius, this$1.getScale(polymer));

        bufferData.position = subPos.position;
        bufferData.normal = subOri.normal;
        bufferData.binormal = subOri.binormal;
        bufferData.tangent = subOri.tangent;
        bufferData.size = subSize.size;
      }

      if (what.color) {
        var subCol = spline.getSubdividedColor(this$1.getColorParams());
        bufferData.color = subCol.color;
      }

      if (what.picking) {
        var subPick = spline.getSubdividedPicking();
        bufferData.picking = subPick.picking;
      }

      data.bufferList[ i ].setAttributes(bufferData);
    }

    if (Debug) { Log.timeEnd(this.type + ' repr update'); }
  };

  CartoonRepresentation.prototype.setParameters = function setParameters (params) {
    var rebuild = false;
    var what = {};

    if (params && params.aspectRatio) {
      what.radius = true;
    }

    if (params && params.tension) {
      what.position = true;
    }

    StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);

    return this
  };

  return CartoonRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('cartoon', CartoonRepresentation);

/**
 * @file Contact
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var Contact = function Contact (sview1, sview2) {
  this.sview1 = sview1;
  this.sview2 = sview2;

      // this.kdtree1 = new Kdtree( sview1 );
  this.kdtree2 = new Kdtree(sview2);
};

Contact.prototype.within = function within (maxDistance, minDistance) {
  Log.time('Contact within');

      // var kdtree1 = this.kdtree1;
  var kdtree2 = this.kdtree2;

  var ap2 = this.sview1.getAtomProxy();
  var atomSet = this.sview1.getAtomSet(false);
  var bondStore = new BondStore();

  this.sview1.eachAtom(function (ap1) {
    var found = false;
    var contacts = kdtree2.nearest(ap1, Infinity, maxDistance);

    for (var j = 0, m = contacts.length; j < m; ++j) {
      var d = contacts[ j ];
      ap2.index = d.index;

      if (ap1.residueIndex !== ap2.residueIndex &&
                  (!minDistance || d.distance > minDistance)
              ) {
        found = true;
        atomSet.set(ap2.index);
        bondStore.addBond(ap1, ap2, 1);
      }
    }

    if (found) {
      atomSet.set(ap1.index);
    }
  });

  var bondSet = new BitArray(bondStore.count, true);

  Log.timeEnd('Contact within');

  return {
    atomSet: atomSet,
    bondSet: bondSet,
    bondStore: bondStore
  }
};

/**
 * @file Contact Utils
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function polarContacts (structure, maxDistance, maxAngle) {
  maxDistance = maxDistance || 3.5;
  maxAngle = maxAngle || 40;

  var donorSelection = new Selection(
    '( ARG and ( .NE or .NH1 or .NH2 ) ) or ' +
    '( ASP and .ND2 ) or ' +
    '( GLN and .NE2 ) or ' +
    '( HIS and ( .ND1 or .NE2 ) ) or ' +
    '( LYS and .NZ ) or ' +
    '( SER and .OG ) or ' +
    '( THR and .OG1 ) or ' +
    '( TRP and .NE1 ) or ' +
    '( TYR and .OH ) or ' +
    '( PROTEIN and .N )'
  );

  var acceptorSelection = new Selection(
    '( ASN and .OD1 ) or ' +
    '( ASP and ( OD1 or .OD2 ) ) or ' +
    '( GLN and .OE1 ) or ' +
    '( GLU and ( .OE1 or .OE2 ) ) or ' +
    '( HIS and ( .ND1 or .NE2 ) ) or ' +
    '( SER and .OG ) or ' +
    '( THR and .OG1 ) or ' +
    '( TYR and .OH ) or ' +
    '( PROTEIN and .O )'
  );

  var donorView = structure.getView(donorSelection);
  var acceptorView = structure.getView(acceptorSelection);

  var contact = new Contact(donorView, acceptorView);
  var data = contact.within(maxDistance);
  var bondStore = data.bondStore;

  var ap1 = structure.getAtomProxy();
  var ap2 = structure.getAtomProxy();
  var atomCA = structure.getAtomProxy();
  var atomC = structure.getAtomProxy();
  var rp = structure.getResidueProxy();
  var rpPrev = structure.getResidueProxy();
  var v1 = new Vector3();
  var v2 = new Vector3();

  var checkAngle = function (atom1, atom2, oName, cName) {
    var atomO, atomN;

    if (atom1.atomname === oName) {
      atomO = atom1;
      atomN = atom2;
    } else {
      atomO = atom2;
      atomN = atom1;
    }

    rp.index = atomO.residueIndex;
    var atomC = rp.getAtomIndexByName(cName);

    v1.subVectors(atomC, atomO);
    v2.subVectors(atomC, atomN);

    return radToDeg(v1.angleTo(v2)) < maxAngle
  };

  for (var i = 0, il = bondStore.count; i < il; ++i) {
    ap1.index = bondStore.atomIndex1[ i ];
    ap2.index = bondStore.atomIndex2[ i ];

    if ((ap1.atomname === 'O' && ap2.atomname === 'N') ||
        (ap1.atomname === 'N' && ap2.atomname === 'O')
    ) {
      // ignore backbone to backbone contacts
      data.bondSet.clear(i);
      continue
    } else if (ap1.atomname === 'N' || ap2.atomname === 'N') {
      var atomN, atomX;

      if (ap1.atomname === 'N') {
        atomN = ap1;
        atomX = ap2;
      } else {
        atomN = ap2;
        atomX = ap1;
      }

      rp.index = atomN.residueIndex;
      atomCA.index = rp.getAtomIndexByName('CA');
      if (atomCA.index === undefined) { continue }

      var prevRes = rp.getPreviousConnectedResidue(rpPrev);
      if (prevRes === undefined) { continue }

      atomC.index = prevRes.getAtomIndexByName('C');
      if (atomC.index === undefined) { continue }

      v1.subVectors(atomN, atomC);
      v2.subVectors(atomN, atomCA);
      v1.add(v2).multiplyScalar(0.5);
      v2.subVectors(atomX, atomN);

      if (radToDeg(v1.angleTo(v2)) > maxAngle) {
        data.bondSet.clear(i);
      }
    } else if (
      (ap1.atomname === 'OH' && ap1.resname === 'TYR') ||
      (ap2.atomname === 'OH' && ap2.resname === 'TYR')
    ) {
      if (!checkAngle(ap1, ap2, 'OH', 'CZ')) {
        data.bondSet.clear(i);
      }
    }
  }

  return {
    atomSet: data.atomSet,
    bondSet: data.bondSet,
    bondStore: data.bondStore
  }
}

function polarBackboneContacts (structure, maxDistance, maxAngle) {
  maxDistance = maxDistance || 3.5;
  maxAngle = maxAngle || 40;

  var donorSelection = new Selection(
    '( PROTEIN and .N )'
  );

  var acceptorSelection = new Selection(
    '( PROTEIN and .O )'
  );

  var donorView = structure.getView(donorSelection);
  var acceptorView = structure.getView(acceptorSelection);

  var contact = new Contact(donorView, acceptorView);
  var data = contact.within(maxDistance);
  var bondStore = data.bondStore;

  var ap1 = structure.getAtomProxy();
  var ap2 = structure.getAtomProxy();
  var atomCA = structure.getAtomProxy();
  var atomC = structure.getAtomProxy();
  var rp = structure.getResidueProxy();
  var rpPrev = structure.getResidueProxy();
  var v1 = new Vector3();
  var v2 = new Vector3();

  for (var i = 0, il = bondStore.count; i < il; ++i) {
    ap1.index = bondStore.atomIndex1[ i ];
    ap2.index = bondStore.atomIndex2[ i ];

    var atomN, atomO;

    if (ap1.atomname === 'N') {
      atomN = ap1;
      atomO = ap2;
    } else {
      atomN = ap2;
      atomO = ap1;
    }

    rp.index = atomN.residueIndex;

    atomCA.index = rp.getAtomIndexByName('CA');
    if (atomCA.index === undefined) { continue }

    var prevRes = rp.getPreviousConnectedResidue(rpPrev);
    if (prevRes === undefined) { continue }

    atomC.index = prevRes.getAtomIndexByName('C');
    if (atomC.index === undefined) { continue }

    v1.subVectors(atomN, atomC);
    v2.subVectors(atomN, atomCA);
    v1.add(v2).multiplyScalar(0.5);
    v2.subVectors(atomO, atomN);

    // Log.log( radToDeg( v1.angleTo( v2 ) ) );

    if (radToDeg(v1.angleTo(v2)) > maxAngle) {
      data.bondSet.clear(i);
    }
  }

  return {
    atomSet: data.atomSet,
    bondSet: data.bondSet,
    bondStore: data.bondStore
  }
}

/**
 * @file Contact Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Contact representation.
 */
var ContactRepresentation = (function (StructureRepresentation$$1) {
  function ContactRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'contact';

    this.parameters = Object.assign({

      contactType: {
        type: 'select',
        rebuild: true,
        options: {
          'polar': 'polar',
          'polarBackbone': 'polar backbone'
        }
      },
      maxDistance: {
        type: 'number', precision: 1, max: 10, min: 0.1, rebuild: true
      },
      maxAngle: {
        type: 'integer', max: 180, min: 0, rebuild: true
      },
      radialSegments: true,
      disableImpostor: true

    }, this.parameters);

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) ContactRepresentation.__proto__ = StructureRepresentation$$1;
  ContactRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  ContactRepresentation.prototype.constructor = ContactRepresentation;

  ContactRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.radius = defaults(p.radius, 0.25);

    this.contactType = defaults(p.contactType, 'polarBackbone');
    this.maxDistance = defaults(p.maxDistance, 3.5);
    this.maxAngle = defaults(p.maxAngle, 40);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  ContactRepresentation.prototype.getContactData = function getContactData (sview) {
    var contactsFnDict = {
      'polar': polarContacts,
      'polarBackbone': polarBackboneContacts
    };

    var contactData = contactsFnDict[ this.contactType ](
            sview, this.maxDistance, this.maxAngle
        );

    return contactData
  };

  ContactRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
    var bondData = sview.getBondData(this.getBondParams(what, params));
    if (bondData.picking) {
      bondData.picking = new ContactPicker(
                bondData.picking.array,
                bondData.picking.structure,
                params.bondStore
            );
    }
    return bondData
  };

  ContactRepresentation.prototype.createData = function createData (sview) {
    var contactData = this.getContactData(sview);

    var cylinderBuffer = new CylinderBuffer(
            this.getBondData(sview, undefined, {
              bondSet: contactData.bondSet,
              bondStore: contactData.bondStore
            }),
            this.getBufferParams({
              openEnded: false,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
            })
        );

    return {
      bufferList: [ cylinderBuffer ],
      bondSet: contactData.bondSet,
      bondStore: contactData.bondStore
    }
  };

  ContactRepresentation.prototype.updateData = function updateData (what, data) {
    if (!what || what.position) {
      var contactData = this.getContactData(data.sview);
      data.bondSet = contactData.bondSet;
      data.bondStore = contactData.bondStore;
    }

    var bondParams = {
      bondSet: data.bondSet,
      bondStore: data.bondStore
    };

    var bondData = this.getBondData(data.sview, what, bondParams);
    var cylinderData = {};

    if (!what || what.position) {
      cylinderData.position = calculateCenterArray(
                bondData.position1, bondData.position2
            );
      cylinderData.position1 = bondData.position1;
      cylinderData.position2 = bondData.position2;
    }

    if (!what || what.color) {
      cylinderData.color = bondData.color;
      cylinderData.color2 = bondData.color2;
    }

    if (!what || what.radius) {
      cylinderData.radius = bondData.radius;
    }

    data.bufferList[ 0 ].setAttributes(cylinderData);
  };

  return ContactRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('contact', ContactRepresentation);

/**
 * @file Distance Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Distance representation parameter object.
 * @typedef {Object} DistanceRepresentationParameters - distance representation parameters
 * @mixes RepresentationParameters
 * @mixes StructureRepresentationParameters
 *
 * @property {Float} labelSize - size of the distance label
 * @property {Color} labelColor - color of the distance label
 * @property {Boolean} labelVisible - visibility of the distance label
 * @property {Float} labelZOffset - offset in z-direction (i.e. in camera direction)
 * @property {String} labelUnit - distance unit (e.g. "angstrom" or "nm"). If set, a distance
 *                                symbol is appended to the label (i.e. 'nm' or '\u00C5'). In case of 'nm', the
 *                                distance value is computed in nanometers instead of Angstroms.
 * @property {Array[]} atomPair - list of pairs of selection strings (see {@link Selection})
 *                                or pairs of atom indices. Using atom indices is much more
 *                                when the representation is updated often, e.g. by
 *                                changing the selection or the atom positions, as their
 *                                are no selection strings to be evaluated.
 * @property {Integer} radialSegments - cylinder quality (number of segments)
 * @property {Boolean} disableImpostor - disable use of raycasted impostors for rendering
 */

/**
 * Distance representation
 */
var DistanceRepresentation = (function (StructureRepresentation$$1) {
  function DistanceRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'distance';

    this.parameters = Object.assign({

      labelSize: {
        type: 'number', precision: 3, max: 10.0, min: 0.001
      },
      labelColor: {
        type: 'color'
      },
      labelVisible: {
        type: 'boolean'
      },
      labelZOffset: {
        type: 'number', precision: 1, max: 20, min: -20, buffer: 'zOffset'
      },
      labelUnit: {
        type: 'select',
        rebuild: true,
        options: { '': '', angstrom: 'angstrom', nm: 'nm' }
      },
      atomPair: {
        type: 'hidden', rebuild: true
      },
      radialSegments: true,
      disableImpostor: true

    }, this.parameters, {
      flatShaded: null,
      assembly: null
    });

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) DistanceRepresentation.__proto__ = StructureRepresentation$$1;
  DistanceRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  DistanceRepresentation.prototype.constructor = DistanceRepresentation;

  DistanceRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.radius = defaults(p.radius, 0.15);

    this.fontFamily = defaults(p.fontFamily, 'sans-serif');
    this.fontStyle = defaults(p.fontStyle, 'normal');
    this.fontWeight = defaults(p.fontWeight, 'bold');
    this.sdf = defaults(p.sdf, Browser !== 'Firefox');  // FIXME
    this.labelSize = defaults(p.labelSize, 2.0);
    this.labelColor = defaults(p.labelColor, 0xFFFFFF);
    this.labelVisible = defaults(p.labelVisible, true);
    this.labelZOffset = defaults(p.labelZOffset, 0.5);
    this.labelUnit = defaults(p.labelUnit, '');
    this.atomPair = defaults(p.atomPair, []);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  DistanceRepresentation.prototype.getDistanceData = function getDistanceData (sview, atomPair) {
    var n = atomPair.length;
    var text = new Array(n);
    var position = new Float32Array(n * 3);
    var sele1 = new Selection();
    var sele2 = new Selection();

    var bondStore = new BondStore();

    var ap1 = sview.getAtomProxy();
    var ap2 = sview.getAtomProxy();

    var j = 0;

    atomPair.forEach(function (pair, i) {
      var v1 = pair[ 0 ];
      var v2 = pair[ 1 ];

      if (Number.isInteger(v1) && Number.isInteger(v2)) {
        ap1.index = v1;
        ap2.index = v2;
      } else {
        sele1.setString(v1);
        sele2.setString(v2);

        var atomIndices1 = sview.getAtomIndices(sele1);
        var atomIndices2 = sview.getAtomIndices(sele2);

        if (atomIndices1.length && atomIndices2.length) {
          ap1.index = atomIndices1[ 0 ];
          ap2.index = atomIndices2[ 0 ];
        } else {
          j += 1;
          return
        }
      }

      bondStore.addBond(ap1, ap2, 1);

      i -= j;
      var d = ap1.distanceTo(ap2);
      switch (this.labelUnit) {
        case 'angstrom':
          text[ i ] = d.toFixed(2) + ' ' + String.fromCharCode(0x212B);
          break
        case 'nm':
          text[ i ] = (d / 10).toFixed(2) + ' nm';
          break
        default:
          text[ i ] = d.toFixed(2);
          break
      }

      var i3 = i * 3;
      position[ i3 + 0 ] = (ap1.x + ap2.x) / 2;
      position[ i3 + 1 ] = (ap1.y + ap2.y) / 2;
      position[ i3 + 2 ] = (ap1.z + ap2.z) / 2;
    }, this);

    if (j > 0) {
      n -= j;
      position = position.subarray(0, n * 3);
    }

    var bondSet = new BitArray(bondStore.count, true);

    return {
      text: text,
      position: position,
      bondSet: bondSet,
      bondStore: bondStore
    }
  };

  DistanceRepresentation.prototype.getBondData = function getBondData (sview, what, params) {
    var bondData = sview.getBondData(this.getBondParams(what, params));
    if (bondData.picking) {
      bondData.picking = new DistancePicker(
                bondData.picking.array,
                bondData.picking.structure,
                params.bondStore
            );
    }
    return bondData
  };

  DistanceRepresentation.prototype.create = function create () {
    if (this.structureView.atomCount === 0) { return }

    var n = this.atomPair.length;
    if (n === 0) { return }

    var distanceData = this.getDistanceData(this.structureView, this.atomPair);

    var c = new Color(this.labelColor);

    this.textBuffer = new TextBuffer(
      {
        position: distanceData.position,
        size: uniformArray(n, this.labelSize),
        color: uniformArray3(n, c.r, c.g, c.b),
        text: distanceData.text
      },
            this.getBufferParams({
              fontFamily: this.fontFamily,
              fontStyle: this.fontStyle,
              fontWeight: this.fontWeight,
              sdf: this.sdf,
              zOffset: this.labelZOffset,
              opacity: 1.0,
              visible: this.labelVisible
            })
        );

    var bondParams = {
      bondSet: distanceData.bondSet,
      bondStore: distanceData.bondStore
    };

    var bondData = this.getBondData(this.structureView, undefined, bondParams);

    this.cylinderBuffer = new CylinderBuffer(
            bondData,
            this.getBufferParams({
              openEnded: false,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
            })
        );

    this.dataList.push({
      sview: this.structureView,
      bondSet: distanceData.bondSet,
      bondStore: distanceData.bondStore,
      position: distanceData.position,
      bufferList: [ this.textBuffer, this.cylinderBuffer ]
    });
  };

  DistanceRepresentation.prototype.update = function update (what) {
    if (what.position) {
      this.build();
    } else {
      StructureRepresentation$$1.prototype.update.call(this, what);
    }
  };

  DistanceRepresentation.prototype.updateData = function updateData (what, data) {
    var bondParams = {
      bondSet: data.bondSet,
      bondStore: data.bondStore
    };

    var bondData = this.getBondData(data.sview, what, bondParams);
    var cylinderData = {};
    var textData = {};
    var n = this.atomPair.length;

    if (what.labelSize) {
      textData.size = uniformArray(n, this.labelSize);
    }

    if (what.labelColor) {
      var c = new Color(this.labelColor);
      textData.color = uniformArray3(n, c.r, c.g, c.b);
    }

    if (what.color) {
      cylinderData.color = bondData.color;
      cylinderData.color2 = bondData.color2;
    }

    if (what.radius || what.scale) {
      cylinderData.radius = bondData.radius;
    }

    this.textBuffer.setAttributes(textData);
    this.cylinderBuffer.setAttributes(cylinderData);
  };

  DistanceRepresentation.prototype.setVisibility = function setVisibility (value, noRenderRequest) {
    StructureRepresentation$$1.prototype.setVisibility.call(this, value, true);

    if (this.textBuffer) {
      this.textBuffer.setVisibility(
                this.labelVisible && this.visible
            );
    }

    if (!noRenderRequest) { this.viewer.requestRender(); }

    return this
  };

  DistanceRepresentation.prototype.setParameters = function setParameters (params) {
    var rebuild = false;
    var what = {};

    if (params && params.labelSize) {
      what.labelSize = true;
    }

    if (params && (params.labelColor || params.labelColor === 0x000000)) {
      what.labelColor = true;
    }

    StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);

    if (params && params.labelVisible !== undefined) {
      this.setVisibility(this.visible);
    }

    return this
  };

  return DistanceRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('distance', DistanceRepresentation);

/**
 * @file Vector Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Vector buffer. Draws vectors as lines.
 */
var VectorBuffer = (function (Buffer$$1) {
  function VectorBuffer (data, params) {
    var p = params || {};

    var n = data.position.length / 3;
    var n2 = n * 2;

    var color = new Color(defaults(p.color, 'grey'));

    var linePosition = new Float32Array(n2 * 3);
    var lineColor = uniformArray3(n2, color.r, color.g, color.b);

    Buffer$$1.call(this, {
      position: linePosition,
      color: lineColor
    }, p);

    this.scale = defaults(p.scale, 1);

    this.setAttributes(data);
  }

  if ( Buffer$$1 ) VectorBuffer.__proto__ = Buffer$$1;
  VectorBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
  VectorBuffer.prototype.constructor = VectorBuffer;

  var prototypeAccessors = { isLine: {},vertexShader: {},fragmentShader: {} };

  VectorBuffer.prototype.setAttributes = function setAttributes (data) {
    var attributes = this.geometry.attributes;

    var position, vector;
    var aPosition;

    if (data.position && data.vector) {
      position = data.position;
      vector = data.vector;
      aPosition = attributes.position.array;
      attributes.position.needsUpdate = true;
    }

    var n = this.size / 2;
    var scale = this.scale;

    var i, j;

    if (data.position && data.vector) {
      for (var v = 0; v < n; v++) {
        i = v * 2 * 3;
        j = v * 3;

        aPosition[ i + 0 ] = position[ j + 0 ];
        aPosition[ i + 1 ] = position[ j + 1 ];
        aPosition[ i + 2 ] = position[ j + 2 ];
        aPosition[ i + 3 ] = position[ j + 0 ] + vector[ j + 0 ] * scale;
        aPosition[ i + 4 ] = position[ j + 1 ] + vector[ j + 1 ] * scale;
        aPosition[ i + 5 ] = position[ j + 2 ] + vector[ j + 2 ] * scale;
      }
    }
  };

  prototypeAccessors.isLine.get = function () { return true };
  prototypeAccessors.vertexShader.get = function () { return 'Line.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'Line.frag' };

  Object.defineProperties( VectorBuffer.prototype, prototypeAccessors );

  return VectorBuffer;
}(Buffer));

/**
 * @file Helixorient Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Helixorient Representation
 */
var HelixorientRepresentation = (function (StructureRepresentation$$1) {
  function HelixorientRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'helixorient';

    this.parameters = Object.assign({
      sphereDetail: true,
      disableImpostor: true
    }, this.parameters);

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) HelixorientRepresentation.__proto__ = StructureRepresentation$$1;
  HelixorientRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  HelixorientRepresentation.prototype.constructor = HelixorientRepresentation;

  HelixorientRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'sstruc');
    p.radius = defaults(p.radius, 0.15);
    p.scale = defaults(p.scale, 1.0);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  HelixorientRepresentation.prototype.createData = function createData (sview) {
    var this$1 = this;

    var bufferList = [];
    var polymerList = [];

    this.structure.eachPolymer(function (polymer) {
      if (polymer.residueCount < 4) { return }
      polymerList.push(polymer);

      var helixorient = new Helixorient(polymer);
      var position = helixorient.getPosition();
      var color = helixorient.getColor(this$1.getColorParams());
      var size = helixorient.getSize(this$1.radius, this$1.scale);
      var picking = helixorient.getPicking();

      bufferList.push(
        new SphereBuffer(
          {
            position: position.center,
            color: color.color,
            radius: size.size,
            picking: picking.picking
          },
            this$1.getBufferParams({
              sphereDetail: this$1.sphereDetail,
              disableImpostor: this$1.disableImpostor,
              dullInterior: true
            })
        ),
        new VectorBuffer(
          {
            position: position.center,
            vector: position.axis
          },
            this$1.getBufferParams({
              color: 'skyblue',
              scale: 1
            })
        ),
        new VectorBuffer(
          {
            position: position.center,
            vector: position.resdir
          },
            this$1.getBufferParams({
              color: 'lightgreen',
              scale: 1
            })
        )
      );
    }, sview.getSelection());

    return {
      bufferList: bufferList,
      polymerList: polymerList
    }
  };

  HelixorientRepresentation.prototype.updateData = function updateData (what, data) {
    if (Debug) { Log.time(this.type + ' repr update'); }

    what = what || {};

    for (var i = 0, il = data.polymerList.length; i < il; ++i) {
      var j = i * 3;

      var bufferData = {};
      var polymer = data.polymerList[ i ];
      var helixorient = new Helixorient(polymer);

      if (what.position) {
        var position = helixorient.getPosition();

        bufferData.position = position.center;

        data.bufferList[ j + 1 ].setAttributes({
          'position': position.center,
          'vector': position.axis
        });
        data.bufferList[ j + 2 ].setAttributes({
          'position': position.center,
          'vector': position.resdir
        });
      }

      data.bufferList[ j ].setAttributes(bufferData);
    }

    if (Debug) { Log.timeEnd(this.type + ' repr update'); }
  };

  return HelixorientRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('helixorient', HelixorientRepresentation);

/**
 * @file Licorice Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Licorice representation object ({@link BallAndStickRepresentation} with `aspectRatio` fixed at 1.0)
 */
var LicoriceRepresentation = (function (BallAndStickRepresentation$$1) {
  function LicoriceRepresentation (structure, viewer, params) {
    BallAndStickRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'licorice';

    this.parameters = Object.assign(
            {}, this.parameters, { aspectRatio: null }
        );
  }

  if ( BallAndStickRepresentation$$1 ) LicoriceRepresentation.__proto__ = BallAndStickRepresentation$$1;
  LicoriceRepresentation.prototype = Object.create( BallAndStickRepresentation$$1 && BallAndStickRepresentation$$1.prototype );
  LicoriceRepresentation.prototype.constructor = LicoriceRepresentation;

  LicoriceRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.aspectRatio = 1.0;

    BallAndStickRepresentation$$1.prototype.init.call(this, p);
  };

  return LicoriceRepresentation;
}(BallAndStickRepresentation));

RepresentationRegistry.add('licorice', LicoriceRepresentation);

ShaderRegistry.add('shader/HyperballStickImpostor.vert', "\nattribute vec3 mapping;\nattribute float radius;\nattribute float radius2;\nattribute vec3 position1;\nattribute vec3 position2;\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\nattribute vec3 color2;\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#endif\nuniform float shrink;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewProjectionMatrixInverse;\nvoid main(){\nvRadius = radius;\nvRadius2 = radius2;\nvec4 spaceposition;\nvec3 position_atom1;\nvec3 position_atom2;\nvec4 vertex_position;\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\nvColor1 = color;\nvColor2 = color2;\n#endif\nfloat radius1 = radius;\nposition_atom1 = position1;\nposition_atom2 = position2;\nfloat distance = distance( position_atom1, position_atom2 );\nspaceposition.z = mapping.z * distance;\nif (radius1 > radius2) {\nspaceposition.y = mapping.y * 1.5 * radius1;\nspaceposition.x = mapping.x * 1.5 * radius1;\n} else {\nspaceposition.y = mapping.y * 1.5 * radius2;\nspaceposition.x = mapping.x * 1.5 * radius2;\n}\nspaceposition.w = 1.0;\nvec4 e3 = vec4( 1.0 );\nvec3 e1, e1_temp, e2, e2_temp;\ne3.xyz = normalize(position_atom1-position_atom2);\nif (e3.z == 0.0) { e3.z = 0.0000000000001;}\nif ( (position_atom1.x - position_atom2.x) == 0.0) { position_atom1.x += 0.001;}\nif ( (position_atom1.y - position_atom2.y) == 0.0) { position_atom1.y += 0.001;}\nif ( (position_atom1.z - position_atom2.z) == 0.0) { position_atom1.z += 0.001;}\nvec4 focus = vec4( 1.0 );\nfocus.x = ( position_atom1.x*position_atom1.x - position_atom2.x*position_atom2.x +\n( radius2*radius2 - radius1*radius1 )*e3.x*e3.x/shrink )/(2.0*(position_atom1.x - position_atom2.x));\nfocus.y = ( position_atom1.y*position_atom1.y - position_atom2.y*position_atom2.y +\n( radius2*radius2 - radius1*radius1 )*e3.y*e3.y/shrink )/(2.0*(position_atom1.y - position_atom2.y));\nfocus.z = ( position_atom1.z*position_atom1.z - position_atom2.z*position_atom2.z +\n( radius2*radius2 - radius1*radius1 )*e3.z*e3.z/shrink )/(2.0*(position_atom1.z - position_atom2.z));\ne1.x = 1.0;\ne1.y = 1.0;\ne1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\ne1_temp = e1 - focus.xyz;\ne1 = normalize(e1_temp);\ne2_temp = e1.yzx * e3.zxy - e1.zxy * e3.yzx;\ne2 = normalize(e2_temp);\nmat3 R= mat3( e1.xyz, e2.xyz, e3.xyz );\nvertex_position.xyz = R * spaceposition.xyz;\nvertex_position.w = 1.0;\nvertex_position.x += (position_atom1.x+position_atom2.x) / 2.0;\nvertex_position.y += (position_atom1.y+position_atom2.y) / 2.0;\nvertex_position.z += (position_atom1.z+position_atom2.z) / 2.0;\ngl_Position = modelViewProjectionMatrix * vertex_position;\nvec4 i_near, i_far;\nvec4 near = gl_Position;\nnear.z = 0.0 ;\nnear = modelViewProjectionMatrixInverse * near;\ni_near = near;\nvec4 far = gl_Position;\nfar.z = far.w ;\ni_far = modelViewProjectionMatrixInverse * far;\nprime1 = vec4( position_atom1 - (position_atom1 - focus.xyz)*shrink, 1.0 );\nprime2 = vec4( position_atom2 - (position_atom2 - focus.xyz)*shrink, 1.0 );\nfloat Rsquare = (radius1*radius1/shrink) - (\n(position_atom1.x - focus.x)*(position_atom1.x - focus.x) +\n(position_atom1.y - focus.y)*(position_atom1.y - focus.y) +\n(position_atom1.z - focus.z)*(position_atom1.z - focus.z)\n);\nfocus.w = Rsquare;\nmatrix_near = mat4( i_near, i_far, focus, e3 );\ngl_Position.z = 1.0;\n}");

ShaderRegistry.add('shader/HyperballStickImpostor.frag', "#define STANDARD\n#define IMPOSTOR\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float nearClip;\nuniform float shrink;\nuniform mat4 modelViewMatrix;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewMatrixInverseTranspose;\nuniform mat4 projectionMatrix;\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n#ifdef PICKING\nuniform float objectId;\nvarying vec3 vPickingColor;\n#else\nvarying vec3 vColor1;\nvarying vec3 vColor2;\n#include common\n#include fog_pars_fragment\n#include bsdfs\n#include lights_pars\n#include lights_physical_pars_fragment\n#endif\nbool interior = false;\nfloat calcClip( vec4 cameraPos ){\nreturn dot( cameraPos, vec4( 0.0, 0.0, 1.0, nearClip - 0.5 ) );\n}\nfloat calcClip( vec3 cameraPos ){\nreturn calcClip( vec4( cameraPos, 1.0 ) );\n}\nfloat calcDepth( in vec3 cameraPos ){\nvec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\nreturn 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\nstruct Ray {\nvec3 origin ;\nvec3 direction ;\n};\nbool cutoff_plane (vec3 M, vec3 cutoff, vec3 x3){\nfloat a = x3.x;\nfloat b = x3.y;\nfloat c = x3.z;\nfloat d = -x3.x*cutoff.x-x3.y*cutoff.y-x3.z*cutoff.z;\nfloat l = a*M.x+b*M.y+c*M.z+d;\nif (l<0.0) {return true;}\nelse{return false;}\n}\nvec3 isect_surf(Ray r, mat4 matrix_coef){\nvec4 direction = vec4(r.direction, 0.0);\nvec4 origin = vec4(r.origin, 1.0);\nfloat a = dot(direction,(matrix_coef*direction));\nfloat b = dot(origin,(matrix_coef*direction));\nfloat c = dot(origin,(matrix_coef*origin));\nfloat delta =b*b-a*c;\ngl_FragColor.a = 1.0;\nif (delta<0.0){\ndiscard;\n}\nfloat t1 =(-b-sqrt(delta))/a;\nreturn r.origin+t1*r.direction;\n}\nvec3 isect_surf2(Ray r, mat4 matrix_coef){\nvec4 direction = vec4(r.direction, 0.0);\nvec4 origin = vec4(r.origin, 1.0);\nfloat a = dot(direction,(matrix_coef*direction));\nfloat b = dot(origin,(matrix_coef*direction));\nfloat c = dot(origin,(matrix_coef*origin));\nfloat delta =b*b-a*c;\ngl_FragColor.a = 1.0;\nif (delta<0.0){\ndiscard;\n}\nfloat t2 =(-b+sqrt(delta))/a;\nreturn r.origin+t2*r.direction;\n}\nRay primary_ray(vec4 near1, vec4 far1){\nvec3 near=near1.xyz/near1.w;\nvec3 far=far1.xyz/far1.w;\nreturn Ray(near,far-near);\n}\nfloat update_z_buffer(vec3 M, mat4 ModelViewP){\nfloat depth1;\nvec4 Ms=(ModelViewP*vec4(M,1.0));\nreturn depth1=(1.0+Ms.z/Ms.w)/2.0;\n}\nvoid main(){\nfloat radius = max( vRadius, vRadius2 );\nvec4 i_near, i_far, focus;\nvec3 e3, e1, e1_temp, e2;\ni_near = vec4(matrix_near[0][0],matrix_near[0][1],matrix_near[0][2],matrix_near[0][3]);\ni_far = vec4(matrix_near[1][0],matrix_near[1][1],matrix_near[1][2],matrix_near[1][3]);\nfocus = vec4(matrix_near[2][0],matrix_near[2][1],matrix_near[2][2],matrix_near[2][3]);\ne3 = vec3(matrix_near[3][0],matrix_near[3][1],matrix_near[3][2]);\ne1.x = 1.0;\ne1.y = 1.0;\ne1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\ne1_temp = e1 - focus.xyz;\ne1 = normalize(e1_temp);\ne2 = normalize(cross(e1,e3));\nvec4 equation = focus;\nfloat shrinkfactor = shrink;\nfloat t1 = -1.0/(1.0-shrinkfactor);\nfloat t2 = 1.0/(shrinkfactor);\nvec4 colonne1, colonne2, colonne3, colonne4;\nmat4 mat;\nvec3 equation1 = vec3(t2,t2,t1);\nfloat A1 = - e1.x*equation.x - e1.y*equation.y - e1.z*equation.z;\nfloat A2 = - e2.x*equation.x - e2.y*equation.y - e2.z*equation.z;\nfloat A3 = - e3.x*equation.x - e3.y*equation.y - e3.z*equation.z;\nfloat A11 = equation1.x*e1.x*e1.x + equation1.y*e2.x*e2.x + equation1.z*e3.x*e3.x;\nfloat A21 = equation1.x*e1.x*e1.y + equation1.y*e2.x*e2.y + equation1.z*e3.x*e3.y;\nfloat A31 = equation1.x*e1.x*e1.z + equation1.y*e2.x*e2.z + equation1.z*e3.x*e3.z;\nfloat A41 = equation1.x*e1.x*A1 + equation1.y*e2.x*A2 + equation1.z*e3.x*A3;\nfloat A22 = equation1.x*e1.y*e1.y + equation1.y*e2.y*e2.y + equation1.z*e3.y*e3.y;\nfloat A32 = equation1.x*e1.y*e1.z + equation1.y*e2.y*e2.z + equation1.z*e3.y*e3.z;\nfloat A42 = equation1.x*e1.y*A1 + equation1.y*e2.y*A2 + equation1.z*e3.y*A3;\nfloat A33 = equation1.x*e1.z*e1.z + equation1.y*e2.z*e2.z + equation1.z*e3.z*e3.z;\nfloat A43 = equation1.x*e1.z*A1 + equation1.y*e2.z*A2 + equation1.z*e3.z*A3;\nfloat A44 = equation1.x*A1*A1 + equation1.y*A2*A2 + equation1.z*A3*A3 - equation.w;\ncolonne1 = vec4(A11,A21,A31,A41);\ncolonne2 = vec4(A21,A22,A32,A42);\ncolonne3 = vec4(A31,A32,A33,A43);\ncolonne4 = vec4(A41,A42,A43,A44);\nmat = mat4(colonne1,colonne2,colonne3,colonne4);\nRay ray = primary_ray(i_near,i_far) ;\nvec3 M;\nM = isect_surf(ray, mat);\nif (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\nvec4 M1 = vec4(M,1.0);\nvec4 M2 = mat*M1;\nvec3 _normal = ( modelViewMatrixInverseTranspose * M2 ).xyz;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\n#ifdef NEAR_CLIP\nif( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 ){\nM = isect_surf2(ray, mat);\nif( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 )\ndiscard;\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( nearClip - 0.5 ) ) ) + ( 0.0000001 / radius ) );\n}\n}else if( gl_FragDepthEXT <= 0.0 ){\nM = isect_surf2(ray, mat);\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix);\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n}\n}\n#else\nif( gl_FragDepthEXT <= 0.0 ){\nM = isect_surf2(ray, mat);\ninterior = true;\ngl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\nif( gl_FragDepthEXT >= 0.0 ){\ngl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n}\n}\n#endif\nif (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\nif (gl_FragDepthEXT < 0.0)\ndiscard;\nif (gl_FragDepthEXT > 1.0)\ndiscard;\nfloat distance_ratio = ((M.x-prime2.x)*e3.x + (M.y-prime2.y)*e3.y +(M.z-prime2.z)*e3.z) /\ndistance(prime2.xyz,prime1.xyz);\n#ifdef PICKING\ngl_FragColor = vec4( vPickingColor, objectId );\n#else\nvec3 vViewPosition = -( modelViewMatrix * vec4( M, 1.0 ) ).xyz;\nvec3 vNormal = _normal;\nvec3 vColor;\nif( distance_ratio>0.5 ){\nvColor = vColor1;\n}else{\nvColor = vColor2;\n}\nvec4 diffuseColor = vec4( diffuse, opacity );\nReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\nvec3 totalEmissiveLight = emissive;\n#include color_fragment\n#include roughnessmap_fragment\n#include metalnessmap_fragment\nvec3 normal = normalize( vNormal );\nif( interior ){\nnormal = vec3( 0.0, 0.0, 0.4 );\n}\n#include lights_physical_fragment\n#include lights_template\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n#include premultiplied_alpha_fragment\n#include tonemapping_fragment\n#include encodings_fragment\n#include fog_fragment\n#endif\n}");

/**
 * @file Box Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var mapping$2 = new Float32Array([
  -1.0, -1.0, -1.0,
  1.0, -1.0, -1.0,
  1.0, -1.0, 1.0,
  -1.0, -1.0, 1.0,
  -1.0, 1.0, -1.0,
  1.0, 1.0, -1.0,
  1.0, 1.0, 1.0,
  -1.0, 1.0, 1.0
]);

var mappingIndices$2 = new Uint16Array([
  0, 1, 2,
  0, 2, 3,
  1, 5, 6,
  1, 6, 2,
  4, 6, 5,
  4, 7, 6,
  0, 7, 4,
  0, 3, 7,
  0, 5, 1,
  0, 4, 5,
  3, 2, 6,
  3, 6, 7
]);

/**
 * Box buffer. Draws boxes. Used to render general imposters.
 * @interface
 */
var BoxBuffer = (function (MappedBuffer$$1) {
  function BoxBuffer () {
    MappedBuffer$$1.apply(this, arguments);
  }

  if ( MappedBuffer$$1 ) BoxBuffer.__proto__ = MappedBuffer$$1;
  BoxBuffer.prototype = Object.create( MappedBuffer$$1 && MappedBuffer$$1.prototype );
  BoxBuffer.prototype.constructor = BoxBuffer;

  var prototypeAccessors = { mapping: {},mappingIndices: {},mappingIndicesSize: {},mappingType: {},mappingSize: {},mappingItemSize: {} };

  prototypeAccessors.mapping.get = function () { return mapping$2 };
  prototypeAccessors.mappingIndices.get = function () { return mappingIndices$2 };
  prototypeAccessors.mappingIndicesSize.get = function () { return 36 };
  prototypeAccessors.mappingType.get = function () { return 'v3' };
  prototypeAccessors.mappingSize.get = function () { return 8 };
  prototypeAccessors.mappingItemSize.get = function () { return 3 };

  Object.defineProperties( BoxBuffer.prototype, prototypeAccessors );

  return BoxBuffer;
}(MappedBuffer));

/**
 * @file Hyperball Stick Impostor Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Hyperball stick impostor buffer.
 *
 * @example
 * var hyperballStickImpostorBuffer = new HyperballStickImpostorBuffer( {
 *     position1: new Float32Array( [ 0, 0, 0 ] ),
 *     position2: new Float32Array( [ 2, 2, 2 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     color2: new Float32Array( [ 0, 1, 0 ] ),
 *     radius1: new Float32Array( [ 1 ] ),
 *     radius2: new Float32Array( [ 2 ] )
 * } );
 */
var HyperballStickImpostorBuffer = (function (BoxBuffer$$1) {
  function HyperballStickImpostorBuffer (data, params) {
    BoxBuffer$$1.call(this, data, params);

    var d = data || {};
    var p = params || {};

    var shrink = defaults(p.shrink, 0.14);

    this.addUniforms({
      'modelViewProjectionMatrix': { value: new Matrix4() },
      'modelViewProjectionMatrixInverse': { value: new Matrix4() },
      'modelViewMatrixInverseTranspose': { value: new Matrix4() },
      'shrink': { value: shrink }
    });

    this.addAttributes({
      'position1': { type: 'v3', value: null },
      'position2': { type: 'v3', value: null },
      'color2': { type: 'c', value: null },
      'radius': { type: 'f', value: null },
      'radius2': { type: 'f', value: null }
    });

    this.setAttributes(d);

    this.makeMapping();
  }

  if ( BoxBuffer$$1 ) HyperballStickImpostorBuffer.__proto__ = BoxBuffer$$1;
  HyperballStickImpostorBuffer.prototype = Object.create( BoxBuffer$$1 && BoxBuffer$$1.prototype );
  HyperballStickImpostorBuffer.prototype.constructor = HyperballStickImpostorBuffer;

  var prototypeAccessors = { parameters: {},isImpostor: {},vertexShader: {},fragmentShader: {} };

  prototypeAccessors.parameters.get = function () {
    return Object.assign.call(this, {

      shrink: { uniform: true }

    }, BoxBuffer$$1.prototype.parameters)
  };

  prototypeAccessors.isImpostor.get = function () { return true };
  prototypeAccessors.vertexShader.get = function () { return 'HyperballStickImpostor.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'HyperballStickImpostor.frag' };

  Object.defineProperties( HyperballStickImpostorBuffer.prototype, prototypeAccessors );

  return HyperballStickImpostorBuffer;
}(BoxBuffer));

/**
 * @file Hyperball Stick Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Hyperball stick buffer. Depending on the value {@link ExtensionFragDepth} and
 * `params.disableImpostor` the constructor returns either a
 * {@link CylinderGeometryBuffer} or a {@link HyperballStickImpostorBuffer}
 * @implements {Buffer}
 *
 * @example
 * var hyperballStickBuffer = new HyperballStickBuffer( {
 *     position1: new Float32Array( [ 0, 0, 0 ] ),
 *     position2: new Float32Array( [ 2, 2, 2 ] ),
 *     color: new Float32Array( [ 1, 0, 0 ] ),
 *     color2: new Float32Array( [ 0, 1, 0 ] ),
 *     radius1: new Float32Array( [ 1 ] ),
 *     radius2: new Float32Array( [ 2 ] )
 * } );
 */
var HyperballStickBuffer = function HyperballStickBuffer (data, params) {
  if (!ExtensionFragDepth || (params && params.disableImpostor)) {
    data.radius = calculateMinArray(data.radius1, data.radius2);
    return new CylinderGeometryBuffer(data, params)
  } else {
    return new HyperballStickImpostorBuffer(data, params)
  }
};

/**
 * @file Hyperball Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Hyperball Representation
 */
var HyperballRepresentation = (function (LicoriceRepresentation$$1) {
  function HyperballRepresentation (structure, viewer, params) {
    LicoriceRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'hyperball';

    this.parameters = Object.assign({

      shrink: {
        type: 'number', precision: 3, max: 1.0, min: 0.001, buffer: true
      }

    }, this.parameters, {

      multipleBond: null,
      bondSpacing: null

    });
  }

  if ( LicoriceRepresentation$$1 ) HyperballRepresentation.__proto__ = LicoriceRepresentation$$1;
  HyperballRepresentation.prototype = Object.create( LicoriceRepresentation$$1 && LicoriceRepresentation$$1.prototype );
  HyperballRepresentation.prototype.constructor = HyperballRepresentation;

  HyperballRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.scale = defaults(p.scale, 0.2);
    p.radius = defaults(p.radius, 'vdw');

    this.shrink = defaults(p.shrink, 0.12);

    LicoriceRepresentation$$1.prototype.init.call(this, p);
  };

  HyperballRepresentation.prototype.getBondParams = function getBondParams (what, params) {
    if (!what || what.radius) {
      params = Object.assign({ radius2: true }, params);
    }

    return LicoriceRepresentation$$1.prototype.getBondParams.call(this, what, params)
  };

  HyperballRepresentation.prototype.createData = function createData (sview) {
    var sphereBuffer = new SphereBuffer(
            sview.getAtomData(this.getAtomParams()),
            this.getBufferParams({
              sphereDetail: this.sphereDetail,
              disableImpostor: this.disableImpostor,
              dullInterior: true
            })
        );

    this.__center = new Float32Array(sview.bondCount * 3);

    var stickBuffer = new HyperballStickBuffer(
            sview.getBondData(this.getBondParams()),
            this.getBufferParams({
              shrink: this.shrink,
              radialSegments: this.radialSegments,
              dullInterior: true
            })
        );

    return {
      bufferList: [ sphereBuffer, stickBuffer ]
    }
  };

  HyperballRepresentation.prototype.updateData = function updateData (what, data) {
    var atomData = data.sview.getAtomData(this.getAtomParams());
    var bondData = data.sview.getBondData(this.getBondParams());
    var sphereData = {};
    var stickData = {};

    if (!what || what.position) {
      sphereData.position = atomData.position;
      var from = bondData.position1;
      var to = bondData.position2;
      stickData.position = calculateCenterArray(from, to, this.__center);
      stickData.position1 = from;
      stickData.position2 = to;
    }

    if (!what || what.color) {
      sphereData.color = atomData.color;
      stickData.color = bondData.color;
      stickData.color2 = bondData.color2;
    }

    if (!what || what.radius) {
      sphereData.radius = atomData.radius;
      stickData.radius = bondData.radius;
      stickData.radius2 = bondData.radius2;
    }

    data.bufferList[ 0 ].setAttributes(sphereData);
    data.bufferList[ 1 ].setAttributes(stickData);
  };

  return HyperballRepresentation;
}(LicoriceRepresentation));

RepresentationRegistry.add('hyperball', HyperballRepresentation);

/**
 * @file Label Factory
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function LabelFactory (type, text) {
  this.type = type;
  this.text = text || {};
}

LabelFactory.prototype = {

  constructor: LabelFactory,

  atomLabel: function (a) {
    var type = this.type;

    var l;

    switch (type) {
      case 'atomname':
        l = a.atomname;
        break

      case 'atomindex':
        l = '' + a.index;
        break

      case 'occupancy':
        l = a.occupancy.toFixed(2);
        break

      case 'bfactor':
        l = a.bfactor.toFixed(2);
        break

      case 'serial':
        l = '' + a.serial;
        break

      case 'element':
        l = a.element;
        break

      case 'atom':
        l = a.atomname + '|' + a.index;
        break

      case 'resname':
        l = a.resname;
        break

      case 'resno':
        l = '' + a.resno;
        break

      case 'res':
        var resname = a.resname.toUpperCase();
        l = (AA1[ resname ] || resname) + a.resno;
        break

      case 'text':
        l = this.text[ a.index ];
        break

            // case "qualified":
      default:
        l = a.qualifiedName();
        break
    }

    return l === undefined ? '' : l
  }

};

LabelFactory.types = {

  '': '',
  'atomname': 'atom name',
  'atomindex': 'atom index',
  'occupancy': 'occupancy',
  'bfactor': 'b-factor',
  'serial': 'serial',
  'element': 'element',
  'atom': 'atom name + index',
  'resname': 'residue name',
  'resno': 'residue no',
  'res': 'residue name + no',
  'text': 'text',
  'qualified': 'qualified name'

};

/**
 * @file Label Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Label representation parameter object.
 * @typedef {Object} LabelRepresentationParameters - label representation parameters
 *
 * @property {Integer} clipNear - position of camera near/front clipping plane
 *                                in percent of scene bounding box
 * @property {Float} opacity - translucency: 1 is fully opaque, 0 is fully transparent
 * @property {String} labelType - type of the label, one of:
 *                                 "atomname", "atomindex", "occupancy", "bfactor",
 *                                 "serial", "element", "atom", "resname", "resno",
 *                                 "res", "text", "qualified". When set to "text", the
 *                                 `labelText` list is used.
 * @property {String[]} labelText - list of label strings, must set `labelType` to "text"
 *                                   to take effect
 * @property {String} fontFamily - font family, one of: "sans-serif", "monospace", "serif"
 * @property {String} fontStyle - font style, "normal" or "italic"
 * @property {String} fontWeight - font weight, "normal" or "bold"
 * @property {Boolean} sdf - use "signed distance field"-based rendering for sharper edges
 * @property {Float} xOffset - offset in x-direction
 * @property {Float} yOffset - offset in y-direction
 * @property {Float} zOffset - offset in z-direction (i.e. in camera direction)
 * @property {String} attachment - attachment of the label, one of:
 *                                 "bottom-left", "bottom-center", "bottom-right",
 *                                 "middle-left", "middle-center", "middle-right",
 *                                 "top-left", "top-center", "top-right"
 * @property {Boolean} showBorder - show border/outline
 * @property {Color} borderColor - color of the border/outline
 * @property {Float} borderWidth - width of the border/outline
 * @property {Boolean} showBackground - show background rectangle
 * @property {Color} backgroundColor - color of the background
 * @property {Float} backgroundMargin - width of the background
 * @property {Float} backgroundOpacity - opacity of the background
 */

/**
 * Label representation
 */
var LabelRepresentation = (function (StructureRepresentation$$1) {
  function LabelRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'label';

    this.parameters = Object.assign({

      labelType: {
        type: 'select', options: LabelFactory.types, rebuild: true
      },
      labelText: {
        type: 'hidden', rebuild: true
      },
      fontFamily: {
        type: 'select',
        options: {
          'sans-serif': 'sans-serif',
          'monospace': 'monospace',
          'serif': 'serif'
        },
        buffer: true
      },
      fontStyle: {
        type: 'select',
        options: {
          'normal': 'normal',
          'italic': 'italic'
        },
        buffer: true
      },
      fontWeight: {
        type: 'select',
        options: {
          'normal': 'normal',
          'bold': 'bold'
        },
        buffer: true
      },
      sdf: {
        type: 'boolean', buffer: true
      },
      xOffset: {
        type: 'number', precision: 1, max: 20, min: -20, buffer: true
      },
      yOffset: {
        type: 'number', precision: 1, max: 20, min: -20, buffer: true
      },
      zOffset: {
        type: 'number', precision: 1, max: 20, min: -20, buffer: true
      },
      attachment: {
        type: 'select',
        options: {
          'bottom-left': 'bottom-left',
          'bottom-center': 'bottom-center',
          'bottom-right': 'bottom-right',
          'middle-left': 'middle-left',
          'middle-center': 'middle-center',
          'middle-right': 'middle-right',
          'top-left': 'top-left',
          'top-center': 'top-center',
          'top-right': 'top-right'
        },
        rebuild: true
      },
      showBorder: {
        type: 'boolean', buffer: true
      },
      borderColor: {
        type: 'color', buffer: true
      },
      borderWidth: {
        type: 'number', precision: 2, max: 0.3, min: 0, buffer: true
      },
      showBackground: {
        type: 'boolean', rebuild: true
      },
      backgroundColor: {
        type: 'color', buffer: true
      },
      backgroundMargin: {
        type: 'number', precision: 2, max: 2, min: 0, rebuild: true
      },
      backgroundOpacity: {
        type: 'range', step: 0.01, max: 1, min: 0, buffer: true
      }

    }, this.parameters, {

      side: null,
      flatShaded: null,
      wireframe: null,
      linewidth: null,

      roughness: null,
      metalness: null,
      diffuse: null

    });

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) LabelRepresentation.__proto__ = StructureRepresentation$$1;
  LabelRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  LabelRepresentation.prototype.constructor = LabelRepresentation;

  LabelRepresentation.prototype.init = function init (params) {
    var p = params || {};

    this.labelType = defaults(p.labelType, 'res');
    this.labelText = defaults(p.labelText, {});
    this.fontFamily = defaults(p.fontFamily, 'sans-serif');
    this.fontStyle = defaults(p.fontStyle, 'normal');
    this.fontWeight = defaults(p.fontWeight, 'bold');
    this.sdf = defaults(p.sdf, Browser === 'Chrome');
    this.xOffset = defaults(p.xOffset, 0.0);
    this.yOffset = defaults(p.yOffset, 0.0);
    this.zOffset = defaults(p.zOffset, 0.5);
    this.attachment = defaults(p.attachment, 'bottom-left');
    this.showBorder = defaults(p.showBorder, false);
    this.borderColor = defaults(p.borderColor, 'lightgrey');
    this.borderWidth = defaults(p.borderWidth, 0.15);
    this.showBackground = defaults(p.showBackground, false);
    this.backgroundColor = defaults(p.backgroundColor, 'lightgrey');
    this.backgroundMargin = defaults(p.backgroundMargin, 0.5);
    this.backgroundOpacity = defaults(p.backgroundOpacity, 1.0);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  LabelRepresentation.prototype.createData = function createData (sview) {
    var what = { position: true, color: true, radius: true };
    var atomData = sview.getAtomData(this.getAtomParams(what));

    var text = [];
    var labelFactory = new LabelFactory(
            this.labelType, this.labelText
        );
    sview.eachAtom(function (ap) {
      text.push(labelFactory.atomLabel(ap));
    });

    var textBuffer = new TextBuffer(
      {
        position: atomData.position,
        size: atomData.radius,
        color: atomData.color,
        text: text
      },
            this.getBufferParams({
              fontFamily: this.fontFamily,
              fontStyle: this.fontStyle,
              fontWeight: this.fontWeight,
              sdf: this.sdf,
              xOffset: this.xOffset,
              yOffset: this.yOffset,
              zOffset: this.zOffset,
              attachment: this.attachment,
              showBorder: this.showBorder,
              borderColor: this.borderColor,
              borderWidth: this.borderWidth,
              showBackground: this.showBackground,
              backgroundColor: this.backgroundColor,
              backgroundMargin: this.backgroundMargin,
              backgroundOpacity: this.backgroundOpacity
            })
        );

    return {
      bufferList: [ textBuffer ]
    }
  };

  LabelRepresentation.prototype.updateData = function updateData (what, data) {
    var atomData = data.sview.getAtomData(this.getAtomParams(what));
    var textData = {};

    if (!what || what.position) {
      textData.position = atomData.position;
    }

    if (!what || what.radius) {
      textData.size = atomData.radius;
    }

    if (!what || what.color) {
      textData.color = atomData.color;
    }

    data.bufferList[ 0 ].setAttributes(textData);
  };

  return LabelRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('label', LabelRepresentation);

/**
 * @file Line Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Line representation
 */
var LineRepresentation = (function (StructureRepresentation$$1) {
  function LineRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'line';

    this.parameters = Object.assign({

      multipleBond: {
        type: 'select',
        rebuild: true,
        options: {
          'off': 'off',
          'symmetric': 'symmetric',
          'offset': 'offset'
        }
      },
      bondSpacing: {
        type: 'number', precision: 2, max: 2.0, min: 0.5
      }

    }, this.parameters, {

      flatShaded: null,
      side: null,
      wireframe: null,

      roughness: null,
      metalness: null,
      diffuse: null

    });

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) LineRepresentation.__proto__ = StructureRepresentation$$1;
  LineRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  LineRepresentation.prototype.constructor = LineRepresentation;

  LineRepresentation.prototype.init = function init (params) {
    var p = params || {};

    this.multipleBond = defaults(p.multipleBond, 'off');
    this.bondSpacing = defaults(p.bondSpacing, 1.0);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  LineRepresentation.prototype.getBondParams = function getBondParams (what, params) {
    params = Object.assign({
      multipleBond: this.multipleBond,
      bondSpacing: this.bondSpacing,
      radiusParams: { 'radius': 0.1, 'scale': 1 }
    }, params);

    return StructureRepresentation$$1.prototype.getBondParams.call(this, what, params)
  };

  LineRepresentation.prototype.createData = function createData (sview) {
    var what = { position: true, color: true };
    var bondData = sview.getBondData(this.getBondParams(what));

    var lineBuffer = new LineBuffer(
            bondData, this.getBufferParams()
        );

    return {
      bufferList: [ lineBuffer ]
    }
  };

  LineRepresentation.prototype.updateData = function updateData (what, data) {
    var bondData = data.sview.getBondData(this.getBondParams(what));
    var lineData = {};

    if (!what || what.position) {
      lineData.position1 = bondData.position1;
      lineData.position2 = bondData.position2;
    }

    if (!what || what.color) {
      lineData.color = bondData.color;
      lineData.color2 = bondData.color2;
    }

    data.bufferList[ 0 ].setAttributes(lineData);
  };

  LineRepresentation.prototype.setParameters = function setParameters (params) {
    var rebuild = false;
    var what = {};

    if (params && params.bondSpacing) {
      what.position = true;
    }

    StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);

    return this
  };

  return LineRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('line', LineRepresentation);

/**
 * @file Grid
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function Grid (length, width, height, DataCtor, elemSize) {
  DataCtor = DataCtor || Int32Array;
  elemSize = elemSize || 1;

  var j;

  var data = new DataCtor(length * width * height * elemSize);

  function index (x, y, z) {
    return ((((x * width) + y) * height) + z) * elemSize
  }

  this.data = data;

  this.index = index;

  this.set = function (x, y, z) {
    var arguments$1 = arguments;

    var i = index(x, y, z);

    for (j = 0; j < elemSize; ++j) {
      data[ i + j ] = arguments$1[ 3 + j ];
    }
  };

  this.toArray = function (x, y, z, array, offset) {
    var i = index(x, y, z);

    if (array === undefined) { array = []; }
    if (offset === undefined) { offset = 0; }

    for (j = 0; j < elemSize; ++j) {
      array[ offset + j ] = data[ i + j ];
    }
  };

  this.fromArray = function (x, y, z, array, offset) {
    var i = index(x, y, z);

    if (offset === undefined) { offset = 0; }

    for (j = 0; j < elemSize; ++j) {
      data[ i + j ] = array[ offset + j ];
    }
  };

  this.copy = function (grid) {
    this.data.set(grid.data);
  };

  this.clone = function () {
    return new Grid(
      length, width, height, DataCtor, elemSize
    ).copy(this)
  };
}

/**
 * @file EDT Surface
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function EDTSurface (coordList, radiusList, indexList) {
    // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
    // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
    //
    // Permission to use, copy, modify, and distribute this program for
    // any purpose, with or without fee, is hereby granted, provided that
    // the notices on the head, the reference information, and this
    // copyright notice appear in all copies or substantial portions of
    // the Software. It is provided "as is" without express or implied
    // warranty.
    //
    // ported to JavaScript by biochem_fan (http://webglmol.sourceforge.jp/)
    // refactored by dkoes (https://github.com/dkoes)
    //
    // adapted to NGL by Alexander Rose

  var radiusDict = getRadiusDict(radiusList);
  var bbox = computeBoundingBox(coordList);
  if (coordList.length === 0) {
    bbox[ 0 ].set([ 0, 0, 0 ]);
    bbox[ 1 ].set([ 0, 0, 0 ]);
  }
  var min = bbox[ 0 ];
  var max = bbox[ 1 ];

  var probeRadius, scaleFactor, cutoff;
  var pLength, pWidth, pHeight;
  var matrix, ptran;
  var depty, widxz;
  var cutRadius;
  var setAtomID;
  var vpBits, vpDistance, vpAtomID;

  function init (btype, _probeRadius, _scaleFactor, _cutoff, _setAtomID) {
    probeRadius = _probeRadius || 1.4;
    scaleFactor = _scaleFactor || 2.0;
    setAtomID = _setAtomID || true;

    var maxRadius = 0;
    for (var radius in radiusDict) {
      maxRadius = Math.max(maxRadius, radius);
    }

    var grid = getSurfaceGrid(
            min, max, maxRadius, scaleFactor, btype ? probeRadius : 0
        );

    pLength = grid.dim[0];
    pWidth = grid.dim[1];
    pHeight = grid.dim[2];

    matrix = grid.matrix;
    ptran = grid.tran;
    scaleFactor = grid.scaleFactor;

        // boundingatom caches
    depty = {};
    widxz = {};
    boundingatom(btype);

    cutRadius = probeRadius * scaleFactor;

    if (_cutoff) {
      cutoff = _cutoff;
    } else {
            // cutoff = Math.max( 0.1, -1.2 + scaleFactor * probeRadius );
      cutoff = probeRadius / scaleFactor;
    }

    vpBits = new Uint8Array(pLength * pWidth * pHeight);
    if (btype) {
      vpDistance = new Float64Array(pLength * pWidth * pHeight);
    }
    if (setAtomID) {
      vpAtomID = new Int32Array(pLength * pWidth * pHeight);
    }
  }

    // constants for vpBits bitmasks
  var INOUT = 1;
  var ISDONE = 2;
  var ISBOUND = 4;

  var nb = [
    new Int32Array([ 1, 0, 0 ]), new Int32Array([ -1, 0, 0 ]),
    new Int32Array([ 0, 1, 0 ]), new Int32Array([ 0, -1, 0 ]),
    new Int32Array([ 0, 0, 1 ]), new Int32Array([ 0, 0, -1 ]),
    new Int32Array([ 1, 1, 0 ]), new Int32Array([ 1, -1, 0 ]),
    new Int32Array([ -1, 1, 0 ]), new Int32Array([ -1, -1, 0 ]),
    new Int32Array([ 1, 0, 1 ]), new Int32Array([ 1, 0, -1 ]),
    new Int32Array([ -1, 0, 1 ]), new Int32Array([ -1, 0, -1 ]),
    new Int32Array([ 0, 1, 1 ]), new Int32Array([ 0, 1, -1 ]),
    new Int32Array([ 0, -1, 1 ]), new Int32Array([ 0, -1, -1 ]),
    new Int32Array([ 1, 1, 1 ]), new Int32Array([ 1, 1, -1 ]),
    new Int32Array([ 1, -1, 1 ]), new Int32Array([ -1, 1, 1 ]),
    new Int32Array([ 1, -1, -1 ]), new Int32Array([ -1, -1, 1 ]),
    new Int32Array([ -1, 1, -1 ]), new Int32Array([ -1, -1, -1 ])
  ];

    //

  this.getVolume = function (type, probeRadius, scaleFactor, cutoff, setAtomID) {
    console.time('EDTSurface.getVolume');

    var btype = type !== 'vws';

    init(btype, probeRadius, scaleFactor, cutoff, setAtomID);

    fillvoxels(btype);
    buildboundary();

    if (type === 'ms' || type === 'ses') {
      fastdistancemap();
    }

    if (type === 'ses') {
      boundingatom(false);
      fillvoxelswaals();
    }

    marchingcubeinit(type);

        // set atomindex in the volume data
    for (var i = 0, il = vpAtomID.length; i < il; ++i) {
      vpAtomID[ i ] = indexList[ vpAtomID[ i ] ];
    }

    console.timeEnd('EDTSurface.getVolume');

    return {
      data: vpBits,
      nx: pHeight,
      ny: pWidth,
      nz: pLength,
      atomindex: vpAtomID
    }
  };

  this.getSurface = function (type, probeRadius, scaleFactor, cutoff, setAtomID, smooth, contour) {
    var vd = this.getVolume(
      type, probeRadius, scaleFactor, cutoff, setAtomID
    );

    var volsurf = new VolumeSurface(
      vd.data, vd.nx, vd.ny, vd.nz, vd.atomindex
    );

    return volsurf.getSurface(1, smooth, undefined, matrix, contour)
  };

  function boundingatom (btype) {
    var r;
    var j;
    var k;
    var txz;
    var tdept;
    var sradius;
    var tradius;
    var widxzR;
    var deptyName;
    var indx;

    for (var name in radiusDict) {
      r = radiusDict[ name ];

      if (depty[ name ]) { continue }

      if (!btype) {
        tradius = r * scaleFactor + 0.5;
      } else {
        tradius = (r + probeRadius) * scaleFactor + 0.5;
      }

      sradius = tradius * tradius;
      widxzR = Math.floor(tradius) + 1;
      deptyName = new Int32Array(widxzR * widxzR);
      indx = 0;

      for (j = 0; j < widxzR; ++j) {
        for (k = 0; k < widxzR; ++k) {
          txz = j * j + k * k;

          if (txz > sradius) {
            deptyName[ indx ] = -1;
          } else {
            tdept = Math.sqrt(sradius - txz);
            deptyName[ indx ] = Math.floor(tdept);
          }

          ++indx;
        }
      }

      widxz[ name ] = widxzR;
      depty[ name ] = deptyName;
    }
  }

  function fillatom (idx) {
    var ci = idx * 3;
    var ri = idx;

    var cx, cy, cz, ox, oy, oz, mi, mj, mk, i, j, k, si, sj, sk;
    var ii, jj, kk;

    cx = Math.floor(0.5 + scaleFactor * (coordList[ ci ] + ptran[0]));
    cy = Math.floor(0.5 + scaleFactor * (coordList[ ci + 1 ] + ptran[1]));
    cz = Math.floor(0.5 + scaleFactor * (coordList[ ci + 2 ] + ptran[2]));

    var at = radiusList[ ri ];
    var deptyAt = depty[ at ];
    var nind = 0;
    var pWH = pWidth * pHeight;
    var n = widxz[ at ];

    var deptyAtNind;

    for (i = 0; i < n; ++i) {
      for (j = 0; j < n; ++j) {
        deptyAtNind = deptyAt[ nind ];

        if (deptyAtNind !== -1) {
          for (ii = -1; ii < 2; ++ii) {
            for (jj = -1; jj < 2; ++jj) {
              for (kk = -1; kk < 2; ++kk) {
                if (ii !== 0 && jj !== 0 && kk !== 0) {
                  mi = ii * i;
                  mk = kk * j;

                  for (k = 0; k <= deptyAtNind; ++k) {
                    mj = k * jj;
                    si = cx + mi;
                    sj = cy + mj;
                    sk = cz + mk;

                    if (si < 0 || sj < 0 || sk < 0 ||
                      si >= pLength || sj >= pWidth || sk >= pHeight
                    ) {
                      continue
                    }

                    var index = si * pWH + sj * pHeight + sk;

                    if (!setAtomID) {
                      vpBits[ index ] |= INOUT;
                    } else {
                      if (!(vpBits[ index ] & INOUT)) {
                        vpBits[ index ] |= INOUT;
                        vpAtomID[ index ] = idx;
                      } else if (vpBits[ index ] & INOUT) {
                        var ci2 = vpAtomID[ index ];

                        if (ci2 !== ci) {
                          ox = cx + mi - Math.floor(0.5 + scaleFactor * (coordList[ci2] + ptran[0]));
                          oy = cy + mj - Math.floor(0.5 + scaleFactor * (coordList[ci2 + 1] + ptran[1]));
                          oz = cz + mk - Math.floor(0.5 + scaleFactor * (coordList[ci2 + 2] + ptran[2]));

                          if (mi * mi + mj * mj + mk * mk < ox * ox + oy * oy + oz * oz) {
                            vpAtomID[ index ] = idx;
                          }
                        }
                      }
                    }
                  }// k
                }// if
              }// kk
            }// jj
          }// ii
        }// if

        nind++;
      }// j
    }// i
  }

  function fillvoxels (btype) {
    console.time('EDTSurface fillvoxels');

    var i, il;

    for (i = 0, il = vpBits.length; i < il; ++i) {
      vpBits[ i ] = 0;
      if (btype) { vpDistance[ i ] = -1.0; }
      if (setAtomID) { vpAtomID[ i ] = -1; }
    }

    for (i = 0, il = coordList.length / 3; i < il; ++i) {
      fillatom(i);
    }

    for (i = 0, il = vpBits.length; i < il; ++i) {
      if (vpBits[ i ] & INOUT) {
        vpBits[ i ] |= ISDONE;
      }
    }

    console.timeEnd('EDTSurface fillvoxels');
  }

  function fillAtomWaals (idx) {
    var ci = idx * 3;
    var ri = idx;

    var cx;
    var cy;
    var cz;
    var ox;
    var oy;
    var oz;
    var nind = 0;

    var mi;
    var mj;
    var mk;
    var si;
    var sj;
    var sk;
    var i;
    var j;
    var k;
    var ii;
    var jj;
    var kk;
    var n;

    cx = Math.floor(0.5 + scaleFactor * (coordList[ ci ] + ptran[0]));
    cy = Math.floor(0.5 + scaleFactor * (coordList[ ci + 1 ] + ptran[1]));
    cz = Math.floor(0.5 + scaleFactor * (coordList[ ci + 2 ] + ptran[2]));

    var at = radiusList[ ri ];
    var pWH = pWidth * pHeight;

    for (i = 0, n = widxz[at]; i < n; ++i) {
      for (j = 0; j < n; ++j) {
        if (depty[ at ][ nind ] !== -1) {
          for (ii = -1; ii < 2; ++ii) {
            for (jj = -1; jj < 2; ++jj) {
              for (kk = -1; kk < 2; ++kk) {
                if (ii !== 0 && jj !== 0 && kk !== 0) {
                  mi = ii * i;
                  mk = kk * j;

                  for (k = 0; k <= depty[ at ][ nind ]; ++k) {
                    mj = k * jj;
                    si = cx + mi;
                    sj = cy + mj;
                    sk = cz + mk;

                    if (si < 0 || sj < 0 || sk < 0 ||
                      si >= pLength || sj >= pWidth || sk >= pHeight
                    ) {
                      continue
                    }

                    var index = si * pWH + sj * pHeight + sk;

                    if (!(vpBits[ index ] & ISDONE)) {
                      vpBits[ index ] |= ISDONE;
                      if (setAtomID) { vpAtomID[ index ] = idx; }
                    } else if (setAtomID) {
                      var ci2 = vpAtomID[ index ];

                      ox = Math.floor(0.5 + scaleFactor * (coordList[ ci2 ] + ptran[0]));
                      oy = Math.floor(0.5 + scaleFactor * (coordList[ ci2 + 1 ] + ptran[1]));
                      oz = Math.floor(0.5 + scaleFactor * (coordList[ ci2 + 2 ] + ptran[2]));

                      if (mi * mi + mj * mj + mk * mk < ox * ox + oy * oy + oz * oz) {
                        vpAtomID[ index ] = idx;
                      }
                    }
                  }// k
                }// if
              }// kk
            }// jj
          }// ii
        }// if

        nind++;
      }// j
    }// i
  }

  function fillvoxelswaals () {
    var i, il;

    for (i = 0, il = vpBits.length; i < il; ++i) {
      vpBits[ i ] &= ~ISDONE;  // not isdone
    }

    for (i = 0, il = coordList.length / 3; i < il; ++i) {
      fillAtomWaals(i);
    }
  }

  function buildboundary () {
    var i, j, k;
    var pWH = pWidth * pHeight;

    for (i = 0; i < pLength; ++i) {
      for (j = 0; j < pHeight; ++j) {
        for (k = 0; k < pWidth; ++k) {
          var index = i * pWH + k * pHeight + j;

          if (vpBits[ index ] & INOUT) {
                // var flagbound = false;
            var ii = 0;

                // while( !flagbound && ii < 26 ){
            while (ii < 26) {
              var ti = i + nb[ ii ][ 0 ];
              var tj = j + nb[ ii ][ 2 ];
              var tk = k + nb[ ii ][ 1 ];

              if (ti > -1 && ti < pLength &&
                        tk > -1 && tk < pWidth &&
                        tj > -1 && tj < pHeight &&
                        !(vpBits[ ti * pWH + tk * pHeight + tj ] & INOUT)
                    ) {
                vpBits[ index ] |= ISBOUND;
                        // flagbound = true;
                break
              } else {
                ii++;
              }
            }
          }
        } // k
      } // j
    } // i
  }

  function fastdistancemap () {
    console.time('EDTSurface fastdistancemap');

    var i, j, k, n;

    var boundPoint = new Grid(
            pLength, pWidth, pHeight, Uint16Array, 3
        );
    var pWH = pWidth * pHeight;
    var cutRSq = cutRadius * cutRadius;

    var totalsurfacevox = 0;
        // var totalinnervox = 0;

    var index;

    for (i = 0; i < pLength; ++i) {
      for (j = 0; j < pWidth; ++j) {
        for (k = 0; k < pHeight; ++k) {
          index = i * pWH + j * pHeight + k;

          vpBits[ index ] &= ~ISDONE;

          if (vpBits[ index ] & INOUT) {
            if (vpBits[ index ] & ISBOUND) {
              boundPoint.set(
                                i, j, k,
                                i, j, k
                            );

              vpDistance[ index ] = 0;
              vpBits[ index ] |= ISDONE;

              totalsurfacevox += 1;
            }/* else{

                            totalinnervox += 1;

                        } */
          }
        }
      }
    }

    var inarray = new Int32Array(3 * totalsurfacevox);
    var positin = 0;
    var outarray = new Int32Array(3 * totalsurfacevox);
    var positout = 0;

    for (i = 0; i < pLength; ++i) {
      for (j = 0; j < pWidth; ++j) {
        for (k = 0; k < pHeight; ++k) {
          index = i * pWH + j * pHeight + k;

          if (vpBits[ index ] & ISBOUND) {
            inarray[ positin ] = i;
            inarray[ positin + 1 ] = j;
            inarray[ positin + 2 ] = k;
            positin += 3;

            vpBits[ index ] &= ~ISBOUND;
          }
        }
      }
    }

    do {
      positout = fastoneshell(inarray, boundPoint, positin, outarray);
      positin = 0;

      for (i = 0, n = positout; i < n; i += 3) {
        index = pWH * outarray[ i ] + pHeight * outarray[ i + 1 ] + outarray[ i + 2 ];
        vpBits[ index ] &= ~ISBOUND;

        if (vpDistance[ index ] <= 1.0404 * cutRSq) {
                // if( vpDistance[ index ] <= 1.02 * cutRadius ){

          inarray[ positin ] = outarray[ i ];
          inarray[ positin + 1 ] = outarray[ i + 1 ];
          inarray[ positin + 2 ] = outarray[ i + 2 ];
          positin += 3;
        }
      }
    } while (positin > 0)

        // var cutsf = Math.max( 0, scaleFactor - 0.5 );
        // cutoff = cutRadius - 0.5 / ( 0.1 + cutsf );
    var cutoffSq = cutoff * cutoff;

    var index2;
    var bp = new Uint16Array(3);

    for (i = 0; i < pLength; ++i) {
      for (j = 0; j < pWidth; ++j) {
        for (k = 0; k < pHeight; ++k) {
          index = i * pWH + j * pHeight + k;
          vpBits[ index ] &= ~ISBOUND;

                    // ses solid

          if (vpBits[ index ] & INOUT) {
            if (!(vpBits[ index ] & ISDONE) ||
                            ((vpBits[ index ] & ISDONE) && vpDistance[ index ] >= cutoffSq)
                        ) {
              vpBits[ index ] |= ISBOUND;

              if (setAtomID && (vpBits[ index ] & ISDONE)) {
                boundPoint.toArray(i, j, k, bp);
                index2 = bp[ 0 ] * pWH + bp[ 1 ] * pHeight + bp[ 2 ];

                vpAtomID[ index ] = vpAtomID[ index2 ];
              }
            }
          }
        }
      }
    }

    console.timeEnd('EDTSurface fastdistancemap');
  }

  function fastoneshell (inarray, boundPoint, positin, outarray) {
        // *allocout,voxel2
        // ***boundPoint, int*
        // outnum, int *elimi)
    var tx, ty, tz;
    var dx, dy, dz;
    var i, j, n;
    var square;
    var index;
    var nbj;
    var bp = new Uint16Array(3);
    var positout = 0;

    if (positin === 0) {
      return positout
    }

    var tnvix = -1;
    var tnviy = -1;
    var tnviz = -1;

    var pWH = pWidth * pHeight;

    for (i = 0, n = positin; i < n; i += 3) {
      tx = inarray[ i ];
      ty = inarray[ i + 1 ];
      tz = inarray[ i + 2 ];
      boundPoint.toArray(tx, ty, tz, bp);

      for (j = 0; j < 6; ++j) {
        nbj = nb[ j ];
        tnvix = tx + nbj[ 0 ];
        tnviy = ty + nbj[ 1 ];
        tnviz = tz + nbj[ 2 ];

        if (tnvix < pLength && tnvix > -1 &&
                    tnviy < pWidth && tnviy > -1 &&
                    tnviz < pHeight && tnviz > -1
                ) {
          index = tnvix * pWH + pHeight * tnviy + tnviz;

          if ((vpBits[ index ] & INOUT) && !(vpBits[ index ] & ISDONE)) {
            boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
            dx = tnvix - bp[ 0 ];
            dy = tnviy - bp[ 1 ];
            dz = tnviz - bp[ 2 ];
            square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );

            vpDistance[ index ] = square;
            vpBits[ index ] |= ISDONE;
            vpBits[ index ] |= ISBOUND;

            outarray[ positout ] = tnvix;
            outarray[ positout + 1 ] = tnviy;
            outarray[ positout + 2 ] = tnviz;
            positout += 3;
          } else if ((vpBits[ index ] & INOUT) && (vpBits[ index ] & ISDONE)) {
            dx = tnvix - bp[ 0 ];
            dy = tnviy - bp[ 1 ];
            dz = tnviz - bp[ 2 ];
            square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );

            if (square < vpDistance[ index ]) {
              boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
              vpDistance[ index ] = square;

              if (!(vpBits[ index ] & ISBOUND)) {
                vpBits[ index ] |= ISBOUND;

                outarray[ positout ] = tnvix;
                outarray[ positout + 1 ] = tnviy;
                outarray[ positout + 2 ] = tnviz;
                positout += 3;
              }
            }
          }
        }
      }
    }

    for (i = 0, n = positin; i < n; i += 3) {
      tx = inarray[ i ];
      ty = inarray[ i + 1 ];
      tz = inarray[ i + 2 ];
      boundPoint.toArray(tx, ty, tz, bp);

      for (j = 6; j < 18; j++) {
        nbj = nb[ j ];
        tnvix = tx + nbj[ 0 ];
        tnviy = ty + nbj[ 1 ];
        tnviz = tz + nbj[ 2 ];

        if (tnvix < pLength && tnvix > -1 &&
                    tnviy < pWidth && tnviy > -1 &&
                    tnviz < pHeight && tnviz > -1
                ) {
          index = tnvix * pWH + pHeight * tnviy + tnviz;

          if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
            boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
            dx = tnvix - bp[ 0 ];
            dy = tnviy - bp[ 1 ];
            dz = tnviz - bp[ 2 ];
            square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );

            vpDistance[index] = square;
            vpBits[index] |= ISDONE;
            vpBits[index] |= ISBOUND;

            outarray[ positout ] = tnvix;
            outarray[ positout + 1 ] = tnviy;
            outarray[ positout + 2 ] = tnviz;
            positout += 3;
          } else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
            dx = tnvix - bp[ 0 ];
            dy = tnviy - bp[ 1 ];
            dz = tnviz - bp[ 2 ];
            square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );

            if (square < vpDistance[index]) {
              boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
              vpDistance[index] = square;

              if (!(vpBits[index] & ISBOUND)) {
                vpBits[index] |= ISBOUND;

                outarray[ positout ] = tnvix;
                outarray[ positout + 1 ] = tnviy;
                outarray[ positout + 2 ] = tnviz;
                positout += 3;
              }
            }
          }
        }
      }
    }

    for (i = 0, n = positin; i < n; i += 3) {
      tx = inarray[ i ];
      ty = inarray[ i + 1 ];
      tz = inarray[ i + 2 ];
      boundPoint.toArray(tx, ty, tz, bp);

      for (j = 18; j < 26; j++) {
        nbj = nb[ j ];
        tnvix = tx + nbj[ 0 ];
        tnviy = ty + nbj[ 1 ];
        tnviz = tz + nbj[ 2 ];

        if (tnvix < pLength && tnvix > -1 &&
                    tnviy < pWidth && tnviy > -1 &&
                    tnviz < pHeight && tnviz > -1
                ) {
          index = tnvix * pWH + pHeight * tnviy + tnviz;

          if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {
            boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
            dx = tnvix - bp[ 0 ];
            dy = tnviy - bp[ 1 ];
            dz = tnviz - bp[ 2 ];
            square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );

            vpDistance[index] = square;
            vpBits[index] |= ISDONE;
            vpBits[index] |= ISBOUND;

            outarray[ positout ] = tnvix;
            outarray[ positout + 1 ] = tnviy;
            outarray[ positout + 2 ] = tnviz;
            positout += 3;
          } else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {
            dx = tnvix - bp[ 0 ];
            dy = tnviy - bp[ 1 ];
            dz = tnviz - bp[ 2 ];
            square = dx * dx + dy * dy + dz * dz;
                        // square = Math.sqrt( square );

            if (square < vpDistance[index]) {
              boundPoint.fromArray(tnvix, tnviy, tnviz, bp);
              vpDistance[index] = square;

              if (!(vpBits[index] & ISBOUND)) {
                vpBits[index] |= ISBOUND;

                outarray[ positout ] = tnvix;
                outarray[ positout + 1 ] = tnviy;
                outarray[ positout + 2 ] = tnviz;
                positout += 3;
              }
            }
          }
        }
      }
    }

    return positout
  }

  function marchingcubeinit (stype) {
    var i;
    var n = vpBits.length;

    if (stype === 'vws') {
      for (i = 0; i < n; ++i) {
        vpBits[ i ] &= ~ISBOUND;
        vpBits[ i ] = (vpBits[ i ] & ISDONE) ? 1 : 0;
      }
    } else if (stype === 'ms') {  // ses without vdw => ms
      for (i = 0; i < n; ++i) {
        vpBits[ i ] &= ~ISDONE;
        if (vpBits[ i ] & ISBOUND) {
          vpBits[ i ] |= ISDONE;
        }
        vpBits[ i ] &= ~ISBOUND;
        vpBits[ i ] = (vpBits[ i ] & ISDONE) ? 1 : 0;
      }
    } else if (stype === 'ses') {
      for (i = 0; i < n; ++i) {
        if ((vpBits[ i ] & ISBOUND) && (vpBits[ i ] & ISDONE)) {
          vpBits[ i ] &= ~ISBOUND;
        } else if ((vpBits[ i ] & ISBOUND) && !(vpBits[ i ] & ISDONE)) {
          vpBits[ i ] |= ISDONE;
        }
        vpBits[ i ] = (vpBits[ i ] & ISDONE) ? 1 : 0;
      }
    } else if (stype === 'sas') {
      for (i = 0; i < n; ++i) {
        vpBits[ i ] &= ~ISBOUND;
        vpBits[ i ] = (vpBits[ i ] & ISDONE) ? 1 : 0;
      }
    }
  }
}
EDTSurface.__deps = [
  getSurfaceGrid, getRadiusDict, VolumeSurface, computeBoundingBox, Grid
];

/**
 * @file AV Surface
 * @author Fred Ludlow <fred.ludlow@gmail.com>
 * @private
 */

/**
 * Modifed from SpatialHash
 *
 * Main differences are:
 * - Optimized grid size to ensure we only ever need to look +/-1 cell
 * - Aware of atomic radii and will only output atoms within rAtom + rExtra
 *   (see withinRadii method)
 *
 * (Uses rounding rather than bitshifting as consequence of arbitrary grid size)
 * @class
 * @param {Float32Array} atomsX - x coordinates
 * @param {Float32Array} atomsY - y coordinates
 * @param {Float32Array} atomsZ - z coordinates
 * @param {Float32Array} atomsR - atom radii
 * @param {Float32Array} min - xyz min coordinates
 * @param {Float32Array} max - xyz max coordinates
 * @param {Float} maxDistance - max distance
 */
function AVHash (atomsX, atomsY, atomsZ, atomsR, min, max, maxDistance) {
  var nAtoms = atomsX.length;

  var minX = min[ 0 ];
  var minY = min[ 1 ];
  var minZ = min[ 2 ];

  var maxX = max[ 0 ];
  var maxY = max[ 1 ];
  var maxZ = max[ 2 ];

  function hashFunc (w, minW) {
    return Math.floor((w - minW) / maxDistance)
  }

  var iDim = hashFunc(maxX, minX) + 1;
  var jDim = hashFunc(maxY, minY) + 1;
  var kDim = hashFunc(maxZ, minZ) + 1;

  var nCells = iDim * jDim * kDim;

  var jkDim = jDim * kDim;

  /* Get cellID for cartesian x,y,z */
  var cellID = function (x, y, z) {
    return (((hashFunc(x, minX) * jDim) + hashFunc(y, minY)) * kDim) + hashFunc(z, minZ)
  };

  /* Initial building, could probably be optimized further */
  var preHash = []; // preHash[ cellID ] = [ atomId1, atomId2 ];

  for (var i = 0; i < nAtoms; i++) {
    var cid = cellID(atomsX[ i ], atomsY[ i ], atomsZ[ i ]);

    if (preHash[ cid ] === undefined) {
      preHash[ cid ] = [ i ];
    } else {
      preHash[ cid ].push(i);
    }
  }

  var cellOffsets = new Uint32Array(nCells);
  var cellLengths = new Uint16Array(nCells);
  var data = new Uint32Array(nAtoms);

  var offset = 0;
  var maxCellLength = 0;

  for (i = 0; i < nCells; i++) {
    var start = cellOffsets[ i ] = offset;

    var subArray = preHash[ i ];

    if (subArray !== undefined) {
      for (var j = 0; j < subArray.length; j++) {
        data[ offset ] = subArray[ j ];
        offset++;
      }
    }

    var cellLength = offset - start;
    cellLengths[ i ] = cellLength;

    if (cellLength > maxCellLength) { maxCellLength = cellLength; }
  }

  // Maximum number of neighbours we could ever produce (27 adjacent cells of equal population)
  this.neighbourListLength = (27 * maxCellLength) + 1;

  /**
   * Populate the supplied out array with atom indices that are within rAtom + rExtra
   * of x,y,z
   *
   * -1 in out array indicates the end of the list
   *
   * @param  {Float} x - x coordinate
   * @param  {Float} y - y coordinate
   * @param  {Float} z - z coordinate
   * @param  {Float} rExtra - additional radius
   * @param  {Float32Array} out - pre-allocated output array
   * @return {undefined}
   */
  this.withinRadii = function (x, y, z, rExtra, out) {
    var outIdx = 0;

    var nearI = hashFunc(x, minX);
    var nearJ = hashFunc(y, minY);
    var nearK = hashFunc(z, minZ);

    var loI = Math.max(0, nearI - 1);
    var loJ = Math.max(0, nearJ - 1);
    var loK = Math.max(0, nearK - 1);

    var hiI = Math.min(iDim, nearI + 1);
    var hiJ = Math.min(jDim, nearJ + 1);
    var hiK = Math.min(kDim, nearK + 1);

    for (var i = loI; i <= hiI; ++i) {
      var iOffset = i * jkDim;

      for (var j = loJ; j <= hiJ; ++j) {
        var jOffset = j * kDim;

        for (var k = loK; k <= hiK; ++k) {
          var cid = iOffset + jOffset + k;

          var cellStart = cellOffsets[ cid ];
          var cellEnd = cellStart + cellLengths[ cid ];

          for (var dataIndex = cellStart; dataIndex < cellEnd; dataIndex++) {
            var atomIndex = data[ dataIndex ];
            var dx = atomsX[ atomIndex ] - x;
            var dy = atomsY[ atomIndex ] - y;
            var dz = atomsZ[ atomIndex ] - z;
            var rSum = atomsR[ atomIndex ] + rExtra;

            if ((dx * dx + dy * dy + dz * dz) <= (rSum * rSum)) {
              out[ outIdx++ ] = data[ dataIndex ];
            }
          }
        }
      }
    }
    // Add terminator
    out[ outIdx ] = -1;
  };
}

function AVSurface (coordList, radiusList, indexList) {
  // Field generation method adapted from AstexViewer (Mike Hartshorn)
  // by Fred Ludlow.
  // Other parts based heavily on NGL (Alexander Rose) EDT Surface class
  //
  // Should work as a drop-in alternative to EDTSurface (though some of
  // the EDT paramters are not relevant in this method).

  var nAtoms = radiusList.length;

  var x = new Float32Array(nAtoms);
  var y = new Float32Array(nAtoms);
  var z = new Float32Array(nAtoms);

  for (var i = 0; i < nAtoms; i++) {
    var ci = 3 * i;
    x[ i ] = coordList[ ci ];
    y[ i ] = coordList[ ci + 1 ];
    z[ i ] = coordList[ ci + 2 ];
  }

  var bbox = computeBoundingBox(coordList);
  if (coordList.length === 0) {
    bbox[ 0 ].set([ 0, 0, 0 ]);
    bbox[ 1 ].set([ 0, 0, 0 ]);
  }
  var min = bbox[0];
  var max = bbox[1];

  var r, r2;  // Atom positions, expanded radii (squared)
  var maxRadius;

  // Parameters
  var probeRadius, scaleFactor, setAtomID, probePositions;

  // Cache last value for obscured test
  var lastClip = -1;

  // Grid params
  var dim, matrix, grid, atomIndex;

  // grid indices -> xyz coords
  var gridx, gridy, gridz;

  // Lookup tables:
  var sinTable, cosTable;

  // Spatial Hash
  var hash;

  // Neighbour array to be filled by hash
  var neighbours;

  // Vectors for Torus Projection
  var mid = new Float32Array([ 0.0, 0.0, 0.0 ]);
  var n1 = new Float32Array([ 0.0, 0.0, 0.0 ]);
  var n2 = new Float32Array([ 0.0, 0.0, 0.0 ]);

  var ngTorus;

  function init (_probeRadius, _scaleFactor, _setAtomID, _probePositions) {
    probeRadius = defaults(_probeRadius, 1.4);
    scaleFactor = defaults(_scaleFactor, 2.0);
    setAtomID = defaults(_setAtomID, true);
    probePositions = defaults(_probePositions, 30);

    r = new Float32Array(nAtoms);
    r2 = new Float32Array(nAtoms);

    for (var i = 0; i < r.length; ++i) {
      var rExt = radiusList[ i ] + probeRadius;
      r[ i ] = rExt;
      r2[ i ] = rExt * rExt;
    }

    maxRadius = 0;
    for (var j = 0; j < r.length; ++j) {
      if (r[ j ] > maxRadius) { maxRadius = r[ j ]; }
    }

    initializeGrid();
    initializeAngleTables();
    initializeHash();

    lastClip = -1;
  }

  function fillGridDim (a, start, step) {
    for (var i = 0; i < a.length; i++) {
      a[i] = start + (step * i);
    }
  }

  function initializeGrid () {
    var surfGrid = getSurfaceGrid(
      min, max, maxRadius, scaleFactor, 0.0
    );

    scaleFactor = surfGrid.scaleFactor;
    dim = surfGrid.dim;
    matrix = surfGrid.matrix;

    ngTorus = Math.min(5, 2 + Math.floor(probeRadius * scaleFactor));

    grid = uniformArray(dim[0] * dim[1] * dim[2], -1001.0);

    atomIndex = new Int32Array(grid.length);

    gridx = new Float32Array(dim[0]);
    gridy = new Float32Array(dim[1]);
    gridz = new Float32Array(dim[2]);

    fillGridDim(gridx, min[0], 1 / scaleFactor);
    fillGridDim(gridy, min[1], 1 / scaleFactor);
    fillGridDim(gridz, min[2], 1 / scaleFactor);
  }

  function initializeAngleTables () {
    var theta = 0.0;
    var step = 2 * Math.PI / probePositions;

    cosTable = new Float32Array(probePositions);
    sinTable = new Float32Array(probePositions);
    for (var i = 0; i < probePositions; i++) {
      cosTable[ i ] = Math.cos(theta);
      sinTable[ i ] = Math.sin(theta);
      theta += step;
    }
  }

  function initializeHash () {
    hash = new AVHash(x, y, z, r, min, max, 2.01 * maxRadius);
    neighbours = new Int32Array(hash.neighbourListLength);
  }

  function obscured (x, y, z, a, b) {
    // Is the point at x,y,z obscured by any of the atoms
    // specifeid by indices in neighbours. Ignore indices
    // a and b (these are the relevant atoms in projectPoints/Torii)

    // Cache the last clipped atom (as very often the same one in
    // subsequent calls)
    var ai;

    if (lastClip !== -1) {
      ai = lastClip;
      if (ai !== a && ai !== b && singleAtomObscures(ai, x, y, z)) {
        return ai
      } else {
        lastClip = -1;
      }
    }

    var ni = 0;
    ai = neighbours[ ni ];
    while (ai >= 0) {
      if (ai !== a && ai !== b && singleAtomObscures(ai, x, y, z)) {
        lastClip = ai;
        return ai
      }
      ai = neighbours[ ++ni ];
    }

    lastClip = -1;

    return -1
  }

  function singleAtomObscures (ai, x, y, z) {
    var ci = 3 * ai;
    var ra2 = r2[ ai ];
    var dx = coordList[ ci ] - x;
    var dy = coordList[ ci + 1 ] - y;
    var dz = coordList[ ci + 2 ] - z;
    var d2 = dx * dx + dy * dy + dz * dz;

    return d2 < ra2
  }

  function projectPoints () {
    // For each atom:
    //     Iterate over a subsection of the grid, for each point:
    //         If current value < 0.0, unvisited, set positive
    //
    //         In any case: Project this point onto surface of the atomic sphere
    //         If this projected point is not obscured by any other atom
    //             Calcualte delta distance and set grid value to minimum of
    //             itself and delta

    // Should we alias frequently accessed closure variables??
    // Assume JS engine capable of optimizing this
    // anyway...

    for (var i = 0; i < nAtoms; i++) {
      var ax = x[ i ];
      var ay = y[ i ];
      var az = z[ i ];
      var ar = r[ i ];
      var ar2 = r2[ i ];

      hash.withinRadii(ax, ay, az, ar, neighbours);

      // Number of grid points, round this up...
      var ng = Math.ceil(ar * scaleFactor);

      // Center of the atom, mapped to grid points (take floor)
      var iax = Math.floor(scaleFactor * (ax - min[ 0 ]));
      var iay = Math.floor(scaleFactor * (ay - min[ 1 ]));
      var iaz = Math.floor(scaleFactor * (az - min[ 2 ]));

      // Extents of grid to consider for this atom
      var minx = Math.max(0, iax - ng);
      var miny = Math.max(0, iay - ng);
      var minz = Math.max(0, iaz - ng);

      // Add two to these points:
      // - iax are floor'd values so this ensures coverage
      // - these are loop limits (exclusive)
      var maxx = Math.min(dim[ 0 ], iax + ng + 2);
      var maxy = Math.min(dim[ 1 ], iay + ng + 2);
      var maxz = Math.min(dim[ 2 ], iaz + ng + 2);

      for (var ix = minx; ix < maxx; ix++) {
        var dx = gridx[ ix ] - ax;
        var xoffset = dim[ 1 ] * dim[ 2 ] * ix;

        for (var iy = miny; iy < maxy; iy++) {
          var dy = gridy[ iy ] - ay;
          var dxy2 = dx * dx + dy * dy;
          var xyoffset = xoffset + dim[ 2 ] * iy;

          for (var iz = minz; iz < maxz; iz++) {
            var dz = gridz[ iz ] - az;
            var d2 = dxy2 + dz * dz;

            if (d2 < ar2) {
              var idx = iz + xyoffset;

              if (grid[idx] < 0.0) {
                // Unvisited, make positive
                grid[ idx ] = -grid[ idx ];
              }
              // Project on to the surface of the sphere
              // sp is the projected point ( dx, dy, dz ) * ( ra / d )
              var d = Math.sqrt(d2);
              var ap = ar / d;
              var spx = dx * ap;
              var spy = dy * ap;
              var spz = dz * ap;

              spx += ax;
              spy += ay;
              spz += az;

              if (obscured(spx, spy, spz, i, -1) === -1) {
                var dd = ar - d;
                if (dd < grid[ idx ]) {
                  grid[ idx ] = dd;
                  if (setAtomID) { atomIndex[ idx ] = i; }
                }
              }
            }
          }
        }
      }
    }
  }

  function projectTorii () {
    for (var i = 0; i < nAtoms; i++) {
      hash.withinRadii(x[ i ], y[ i ], z[ i ], r[ i ], neighbours);
      var ia = 0;
      var ni = neighbours[ ia ];
      while (ni >= 0) {
        if (i < ni) {
          projectTorus(i, ni);
        }
        ni = neighbours[ ++ia ];
      }
    }
  }

  function projectTorus (a, b) {
    var r1 = r[ a ];
    var r2 = r[ b ];
    var dx = mid[0] = x[ b ] - x[ a ];
    var dy = mid[1] = y[ b ] - y[ a ];
    var dz = mid[2] = z[ b ] - z[ a ];
    var d2 = dx * dx + dy * dy + dz * dz;

    // This check now redundant as already done in AVHash.withinRadii
    // if( d2 > (( r1 + r2 ) * ( r1 + r2 )) ){ return; }

    var d = Math.sqrt(d2);

    // Find angle between a->b vector and the circle
    // of their intersection by cosine rule
    var cosA = (r1 * r1 + d * d - r2 * r2) / (2.0 * r1 * d);

    // distance along a->b at intersection
    var dmp = r1 * cosA;

    v3normalize(mid, mid);

    // Create normal to line
    normalToLine(n1, mid);
    v3normalize(n1, n1);

    // Cross together for second normal vector
    v3cross(n2, mid, n1);
    v3normalize(n2, n2);

    // r is radius of circle of intersection
    var rInt = Math.sqrt(r1 * r1 - dmp * dmp);

    v3multiplyScalar(n1, n1, rInt);
    v3multiplyScalar(n2, n2, rInt);
    v3multiplyScalar(mid, mid, dmp);

    mid[ 0 ] += x[ a ];
    mid[ 1 ] += y[ a ];
    mid[ 2 ] += z[ a ];

    lastClip = -1;

    var ng = ngTorus;

    for (var i = 0; i < probePositions; i++) {
      var cost = cosTable[ i ];
      var sint = sinTable[ i ];

      var px = mid[ 0 ] + cost * n1[ 0 ] + sint * n2[ 0 ];
      var py = mid[ 1 ] + cost * n1[ 1 ] + sint * n2[ 1 ];
      var pz = mid[ 2 ] + cost * n1[ 2 ] + sint * n2[ 2 ];

      if (obscured(px, py, pz, a, b) === -1) {
        // As above, iterate over our grid...
        // px, py, pz in grid coords
        var iax = Math.floor(scaleFactor * (px - min[ 0 ]));
        var iay = Math.floor(scaleFactor * (py - min[ 1 ]));
        var iaz = Math.floor(scaleFactor * (pz - min[ 2 ]));

        var minx = Math.max(0, iax - ng);
        var miny = Math.max(0, iay - ng);
        var minz = Math.max(0, iaz - ng);

        var maxx = Math.min(dim[ 0 ], iax + ng + 2);
        var maxy = Math.min(dim[ 1 ], iay + ng + 2);
        var maxz = Math.min(dim[ 2 ], iaz + ng + 2);

        for (var ix = minx; ix < maxx; ix++) {
          dx = px - gridx[ ix ];
          var xoffset = dim[ 1 ] * dim[ 2 ] * ix;

          for (var iy = miny; iy < maxy; iy++) {
            dy = py - gridy[ iy ];
            var dxy2 = dx * dx + dy * dy;
            var xyoffset = xoffset + dim[ 2 ] * iy;

            for (var iz = minz; iz < maxz; iz++) {
              dz = pz - gridz[ iz ];
              d2 = dxy2 + dz * dz;
              var idx = iz + xyoffset;
              var current = grid[ idx ];

              if (current > 0.0 && d2 < (current * current)) {
                grid[ idx ] = Math.sqrt(d2);
                if (setAtomID) { atomIndex[ idx ] = a; }
              }
            }
          }
        }
      }
    }
  }

  function normalToLine (out, p) {
    out[ 0 ] = out[ 1 ] = out[ 2 ] = 1.0;
    if (p[ 0 ] !== 0) {
      out[ 0 ] = (p[ 1 ] + p[ 2 ]) / -p[ 0 ];
    } else if (p[ 1 ] !== 0) {
      out[ 1 ] = (p[ 0 ] + p[ 2 ]) / -p[ 1 ];
    } else if (p[ 2 ] !== 0) {
      out[ 2 ] = (p[ 0 ] + p[ 1 ]) / -p[ 2 ];
    }
    return out
  }

  function fixNegatives () {
    for (var i = 0; i < grid.length; i++) {
      if (grid[ i ] < 0) { grid[ i ] = 0; }
    }
  }

  function fixAtomIDs () {
    for (var i = 0; i < atomIndex.length; i++) {
      atomIndex[ i ] = indexList[ atomIndex[ i ] ];
    }
  }

  function getVolume (probeRadius, scaleFactor, setAtomID) {
        // Basic steps are:
        // 1) Initialize
        // 2) Project points
        // 3) Project torii

    console.time('AVSurface.getVolume');

    console.time('AVSurface.init');
    init(probeRadius, scaleFactor, setAtomID);
    console.timeEnd('AVSurface.init');

    console.time('AVSurface.projectPoints');
    projectPoints();
    console.timeEnd('AVSurface.projectPoints');

    console.time('AVSurface.projectTorii');
    projectTorii();
    console.timeEnd('AVSurface.projectTorii');
    fixNegatives();
    fixAtomIDs();

    console.timeEnd('AVSurface.getVolume');
  }

  this.getSurface = function (type, probeRadius, scaleFactor, cutoff, setAtomID, smooth, contour) {
        // type and cutoff left in for compatibility with EDTSurface.getSurface
        // function signature

    getVolume(probeRadius, scaleFactor, setAtomID);

    var volsurf = new VolumeSurface(
            grid, dim[ 2 ], dim[ 1 ], dim[ 0 ], atomIndex
        );

    return volsurf.getSurface(probeRadius, false, undefined, matrix, contour)
  };
}
AVSurface.__deps = [
  getSurfaceGrid, VolumeSurface, uniformArray, computeBoundingBox,
  v3multiplyScalar, v3cross, v3normalize,
  AVHash,
  defaults
];

/**
 * @file Molecular Surface
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

WorkerRegistry.add('molsurf', function func (e, callback) {
  var a = e.data.args;
  var p = e.data.params;
  if (a && p) {
    var SurfClass = (p.type === 'av') ? AVSurface : EDTSurface;
    var surf = new SurfClass(a.coordList, a.radiusList, a.indexList);
    var sd = surf.getSurface(
            p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth, p.contour
        );
    var transferList = [ sd.position.buffer, sd.index.buffer ];
    if (sd.normal) { transferList.push(sd.normal.buffer); }
    if (sd.atomindex) { transferList.push(sd.atomindex.buffer); }
    var data = {
      sd: sd,
      p: p
    };
    callback(data, transferList);
  }
}, [ EDTSurface, AVSurface ]);

/**
 * Molecular surface parameter object.
 * @typedef {Object} MolecularSurfaceParameters - stage parameters
 * @property {String} type - "av" or "edt"
 * @property {Number} probeRadius - probe radius
 * @property {Number} scaleFactor - higher for better quality
 * @property {Integer} smooth - number of smoothing cycles to apply
 * @property {String} name - name for created surface
 */

/**
 * Create Molecular surfaces
 */
var MolecularSurface = function MolecularSurface (structure) {
  this.structure = structure;
};

MolecularSurface.prototype._getAtomData = function _getAtomData () {
  return this.structure.getAtomData({
    what: { position: true, radius: true, index: true },
    radiusParams: { radius: 'vdw', scale: 1 }
  })
};

MolecularSurface.prototype._makeSurface = function _makeSurface (sd, p) {
  var surface = new Surface(p.name, '', sd);

  surface.info.type = p.type;
  surface.info.probeRadius = p.probeRadius;
  surface.info.scaleFactor = p.scaleFactor;
  surface.info.smooth = p.smooth;
  surface.info.cutoff = p.cutoff;

  return surface
};

  /**
   * Get molecular surface
   * @param {MolecularSurfaceParameters} params - parameters for surface creation
   * @return {Surface} the surface
   */
MolecularSurface.prototype.getSurface = function getSurface (params) {
  var p = params || {};

  var atomData = this._getAtomData();
  var coordList = atomData.position;
  var radiusList = atomData.radius;
  var indexList = atomData.index;

  var SurfClass = (p.type === 'av') ? AVSurface : EDTSurface;
  var surf = new SurfClass(coordList, radiusList, indexList);
  var sd = surf.getSurface(
          p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth, p.contour
      );

  return this._makeSurface(sd, p)
};

  /**
   * Get molecular surface asynchronous
   * @param {MolecularSurfaceParameters} params - parameters for surface creation
   * @param {function(surface: Surface)} callback - function to be called after surface is created
   * @return {undefined}
   */
MolecularSurface.prototype.getSurfaceWorker = function getSurfaceWorker (params, callback) {
    var this$1 = this;

  var p = Object.assign({}, params);

  if (window.Worker) {
    if (this.worker === undefined) {
      this.worker = new Worker('molsurf');
    }

    var atomData = this._getAtomData();
    var coordList = atomData.position;
    var radiusList = atomData.radius;
    var indexList = atomData.index;

    var msg = {
      args: {
        coordList: coordList,
        radiusList: radiusList,
        indexList: indexList
      },
      params: p
    };

    var transferList = [
      coordList.buffer, radiusList.buffer, indexList.buffer
    ];

    this.worker.post(msg, transferList,

              function (e) {
                callback(this$1._makeSurface(e.data.sd, p));
              },

              function (e) {
                console.warn(
                      'MolecularSurface.getSurfaceWorker error - trying without worker', e
                  );
                this$1.worker.terminate();
                this$1.worker = undefined;
                var surface = this$1.getSurface(p);
                callback(surface);
              }

          );
  } else {
    var surface = this.getSurface(p);
    callback(surface);
  }
};

  /**
   * Cleanup
   * @return {undefined}
   */
MolecularSurface.prototype.dispose = function dispose () {
  if (this.worker) { this.worker.terminate(); }
};

/**
 * @file Molecular Surface Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Molecular Surface Representation
 */
var MolecularSurfaceRepresentation = (function (StructureRepresentation$$1) {
  function MolecularSurfaceRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'surface';

    this.parameters = Object.assign({

      surfaceType: {
        type: 'select',
        rebuild: true,
        options: {
          'vws': 'vws',
          'sas': 'sas',
          'ms': 'ms',
          'ses': 'ses',
          'av': 'av'
        }
      },
      probeRadius: {
        type: 'number',
        precision: 1,
        max: 20,
        min: 0,
        rebuild: true
      },
      smooth: {
        type: 'integer',
        precision: 1,
        max: 10,
        min: 0,
        rebuild: true
      },
      scaleFactor: {
        type: 'number',
        precision: 1,
        max: 5,
        min: 0,
        rebuild: true
      },
      cutoff: {
        type: 'number',
        precision: 2,
        max: 50,
        min: 0,
        rebuild: true
      },
      contour: {
        type: 'boolean', rebuild: true
      },
      background: {
        type: 'boolean', rebuild: true  // FIXME
      },
      opaqueBack: {
        type: 'boolean', buffer: true
      },
      filterSele: {
        type: 'text', rebuild: true
      },
      colorVolume: {
        type: 'hidden'
      },
      useWorker: {
        type: 'boolean', rebuild: true
      }

    }, this.parameters, {

      radiusType: null,
      radius: null,
      scale: null

    });

    this.__infoList = [];

        // TODO find a more direct way
    this.structure.signals.refreshed.add(function () {
      this.__forceNewMolsurf = true;
    }, this);

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) MolecularSurfaceRepresentation.__proto__ = StructureRepresentation$$1;
  MolecularSurfaceRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  MolecularSurfaceRepresentation.prototype.constructor = MolecularSurfaceRepresentation;

  MolecularSurfaceRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'uniform');
    p.colorValue = defaults(p.colorValue, 0xDDDDDD);
    p.disablePicking = defaults(p.disablePicking, true);

    this.surfaceType = defaults(p.surfaceType, 'ms');
    this.probeRadius = defaults(p.probeRadius, 1.4);
    this.smooth = defaults(p.smooth, 2);
    this.scaleFactor = defaults(p.scaleFactor, 2.0);
    this.cutoff = defaults(p.cutoff, 0.0);
    this.contour = defaults(p.contour, false);
    this.background = defaults(p.background, false);
    this.opaqueBack = defaults(p.opaqueBack, true);
    this.filterSele = defaults(p.filterSele, '');
    this.colorVolume = defaults(p.colorVolume, undefined);
    this.useWorker = defaults(p.useWorker, true);

    StructureRepresentation$$1.prototype.init.call(this, params);
  };

  MolecularSurfaceRepresentation.prototype.prepareData = function prepareData (sview, i, callback) {
    var info = this.__infoList[ i ];
    if (!info) {
      info = {};
      this.__infoList[ i ] = info;
    }

    if (!info.molsurf || info.sele !== sview.selection.string) {
      if (this.filterSele) {
        var sviewFilter = sview.structure.getView(new Selection(this.filterSele));
        var bbSize = sviewFilter.boundingBox.getSize();
        var maxDim = Math.max(bbSize.x, bbSize.y, bbSize.z);
        var asWithin = sview.getAtomSetWithinPoint(sviewFilter.center, (maxDim / 2) + 6.0);
        sview = sview.getView(
                    new Selection(sview.getAtomSetWithinSelection(asWithin, 3).toSeleString())
                );
      }

      info.sele = sview.selection.string;
      info.molsurf = new MolecularSurface(sview);

      var p = this.getSurfaceParams();
      var onSurfaceFinish = function (surface) {
        info.surface = surface;
        callback(i);
      };

      if (this.useWorker) {
        info.molsurf.getSurfaceWorker(p, onSurfaceFinish);
      } else {
        onSurfaceFinish(info.molsurf.getSurface(p));
      }
    } else {
      callback(i);
    }
  };

  MolecularSurfaceRepresentation.prototype.prepare = function prepare (callback) {
    var this$1 = this;

    if (this.__forceNewMolsurf || this.__sele !== this.selection.string ||
                this.__surfaceParams !== JSON.stringify(this.getSurfaceParams())) {
      this.__infoList.forEach(function (info) {
        info.molsurf.dispose();
      });
      this.__infoList.length = 0;
    }

    if (this.structureView.atomCount === 0) {
      callback();
      return
    }

    var after = function () {
      this.__sele = this.selection.string;
      this.__surfaceParams = JSON.stringify(this.getSurfaceParams());
      this.__forceNewMolsurf = false;
      callback();
    }.bind(this);

    var name = this.assembly === 'default' ? this.defaultAssembly : this.assembly;
    var assembly = this.structure.biomolDict[ name ];

    if (assembly) {
      assembly.partList.forEach(function (part, i) {
        var sview = part.getView(this$1.structureView);
        this$1.prepareData(sview, i, function (_i) {
          if (_i === assembly.partList.length - 1) { after(); }
        });
      });
    } else {
      this.prepareData(this.structureView, 0, after);
    }
  };

  MolecularSurfaceRepresentation.prototype.createData = function createData (sview, i) {
    var info = this.__infoList[ i ];
    var surface = info.surface;

    var surfaceData = {
      position: surface.getPosition(),
      color: surface.getColor(this.getColorParams()),
      index: surface.getFilteredIndex(this.filterSele, sview)
    };

    var bufferList = [];

    if (surface.contour) {
      var contourBuffer = new ContourBuffer(
                surfaceData,
                this.getBufferParams({
                  wireframe: false
                })
            );

      bufferList.push(contourBuffer);
    } else {
      surfaceData.normal = surface.getNormal();
      surfaceData.picking = surface.getPicking(sview.getStructure());

      var surfaceBuffer = new SurfaceBuffer(
                surfaceData,
                this.getBufferParams({
                  background: this.background,
                  opaqueBack: this.opaqueBack,
                  dullInterior: false
                })
            );

      var doubleSidedBuffer = new DoubleSidedBuffer(surfaceBuffer);

      bufferList.push(doubleSidedBuffer);
    }

    return { bufferList: bufferList, info: info }
  };

  MolecularSurfaceRepresentation.prototype.updateData = function updateData (what, data) {
    var surfaceData = {};

    if (what.position) {
      this.__forceNewMolsurf = true;
      this.build();
      return
    }

    if (what.color) {
      surfaceData.color = data.info.surface.getColor(this.getColorParams());
    }

    if (what.index) {
      surfaceData.index = data.info.surface.getFilteredIndex(this.filterSele, data.sview);
    }

    data.bufferList[ 0 ].setAttributes(surfaceData);
  };

  MolecularSurfaceRepresentation.prototype.setParameters = function setParameters (params, what, rebuild) {
    what = what || {};

    if (params && params.filterSele) {
      what.index = true;
    }

    if (params && params.colorVolume !== undefined) {
      what.color = true;
    }

        // forbid setting wireframe to true when contour is true
    if (params && params.wireframe && (
                params.contour || (params.contour === undefined && this.contour)
            )
        ) {
      params.wireframe = false;
    }

    StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);

    return this
  };

  MolecularSurfaceRepresentation.prototype.getSurfaceParams = function getSurfaceParams (params) {
    var p = Object.assign({
      type: this.surfaceType,
      probeRadius: this.probeRadius,
      scaleFactor: this.scaleFactor,
      smooth: this.smooth && !this.contour,
      cutoff: this.cutoff,
      contour: this.contour,
      useWorker: this.useWorker
    }, params);

    return p
  };

  MolecularSurfaceRepresentation.prototype.getColorParams = function getColorParams () {
    var p = StructureRepresentation$$1.prototype.getColorParams.call(this);

    p.volume = this.colorVolume;

    return p
  };

  MolecularSurfaceRepresentation.prototype.clear = function clear () {
    StructureRepresentation$$1.prototype.clear.call(this);
  };

  MolecularSurfaceRepresentation.prototype.dispose = function dispose () {
    this.__infoList.forEach(function (info) {
      info.molsurf.dispose();
    });
    this.__infoList.length = 0;

    StructureRepresentation$$1.prototype.dispose.call(this);
  };

  return MolecularSurfaceRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('surface', MolecularSurfaceRepresentation);

/**
 * @file Point Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Point Representation
 */
var PointRepresentation = (function (StructureRepresentation$$1) {
  function PointRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'point';

    this.parameters = Object.assign({

      pointSize: {
        type: 'number', precision: 1, max: 100, min: 0, buffer: true
      },
      sizeAttenuation: {
        type: 'boolean', buffer: true
      },
      sortParticles: {
        type: 'boolean', rebuild: true
      },
      useTexture: {
        type: 'boolean', buffer: true
      },
      alphaTest: {
        type: 'range', step: 0.001, max: 1, min: 0, buffer: true
      },
      forceTransparent: {
        type: 'boolean', buffer: true
      },
      edgeBleach: {
        type: 'range', step: 0.001, max: 1, min: 0, buffer: true
      }

    }, this.parameters, {

      flatShaded: null,
      wireframe: null,
      linewidth: null,

      roughness: null,
      metalness: null

    });

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) PointRepresentation.__proto__ = StructureRepresentation$$1;
  PointRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  PointRepresentation.prototype.constructor = PointRepresentation;

  PointRepresentation.prototype.init = function init (params) {
    var p = params || {};

    this.pointSize = defaults(p.pointSize, 1);
    this.sizeAttenuation = defaults(p.sizeAttenuation, true);
    this.sortParticles = defaults(p.sortParticles, false);
    this.useTexture = defaults(p.useTexture, false);
    this.alphaTest = defaults(p.alphaTest, 0.5);
    this.forceTransparent = defaults(p.forceTransparent, false);
    this.edgeBleach = defaults(p.edgeBleach, 0.0);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  PointRepresentation.prototype.createData = function createData (sview) {
    var what = { position: true, color: true, picking: true };
    var atomData = sview.getAtomData(this.getAtomParams(what));

    var pointBuffer = new PointBuffer(
            atomData,
            this.getBufferParams({
              pointSize: this.pointSize,
              sizeAttenuation: this.sizeAttenuation,
              sortParticles: this.sortParticles,
              useTexture: this.useTexture,
              alphaTest: this.alphaTest,
              forceTransparent: this.forceTransparent,
              edgeBleach: this.edgeBleach
            })
        );

    return {
      bufferList: [ pointBuffer ]
    }
  };

  PointRepresentation.prototype.updateData = function updateData (what, data) {
    var atomData = data.sview.getAtomData(this.getAtomParams(what));
    var pointData = {};

    if (!what || what.position) {
      pointData.position = atomData.position;
    }

    if (!what || what.color) {
      pointData.color = atomData.color;
    }

    data.bufferList[ 0 ].setAttributes(pointData);
  };

  return PointRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('point', PointRepresentation);

ShaderRegistry.add('shader/Ribbon.vert', "#define STANDARD\nuniform float nearClip;\nuniform vec3 clipCenter;\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvarying vec3 vViewPosition;\n#endif\n#if defined( RADIUS_CLIP )\nvarying vec3 vClipCenter;\n#endif\nattribute vec3 dir;\nattribute float size;\n#ifdef PICKING\n#include unpack_color\nattribute float primitiveId;\nvarying vec3 vPickingColor;\n#else\n#include color_pars_vertex\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#endif\n#include common\nvoid main(void){\n#ifdef PICKING\nvPickingColor = unpackColor( primitiveId );\n#else\n#include color_vertex\n#include beginnormal_vertex\n#include defaultnormal_vertex\n#ifndef FLAT_SHADED\nvNormal = normalize( transformedNormal );\n#endif\n#endif\n#include begin_vertex\ntransformed += normalize( dir ) * size;\n#include project_vertex\n#if defined( NEAR_CLIP ) || defined( RADIUS_CLIP ) || !defined( PICKING )\nvViewPosition = -mvPosition.xyz;\n#endif\n#if defined( RADIUS_CLIP )\nvClipCenter = -( modelViewMatrix * vec4( clipCenter, 1.0 ) ).xyz;\n#endif\n#include nearclip_vertex\n}");

/**
 * @file Ribbon Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var quadIndices$1 = new Uint16Array([
  0, 1, 2,
  1, 3, 2
]);

/**
 * Ribbon buffer. Draws a thin ribbon.
 */
var RibbonBuffer = (function (MeshBuffer$$1) {
  function RibbonBuffer (data, params) {
    var d = data || {};

    var n = (d.position.length / 3) - 1;
    var n4 = n * 4;
    var x = n4 * 3;

    var meshPosition = new Float32Array(x);
    var meshColor = new Float32Array(x);
    var meshNormal = new Float32Array(x);
    var meshIndex = getUintArray(x, x / 3);

    MeshBuffer$$1.call(this, {
      position: meshPosition,
      color: meshColor,
      index: meshIndex,
      normal: meshNormal,
      picking: d.picking
    }, params);

    this.addAttributes({
      'dir': { type: 'v3', value: new Float32Array(x) }
    });
    this.addAttributes({
      'size': { type: 'f', value: new Float32Array(n4) }
    });

    d.primitiveId = serialArray(n);
    this.setAttributes(d);

    this.meshIndex = meshIndex;
    this.makeIndex();
  }

  if ( MeshBuffer$$1 ) RibbonBuffer.__proto__ = MeshBuffer$$1;
  RibbonBuffer.prototype = Object.create( MeshBuffer$$1 && MeshBuffer$$1.prototype );
  RibbonBuffer.prototype.constructor = RibbonBuffer;

  var prototypeAccessors = { vertexShader: {} };

  RibbonBuffer.prototype.setAttributes = function setAttributes (data) {
    var n4 = this.size;
    var n = n4 / 4;

    var attributes = this.geometry.attributes;

    var position, normal, size, dir, color, primitiveId;
    var aPosition, aNormal, aSize, aDir, aColor, aPrimitiveId;

    if (data.position) {
      position = data.position;
      aPosition = attributes.position.array;
      attributes.position.needsUpdate = true;
    }

    if (data.normal) {
      normal = data.normal;
      aNormal = attributes.normal.array;
      attributes.normal.needsUpdate = true;
    }

    if (data.size) {
      size = data.size;
      aSize = attributes.size.array;
      attributes.size.needsUpdate = true;
    }

    if (data.dir) {
      dir = data.dir;
      aDir = attributes.dir.array;
      attributes.dir.needsUpdate = true;
    }

    if (data.color) {
      color = data.color;
      aColor = attributes.color.array;
      attributes.color.needsUpdate = true;
    }

    if (data.primitiveId) {
      primitiveId = data.primitiveId;
      aPrimitiveId = attributes.primitiveId.array;
      attributes.primitiveId.needsUpdate = true;
    }

    var v, i, k, p, l, v3;
    var currSize;
    var prevSize = size ? size[ 0 ] : null;

    for (v = 0; v < n; ++v) {
      v3 = v * 3;
      k = v * 3 * 4;
      l = v * 4;

      if (position) {
        aPosition[ k ] = aPosition[ k + 3 ] = position[ v3 ];
        aPosition[ k + 1 ] = aPosition[ k + 4 ] = position[ v3 + 1 ];
        aPosition[ k + 2 ] = aPosition[ k + 5 ] = position[ v3 + 2 ];

        aPosition[ k + 6 ] = aPosition[ k + 9 ] = position[ v3 + 3 ];
        aPosition[ k + 7 ] = aPosition[ k + 10 ] = position[ v3 + 4 ];
        aPosition[ k + 8 ] = aPosition[ k + 11 ] = position[ v3 + 5 ];
      }

      if (normal) {
        aNormal[ k ] = aNormal[ k + 3 ] = -normal[ v3 ];
        aNormal[ k + 1 ] = aNormal[ k + 4 ] = -normal[ v3 + 1 ];
        aNormal[ k + 2 ] = aNormal[ k + 5 ] = -normal[ v3 + 2 ];

        aNormal[ k + 6 ] = aNormal[ k + 9 ] = -normal[ v3 + 3 ];
        aNormal[ k + 7 ] = aNormal[ k + 10 ] = -normal[ v3 + 4 ];
        aNormal[ k + 8 ] = aNormal[ k + 11 ] = -normal[ v3 + 5 ];
      }

      for (i = 0; i < 4; ++i) {
        p = k + 3 * i;

        if (color) {
          aColor[ p ] = color[ v3 ];
          aColor[ p + 1 ] = color[ v3 + 1 ];
          aColor[ p + 2 ] = color[ v3 + 2 ];
        }

        if (primitiveId) {
          aPrimitiveId[ l + i ] = primitiveId[ v ];
        }
      }

      if (size) {
        currSize = size[ v ];

        if (prevSize !== size[ v ]) {
          aSize[ l ] = prevSize;
          aSize[ l + 1 ] = prevSize;
          aSize[ l + 2 ] = currSize;
          aSize[ l + 3 ] = currSize;
        } else {
          aSize[ l ] = currSize;
          aSize[ l + 1 ] = currSize;
          aSize[ l + 2 ] = currSize;
          aSize[ l + 3 ] = currSize;
        }

        prevSize = currSize;
      }

      if (dir) {
        aDir[ k ] = dir[ v3 ];
        aDir[ k + 1 ] = dir[ v3 + 1 ];
        aDir[ k + 2 ] = dir[ v3 + 2 ];

        aDir[ k + 3 ] = -dir[ v3 ];
        aDir[ k + 4 ] = -dir[ v3 + 1 ];
        aDir[ k + 5 ] = -dir[ v3 + 2 ];

        aDir[ k + 6 ] = dir[ v3 + 3 ];
        aDir[ k + 7 ] = dir[ v3 + 4 ];
        aDir[ k + 8 ] = dir[ v3 + 5 ];

        aDir[ k + 9 ] = -dir[ v3 + 3 ];
        aDir[ k + 10 ] = -dir[ v3 + 4 ];
        aDir[ k + 11 ] = -dir[ v3 + 5 ];
      }
    }
  };

  RibbonBuffer.prototype.makeIndex = function makeIndex () {
    var meshIndex = this.meshIndex;
    var n = meshIndex.length / 4 / 3;

    var s, v, ix, it;

    for (v = 0; v < n; ++v) {
      ix = v * 6;
      it = v * 4;

      meshIndex.set(quadIndices$1, ix);
      for (s = 0; s < 6; ++s) {
        meshIndex[ ix + s ] += it;
      }
    }
  };

  prototypeAccessors.vertexShader.get = function () { return 'Ribbon.vert' };

  Object.defineProperties( RibbonBuffer.prototype, prototypeAccessors );

  return RibbonBuffer;
}(MeshBuffer));

/**
 * @file Ribbon Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Ribbon Representation
 */
var RibbonRepresentation = (function (StructureRepresentation$$1) {
  function RibbonRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'ribbon';

    this.parameters = Object.assign({

      subdiv: {
        type: 'integer', max: 50, min: 1, rebuild: true
      },
      tension: {
        type: 'number', precision: 1, max: 1.0, min: 0.1
      },
      smoothSheet: {
        type: 'boolean', rebuild: true
      }

    }, this.parameters, {

      side: null,
      wireframe: null,
      linewidth: null

    });

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) RibbonRepresentation.__proto__ = StructureRepresentation$$1;
  RibbonRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  RibbonRepresentation.prototype.constructor = RibbonRepresentation;

  RibbonRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'chainname');
    p.colorScale = defaults(p.colorScale, 'RdYlBu');
    p.radius = defaults(p.radius, 'sstruc');
    p.scale = defaults(p.scale, 4.0);

    if (p.quality === 'low') {
      this.subdiv = 3;
    } else if (p.quality === 'medium') {
      this.subdiv = 6;
    } else if (p.quality === 'high') {
      this.subdiv = 12;
    } else {
      this.subdiv = defaults(p.subdiv, 6);
    }

    this.tension = defaults(p.tension, NaN);
    this.smoothSheet = defaults(p.smoothSheet, false);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  RibbonRepresentation.prototype.getSplineParams = function getSplineParams (params) {
    return Object.assign({
      subdiv: this.subdiv,
      tension: this.tension,
      directional: true,
      smoothSheet: this.smoothSheet
    }, params)
  };

  RibbonRepresentation.prototype.createData = function createData (sview) {
    var this$1 = this;

    var bufferList = [];
    var polymerList = [];

    this.structure.eachPolymer(function (polymer) {
      if (polymer.residueCount < 4) { return }
      polymerList.push(polymer);

      var spline = new Spline$1(polymer, this$1.getSplineParams());
      var subPos = spline.getSubdividedPosition();
      var subOri = spline.getSubdividedOrientation();
      var subCol = spline.getSubdividedColor(this$1.getColorParams());
      var subPick = spline.getSubdividedPicking();
      var subSize = spline.getSubdividedSize(this$1.radius, this$1.scale);

      bufferList.push(
                new RibbonBuffer(
                  {
                    position: subPos.position,
                    normal: subOri.binormal,
                    dir: subOri.normal,
                    color: subCol.color,
                    size: subSize.size,
                    picking: subPick.picking
                  },
                    this$1.getBufferParams()
                )
            );
    }, sview.getSelection());

    return {
      bufferList: bufferList,
      polymerList: polymerList
    }
  };

  RibbonRepresentation.prototype.updateData = function updateData (what, data) {
    var this$1 = this;

    what = what || {};

    var i = 0;
    var n = data.polymerList.length;

    for (i = 0; i < n; ++i) {
      var bufferData = {};
      var spline = new Spline$1(data.polymerList[ i ], this$1.getSplineParams());

      if (what.position) {
        var subPos = spline.getSubdividedPosition();
        var subOri = spline.getSubdividedOrientation();
        bufferData.position = subPos.position;
        bufferData.normal = subOri.binormal;
        bufferData.dir = subOri.normal;
      }

      if (what.radius || what.scale) {
        var subSize = spline.getSubdividedSize(this$1.radius, this$1.scale);
        bufferData.size = subSize.size;
      }

      if (what.color) {
        var subCol = spline.getSubdividedColor(this$1.getColorParams());
        bufferData.color = subCol.color;
      }

      data.bufferList[ i ].setAttributes(bufferData);
    }
  };

  RibbonRepresentation.prototype.setParameters = function setParameters (params) {
    var rebuild = false;
    var what = {};

    if (params && params.tension) {
      what.position = true;
    }

    StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);

    return this
  };

  return RibbonRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('ribbon', RibbonRepresentation);

/**
 * @file Rocket Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Rocket Representation
 */
var RocketRepresentation = (function (StructureRepresentation$$1) {
  function RocketRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'rocket';

    this.parameters = Object.assign({

      localAngle: {
        type: 'integer', max: 180, min: 0, rebuild: true
      },
      centerDist: {
        type: 'number', precision: 1, max: 10, min: 0, rebuild: true
      },
      ssBorder: {
        type: 'boolean', rebuild: true
      },
      radialSegments: true,
      openEnded: true,
      disableImpostor: true

    }, this.parameters);

    this.helixbundleList = [];

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) RocketRepresentation.__proto__ = StructureRepresentation$$1;
  RocketRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  RocketRepresentation.prototype.constructor = RocketRepresentation;

  RocketRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'sstruc');
    p.radius = defaults(p.radius, 1.5);
    p.scale = defaults(p.scale, 1.0);
    p.openEnded = defaults(p.openEnded, false);

    this.localAngle = defaults(p.localAngle, 30);
    this.centerDist = defaults(p.centerDist, 2.5);
    this.ssBorder = defaults(p.ssBorder, false);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  RocketRepresentation.prototype.createData = function createData (sview) {
    var this$1 = this;

    var length = 0;
    var axisList = [];
    var helixbundleList = [];

    this.structure.eachPolymer(function (polymer) {
      if (polymer.residueCount < 4 || polymer.isNucleic()) { return }

      var helixbundle = new Helixbundle(polymer);
      var axis = helixbundle.getAxis(
                this$1.localAngle, this$1.centerDist, this$1.ssBorder,
                this$1.getColorParams(), this$1.radius, this$1.scale
            );

      length += axis.size.length;
      axisList.push(axis);
      helixbundleList.push(helixbundle);
    }, sview.getSelection());

    var axisData = {
      begin: new Float32Array(length * 3),
      end: new Float32Array(length * 3),
      size: new Float32Array(length),
      color: new Float32Array(length * 3),
      picking: new Float32Array(length)
    };

    var offset = 0;

    axisList.forEach(function (axis) {
      axisData.begin.set(axis.begin, offset * 3);
      axisData.end.set(axis.end, offset * 3);
      axisData.size.set(axis.size, offset);
      axisData.color.set(axis.color, offset * 3);
      axisData.picking.set(axis.picking.array, offset);
      offset += axis.size.length;
    });

    if (length) {
      axisData.picking = new AtomPicker(
                axisData.picking, sview.getStructure()
            );
    }

    var cylinderBuffer = new CylinderBuffer(
      {
        position1: axisData.begin,
        position2: axisData.end,
        color: axisData.color,
        color2: axisData.color,
        radius: axisData.size,
        picking: axisData.picking
      },
            this.getBufferParams({
              openEnded: this.openEnded,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
            })
        );

    return {
      bufferList: [ cylinderBuffer ],
      axisList: axisList,
      helixbundleList: helixbundleList,
      axisData: axisData
    }
  };

  RocketRepresentation.prototype.updateData = function updateData (what, data) {
    var this$1 = this;

    what = what || {};

    if (what.position) {
      this.build();
      return
    }

    var cylinderData = {};

    if (what.color || what.radius) {
      var offset = 0;

      data.helixbundleList.forEach(function (helixbundle) {
        var axis = helixbundle.getAxis(
                    this$1.localAngle, this$1.centerDist, this$1.ssBorder,
                    this$1.getColorParams(), this$1.radius, this$1.scale
                );
        if (what.color) {
          data.axisData.color.set(axis.color, offset * 3);
        }
        if (what.radius || what.scale) {
          data.axisData.size.set(axis.size, offset);
        }
        offset += axis.size.length;
      });

      if (what.color) {
        cylinderData.color = data.axisData.color;
        cylinderData.color2 = data.axisData.color;
      }

      if (what.radius || what.scale) {
        cylinderData.radius = data.axisData.size;
      }
    }

    data.bufferList[ 0 ].setAttributes(cylinderData);
  };

  return RocketRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('rocket', RocketRepresentation);

/**
 * @file Rope Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Rope Representation
 */
var RopeRepresentation = (function (CartoonRepresentation$$1) {
  function RopeRepresentation (structure, viewer, params) {
    CartoonRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'rope';

    this.parameters = Object.assign({

      smooth: {
        type: 'integer', max: 15, min: 0, rebuild: true
      }

    }, this.parameters, {
      aspectRatio: null,
      smoothSheet: null
    });
  }

  if ( CartoonRepresentation$$1 ) RopeRepresentation.__proto__ = CartoonRepresentation$$1;
  RopeRepresentation.prototype = Object.create( CartoonRepresentation$$1 && CartoonRepresentation$$1.prototype );
  RopeRepresentation.prototype.constructor = RopeRepresentation;

  RopeRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.aspectRatio = 1.0;
    p.tension = defaults(p.tension, 0.5);
    p.scale = defaults(p.scale, 5.0);
    p.smoothSheet = false;

    this.smooth = defaults(p.smooth, 2);

    CartoonRepresentation$$1.prototype.init.call(this, p);
  };

  RopeRepresentation.prototype.getSpline = function getSpline (polymer) {
    var helixorient = new Helixorient(polymer);

    return new Spline$1(polymer, this.getSplineParams({
      directional: false,
      positionIterator: helixorient.getCenterIterator(this.smooth)
    }))
  };

  return RopeRepresentation;
}(CartoonRepresentation));

RepresentationRegistry.add('rope', RopeRepresentation);

/**
 * @file Spacefill Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Spacefill Representation
 */
var SpacefillRepresentation = (function (StructureRepresentation$$1) {
  function SpacefillRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'spacefill';

    this.parameters = Object.assign({
      sphereDetail: true,
      disableImpostor: true
    }, this.parameters);

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) SpacefillRepresentation.__proto__ = StructureRepresentation$$1;
  SpacefillRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  SpacefillRepresentation.prototype.constructor = SpacefillRepresentation;

  SpacefillRepresentation.prototype.init = function init (params) {
    var p = params || {};

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  SpacefillRepresentation.prototype.createData = function createData (sview) {
    var sphereBuffer = new SphereBuffer(
            sview.getAtomData(this.getAtomParams()),
            this.getBufferParams({
              sphereDetail: this.sphereDetail,
              dullInterior: true,
              disableImpostor: this.disableImpostor
            })
        );

    return {
      bufferList: [ sphereBuffer ]
    }
  };

  SpacefillRepresentation.prototype.updateData = function updateData (what, data) {
    var atomData = data.sview.getAtomData(this.getAtomParams(what));
    var sphereData = {};

    if (!what || what.position) {
      sphereData.position = atomData.position;
    }

    if (!what || what.color) {
      sphereData.color = atomData.color;
    }

    if (!what || what.radius) {
      sphereData.radius = atomData.radius;
    }

    data.bufferList[ 0 ].setAttributes(sphereData);
  };

  return SpacefillRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('spacefill', SpacefillRepresentation);

/**
 * @file Trace Buffer
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Trace buffer. Draws a series of lines.
 */
var TraceBuffer = (function (Buffer$$1) {
  function TraceBuffer (data, params) {
    var d = data || {};
    var p = params || {};

    var n = d.position.length / 3;
    var n1 = n - 1;

    var linePosition = new Float32Array(n1 * 3 * 2);
    var lineColor = new Float32Array(n1 * 3 * 2);

    Buffer$$1.call(this, {
      position: linePosition,
      color: lineColor
    }, p);

    this.setAttributes(data);
  }

  if ( Buffer$$1 ) TraceBuffer.__proto__ = Buffer$$1;
  TraceBuffer.prototype = Object.create( Buffer$$1 && Buffer$$1.prototype );
  TraceBuffer.prototype.constructor = TraceBuffer;

  var prototypeAccessors = { isLine: {},vertexShader: {},fragmentShader: {} };

  TraceBuffer.prototype.setAttributes = function setAttributes (data) {
    var position, color;
    var linePosition, lineColor;

    var attributes = this.geometry.attributes;

    if (data.position) {
      position = data.position;
      linePosition = attributes.position.array;
      attributes.position.needsUpdate = true;
    }

    if (data.color) {
      color = data.color;
      lineColor = attributes.color.array;
      attributes.color.needsUpdate = true;
    }

    if (!position && !color) {
      Log.warn('TraceBuffer.prototype.setAttributes no data');
      return
    }

    var v, v2;
    var n = this.size;
    var n1 = n - 1;

    for (var i = 0; i < n1; ++i) {
      v = 3 * i;
      v2 = 3 * i * 2;

      if (position) {
        linePosition[ v2 ] = position[ v ];
        linePosition[ v2 + 1 ] = position[ v + 1 ];
        linePosition[ v2 + 2 ] = position[ v + 2 ];

        linePosition[ v2 + 3 ] = position[ v + 3 ];
        linePosition[ v2 + 4 ] = position[ v + 4 ];
        linePosition[ v2 + 5 ] = position[ v + 5 ];
      }

      if (color) {
        lineColor[ v2 ] = color[ v ];
        lineColor[ v2 + 1 ] = color[ v + 1 ];
        lineColor[ v2 + 2 ] = color[ v + 2 ];

        lineColor[ v2 + 3 ] = color[ v + 3 ];
        lineColor[ v2 + 4 ] = color[ v + 4 ];
        lineColor[ v2 + 5 ] = color[ v + 5 ];
      }
    }
  };

  prototypeAccessors.isLine.get = function () { return true };
  prototypeAccessors.vertexShader.get = function () { return 'Line.vert' };
  prototypeAccessors.fragmentShader.get = function () { return 'Line.frag' };

  Object.defineProperties( TraceBuffer.prototype, prototypeAccessors );

  return TraceBuffer;
}(Buffer));

/**
 * @file Trace Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Trace Representation
 */
var TraceRepresentation = (function (StructureRepresentation$$1) {
  function TraceRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'trace';

    this.parameters = Object.assign({

      subdiv: {
        type: 'integer', max: 50, min: 1, rebuild: true
      },
      tension: {
        type: 'number', precision: 1, max: 1.0, min: 0.1
      },
      smoothSheet: {
        type: 'boolean', rebuild: true
      }

    }, this.parameters, {

      flatShaded: null,
      side: null,
      wireframe: null

    });

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) TraceRepresentation.__proto__ = StructureRepresentation$$1;
  TraceRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  TraceRepresentation.prototype.constructor = TraceRepresentation;

  TraceRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorScheme = defaults(p.colorScheme, 'chainname');
    p.colorScale = defaults(p.colorScale, 'RdYlBu');

    if (p.quality === 'low') {
      this.subdiv = 3;
    } else if (p.quality === 'medium') {
      this.subdiv = 6;
    } else if (p.quality === 'high') {
      this.subdiv = 12;
    } else {
      this.subdiv = defaults(p.subdiv, 6);
    }

    this.tension = defaults(p.tension, NaN);
    this.smoothSheet = defaults(p.smoothSheet, false);

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  TraceRepresentation.prototype.getSplineParams = function getSplineParams (params) {
    return Object.assign({
      subdiv: this.subdiv,
      tension: this.tension,
      directional: false,
      smoothSheet: this.smoothSheet
    }, params)
  };

  TraceRepresentation.prototype.createData = function createData (sview) {
    var this$1 = this;

    var bufferList = [];
    var polymerList = [];

    this.structure.eachPolymer(function (polymer) {
      if (polymer.residueCount < 4) { return }
      polymerList.push(polymer);

      var spline = new Spline$1(polymer, this$1.getSplineParams());
      var subPos = spline.getSubdividedPosition();
      var subCol = spline.getSubdividedColor(this$1.getColorParams());

      bufferList.push(
                new TraceBuffer(
                    Object.assign({}, subPos, subCol),
                    this$1.getBufferParams()
                )
            );
    }, sview.getSelection());

    return {
      bufferList: bufferList,
      polymerList: polymerList
    }
  };

  TraceRepresentation.prototype.updateData = function updateData (what, data) {
    var this$1 = this;

    what = what || {};

    var i = 0;
    var n = data.polymerList.length;

    for (i = 0; i < n; ++i) {
      var bufferData = {};
      var spline = new Spline$1(data.polymerList[ i ], this$1.getSplineParams());

      if (what.position) {
        var subPos = spline.getSubdividedPosition();
        bufferData.position = subPos.position;
      }

      if (what.color) {
        var subCol = spline.getSubdividedColor(this$1.getColorParams());
        bufferData.color = subCol.color;
      }

      data.bufferList[ i ].setAttributes(bufferData);
    }
  };

  TraceRepresentation.prototype.setParameters = function setParameters (params) {
    var rebuild = false;
    var what = {};

    if (params && params.tension) {
      what.position = true;
    }

    StructureRepresentation$$1.prototype.setParameters.call(this, params, what, rebuild);

    return this
  };

  return TraceRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('trace', TraceRepresentation);

/**
 * @file Tube Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Tube Representation
 */
var TubeRepresentation = (function (CartoonRepresentation$$1) {
  function TubeRepresentation (structure, viewer, params) {
    CartoonRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'tube';

    this.parameters = Object.assign(
            {}, this.parameters, { aspectRatio: null }
        );
  }

  if ( CartoonRepresentation$$1 ) TubeRepresentation.__proto__ = CartoonRepresentation$$1;
  TubeRepresentation.prototype = Object.create( CartoonRepresentation$$1 && CartoonRepresentation$$1.prototype );
  TubeRepresentation.prototype.constructor = TubeRepresentation;

  TubeRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.aspectRatio = 1.0;
    p.scale = defaults(p.scale, 2.0);

    if (p.quality === 'low') {
      this.radialSegments = 5;
    }

    CartoonRepresentation$$1.prototype.init.call(this, p);
  };

  TubeRepresentation.prototype.getSplineParams = function getSplineParams (/* params */) {
    return CartoonRepresentation$$1.prototype.getSplineParams.call(this, {
      directional: false
    })
  };

  return TubeRepresentation;
}(CartoonRepresentation));

RepresentationRegistry.add('tube', TubeRepresentation);

/**
 * @file Unitcell Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Unitcell Representation
 */
var UnitcellRepresentation = (function (StructureRepresentation$$1) {
  function UnitcellRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'unitcell';

    this.parameters = Object.assign({

      radius: {
        type: 'number', precision: 3, max: 10.0, min: 0.001
      },
      sphereDetail: true,
      radialSegments: true,
      disableImpostor: true

    }, this.parameters, {
      assembly: null
    });

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) UnitcellRepresentation.__proto__ = StructureRepresentation$$1;
  UnitcellRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  UnitcellRepresentation.prototype.constructor = UnitcellRepresentation;

  UnitcellRepresentation.prototype.init = function init (params) {
    var p = params || {};

    var defaultRadius = 0.5;
    if (this.structure.unitcell) {
      defaultRadius = Math.cbrt(this.structure.unitcell.volume) / 200;
    }

    p.radius = defaults(p.radius, defaultRadius);
    p.colorValue = defaults(p.colorValue, 'orange');

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  UnitcellRepresentation.prototype.getUnitcellData = function getUnitcellData (structure) {
    return structure.unitcell.getData(structure)
  };

  UnitcellRepresentation.prototype.create = function create () {
    var structure = this.structureView.getStructure();
    if (!structure.unitcell) { return }
    var unitcellData = this.getUnitcellData(structure);

    this.sphereBuffer = new SphereBuffer(
            unitcellData.vertex,
            this.getBufferParams({
              sphereDetail: this.sphereDetail,
              disableImpostor: this.disableImpostor,
              dullInterior: true
            })
        );

    this.cylinderBuffer = new CylinderBuffer(
            unitcellData.edge,
            this.getBufferParams({
              openEnded: true,
              radialSegments: this.radialSegments,
              disableImpostor: this.disableImpostor,
              dullInterior: true
            })
        );

    this.dataList.push({
      sview: this.structureView,
      bufferList: [ this.sphereBuffer, this.cylinderBuffer ]
    });
  };

  UnitcellRepresentation.prototype.updateData = function updateData (what, data) {
    var structure = data.sview.getStructure();
    var unitcellData = this.getUnitcellData(structure);
    var sphereData = {};
    var cylinderData = {};

    if (!what || what.position) {
      sphereData.position = unitcellData.vertexPosition;
      cylinderData.position1 = unitcellData.edgePosition1;
      cylinderData.position2 = unitcellData.edgePosition2;
    }

    if (!what || what.color) {
      sphereData.color = unitcellData.vertexColor;
      cylinderData.color = unitcellData.edgeColor;
      cylinderData.color2 = unitcellData.edgeColor;
    }

    if (!what || what.radius) {
      sphereData.radius = unitcellData.vertexRadius;
      cylinderData.radius = unitcellData.edgeRadius;
    }

    this.sphereBuffer.setAttributes(sphereData);
    this.cylinderBuffer.setAttributes(cylinderData);
  };

  return UnitcellRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('unitcell', UnitcellRepresentation);

/**
 * @file Validation Representation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Validation representation
 */
var ValidationRepresentation = (function (StructureRepresentation$$1) {
  function ValidationRepresentation (structure, viewer, params) {
    StructureRepresentation$$1.call(this, structure, viewer, params);

    this.type = 'validation';

    this.parameters = Object.assign({

    }, this.parameters, {
      radiusType: null,
      radius: null,
      scale: null
    });

    this.init(params);
  }

  if ( StructureRepresentation$$1 ) ValidationRepresentation.__proto__ = StructureRepresentation$$1;
  ValidationRepresentation.prototype = Object.create( StructureRepresentation$$1 && StructureRepresentation$$1.prototype );
  ValidationRepresentation.prototype.constructor = ValidationRepresentation;

  ValidationRepresentation.prototype.init = function init (params) {
    var p = params || {};
    p.colorValue = defaults(p.colorValue, '#f0027f');

    StructureRepresentation$$1.prototype.init.call(this, p);
  };

  ValidationRepresentation.prototype.createData = function createData (sview) {
    if (!sview.validation) { return }

    var clashData = sview.validation.getClashData({
      structure: sview,
      color: this.colorValue
    });

    var cylinderBuffer = new CylinderBuffer(
            clashData, this.getBufferParams({ openEnded: false })
        );

    return {
      bufferList: [ cylinderBuffer ]
    }
  };

  return ValidationRepresentation;
}(StructureRepresentation));

RepresentationRegistry.add('validation', ValidationRepresentation);

/**
 * @file Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var Parser = function Parser (streamer, params) {
  var p = params || {};

  this.streamer = streamer;

  this.name = defaults(p.name, '');
  this.path = defaults(p.path, '');
};

var prototypeAccessors$27 = { type: {},__objName: {} };

prototypeAccessors$27.type.get = function () { return '' };
prototypeAccessors$27.__objName.get = function () { return '' };

Parser.prototype.parse = function parse () {
    var this$1 = this;

  return this.streamer.read().then(function () {
    this$1._beforeParse();
    this$1._parse();
    this$1._afterParse();
    return this$1[ this$1.__objName ]
  })
};

Parser.prototype._parse = function _parse () {};

Parser.prototype._beforeParse = function _beforeParse () {};

Parser.prototype._afterParse = function _afterParse () {
  if (Debug) { Log.log(this[ this.__objName ]); }
};

Object.defineProperties( Parser.prototype, prototypeAccessors$27 );

/**
 * @file Structure Builder
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function StructureBuilder (structure) {
  var currentModelindex = null;
  var currentChainid = null;
  var currentResname = null;
  var currentResno = null;
  var currentInscode = null;
  var currentHetero = null;

  var previousResname;
  var previousHetero;

  var atomStore = structure.atomStore;
  var residueStore = structure.residueStore;
  var chainStore = structure.chainStore;
  var modelStore = structure.modelStore;

  var residueMap = structure.residueMap;

  var ai = -1;
  var ri = -1;
  var ci = -1;
  var mi = -1;

  function addResidueType (ri) {
    var count = residueStore.atomCount[ ri ];
    var offset = residueStore.atomOffset[ ri ];
    var atomTypeIdList = new Array(count);
    for (var i = 0; i < count; ++i) {
      atomTypeIdList[ i ] = atomStore.atomTypeId[ offset + i ];
    }
    residueStore.residueTypeId[ ri ] = residueMap.add(
            previousResname, atomTypeIdList, previousHetero
        );
  }

  this.addAtom = function (modelindex, chainname, chainid, resname, resno, hetero, sstruc, inscode) {
    var addModel = false;
    var addChain = false;
    var addResidue = false;

    if (currentModelindex !== modelindex) {
      addModel = true;
      addChain = true;
      addResidue = true;
      mi += 1;
      ci += 1;
      ri += 1;
    } else if (currentChainid !== chainid) {
      addChain = true;
      addResidue = true;
      ci += 1;
      ri += 1;
    } else if (currentResno !== resno || currentResname !== resname || currentInscode !== inscode) {
      addResidue = true;
      ri += 1;
    }
    ai += 1;

    if (addModel) {
      modelStore.growIfFull();
      modelStore.chainOffset[ mi ] = ci;
      modelStore.chainCount[ mi ] = 0;
      modelStore.count += 1;
      chainStore.modelIndex[ ci ] = mi;
    }

    if (addChain) {
      chainStore.growIfFull();
      chainStore.setChainname(ci, chainname);
      chainStore.setChainid(ci, chainid);
      chainStore.residueOffset[ ci ] = ri;
      chainStore.residueCount[ ci ] = 0;
      chainStore.count += 1;
      chainStore.modelIndex[ ci ] = mi;
      modelStore.chainCount[ mi ] += 1;
      residueStore.chainIndex[ ri ] = ci;
    }

    if (addResidue) {
      previousResname = currentResname;
      previousHetero = currentHetero;
      if (ri > 0) { addResidueType(ri - 1); }
      residueStore.growIfFull();
      residueStore.resno[ ri ] = resno;
      if (sstruc !== undefined) {
        residueStore.sstruc[ ri ] = sstruc.charCodeAt(0);
      }
      if (inscode !== undefined) {
        residueStore.inscode[ ri ] = inscode.charCodeAt(0);
      }
      residueStore.atomOffset[ ri ] = ai;
      residueStore.atomCount[ ri ] = 0;
      residueStore.count += 1;
      residueStore.chainIndex[ ri ] = ci;
      chainStore.residueCount[ ci ] += 1;
    }

    atomStore.count += 1;
    atomStore.residueIndex[ ai ] = ri;
    residueStore.atomCount[ ri ] += 1;

    currentModelindex = modelindex;
    currentChainid = chainid;
    currentResname = resname;
    currentResno = resno;
    currentInscode = inscode;
    currentHetero = hetero;
  };

  this.finalize = function () {
    previousResname = currentResname;
    previousHetero = currentHetero;
    if (ri > -1) { addResidueType(ri); }
  };
}

/**
 * @file Structure Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var StructureParser = (function (Parser$$1) {
  function StructureParser (streamer, params) {
    var p = params || {};

    Parser$$1.call(this, streamer, p);

    this.firstModelOnly = defaults(p.firstModelOnly, false);
    this.asTrajectory = defaults(p.asTrajectory, false);
    this.cAlphaOnly = defaults(p.cAlphaOnly, false);

    this.structure = new Structure(this.name, this.path);
    this.structureBuilder = new StructureBuilder(this.structure);
  }

  if ( Parser$$1 ) StructureParser.__proto__ = Parser$$1;
  StructureParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
  StructureParser.prototype.constructor = StructureParser;

  var prototypeAccessors = { type: {},__objName: {} };

  prototypeAccessors.type.get = function () { return 'structure' };
  prototypeAccessors.__objName.get = function () { return 'structure' };

  Object.defineProperties( StructureParser.prototype, prototypeAccessors );

  return StructureParser;
}(Parser));

/**
 * @file Entity
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function entityTypeFromString (string) {
  string = string.toLowerCase();
  switch (string) {
    case 'polymer':
      return PolymerEntity
    case 'non-polymer':
      return NonPolymerEntity
    case 'macrolide':
      return MacrolideEntity
    case 'water':
      return WaterEntity
    default:
      return UnknownEntity
  }
}

/**
 * Entity of a {@link Structure}
 */
var Entity = function Entity (structure, index, description, type, chainIndexList) {
  this.structure = structure;
  this.index = index;
  this.description = description || '';
  this.entityType = entityTypeFromString(type || '');
  this.chainIndexList = chainIndexList || [];

  chainIndexList.forEach(function (ci) {
    structure.chainStore.entityIndex[ ci ] = index;
  });
};

var prototypeAccessors$28 = { type: {} };

prototypeAccessors$28.type.get = function () { return 'Entity' };

Entity.prototype.getEntityType = function getEntityType () {
  return this.entityType
};

Entity.prototype.isPolymer = function isPolymer () {
  return this.entityType === PolymerEntity
};

Entity.prototype.isNonPolymer = function isNonPolymer () {
  return this.entityType === NonPolymerEntity
};

Entity.prototype.isMacrolide = function isMacrolide () {
  return this.entityType === MacrolideEntity
};

Entity.prototype.isWater = function isWater () {
  return this.entityType === WaterEntity
};

Entity.prototype.eachChain = function eachChain (callback) {
  var cp = this.structure.getChainProxy();

  this.chainIndexList.forEach(function (index) {
    cp.index = index;
    callback(cp);
  });
};

Object.defineProperties( Entity.prototype, prototypeAccessors$28 );

/**
 * @file Unitcell
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * Unitcell class
 */
var Unitcell = function Unitcell (params) {
  var p = params || {};

      /**
       * @type {Number}
       */
  this.a = p.a || 1;
      /**
       * @type {Number}
       */
  this.b = p.b || 1;
      /**
       * @type {Number}
       */
  this.c = p.c || 1;

      /**
       * @type {Number}
       */
  this.alpha = p.alpha || 90;
      /**
       * @type {Number}
       */
  this.beta = p.beta || 90;
      /**
       * @type {Number}
       */
  this.gamma = p.gamma || 90;

      /**
       * @type {String}
       */
  this.spacegroup = p.spacegroup || 'P 1';
      /**
       * @type {Matrix4}
       */
  this.cartToFrac = p.cartToFrac || p.scale;
      /**
       * @type {Matrix4}
       */
  this.fracToCart = new Matrix4();

      //

  var alphaRad = degToRad(this.alpha);
  var betaRad = degToRad(this.beta);
  var gammaRad = degToRad(this.gamma);
  var cosAlpha = Math.cos(alphaRad);
  var cosBeta = Math.cos(betaRad);
  var cosGamma = Math.cos(gammaRad);
  var sinBeta = Math.sin(betaRad);
  var sinGamma = Math.sin(gammaRad);

      /**
       * @type {Number}
       */
  this.volume = (
          this.a * this.b * this.c *
          Math.sqrt(
              1 - cosAlpha * cosAlpha - cosBeta * cosBeta - cosGamma * cosGamma +
              2.0 * cosAlpha * cosBeta * cosGamma
          )
      );

      //

  if (this.cartToFrac === undefined) {
          // https://github.com/biojava/biojava/blob/master/biojava-structure/src/main/java/org/biojava/nbio/structure/xtal/CrystalCell.java

    var cStar = (this.a * this.b * sinGamma) / this.volume;
    var cosAlphaStar = (
              (cosBeta * cosGamma - cosAlpha) /
              (sinBeta * sinGamma)
          );

    this.fracToCart.set(
              this.a, 0, 0, 0,
              this.b * cosGamma, this.b * sinGamma, 0, 0,
              this.c * cosBeta, -this.c * sinBeta * cosAlphaStar, 1.0 / cStar, 0,
              0, 0, 0, 1
          ).transpose();
    this.cartToFrac = new Matrix4().getInverse(this.fracToCart);
  } else {
    this.fracToCart.getInverse(this.cartToFrac);
  }
};

Unitcell.prototype.getPosition = function getPosition (structure) {
  var vertexPosition = new Float32Array(3 * 8);

  var uc = structure.unitcell;
  var centerFrac = structure.center.clone()
          .applyMatrix4(uc.cartToFrac)
          .floor().multiplyScalar(2).addScalar(1);
  var v = new Vector3();

  var cornerOffset = 0;
  function addCorner (x, y, z) {
    v.set(x, y, z)
              .multiply(centerFrac)
              .applyMatrix4(uc.fracToCart)
              .toArray(vertexPosition, cornerOffset);
    cornerOffset += 3;
  }
  addCorner(0, 0, 0);
  addCorner(1, 0, 0);
  addCorner(0, 1, 0);
  addCorner(0, 0, 1);
  addCorner(1, 1, 0);
  addCorner(1, 0, 1);
  addCorner(0, 1, 1);
  addCorner(1, 1, 1);

  return vertexPosition
};

Unitcell.prototype.getCenter = function getCenter (structure) {
  return centerArray3(this.getPosition(structure))
};

Unitcell.prototype.getData = function getData (structure, params) {
  var p = params || {};
  var colorValue = defaults(p.colorValue, 'orange');
  var radius = defaults(p.radius, Math.cbrt(this.volume) / 200);

  var c = new Color(colorValue);
  var v = new Vector3();

  var vertexPosition = this.getPosition(structure);
  var vertexColor = uniformArray3(8, c.r, c.g, c.b);
  var vertexRadius = uniformArray(8, radius);

  var edgePosition1 = new Float32Array(3 * 12);
  var edgePosition2 = new Float32Array(3 * 12);
  var edgeColor = uniformArray3(12, c.r, c.g, c.b);
  var edgeRadius = uniformArray(12, radius);

  var edgeOffset = 0;
  function addEdge (a, b) {
    v.fromArray(vertexPosition, a * 3)
              .toArray(edgePosition1, edgeOffset);
    v.fromArray(vertexPosition, b * 3)
              .toArray(edgePosition2, edgeOffset);
    edgeOffset += 3;
  }
  addEdge(0, 1);
  addEdge(0, 2);
  addEdge(0, 3);
  addEdge(1, 4);
  addEdge(1, 5);
  addEdge(2, 6);
  addEdge(3, 5);
  addEdge(4, 7);
  addEdge(5, 7);
  addEdge(2, 4);
  addEdge(7, 6);
  addEdge(3, 6);

  var picker = new UnitcellPicker(this, structure);

  return {
    vertex: {
      position: vertexPosition,
      color: vertexColor,
      radius: vertexRadius,
      picking: picker
    },
    edge: {
      position1: edgePosition1,
      position2: edgePosition2,
      color: edgeColor,
      color2: edgeColor,
      radius: edgeRadius,
      picking: picker
    }
  }
};

/**
 * @file Pdb Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// PDB helix record encoding
var HelixTypes = {
  1: 'h',  // Right-handed alpha (default)
  2: 'h',  // Right-handed omega
  3: 'i',  // Right-handed pi
  4: 'h',  // Right-handed gamma
  5: 'g',  // Right-handed 310
  6: 'h',  // Left-handed alpha
  7: 'h',  // Left-handed omega
  8: 'h',  // Left-handed gamma
  9: 'h',  // 27 ribbon/helix
  10: 'h',  // Polyproline
  '': 'h'
};

var PdbParser = (function (StructureParser$$1) {
  function PdbParser (streamer, params) {
    var p = params || {};

    StructureParser$$1.call(this, streamer, p);

    this.hex = defaults(p.hex, false);
  }

  if ( StructureParser$$1 ) PdbParser.__proto__ = StructureParser$$1;
  PdbParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
  PdbParser.prototype.constructor = PdbParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'pdb' };

  PdbParser.prototype._parse = function _parse () {
        // http://www.wwpdb.org/documentation/file-format.php

    if (Debug) { Log.time('PdbParser._parse ' + this.name); }

    var isLegacy = false;
    var headerLine = this.streamer.peekLines(1)[ 0 ];
    var headerId = headerLine.substr(62, 4);
    var legacyId = headerLine.substr(72, 4);
    if (headerId === legacyId && legacyId.trim()) {
      isLegacy = true;
    }

    var isPqr = this.type === 'pqr';
    var reWhitespace = /\s+/;

    var s = this.structure;
    var sb = this.structureBuilder;

    var hex = this.hex;
    var serialRadix = 10;
    var resnoRadix = 10;

    var firstModelOnly = this.firstModelOnly;
    var asTrajectory = this.asTrajectory;
    var cAlphaOnly = this.cAlphaOnly;

    var frames = s.frames;
    var boxes = s.boxes;
    var doFrames = false;
    var currentFrame, currentCoord;

    var biomolDict = s.biomolDict;
    var currentBiomol;
    var currentPart;
    var currentMatrix;

    var line, recordName;
    var serial, chainname, resno, resname, occupancy,
      inscode, atomname, hetero, bfactor, altloc;

    var startChain, startResi, startIcode;
    var endChain, endResi, endIcode;

    var serialDict = {};
    var unitcellDict = {};
    var bondDict = {};

    var entityDataList = [];
    var currentEntityData;
    var currentEntityKey;
    // MOL_ID                 Numbers each component; also used in  SOURCE to associate
    //                        the information.
    // MOLECULE               Name of the macromolecule.
    // CHAIN                  Comma-separated list of chain  identifier(s).
    // FRAGMENT               Specifies a domain or region of the  molecule.
    // SYNONYM                Comma-separated list of synonyms for  the MOLECULE.
    // EC                     The Enzyme Commission number associated  with the molecule.
    //                        If there is more than one EC number,  they are presented
    //                        as a comma-separated list.
    // ENGINEERED             Indicates that the molecule was  produced using
    //                        recombinant technology or by purely  chemical synthesis.
    // MUTATION               Indicates if there is a mutation.
    // OTHER_DETAILS          Additional comments.
    var entityKeyList = [
      'MOL_ID', 'MOLECULE', 'CHAIN', 'FRAGMENT', 'SYNONYM',
      'EC', 'ENGINEERED', 'MUTATION', 'OTHER_DETAILS'
    ];
    var chainDict = {};
    var hetnameDict = {};
    var chainIdx, chainid, newChain;
    var currentChainname, currentResno, currentResname, currentInscode;

    var secStruct = {
      helices: [],
      sheets: []
    };
    var helices = secStruct.helices;
    var sheets = secStruct.sheets;

    var atomMap = s.atomMap;
    var atomStore = s.atomStore;
    atomStore.resize(Math.round(this.streamer.data.length / 80));

    var ap1 = s.getAtomProxy();
    var ap2 = s.getAtomProxy();

    var idx = 0;
    var modelIdx = 0;
    var pendingStart = true;

    function _parseChunkOfLines (_i, _n, lines) {
      for (var i = _i; i < _n; ++i) {
        line = lines[ i ];
        recordName = line.substr(0, 6);

        if (recordName === 'ATOM  ' || recordName === 'HETATM') {
          // http://www.wwpdb.org/documentation/file-format-content/format33/sect9.html#ATOM
          // PQR: Field_name Atom_number Atom_name Residue_name Chain_ID Residue_number X Y Z Charge Radius

          if (pendingStart) {
            if (asTrajectory) {
              if (doFrames) {
                currentFrame = new Float32Array(atomStore.count * 3);
                frames.push(currentFrame);
              } else {
                currentFrame = [];
              }
              currentCoord = 0;
            } else {
              if (!firstModelOnly) { serialDict = {}; }
            }

            chainIdx = 1;
            chainid = chainIdx.toString();
            newChain = true;

            pendingStart = false;
          }

          if (firstModelOnly && modelIdx > 0) { continue }

          var x = (void 0), y = (void 0), z = (void 0), ls = (void 0), dd = (void 0);

          if (isPqr) {
            ls = line.split(reWhitespace);
            dd = ls.length === 10 ? 1 : 0;

            atomname = ls[ 2 ];
            if (cAlphaOnly && atomname !== 'CA') { continue }

            x = parseFloat(ls[ 6 - dd ]);
            y = parseFloat(ls[ 7 - dd ]);
            z = parseFloat(ls[ 8 - dd ]);
          } else {
            atomname = line.substr(12, 4).trim();
            if (cAlphaOnly && atomname !== 'CA') { continue }

            x = parseFloat(line.substr(30, 8));
            y = parseFloat(line.substr(38, 8));
            z = parseFloat(line.substr(46, 8));
          }

          if (asTrajectory) {
            var j = currentCoord * 3;

            currentFrame[ j + 0 ] = x;
            currentFrame[ j + 1 ] = y;
            currentFrame[ j + 2 ] = z;

            currentCoord += 1;

            if (doFrames) { continue }
          }

          var element = (void 0);

          if (isPqr) {
            serial = parseInt(ls[ 1 ]);
            element = '';
            hetero = (line[ 0 ] === 'H') ? 1 : 0;
            chainname = dd ? '' : ls[ 4 ];
            resno = parseInt(ls[ 5 - dd ]);
            inscode = '';
            resname = ls[ 3 ];
            bfactor = parseFloat(ls[ 9 - dd ]);  // charge FIXME should be its own field
            altloc = '';
            occupancy = 0.0;
            // FIXME radius field not supported
          } else {
            serial = parseInt(line.substr(6, 5), serialRadix);
            if (hex && serial === 99999) {
              serialRadix = 16;
            }
            hetero = (line[ 0 ] === 'H') ? 1 : 0;
            chainname = line[ 21 ].trim();
            resno = parseInt(line.substr(22, 4), resnoRadix) || 1;
            if (hex && resno === 9999) {
              resnoRadix = 16;
            }
            inscode = line[ 26 ].trim();
            resname = line.substr(17, 4).trim() || 'MOL';
            bfactor = parseFloat(line.substr(60, 6));
            altloc = line[ 16 ].trim();
            occupancy = parseFloat(line.substr(54, 6));

            if (!isLegacy) {
              element = line.substr(76, 2).trim();
              if (!chainname) {
                chainname = line.substr(72, 4).trim();  // segid
              }
            }
          }

          atomStore.growIfFull();
          atomStore.atomTypeId[ idx ] = atomMap.add(atomname, element);

          atomStore.x[ idx ] = x;
          atomStore.y[ idx ] = y;
          atomStore.z[ idx ] = z;
          atomStore.serial[ idx ] = serial;
          atomStore.bfactor[ idx ] = isNaN(bfactor) ? 0 : bfactor;
          atomStore.altloc[ idx ] = altloc.charCodeAt(0);
          atomStore.occupancy[ idx ] = isNaN(occupancy) ? 0 : occupancy;

          if (hetero) {
            if (currentChainname !== chainname || currentResname !== resname ||
                            (!WaterNames.includes(resname) &&
                                (currentResno !== resno || currentInscode !== inscode))
                        ) {
              chainIdx += 1;
              chainid = chainIdx.toString();

              currentResno = resno;
              currentResname = resname;
              currentInscode = inscode;
            }
          } else if (!newChain && currentChainname !== chainname) {
            chainIdx += 1;
            chainid = chainIdx.toString();
          }

          sb.addAtom(modelIdx, chainname, chainid, resname, resno, hetero, undefined, inscode);

          serialDict[ serial ] = idx;
          idx += 1;
          newChain = false;
          currentChainname = chainname;
        } else if (recordName === 'CONECT') {
          var fromIdx = serialDict[ parseInt(line.substr(6, 5)) ];
          var pos = [ 11, 16, 21, 26 ];
          var bondIndex = {};

          if (fromIdx === undefined) {
            // Log.log( "missing CONNECT serial" );
            continue
          }

          for (var j$1 = 0; j$1 < 4; ++j$1) {
            var toIdx = parseInt(line.substr(pos[ j$1 ], 5));
            if (Number.isNaN(toIdx)) { continue }
            toIdx = serialDict[ toIdx ];
            if (toIdx === undefined) {
              // Log.log( "missing CONNECT serial" );
              continue
            }/* else if( toIdx < fromIdx ){
                // likely a duplicate in standard PDB format
                // but not necessarily, so better remove duplicates
                // in a pass after parsing (and auto bonding)
                continue;
            } */

            if (fromIdx < toIdx) {
              ap1.index = fromIdx;
              ap2.index = toIdx;
            } else {
              ap1.index = toIdx;
              ap2.index = fromIdx;
            }

            // interpret records where a 'toIdx' atom is given multiple times
            // as double/triple bonds, e.g. CONECT 1529 1528 1528 is a double bond
            if (bondIndex[ toIdx ] !== undefined) {
              s.bondStore.bondOrder[ bondIndex[ toIdx ] ] += 1;
            } else {
              var hash = ap1.index + '|' + ap2.index;
              if (bondDict[ hash ] === undefined) {
                bondDict[ hash ] = true;
                bondIndex[ toIdx ] = s.bondStore.count;
                s.bondStore.addBond(ap1, ap2, 1);  // start/assume with single bond
              }
            }
          }
        } else if (recordName === 'HELIX ') {
          startChain = line[ 19 ].trim();
          startResi = parseInt(line.substr(21, 4));
          startIcode = line[ 25 ].trim();
          endChain = line[ 31 ].trim();
          endResi = parseInt(line.substr(33, 4));
          endIcode = line[ 37 ].trim();
          var helixType = parseInt(line.substr(39, 1));
          helixType = (HelixTypes[ helixType ] || HelixTypes['']).charCodeAt(0);
          helices.push([
            startChain, startResi, startIcode,
            endChain, endResi, endIcode,
            helixType
          ]);
        } else if (recordName === 'SHEET ') {
          startChain = line[ 21 ].trim();
          startResi = parseInt(line.substr(22, 4));
          startIcode = line[ 26 ].trim();
          endChain = line[ 32 ].trim();
          endResi = parseInt(line.substr(33, 4));
          endIcode = line[ 37 ].trim();
          sheets.push([
            startChain, startResi, startIcode,
            endChain, endResi, endIcode
          ]);
        } else if (recordName === 'HETNAM') {
          hetnameDict[ line.substr(11, 3) ] = line.substr(15).trim();
        } else if (recordName === 'COMPND') {
          var comp = line.substr(10, 70).trim();
          var keyEnd = comp.indexOf(':');
          var key = comp.substring(0, keyEnd);
          var value = (void 0);

          if (entityKeyList.includes(key)) {
            currentEntityKey = key;
            value = comp.substring(keyEnd + 2);
          } else {
            value = comp;
          }
          value = value.replace(/;$/, '');

          if (currentEntityKey === 'MOL_ID') {
            currentEntityData = {
              chainList: [],
              name: ''
            };
            entityDataList.push(currentEntityData);
          } else if (currentEntityKey === 'MOLECULE') {
            if (currentEntityData.name) { currentEntityData.name += ' '; }
            currentEntityData.name += value;
          } else if (currentEntityKey === 'CHAIN') {
            Array.prototype.push.apply(
              currentEntityData.chainList,
              value.split(/\s*,\s*/)
            );
          }
        } else if (line.startsWith('TER')) {
          var cp = s.getChainProxy(s.chainStore.count - 1);
          chainDict[ cp.chainname ] = cp.index;
          chainIdx += 1;
          chainid = chainIdx.toString();
          newChain = true;
        } else if (recordName === 'REMARK' && line.substr(7, 3) === '350') {
          if (line.substr(11, 12) === 'BIOMOLECULE:') {
            var name = line.substr(23).trim();
            if (/^(0|[1-9][0-9]*)$/.test(name)) { name = 'BU' + name; }

            currentBiomol = new Assembly(name);
            biomolDict[ name ] = currentBiomol;
          } else if (line.substr(13, 5) === 'BIOMT') {
            var biomt = line.split(/\s+/);
            var row = parseInt(line[ 18 ]) - 1;

            if (row === 0) {
              currentMatrix = new Matrix4();
              currentPart.matrixList.push(currentMatrix);
            }

            var biomtElms = currentMatrix.elements;

            biomtElms[ 4 * 0 + row ] = parseFloat(biomt[ 4 ]);
            biomtElms[ 4 * 1 + row ] = parseFloat(biomt[ 5 ]);
            biomtElms[ 4 * 2 + row ] = parseFloat(biomt[ 6 ]);
            biomtElms[ 4 * 3 + row ] = parseFloat(biomt[ 7 ]);
          } else if (
                line.substr(11, 30) === 'APPLY THE FOLLOWING TO CHAINS:' ||
                line.substr(11, 30) === '                   AND CHAINS:'
            ) {
            if (line.substr(11, 5) === 'APPLY') {
              currentPart = currentBiomol.addPart();
            }

            var chainList = line.substr(41, 30).split(',');
            for (var j$2 = 0, jl = chainList.length; j$2 < jl; ++j$2) {
              var c = chainList[ j$2 ].trim();
              if (c) { currentPart.chainList.push(c); }
            }
          }
        } else if (recordName === 'HEADER') {
          s.id = line.substr(62, 4);
        } else if (recordName === 'TITLE ') {
          s.title += (s.title ? ' ' : '') + line.substr(10, 70).trim();
        } else if (recordName === 'MODEL ') {
          pendingStart = true;
        } else if (recordName === 'ENDMDL' || line.startsWith('END')) {
          if (pendingStart) { continue }

          if (asTrajectory && !doFrames) {
            frames.push(new Float32Array(currentFrame));
            doFrames = true;
          }

          modelIdx += 1;
          pendingStart = true;
        } else if (line.substr(0, 5) === 'MTRIX') {
          // ignore 'given' operators
          if (line[ 59 ] === '1') { continue }

          var ncs = line.split(/\s+/);
          var ncsMat = ncs[ 1 ].trim();

          if (line[ 5 ] === '1' && ncsMat === '1') {
            var ncsName = 'NCS';
            currentBiomol = new Assembly(ncsName);
            biomolDict[ ncsName ] = currentBiomol;
            currentPart = currentBiomol.addPart();
          }

          var ncsRow = parseInt(line[ 5 ]) - 1;

          if (ncsRow === 0) {
            currentMatrix = new Matrix4();
            currentPart.matrixList.push(currentMatrix);
          }

          var ncsElms = currentMatrix.elements;

          ncsElms[ 4 * 0 + ncsRow ] = parseFloat(ncs[ 2 ]);
          ncsElms[ 4 * 1 + ncsRow ] = parseFloat(ncs[ 3 ]);
          ncsElms[ 4 * 2 + ncsRow ] = parseFloat(ncs[ 4 ]);
          ncsElms[ 4 * 3 + ncsRow ] = parseFloat(ncs[ 5 ]);
        } else if (line.substr(0, 5) === 'ORIGX') {
          if (!unitcellDict.origx) {
            unitcellDict.origx = new Matrix4();
          }

          var orgix = line.split(/\s+/);
          var origxRow = parseInt(line[ 5 ]) - 1;
          var origxElms = unitcellDict.origx.elements;

          origxElms[ 4 * 0 + origxRow ] = parseFloat(orgix[ 1 ]);
          origxElms[ 4 * 1 + origxRow ] = parseFloat(orgix[ 2 ]);
          origxElms[ 4 * 2 + origxRow ] = parseFloat(orgix[ 3 ]);
          origxElms[ 4 * 3 + origxRow ] = parseFloat(orgix[ 4 ]);
        } else if (line.substr(0, 5) === 'SCALE') {
          if (!unitcellDict.scale) {
            unitcellDict.scale = new Matrix4();
          }

          var scale = line.split(/\s+/);
          var scaleRow = parseInt(line[ 5 ]) - 1;
          var scaleElms = unitcellDict.scale.elements;

          scaleElms[ 4 * 0 + scaleRow ] = parseFloat(scale[ 1 ]);
          scaleElms[ 4 * 1 + scaleRow ] = parseFloat(scale[ 2 ]);
          scaleElms[ 4 * 2 + scaleRow ] = parseFloat(scale[ 3 ]);
          scaleElms[ 4 * 3 + scaleRow ] = parseFloat(scale[ 4 ]);
        } else if (recordName === 'CRYST1') {
          // CRYST1   55.989   55.989   55.989  90.00  90.00  90.00 P 1           1
          //  7 - 15       Real(9.3)      a (Angstroms)
          // 16 - 24       Real(9.3)      b (Angstroms)
          // 25 - 33       Real(9.3)      c (Angstroms)
          // 34 - 40       Real(7.2)      alpha         alpha (degrees).
          // 41 - 47       Real(7.2)      beta          beta (degrees).
          // 48 - 54       Real(7.2)      gamma         gamma (degrees).
          // 56 - 66       LString        sGroup        Space group.
          // 67 - 70       Integer        z             Z value.

          var aLength = parseFloat(line.substr(6, 9));
          var bLength = parseFloat(line.substr(15, 9));
          var cLength = parseFloat(line.substr(24, 9));

          var alpha = parseFloat(line.substr(33, 7));
          var beta = parseFloat(line.substr(40, 7));
          var gamma = parseFloat(line.substr(47, 7));

          var sGroup = line.substr(55, 11).trim();
            // var zValue = parseInt( line.substr( 66, 4 ) );

          var box = new Float32Array(9);
          box[ 0 ] = aLength;
          box[ 4 ] = bLength;
          box[ 8 ] = cLength;
          boxes.push(box);

          if (modelIdx === 0) {
            unitcellDict.a = aLength;
            unitcellDict.b = bLength;
            unitcellDict.c = cLength;
            unitcellDict.alpha = alpha;
            unitcellDict.beta = beta;
            unitcellDict.gamma = gamma;
            unitcellDict.spacegroup = sGroup;
          }
        }
      }
    }

    this.streamer.eachChunkOfLines(function (lines/*, chunkNo, chunkCount */) {
      _parseChunkOfLines(0, lines.length, lines);
    });

    //

    var en = entityDataList.length;

    if (entityDataList.length) {
      s.eachChain(function (cp) {
        cp.entityIndex = en;
      });

      entityDataList.forEach(function (e, i) {
        var chainIndexList = e.chainList.map(function (chainname) {
          return chainDict[ chainname ]
        });
        s.entityList.push(new Entity(
                    s, i, e.name, 'polymer', chainIndexList
                ));
      });

      var ei = entityDataList.length;
      var rp = s.getResidueProxy();
      var residueDict = {};

      s.eachChain(function (cp) {
        if (cp.entityIndex === en) {
          rp.index = cp.residueOffset;
          if (!residueDict[ rp.resname ]) {
            residueDict[ rp.resname ] = [];
          }
          residueDict[ rp.resname ].push(cp.index);
        }
      });

      Object.keys(residueDict).forEach(function (resname) {
        var chainList = residueDict[ resname ];
        var type = 'non-polymer';
        var name = hetnameDict[ resname ] || resname;
        if (WaterNames.includes(resname)) {
          name = 'water';
          type = 'water';
        }
        s.entityList.push(new Entity(
                    s, ei, name, type, chainList
                ));
        ei += 1;
      });
    }

    //

    if (unitcellDict.a !== undefined) {
      s.unitcell = new Unitcell(unitcellDict);
    } else {
      s.unitcell = undefined;
    }

    if (helices.length || sheets.length) {
      assignSecondaryStructure(s, secStruct);
    }

    sb.finalize();
    s.finalizeAtoms();
    if (!isLegacy) { calculateChainnames(s); }
    calculateBonds(s);
    s.finalizeBonds();

    if (!helices.length && !sheets.length) {
      calculateSecondaryStructure(s);
    }
    buildUnitcellAssembly(s);

    if (Debug) { Log.timeEnd('PdbParser._parse ' + this.name); }
  };

  Object.defineProperties( PdbParser.prototype, prototypeAccessors );

  return PdbParser;
}(StructureParser));

ParserRegistry.add('pdb', PdbParser);
ParserRegistry.add('pdb1', PdbParser);
ParserRegistry.add('ent', PdbParser);

/**
 * @file Cif Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var reWhitespace = /\s+/;
var reQuotedWhitespace = /'((?:(?!'\s).)*)'|"((?:(?!"\s).)*)"|(\S+)/g;
var reDoubleQuote = /"/g;
var reTrimQuotes = /^['"]+|['"]+$/g;

function trimQuotes (str) {
  if (str && str[0] === str[ str.length - 1 ] && (str[0] === "'" || str[0] === '"')) {
    return str.substring(1, str.length - 1)
  } else {
    return str
  }
}

function ensureArray (dict, field) {
  if (!Array.isArray(dict[ field ])) {
    Object.keys(dict).forEach(function (key) {
      dict[ key ] = [ dict[ key ] ];
    });
  }
}

function hasValue (d) {
  return d !== '?'
}

function cifDefaults (value, defaultValue) {
  return hasValue(value) ? value : defaultValue
}

function getBondOrder (valueOrder) {
  switch (valueOrder.toLowerCase()) {
    case '?':  // assume single bond
    case 'sing':
      return 1
    case 'doub':
      return 2
    case 'trip':
      return 3
    case 'quad':
      return 4
  }
  return 0
}

function parseChemComp (cif, structure, structureBuilder) {
  var atomStore = structure.atomStore;
  var atomMap = structure.atomMap;

  var i, n;
  var cc = cif.chem_comp;
  var cca = cif.chem_comp_atom;
  var ccb = cif.chem_comp_bond;

  if (cc) {
    if (cc.name) {
      structure.title = cc.name.trim().replace(reTrimQuotes, '');
    }
    if (cc.id) {
      structure.id = cc.id.trim().replace(reTrimQuotes, '');
    }
  }

  var atomnameDict = {};

  if (cca) {
    var atomname, element, resname, resno;
    n = cca.comp_id.length;

    for (i = 0; i < n; ++i) {
      atomStore.growIfFull();

      atomname = cca.atom_id[ i ].replace(reDoubleQuote, '');
      element = cca.type_symbol[ i ];

      atomnameDict[ atomname ] = i;
      atomStore.atomTypeId[ i ] = atomMap.add(atomname, element);

      atomStore.x[ i ] = cca.model_Cartn_x[ i ];
      atomStore.y[ i ] = cca.model_Cartn_y[ i ];
      atomStore.z[ i ] = cca.model_Cartn_z[ i ];
      atomStore.serial[ i ] = i;

      resname = cca.pdbx_component_comp_id[ i ];
      resno = cca.pdbx_residue_numbering ? cca.pdbx_residue_numbering[ i ] : 1;

      structureBuilder.addAtom(0, '', '', resname, resno, 1);
    }

    for (i = 0; i < n; ++i) {
      var j = i + n;

      atomStore.growIfFull();

      atomname = cca.atom_id[ i ].replace(reDoubleQuote, '');
      element = cca.type_symbol[ i ];

      atomStore.atomTypeId[ j ] = atomMap.add(atomname, element);

      atomStore.x[ j ] = cca.pdbx_model_Cartn_x_ideal[ i ];
      atomStore.y[ j ] = cca.pdbx_model_Cartn_y_ideal[ i ];
      atomStore.z[ j ] = cca.pdbx_model_Cartn_z_ideal[ i ];
      atomStore.serial[ j ] = j;

      resname = cca.pdbx_component_comp_id[ i ];
      resno = cca.pdbx_residue_numbering ? cca.pdbx_residue_numbering[ i ] : 1;

      structureBuilder.addAtom(1, '', '', resname, resno, 1);
    }
  }

  if (cca && ccb) {
    var atomname1, atomname2, bondOrder;
    n = ccb.comp_id.length;
    var na = cca.comp_id.length;

    var ap1 = structure.getAtomProxy();
    var ap2 = structure.getAtomProxy();

    for (i = 0; i < n; ++i) {
      atomname1 = ccb.atom_id_1[ i ].replace(reDoubleQuote, '');
      atomname2 = ccb.atom_id_2[ i ].replace(reDoubleQuote, '');
      bondOrder = getBondOrder(ccb.value_order[ i ]);

      ap1.index = atomnameDict[ atomname1 ];
      ap2.index = atomnameDict[ atomname2 ];
      structure.bondStore.growIfFull();
      structure.bondStore.addBond(ap1, ap2, bondOrder);

      ap1.index += na;
      ap2.index += na;
      structure.bondStore.growIfFull();
      structure.bondStore.addBond(ap1, ap2, bondOrder);
    }
  }
}

function parseCore (cif, structure, structureBuilder) {
  var atomStore = structure.atomStore;
  var atomMap = structure.atomMap;

  if (cif.data) {
    structure.id = cif.data;
    structure.name = cif.data;
  }

  structure.unitcell = new Unitcell({
    a: parseFloat(cif.cell_length_a),
    b: parseFloat(cif.cell_length_b),
    c: parseFloat(cif.cell_length_c),
    alpha: parseFloat(cif.cell_angle_alpha),
    beta: parseFloat(cif.cell_angle_beta),
    gamma: parseFloat(cif.cell_angle_gamma),
    spacegroup: trimQuotes(cif.symmetry_space_group_name_H)
  });

  var v = new Vector3();
  var c = new Vector3();
  var n = cif.atom_site_type_symbol.length;

  for (var i = 0; i < n; ++i) {
    atomStore.growIfFull();

    var atomname = cif.atom_site_label[ i ];
    var element = cif.atom_site_type_symbol[ i ];

    atomStore.atomTypeId[ i ] = atomMap.add(atomname, element);

    v.set(
      cif.atom_site_fract_x[ i ],
      cif.atom_site_fract_y[ i ],
      cif.atom_site_fract_z[ i ]
    );
    v.applyMatrix4(structure.unitcell.fracToCart);
    c.add(v);

    atomStore.x[ i ] = v.x;
    atomStore.y[ i ] = v.y;
    atomStore.z[ i ] = v.z;
    if (cif.atom_site_occupancy) {
      atomStore.occupancy[ i ] = parseFloat(cif.atom_site_occupancy[ i ]);
    }
    atomStore.serial[ i ] = i;

    structureBuilder.addAtom(0, '', '', 'HET', 1, 1);
  }

  c.divideScalar(n);
  structure.center = c;
  buildUnitcellAssembly(structure);

  var v2 = new Vector3();
  var v3 = new Vector3();
  var ml = structure.biomolDict.SUPERCELL.partList[ 0 ].matrixList;

  var k = n;

  function covalent (idx) {
    return atomMap.get(atomStore.atomTypeId[ idx ]).covalent
  }
  var identityMatrix = new Matrix4();

  var loop = function ( i ) {
    var covalentI = covalent(i);

    v.set(
      atomStore.x[ i ],
      atomStore.y[ i ],
      atomStore.z[ i ]
    );

    ml.forEach(function (m) {
      if (identityMatrix.equals(m)) { return }

      v2.copy(v);
      v2.applyMatrix4(m);

      for (var j = 0; j < n; ++j) {
        v3.set(
          atomStore.x[ j ],
          atomStore.y[ j ],
          atomStore.z[ j ]
        );

        var distSquared = v2.distanceToSquared(v3);
        var d = covalent(j) + covalentI;
        var d1 = d + 0.3;
        var d2 = d - 0.5;

        if (distSquared < (d1 * d1) && distSquared > (d2 * d2)) {
          atomStore.growIfFull();

          atomStore.atomTypeId[ k ] = atomStore.atomTypeId[ i ];
          atomStore.x[ k ] = v2.x;
          atomStore.y[ k ] = v2.y;
          atomStore.z[ k ] = v2.z;
          atomStore.occupancy[ k ] = atomStore.occupancy[ i ];
          atomStore.serial[ k ] = k;
          atomStore.altloc[ k ] = 'A'.charCodeAt(0);

          structureBuilder.addAtom(0, '', '', 'HET', 1, 1);

          k += 1;
          return
        }
      }
    });
  };

  for (var i$1 = 0; i$1 < n; ++i$1) loop( i$1 );
}

function processSecondaryStructure (cif, structure, asymIdDict) {
  var helices = [];
  var sheets = [];

  var i, il, begIcode, endIcode;

  // get helices
  var sc = cif.struct_conf;

  if (sc) {
    ensureArray(sc, 'id');

    for (i = 0, il = sc.beg_auth_seq_id.length; i < il; ++i) {
      var helixType = parseInt(sc.pdbx_PDB_helix_class[ i ]);
      if (!Number.isNaN(helixType)) {
        begIcode = sc.pdbx_beg_PDB_ins_code[ i ];
        endIcode = sc.pdbx_end_PDB_ins_code[ i ];
        helices.push([
          asymIdDict[ sc.beg_label_asym_id[ i ] ],
          parseInt(sc.beg_auth_seq_id[ i ]),
          cifDefaults(begIcode, ''),
          asymIdDict[ sc.end_label_asym_id[ i ] ],
          parseInt(sc.end_auth_seq_id[ i ]),
          cifDefaults(endIcode, ''),
          (HelixTypes[ helixType ] || HelixTypes['']).charCodeAt(0)
        ]);
      }
    }
  }

  // get sheets
  var ssr = cif.struct_sheet_range;

  if (ssr) {
    ensureArray(ssr, 'id');

    for (i = 0, il = ssr.beg_auth_seq_id.length; i < il; ++i) {
      begIcode = ssr.pdbx_beg_PDB_ins_code[ i ];
      endIcode = ssr.pdbx_end_PDB_ins_code[ i ];
      sheets.push([
        asymIdDict[ ssr.beg_label_asym_id[ i ] ],
        parseInt(ssr.beg_auth_seq_id[ i ]),
        cifDefaults(begIcode, ''),
        asymIdDict[ ssr.end_label_asym_id[ i ] ],
        parseInt(ssr.end_auth_seq_id[ i ]),
        cifDefaults(endIcode, '')
      ]);
    }
  }

  if (sc || ssr) {
    return {
      helices: helices,
      sheets: sheets
    }
  } else {
    return false
  }
}

function processSymmetry (cif, structure, asymIdDict) {
  // biomol & ncs processing
  var operDict = {};
  var biomolDict = structure.biomolDict;

  if (cif.pdbx_struct_oper_list) {
    var biomolOp = cif.pdbx_struct_oper_list;
    ensureArray(biomolOp, 'id');

    biomolOp.id.forEach(function (id, i) {
      var m = new Matrix4();
      var elms = m.elements;

      elms[ 0 ] = parseFloat(biomolOp[ 'matrix[1][1]' ][ i ]);
      elms[ 1 ] = parseFloat(biomolOp[ 'matrix[1][2]' ][ i ]);
      elms[ 2 ] = parseFloat(biomolOp[ 'matrix[1][3]' ][ i ]);

      elms[ 4 ] = parseFloat(biomolOp[ 'matrix[2][1]' ][ i ]);
      elms[ 5 ] = parseFloat(biomolOp[ 'matrix[2][2]' ][ i ]);
      elms[ 6 ] = parseFloat(biomolOp[ 'matrix[2][3]' ][ i ]);

      elms[ 8 ] = parseFloat(biomolOp[ 'matrix[3][1]' ][ i ]);
      elms[ 9 ] = parseFloat(biomolOp[ 'matrix[3][2]' ][ i ]);
      elms[ 10 ] = parseFloat(biomolOp[ 'matrix[3][3]' ][ i ]);

      elms[ 3 ] = parseFloat(biomolOp[ 'vector[1]' ][ i ]);
      elms[ 7 ] = parseFloat(biomolOp[ 'vector[2]' ][ i ]);
      elms[ 11 ] = parseFloat(biomolOp[ 'vector[3]' ][ i ]);

      m.transpose();

      operDict[ id ] = m;
    });
  }

  if (cif.pdbx_struct_assembly_gen) {
    var gen = cif.pdbx_struct_assembly_gen;
    ensureArray(gen, 'assembly_id');

    var getMatrixDict = function (expr) {
      var matDict = {};

      var l = expr.replace(/[()']/g, '').split(',');

      l.forEach(function (e) {
        if (e.includes('-')) {
          var es = e.split('-');

          var j = parseInt(es[ 0 ]);
          var m = parseInt(es[ 1 ]);

          for (; j <= m; ++j) {
            matDict[ j ] = operDict[ j ];
          }
        } else {
          matDict[ e ] = operDict[ e ];
        }
      });

      return matDict
    };

    gen.assembly_id.forEach(function (id, i) {
      var md = {};
      var oe = gen.oper_expression[ i ].replace(/['"]\(|['"]/g, '');

      if (oe.includes(')(') || oe.indexOf('(') > 0) {
        oe = oe.split('(');

        var md1 = getMatrixDict(oe[ 0 ]);
        var md2 = getMatrixDict(oe[ 1 ]);

        Object.keys(md1).forEach(function (k1) {
          Object.keys(md2).forEach(function (k2) {
            var mat = new Matrix4();

            mat.multiplyMatrices(md1[ k1 ], md2[ k2 ]);
            md[ k1 + 'x' + k2 ] = mat;
          });
        });
      } else {
        md = getMatrixDict(oe);
      }

      var matrixList = [];
      for (var k in md) {
        matrixList.push(md[ k ]);
      }

      var name = id;
      if (/^(0|[1-9][0-9]*)$/.test(name)) { name = 'BU' + name; }

      var chainList = gen.asym_id_list[ i ].split(',');
      for (var j = 0, jl = chainList.length; j < jl; ++j) {
        chainList[ j ] = asymIdDict[ chainList[ j ] ];
      }

      if (biomolDict[ name ] === undefined) {
        biomolDict[ name ] = new Assembly(name);
      }
      biomolDict[ name ].addPart(matrixList, chainList);
    });
  }

  // non-crystallographic symmetry operations
  if (cif.struct_ncs_oper) {
    var ncsOp = cif.struct_ncs_oper;
    ensureArray(ncsOp, 'id');

    var ncsName = 'NCS';
    biomolDict[ ncsName ] = new Assembly(ncsName);
    var ncsPart = biomolDict[ ncsName ].addPart();

    ncsOp.id.forEach(function (id, i) {
      // ignore 'given' operators
      if (ncsOp.code[ i ] === 'given') { return }

      var m = new Matrix4();
      var elms = m.elements;

      elms[ 0 ] = parseFloat(ncsOp[ 'matrix[1][1]' ][ i ]);
      elms[ 1 ] = parseFloat(ncsOp[ 'matrix[1][2]' ][ i ]);
      elms[ 2 ] = parseFloat(ncsOp[ 'matrix[1][3]' ][ i ]);

      elms[ 4 ] = parseFloat(ncsOp[ 'matrix[2][1]' ][ i ]);
      elms[ 5 ] = parseFloat(ncsOp[ 'matrix[2][2]' ][ i ]);
      elms[ 6 ] = parseFloat(ncsOp[ 'matrix[2][3]' ][ i ]);

      elms[ 8 ] = parseFloat(ncsOp[ 'matrix[3][1]' ][ i ]);
      elms[ 9 ] = parseFloat(ncsOp[ 'matrix[3][2]' ][ i ]);
      elms[ 10 ] = parseFloat(ncsOp[ 'matrix[3][3]' ][ i ]);

      elms[ 3 ] = parseFloat(ncsOp[ 'vector[1]' ][ i ]);
      elms[ 7 ] = parseFloat(ncsOp[ 'vector[2]' ][ i ]);
      elms[ 11 ] = parseFloat(ncsOp[ 'vector[3]' ][ i ]);

      m.transpose();

      ncsPart.matrixList.push(m);
    });

    if (ncsPart.matrixList.length === 0) {
      delete biomolDict[ ncsName ];
    }
  }

  // cell & symmetry
  var unitcellDict = {};

  if (cif.cell) {
    var cell = cif.cell;

    var a = parseFloat(cell.length_a);
    var b = parseFloat(cell.length_b);
    var c = parseFloat(cell.length_c);

    var box = new Float32Array(9);
    box[ 0 ] = a;
    box[ 4 ] = b;
    box[ 8 ] = c;
    structure.boxes.push(box);

    unitcellDict.a = a;
    unitcellDict.b = b;
    unitcellDict.c = c;
    unitcellDict.alpha = parseFloat(cell.angle_alpha);
    unitcellDict.beta = parseFloat(cell.angle_beta);
    unitcellDict.gamma = parseFloat(cell.angle_gamma);
  }

  if (cif.symmetry) {
    unitcellDict.spacegroup = trimQuotes(
            cif.symmetry[ 'space_group_name_H-M' ]
        );
  }

  // origx
  var origx = new Matrix4();

  if (cif.database_PDB_matrix) {
    var origxMat = cif.database_PDB_matrix;
    var origxElms = origx.elements;

    origxElms[ 0 ] = parseFloat(origxMat[ 'origx[1][1]' ]);
    origxElms[ 1 ] = parseFloat(origxMat[ 'origx[1][2]' ]);
    origxElms[ 2 ] = parseFloat(origxMat[ 'origx[1][3]' ]);

    origxElms[ 4 ] = parseFloat(origxMat[ 'origx[2][1]' ]);
    origxElms[ 5 ] = parseFloat(origxMat[ 'origx[2][2]' ]);
    origxElms[ 6 ] = parseFloat(origxMat[ 'origx[2][3]' ]);

    origxElms[ 8 ] = parseFloat(origxMat[ 'origx[3][1]' ]);
    origxElms[ 9 ] = parseFloat(origxMat[ 'origx[3][2]' ]);
    origxElms[ 10 ] = parseFloat(origxMat[ 'origx[3][3]' ]);

    origxElms[ 3 ] = parseFloat(origxMat[ 'origx_vector[1]' ]);
    origxElms[ 7 ] = parseFloat(origxMat[ 'origx_vector[2]' ]);
    origxElms[ 11 ] = parseFloat(origxMat[ 'origx_vector[3]' ]);

    origx.transpose();

    unitcellDict.origx = origx;
  }

  // scale
  var scale = new Matrix4();

  if (cif.atom_sites) {
    var scaleMat = cif.atom_sites;
    var scaleElms = scale.elements;

    scaleElms[ 0 ] = parseFloat(scaleMat[ 'fract_transf_matrix[1][1]' ]);
    scaleElms[ 1 ] = parseFloat(scaleMat[ 'fract_transf_matrix[1][2]' ]);
    scaleElms[ 2 ] = parseFloat(scaleMat[ 'fract_transf_matrix[1][3]' ]);

    scaleElms[ 4 ] = parseFloat(scaleMat[ 'fract_transf_matrix[2][1]' ]);
    scaleElms[ 5 ] = parseFloat(scaleMat[ 'fract_transf_matrix[2][2]' ]);
    scaleElms[ 6 ] = parseFloat(scaleMat[ 'fract_transf_matrix[2][3]' ]);

    scaleElms[ 8 ] = parseFloat(scaleMat[ 'fract_transf_matrix[3][1]' ]);
    scaleElms[ 9 ] = parseFloat(scaleMat[ 'fract_transf_matrix[3][2]' ]);
    scaleElms[ 10 ] = parseFloat(scaleMat[ 'fract_transf_matrix[3][3]' ]);

    scaleElms[ 3 ] = parseFloat(scaleMat[ 'fract_transf_vector[1]' ]);
    scaleElms[ 7 ] = parseFloat(scaleMat[ 'fract_transf_vector[2]' ]);
    scaleElms[ 11 ] = parseFloat(scaleMat[ 'fract_transf_vector[3]' ]);

    scale.transpose();

    unitcellDict.scale = scale;
  }

  if (unitcellDict.a !== undefined) {
    structure.unitcell = new Unitcell(unitcellDict);
  } else {
    structure.unitcell = undefined;
  }
}

function processConnections (cif, structure, asymIdDict) {
  // add connections
  var sc = cif.struct_conn;

  if (sc) {
    ensureArray(sc, 'id');

    var reDoubleQuote = /"/g;
    var ap1 = structure.getAtomProxy();
    var ap2 = structure.getAtomProxy();
    var atomIndicesCache = {};

    for (var i = 0, il = sc.id.length; i < il; ++i) {
      // ignore:
      // hydrog - hydrogen bond
      // mismat - mismatched base pairs
      // saltbr - ionic interaction

      var connTypeId = sc.conn_type_id[ i ];
      if (connTypeId === 'hydrog' ||
          connTypeId === 'mismat' ||
          connTypeId === 'saltbr') { continue }

      // ignore bonds between symmetry mates
      if (sc.ptnr1_symmetry[ i ] !== '1_555' ||
          sc.ptnr2_symmetry[ i ] !== '1_555') { continue }

      // process:
      // covale - covalent bond
      // covale_base -
      //      covalent modification of a nucleotide base
      // covale_phosphate -
      //      covalent modification of a nucleotide phosphate
      // covale_sugar -
      //      covalent modification of a nucleotide sugar
      // disulf - disulfide bridge
      // metalc - metal coordination
      // modres - covalent residue modification

      var inscode1 = sc.pdbx_ptnr1_PDB_ins_code[ i ];
      var altloc1 = sc.pdbx_ptnr1_label_alt_id[ i ];
      var sele1 = (
        sc.ptnr1_auth_seq_id[ i ] +
        (hasValue(inscode1) ? ('^' + inscode1) : '') +
        ':' + asymIdDict[ sc.ptnr1_label_asym_id[ i ] ] +
        '.' + sc.ptnr1_label_atom_id[ i ].replace(reDoubleQuote, '') +
        (hasValue(altloc1) ? ('%' + altloc1) : '')
      );
      var atomIndices1 = atomIndicesCache[ sele1 ];
      if (!atomIndices1) {
        var selection1 = new Selection(sele1);
        if (selection1.selection.error) {
          if (Debug) { Log.warn('invalid selection for connection', sele1); }
          continue
        }
        atomIndices1 = structure.getAtomIndices(selection1);
        atomIndicesCache[ sele1 ] = atomIndices1;
      }

      var inscode2 = sc.pdbx_ptnr2_PDB_ins_code[ i ];
      var altloc2 = sc.pdbx_ptnr2_label_alt_id[ i ];
      var sele2 = (
        sc.ptnr2_auth_seq_id[ i ] +
        (hasValue(inscode2) ? ('^' + inscode2) : '') +
        ':' + asymIdDict[ sc.ptnr2_label_asym_id[ i ] ] +
        '.' + sc.ptnr2_label_atom_id[ i ].replace(reDoubleQuote, '') +
        (hasValue(altloc2) ? ('%' + altloc2) : '')
      );
      var atomIndices2 = atomIndicesCache[ sele2 ];
      if (!atomIndices2) {
        var selection2 = new Selection(sele2);
        if (selection2.selection.error) {
          if (Debug) { Log.warn('invalid selection for connection', sele2); }
          continue
        }
        atomIndices2 = structure.getAtomIndices(selection2);
        atomIndicesCache[ sele2 ] = atomIndices2;
      }

      // cases with more than one atom per selection
      // - #altloc1 to #altloc2
      // - #model to #model
      // - #altloc1 * #model to #altloc2 * #model

      var k = atomIndices1.length;
      var l = atomIndices2.length;

      if (k > l) {
        var tmpA = k;
        k = l;
        l = tmpA;
        var tmpB = atomIndices1;
        atomIndices1 = atomIndices2;
        atomIndices2 = tmpB;
      }

      // console.log( k, l );

      if (k === 0 || l === 0) {
        if (Debug) { Log.warn('no atoms found for', sele1, sele2); }
        continue
      }

      for (var j = 0; j < l; ++j) {
        ap1.index = atomIndices1[ j % k ];
        ap2.index = atomIndices2[ j ];

        if (ap1 && ap2) {
          structure.bondStore.addBond(
            ap1, ap2, getBondOrder(sc.pdbx_value_order[ i ])
          );
        } else {
          Log.log('atoms for connection not found');
        }
      }
    }
  }
}

function processEntities (cif, structure, chainIndexDict) {
  if (cif.entity) {
    ensureArray(cif.entity, 'id');
    var e = cif.entity;
    var n = e.id.length;
    for (var i = 0; i < n; ++i) {
      var description = e.pdbx_description[ i ];
      var type = e.type[ i ];
      var chainIndexList = Array.from(chainIndexDict[ e.id[ i ] ]);
      structure.entityList[ i ] = new Entity(
        structure, i, description, type, chainIndexList
      );
    }
  }
}

//

var CifParser = (function (StructureParser$$1) {
  function CifParser () {
    StructureParser$$1.apply(this, arguments);
  }

  if ( StructureParser$$1 ) CifParser.__proto__ = StructureParser$$1;
  CifParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
  CifParser.prototype.constructor = CifParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'cif' };

  CifParser.prototype._parse = function _parse () {
    // http://mmcif.wwpdb.org/

    Log.time('CifParser._parse ' + this.name);

    var s = this.structure;
    var sb = this.structureBuilder;

    var firstModelOnly = this.firstModelOnly;
    var asTrajectory = this.asTrajectory;
    var cAlphaOnly = this.cAlphaOnly;

    var frames = s.frames;
    var currentFrame, currentCoord;

    var rawline, line;

        //

    var cif = {};
    var asymIdDict = {};
    var chainIndexDict = {};

    var pendingString = false;
    var currentString = null;
    var pendingValue = false;
    var pendingLoop = false;
    var pendingName = false;
    var loopPointers = [];
    var currentLoopIndex = null;
    var currentCategory = null;
    var currentName = null;
    var first = null;
    var pointerNames = [];

    var authAsymId, authSeqId,
      labelAtomId, labelCompId, labelAsymId, labelEntityId, labelAltId,
      groupPDB, id, typeSymbol, pdbxPDBmodelNum, pdbxPDBinsCode,
      CartnX, CartnY, CartnZ, bIsoOrEquiv, occupancy;

    //

    var atomMap = s.atomMap;
    var atomStore = s.atomStore;
    atomStore.resize(this.streamer.data.length / 100);

    var idx = 0;
    var modelIdx = 0;
    var modelNum;

    function _parseChunkOfLines (_i, _n, lines) {
      for (var i = _i; i < _n; ++i) {
        rawline = lines[i];
        line = rawline.trim();

        if ((!line && !pendingString && !pendingLoop) || line[0] === '#') {
          // Log.log( "NEW BLOCK" );

          pendingString = false;
          pendingLoop = false;
          pendingValue = false;
          loopPointers.length = 0;
          currentLoopIndex = null;
          currentCategory = null;
          currentName = null;
          first = null;
          pointerNames.length = 0;
        } else if (line.substring(0, 5) === 'data_') {
          cif.data = line.substring(5).trim();

          // Log.log( "DATA", data );
        } else if (line[0] === ';') {
          if (pendingString) {
            // Log.log( "STRING END", currentString );

            if (pendingLoop) {
              if (currentLoopIndex === loopPointers.length) {
                currentLoopIndex = 0;
              }
              loopPointers[ currentLoopIndex ].push(currentString);
              currentLoopIndex += 1;
            } else {
              if (currentName === false) {
                cif[ currentCategory ] = currentString;
              } else {
                cif[ currentCategory ][ currentName ] = currentString;
              }
            }

            pendingString = false;
            currentString = null;
          } else {
            // Log.log( "STRING START" );

            pendingString = true;
            currentString = line.substring(1);
          }
        } else if (line === 'loop_') {
          // Log.log( "LOOP START" );

          pendingLoop = true;
          pendingName = true;
          loopPointers.length = 0;
          pointerNames.length = 0;
          currentLoopIndex = 0;
        } else if (line[0] === '_') {
          var keyParts, category, name;

          if (pendingLoop && !pendingName) {
            pendingLoop = false;
          }

          if (pendingLoop) {
            // Log.log( "LOOP KEY", line );

            keyParts = line.split('.');
            category = keyParts[ 0 ].substring(1);
            name = keyParts[ 1 ];

            if (keyParts.length === 1) {
              name = false;
              if (!cif[ category ]) { cif[ category ] = []; }
              loopPointers.push(cif[ category ]);
            } else {
              if (!cif[ category ]) { cif[ category ] = {}; }
              if (cif[ category ][ name ]) {
                if (Debug) { Log.warn(category, name, 'already exists'); }
              } else {
                cif[ category ][ name ] = [];
                loopPointers.push(cif[ category ][ name ]);
                pointerNames.push(name);
              }
            }

            currentCategory = category;
            currentName = name;
            first = true;
          } else {
            var keyValuePair = line.match(reQuotedWhitespace);
            var key = keyValuePair[ 0 ];
            var value = keyValuePair[ 1 ];
            keyParts = key.split('.');
            category = keyParts[ 0 ].substring(1);
            name = keyParts[ 1 ];

            if (keyParts.length === 1) {
              name = false;
              cif[ category ] = value;
            } else {
              if (!cif[ category ]) { cif[ category ] = {}; }

              if (cif[ category ][ name ]) {
                if (Debug) { Log.warn(category, name, 'already exists'); }
              } else {
                cif[ category ][ name ] = value;
              }
            }

            if (!value) { pendingValue = true; }

            currentCategory = category;
            currentName = name;
          }
        } else {
          if (pendingString) {
            // Log.log( "STRING VALUE", line );

            currentString += rawline;
          } else if (pendingLoop) {
            // Log.log( "LOOP VALUE", line );

            if (!line) {
              continue
            } else if (currentCategory === 'atom_site') {
              var ls = line.split(reWhitespace);

              if (first) {
                authAsymId = pointerNames.indexOf('auth_asym_id');
                authSeqId = pointerNames.indexOf('auth_seq_id');
                labelAtomId = pointerNames.indexOf('label_atom_id');
                labelCompId = pointerNames.indexOf('label_comp_id');
                labelAsymId = pointerNames.indexOf('label_asym_id');
                labelEntityId = pointerNames.indexOf('label_entity_id');
                labelAltId = pointerNames.indexOf('label_alt_id');
                CartnX = pointerNames.indexOf('Cartn_x');
                CartnY = pointerNames.indexOf('Cartn_y');
                CartnZ = pointerNames.indexOf('Cartn_z');
                id = pointerNames.indexOf('id');
                typeSymbol = pointerNames.indexOf('type_symbol');
                groupPDB = pointerNames.indexOf('group_PDB');
                bIsoOrEquiv = pointerNames.indexOf('B_iso_or_equiv');
                pdbxPDBmodelNum = pointerNames.indexOf('pdbx_PDB_model_num');

                pdbxPDBinsCode = pointerNames.indexOf('pdbx_PDB_ins_code');
                occupancy = pointerNames.indexOf('occupancy');

                first = false;

                modelNum = parseInt(ls[ pdbxPDBmodelNum ]);

                if (asTrajectory) {
                  currentFrame = [];
                  currentCoord = 0;
                }
              }

              //

              var _modelNum = parseInt(ls[ pdbxPDBmodelNum ]);

              if (modelNum !== _modelNum) {
                if (asTrajectory) {
                  if (modelIdx === 0) {
                    frames.push(new Float32Array(currentFrame));
                  }

                  currentFrame = new Float32Array(atomStore.count * 3);
                  frames.push(currentFrame);
                  currentCoord = 0;
                }

                modelIdx += 1;
              }

              modelNum = _modelNum;

              if (firstModelOnly && modelIdx > 0) { continue }

              //

              var atomname = ls[ labelAtomId ].replace(reDoubleQuote, '');
              if (cAlphaOnly && atomname !== 'CA') { continue }

              var x = parseFloat(ls[ CartnX ]);
              var y = parseFloat(ls[ CartnY ]);
              var z = parseFloat(ls[ CartnZ ]);

              if (asTrajectory) {
                var frameOffset = currentCoord * 3;

                currentFrame[ frameOffset + 0 ] = x;
                currentFrame[ frameOffset + 1 ] = y;
                currentFrame[ frameOffset + 2 ] = z;

                currentCoord += 1;

                if (modelIdx > 0) { continue }
              }

              //

              var resname = ls[ labelCompId ];
              var resno = parseInt(ls[ authSeqId ]);
              var inscode = ls[ pdbxPDBinsCode ];
              inscode = (inscode === '?') ? '' : inscode;
              var chainname = ls[ authAsymId ];
              var chainid = ls[ labelAsymId ];
              var hetero = (ls[ groupPDB ][ 0 ] === 'H') ? 1 : 0;

              //

              var element = ls[ typeSymbol ];
              var bfactor = parseFloat(ls[ bIsoOrEquiv ]);
              var occ = parseFloat(ls[ occupancy ]);
              var altloc = ls[ labelAltId ];
              altloc = (altloc === '.') ? '' : altloc;

              atomStore.growIfFull();
              atomStore.atomTypeId[ idx ] = atomMap.add(atomname, element);

              atomStore.x[ idx ] = x;
              atomStore.y[ idx ] = y;
              atomStore.z[ idx ] = z;
              atomStore.serial[ idx ] = parseInt(ls[ id ]);
              atomStore.bfactor[ idx ] = isNaN(bfactor) ? 0 : bfactor;
              atomStore.occupancy[ idx ] = isNaN(occ) ? 0 : occ;
              atomStore.altloc[ idx ] = altloc.charCodeAt(0);

              sb.addAtom(modelIdx, chainname, chainid, resname, resno, hetero, undefined, inscode);

              if (Debug) {
                // check if one-to-many (chainname-asymId) relationship is
                // actually a many-to-many mapping
                var assignedChainname = asymIdDict[ chainid ];
                if (assignedChainname !== undefined && assignedChainname !== chainname) {
                  if (Debug) { Log.warn(assignedChainname, chainname); }
                }
              }
              // chainname mapping: label_asym_id -> auth_asym_id
              asymIdDict[ chainid ] = chainname;

              // entity mapping: chainIndex -> label_entity_id
              var entityId = ls[ labelEntityId ];
              if (!chainIndexDict[ entityId ]) {
                chainIndexDict[ entityId ] = new Set();
              }
              chainIndexDict[ entityId ].add(s.chainStore.count - 1);

              idx += 1;
            } else {
              var ls$1 = line.match(reQuotedWhitespace);
              var nn = ls$1.length;

              if (currentLoopIndex === loopPointers.length) {
                currentLoopIndex = 0;
              }/* else if( currentLoopIndex + nn > loopPointers.length ){
                Log.warn( "cif parsing error, wrong number of loop data entries", nn, loopPointers.length );
              } */

              for (var j = 0; j < nn; ++j) {
                loopPointers[ currentLoopIndex + j ].push(ls$1[ j ]);
              }

              currentLoopIndex += nn;
            }

            pendingName = false;
          } else if (line[0] === "'" && line[line.length - 1] === "'") {
            // Log.log( "NEWLINE STRING", line );

            var str = line.substring(1, line.length - 1);

            if (currentName === false) {
              cif[ currentCategory ] = str;
            } else {
              cif[ currentCategory ][ currentName ] = str;
            }
          } else if (pendingValue) {
            // Log.log( "NEWLINE VALUE", line );

            if (currentName === false) {
              cif[ currentCategory ] = line;
            } else {
              cif[ currentCategory ][ currentName ] = line;
            }
          } else {
            if (Debug) { Log.log('CifParser._parse: unknown state', line); }
          }
        }
      }
    }

    this.streamer.eachChunkOfLines(function (lines/*, chunkNo, chunkCount */) {
      _parseChunkOfLines(0, lines.length, lines);
    });

    if (cif.chem_comp && cif.chem_comp_atom) {
      parseChemComp(cif, s, sb);
      sb.finalize();
      s.finalizeAtoms();
      s.finalizeBonds();
      assignResidueTypeBonds(s);
    } else if (cif.atom_site_type_symbol && cif.atom_site_label && cif.atom_site_fract_x) {
      parseCore(cif, s, sb);
      sb.finalize();
      s.finalizeAtoms();
      calculateBonds(s);
      s.finalizeBonds();
      // assignResidueTypeBonds( s );
    } else {
      var secStruct = processSecondaryStructure(cif, s, asymIdDict);
      processSymmetry(cif, s, asymIdDict);
      processConnections(cif, s, asymIdDict);
      processEntities(cif, s, chainIndexDict);

      if (cif.struct && cif.struct.title) {
        s.title = cif.struct.title.trim().replace(reTrimQuotes, '');
      }
      if (cif.entry && cif.entry.id) {
        s.id = cif.entry.id.trim().replace(reTrimQuotes, '');
      }

      // structure header (mimicking biojava)
      if (cif.database_PDB_rev) {
        if (cif.database_PDB_rev.date) {
          ensureArray(cif.database_PDB_rev, 'date');
          var dates = cif.database_PDB_rev.date.filter(hasValue);
          if (dates.length) {
            s.header.releaseDate = dates[ dates.length - 1 ];
          }
        }
        if (cif.database_PDB_rev.date_original) {
          ensureArray(cif.database_PDB_rev, 'date_original');
          var depDates = cif.database_PDB_rev.date_original.filter(hasValue);
          if (depDates.length) {
            s.header.depositionDate = depDates[ depDates.length - 1 ];
          }
        }
      }
      if (cif.reflns && cif.reflns.d_resolution_high) {
        if (hasValue(cif.reflns.d_resolution_high)) {
          s.header.resolution = parseFloat(cif.reflns.d_resolution_high);
        }
      } else if (cif.refine && cif.refine.ls_d_res_high) {
        if (hasValue(cif.refine.ls_d_res_high)) {
          s.header.resolution = parseFloat(cif.refine.ls_d_res_high);
        }
      }
      if (cif.refine && cif.refine.ls_R_factor_R_free) {
        if (hasValue(cif.refine.ls_R_factor_R_free)) {
          s.header.rFree = parseFloat(cif.refine.ls_R_factor_R_free);
        }
      }
      if (cif.refine && cif.refine.ls_R_factor_R_work) {
        if (hasValue(cif.refine.ls_R_factor_R_work)) {
          s.header.rWork = parseFloat(cif.refine.ls_R_factor_R_work);
        }
      }
      if (cif.exptl && cif.exptl.method) {
        ensureArray(cif.exptl, 'method');
        s.header.experimentalMethods = cif.exptl.method.map(function (m) {
          return m.replace(reTrimQuotes, '')
        });
      }

      sb.finalize();
      s.finalizeAtoms();
      calculateBonds(s);
      s.finalizeBonds();

      if (!secStruct) {
        calculateSecondaryStructure(s);
      } else {
        assignSecondaryStructure(s, secStruct);
      }
      buildUnitcellAssembly(s);

      s.extraData.cif = cif;
    }

    if (Debug) { Log.timeEnd('CifParser._parse ' + this.name); }
  };

  Object.defineProperties( CifParser.prototype, prototypeAccessors );

  return CifParser;
}(StructureParser));

ParserRegistry.add('cif', CifParser);
ParserRegistry.add('mcif', CifParser);
ParserRegistry.add('mmcif', CifParser);

/**
 * @file Gro Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var GroParser = (function (StructureParser$$1) {
  function GroParser () {
    StructureParser$$1.apply(this, arguments);
  }

  if ( StructureParser$$1 ) GroParser.__proto__ = StructureParser$$1;
  GroParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
  GroParser.prototype.constructor = GroParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'gro' };

  GroParser.prototype._parse = function _parse () {
        // http://manual.gromacs.org/current/online/gro.html

    if (Debug) { Log.time('GroParser._parse ' + this.name); }

    var s = this.structure;
    var sb = this.structureBuilder;

    var firstModelOnly = this.firstModelOnly;
    var asTrajectory = this.asTrajectory;
    var cAlphaOnly = this.cAlphaOnly;

    var frames = s.frames;
    var boxes = s.boxes;
    var currentFrame, currentCoord;

    var firstLines = this.streamer.peekLines(3);

    s.title = firstLines[ 0 ].trim();

        // determine number of decimal places
    var ndec = firstLines[ 2 ].length - firstLines[ 2 ].lastIndexOf('.') - 1;
    var lpos = 5 + ndec;
    var xpos = 20;
    var ypos = 20 + lpos;
    var zpos = 20 + 2 * lpos;

        //

    var atomname, resname, resno, serial;

    var atomCount = parseInt(firstLines[ 1 ]);
    var modelLineCount = atomCount + 3;

    var atomMap = s.atomMap;
    var atomStore = s.atomStore;
    atomStore.resize(atomCount);

    var idx = 0;
    var modelIdx = 0;
    var lineNo = 0;

    function _parseChunkOfLines (_i, _n, lines) {
      for (var i = _i; i < _n; ++i) {
        ++lineNo;
        var l = lineNo - 1;

        var line = lines[ i ];

        if (!line) { continue }

        if (l % modelLineCount === 0) {
                    // Log.log( "title", line )

          if (asTrajectory) {
            currentFrame = new Float32Array(atomCount * 3);
            frames.push(currentFrame);
            currentCoord = 0;
          }
        } else if (l % modelLineCount === 1) {

                    // Log.log( "atomCount", line )

        } else if (l % modelLineCount === modelLineCount - 1) {
          var str = line.trim().split(/\s+/);
          var box = new Float32Array(9);
          box[ 0 ] = parseFloat(str[ 0 ]) * 10;
          box[ 4 ] = parseFloat(str[ 1 ]) * 10;
          box[ 8 ] = parseFloat(str[ 2 ]) * 10;
          boxes.push(box);

          if (firstModelOnly) {
            return true
          }

          modelIdx += 1;
        } else {
          atomname = line.substr(10, 5).trim();
          if (cAlphaOnly && atomname !== 'CA') { continue }

          var x = parseFloat(line.substr(xpos, lpos)) * 10;
          var y = parseFloat(line.substr(ypos, lpos)) * 10;
          var z = parseFloat(line.substr(zpos, lpos)) * 10;

          if (asTrajectory) {
            var j = currentCoord * 3;

            currentFrame[ j + 0 ] = x;
            currentFrame[ j + 1 ] = y;
            currentFrame[ j + 2 ] = z;

            currentCoord += 1;

            if (l > modelLineCount) { continue }
          }

          resname = line.substr(5, 5).trim();
          resno = parseInt(line.substr(0, 5));
          serial = parseInt(line.substr(15, 5));

          atomStore.growIfFull();
          atomStore.atomTypeId[ idx ] = atomMap.add(atomname);

          atomStore.x[ idx ] = x;
          atomStore.y[ idx ] = y;
          atomStore.z[ idx ] = z;
          atomStore.serial[ idx ] = serial;

          sb.addAtom(modelIdx, '', '', resname, resno, 0, 'l');

          idx += 1;
        }
      }
    }

    this.streamer.eachChunkOfLines(function (lines/*, chunkNo, chunkCount */) {
      _parseChunkOfLines(0, lines.length, lines);
    });

    sb.finalize();
    s.finalizeAtoms();
    calculateChainnames(s);
    calculateBonds(s);
    s.finalizeBonds();

    calculateSecondaryStructure(s);

    if (Debug) { Log.timeEnd('GroParser._parse ' + this.name); }
  };

  Object.defineProperties( GroParser.prototype, prototypeAccessors );

  return GroParser;
}(StructureParser));

ParserRegistry.add('gro', GroParser);

/**
 * @file utf8-utils
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * mostly copied from https://github.com/creationix/msgpack-js-browser
 * by Tim Caswell <tim@creationix.com>, MIT License, Copyright (c) 2013
 */


// Encode string as utf8 into dataview at offset
/**
 * @file mmtf-constants
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */


var PassThroughFields = [
    "mmtfVersion", "mmtfProducer",
    "unitCell", "spaceGroup", "structureId", "title",
    "depositionDate", "releaseDate",
    "experimentalMethods", "resolution", "rFree", "rWork",
    "bioAssemblyList", "ncsOperatorList", "entityList", "groupList",
    "numBonds", "numAtoms", "numGroups", "numChains", "numModels",
    "groupsPerChain", "chainsPerModel" ];

var EncodedFields = [
	// required
    "xCoordList", "yCoordList", "zCoordList",
    "groupIdList", "groupTypeList",
    "chainIdList",
    // optional
    "bFactorList", "atomIdList", "altLocList", "occupancyList",
    "secStructList", "insCodeList", "sequenceIndexList",
    "chainNameList",
    "bondAtomList", "bondOrderList"
];

var AllFields = PassThroughFields.concat( EncodedFields );

/**
 * @file mmtf-utils
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */

/**
 * mmtf utils module.
 * @module MmtfUtils
 */


function getView( ctor, typedArray, elemSize ){
    return typedArray ? new ctor(
        typedArray.buffer,
        typedArray.byteOffset,
        typedArray.byteLength / ( elemSize || 1 )
    ) : undefined;
}

function getDataView( typedArray ){
    return getView( DataView, typedArray );
}

/**
 * get an Uint8Array view on the input array memory
 * @static
 * @param  {TypedArray} dataArray - input array
 * @return {Uint8Array} new view on the input array memory
 */
function getUint8View( typedArray ){
    return getView( Uint8Array, typedArray );
}

/**
 * get an Int8Array view on the input array memory
 * @static
 * @param  {TypedArray} dataArray - input array
 * @return {Int8Array} new view on the input array memory
 */
function getInt8View( typedArray ){
    return getView( Int8Array, typedArray );
}

/**
 * get an Int32Array view on the input array memory
 * @static
 * @param  {TypedArray} dataArray - input array
 * @return {Int32Array} new view on the input array memory
 */
function getInt32View( typedArray ){
    return getView( Int32Array, typedArray, 4 );
}

function getFloat32View( typedArray ){
    return getView( Float32Array, typedArray, 4 );
}


/**
 * get an Int16Array copy of the the input array data
 * @static
 * @param  {TypedArray} view - input data in big endian format
 * @param  {Int16Array} [dataArray] - pre-allocated output array
 * @return {Int16Array} copy of the input array data
 */
function decodeInt16( bytes, output ){
    var n = bytes.length / 2;
    if( !output ) { output = new Int16Array( n ); }
    for( var i = 0, i2 = 0; i < n; ++i, i2 += 2 ){
        output[ i ] = bytes[ i2 ] << 8 ^ bytes[ i2 + 1 ] << 0;
    }
    return output;
}

/**
 * get an Int32Array copy of the the input array data
 * @static
 * @param  {TypedArray} view - input data in big endian format
 * @param  {Int32Array} [dataArray] - pre-allocated output array
 * @return {Int32Array} copy of the input array data
 */
function decodeInt32( bytes, output ){
    var n = bytes.length / 4;
    if( !output ) { output = new Int32Array( n ); }
    for( var i = 0, i4 = 0; i < n; ++i, i4 += 4 ){
        output[ i ] = (
            bytes[ i4     ] << 24 ^ bytes[ i4 + 1 ] << 16 ^
            bytes[ i4 + 2 ] <<  8 ^ bytes[ i4 + 3 ] <<  0
        );
    }
    return output;
}

function decodeFloat32( bytes, output ){
    var n = bytes.length;
    if( !output ) { output = new Float32Array( n / 4 ); }
    var dvOut = getDataView( output );
    var dvIn = getDataView( bytes );
    for( var i = 0, i4 = 0, il = n / 4; i < il; ++i, i4 += 4 ){
        dvOut.setFloat32( i4, dvIn.getFloat32( i4 ), true );
    }
    return output;
}

/**
 * decode integers into floats using given divisor
 * example:
 *     intArray: [ 12, 34, 543, 687, 2, 0, 4689 ]
 *     divisor: 100
 *     return: [ 0.12, 0.34, 5.43, 6.87, 0.02, 0.00, 46.89 ]
 * @static
 * @param  {TypedArray|Array} intArray - input array containing integers
 * @param  {Number} divisor - number to devide the integers to obtain floats
 * @param  {Float32Array} [dataArray] - pre-allocated output array
 * @return {Float32Array} decoded array
 */
function decodeInteger( intArray, divisor, output ){
    var n = intArray.length;
    var invDiv = 1/divisor;
    if( !output ) { output = new Float32Array( n ); }
    for( var i = 0; i < n; ++i ){
        // multiply by inverse of the divisor which is faster then division
        output[ i ] = intArray[ i ] * invDiv;
    }
    return output;
}

/**
 * perform run-length decoding of input array
 * example:
 *     array: [ 0, 2, 3, 5 ]  // pairs of values and length of a run
 *     return: [ 0, 0, 3, 3, 3, 3, 3 ]
 * @static
 * @param  {TypedArray|Array} array - run-length encoded input array
 * @param  {TypedArray|Array} [dataArray] - pre-allocated output array
 * @return {TypedArray|Array} decoded array
 */
function decodeRun( array, output ){
    var i, il;
    if( !output ){
        // calculate the length the decoded array will have
        var fullLength = 0;
        for( i = 0, il = array.length; i < il; i+=2 ){
            fullLength += array[ i + 1 ];
        }
        // create a new array of the same type of the input array
        output = new array.constructor( fullLength );
    }
    var dataOffset = 0;
    for( i = 0, il = array.length; i < il; i+=2 ){
        var value = array[ i ];  // value to be repeated
        var length = array[ i + 1 ];  // number of repeats
        for( var j = 0; j < length; ++j ){
            output[ dataOffset ] = value;
            ++dataOffset;
        }
    }
    return output;
}

/**
 * perform delta decoding of the input array
 * by iterativly adding the ith element's value to the i+1th
 * example:
 *     dataArray: [ 0, 2, 1, 2, 1, 1, -4, -2, 9 ]
 *     return: [ 0, 2, 3, 5, 6, 7, 3, 1, 10 ]
 * @static
 * @param  {TypedArray|Array} dataArray - delta encoded input array
 * @return {TypedArray|Array} decoded array
 */
function decodeDelta( array, output ){
    var n = array.length;
    if( !output ) { output = new array.constructor( n ); }
    if( n ) { output[ 0 ] = array[ 0 ]; }
    for( var i = 1; i < n; ++i ){
        output[ i ] = array[ i ] + output[ i - 1 ];
    }
    return output;
}

/**
 * [decodePacking description]
 * @param  {Int16Array|Int8Array} int16or8 [description]
 * @param  {Int32Array} output   [description]
 * @return {Int32Array}          [description]
 */
function decodePacking( int16or8, output ){
    var upperLimit = int16or8 instanceof Int8Array ? 0x7F : 0x7FFF;
    var lowerLimit = -upperLimit - 1;
    var n = int16or8.length;
    var i, j;
    if( !output ){
        var fullLength = 0;
        for( i = 0; i < n; ++i ){
            if( int16or8[ i ] < upperLimit && int16or8[ i ] > lowerLimit ){
                ++fullLength;
            }
        }
        output = new Int32Array( fullLength );
    }
    i = 0;
    j = 0;
    while( i < n ){
        var value = 0;
        while( int16or8[ i ] === upperLimit || int16or8[ i ] === lowerLimit ){
            value += int16or8[ i ];
            ++i;
        }
        value += int16or8[ i ];
        ++i;
        output[ j ] = value;
        ++j;
    }
    return output;
}

function decodeDeltaRun( array, output ){
    return decodeDelta( decodeRun( array ), output );
}

/**
 * perform run-length decoding followed (@see decodeRunLength)
 * by decoding integers into floats using given divisor (@see decodeIntegerToFloat)
 * example:
 *     array: [ 320, 3, 100, 2 ]
 *     divisor: 100
 *     return: [ 3.20, 3.20, 3.20, 1.00, 1.00 ]
 * @static
 * @param  {Uint8Array} array - run-length encoded int32 array as bytes in big endian format
 * @param  {Integer} divisor - number to devide the integers to obtain floats
 * @param  {Float32Array} dataArray - pre-allocated output array
 * @return {Float32Array} decoded array
 */
function decodeIntegerRun( intArray, divisor, output ){
    return decodeInteger(
        decodeRun( intArray, getInt32View( output ) ), divisor, output
    );
}

function decodeIntegerDelta( intArray, divisor, output ){
    return decodeInteger(
        decodeDelta( intArray, getInt32View( output ) ), divisor, output
    );
}

function decodeIntegerPacking( int16or8, divisor, output ){
    return decodeInteger(
        decodePacking( int16or8, getInt32View( output ) ), divisor, output
    );
}

function decodeIntegerDeltaPacking( int16or8, divisor, output ){
    var unpacked = decodePacking( int16or8, getInt32View( output ) );
    return decodeIntegerDelta( unpacked, divisor, getFloat32View( unpacked ) );
}

function decodeBytes( bytes ){
    var dv = getDataView( bytes );
    var type = dv.getInt32( 0 );
    var size = dv.getInt32( 4 );
    var param = bytes.subarray( 8, 12 );
    var bytes = bytes.subarray( 12 );
    return [ type, bytes, size, param ];
}

/**
 * @file msgpack-decode
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */

/**
 * msgpack decode module.
 * @module MsgpackDecode
 */

/**
 * decode binary encoded MessagePack v5 (http://msgpack.org/) data
 * @static
 * @param  {Uint8Array} buffer - binary encoded MessagePack data
 * @return {Object|Array|String|Number|Boolean|null} decoded Messagepack data
 */
function decodeMsgpack(buffer) {
  // Loosely based on
  // The MIT License (MIT)
  // Copyright (c) 2013 Tim Caswell <tim@creationix.com>
  // https://github.com/creationix/msgpack-js
  var offset = 0;
  var dataView = new DataView(buffer.buffer);

  /**
   * decode all key-value pairs of a map into an object
   * @param  {Integer} length - number of key-value pairs
   * @return {Object} decoded map
   */
  function map(length) {
    var value = {};
    for (var i = 0; i < length; i++) {
      var key = parse();
      value[key] = parse();
    }
    return value;
  }

  /**
   * decode binary array
   * @param  {Integer} length - number of elements in the array
   * @return {Uint8Array} decoded array
   */
  function bin(length) {
    var value = buffer.subarray(offset, offset + length);
    offset += length;
    return value;
  }

  /**
   * decode string
   * @param  {Integer} length - number string characters
   * @return {String} decoded string
   */
  function str(length) {
    var array = buffer.subarray(offset, offset + length);
    offset += length;
    // limit number of arguments to String.fromCharCode to something
    // browsers can handle, see http://stackoverflow.com/a/22747272
    var chunkSize = 0xffff;
    if(length > chunkSize){
      var c = [];
      for(var i = 0; i < array.length; i += chunkSize) {
        c.push(String.fromCharCode.apply(
          null, array.subarray(i, i + chunkSize)
        ));
      }
      return c.join("");
    }else{
      return String.fromCharCode.apply(null, array);
    }
  }

  /**
   * decode array
   * @param  {Integer} length - number of array elements
   * @return {Array} decoded array
   */
  function array(length) {
    var value = new Array(length);
    for (var i = 0; i < length; i++) {
      value[i] = parse();
    }
    return value;
  }

  /**
   * recursively parse the MessagePack data
   * @return {Object|Array|String|Number|Boolean|null} decoded MessagePack data
   */
  function parse() {
    var type = buffer[offset];
    var value, length, extType;
    // Positive FixInt
    if ((type & 0x80) === 0x00) {
      offset++;
      return type;
    }
    // FixMap
    if ((type & 0xf0) === 0x80) {
      length = type & 0x0f;
      offset++;
      return map(length);
    }
    // FixArray
    if ((type & 0xf0) === 0x90) {
      length = type & 0x0f;
      offset++;
      return array(length);
    }
    // FixStr
    if ((type & 0xe0) === 0xa0) {
      length = type & 0x1f;
      offset++;
      return str(length);
    }
    // Negative FixInt
    if ((type & 0xe0) === 0xe0) {
      value = dataView.getInt8(offset);
      offset++;
      return value;
    }
    switch (type) {
    // nil
    case 0xc0:
      offset++;
      return null;
    // 0xc1: (never used, could be employed for padding)
    // false
    case 0xc2:
      offset++;
      return false;
    // true
    case 0xc3:
      offset++;
      return true;
    // bin 8
    case 0xc4:
      length = dataView.getUint8(offset + 1);
      offset += 2;
      return bin(length);
    // bin 16
    case 0xc5:
      length = dataView.getUint16(offset + 1);
      offset += 3;
      return bin(length);
    // bin 32
    case 0xc6:
      length = dataView.getUint32(offset + 1);
      offset += 5;
      return bin(length);
    // // ext 8
    // case 0xc7:
    //   length = dataView.getUint8(offset + 1);
    //   extType = dataView.getUint8(offset + 2);
    //   offset += 3;
    //   return [extType, bin(length)];
    // // ext 16
    // case 0xc8:
    //   length = dataView.getUint16(offset + 1);
    //   extType = dataView.getUint8(offset + 3);
    //   offset += 4;
    //   return [extType, bin(length)];
    // // ext 32
    // case 0xc9:
    //   length = dataView.getUint32(offset + 1);
    //   extType = dataView.getUint8(offset + 5);
    //   offset += 6;
    //   return [extType, bin(length)];
    // float 32
    case 0xca:
      value = dataView.getFloat32(offset + 1);
      offset += 5;
      return value;
    // float 64
    case 0xcb:
      value = dataView.getFloat64(offset + 1);
      offset += 9;
      return value;
    // uint8
    case 0xcc:
      value = buffer[offset + 1];
      offset += 2;
      return value;
    // uint 16
    case 0xcd:
      value = dataView.getUint16(offset + 1);
      offset += 3;
      return value;
    // uint 32
    case 0xce:
      value = dataView.getUint32(offset + 1);
      offset += 5;
      return value;
    // // uint64
    // case 0xcf:
    //   // FIXME not available/representable in JS
    //   // largest possible int in JS is 2^53
    //   // value = dataView.getUint64(offset + 1);
    //   offset += 9;
    //   return 0;
    // int 8
    case 0xd0:
      value = dataView.getInt8(offset + 1);
      offset += 2;
      return value;
    // int 16
    case 0xd1:
      value = dataView.getInt16(offset + 1);
      offset += 3;
      return value;
    // int 32
    case 0xd2:
      value = dataView.getInt32(offset + 1);
      offset += 5;
      return value;
    // // int 64
    // case 0xd3:
    //   // FIXME not available/representable in JS
    //   // largest possible int in JS is 2^53
    //   // value = dataView.getInt64(offset + 1);
    //   offset += 9;
    //   return 0;

    // // fixext 1
    // case 0xd4:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(1)];
    // // fixext 2
    // case 0xd5:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(2)];
    // // fixext 4
    // case 0xd6:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(4)];
    // // fixext 8
    // case 0xd7:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(8)];
    // // fixext 16
    // case 0xd8:
    //   extType = dataView.getUint8(offset + 1);
    //   offset += 2;
    //   return [extType, bin(16)];
    // str 8
    case 0xd9:
      length = dataView.getUint8(offset + 1);
      offset += 2;
      return str(length);
    // str 16
    case 0xda:
      length = dataView.getUint16(offset + 1);
      offset += 3;
      return str(length);
    // str 32
    case 0xdb:
      length = dataView.getUint32(offset + 1);
      offset += 5;
      return str(length);
    // array 16
    case 0xdc:
      length = dataView.getUint16(offset + 1);
      offset += 3;
      return array(length);
    // array 32
    case 0xdd:
      length = dataView.getUint32(offset + 1);
      offset += 5;
      return array(length);
    // map 16:
    case 0xde:
      length = dataView.getUint16(offset + 1);
      offset += 3;
      return map(length);
    // map 32
    case 0xdf:
      length = dataView.getUint32(offset + 1);
      offset += 5;
      return map(length);
    }

    throw new Error("Unknown type 0x" + type.toString(16));
  }

  // start the recursive parsing
  return parse();
}

/**
 * Fields shared in encoded and decoded mmtf data objects.
 * @typedef {Object} module:MmtfDecode.SharedMmtfData
 * @property {String} mmtfVersion - MMTF specification version
 * @property {String} mmtfProducer - Program that created the file
 * @property {Float[]} [unitCell] - Crystallographic unit cell
 * @property {Float} unitCell.0 - x length
 * @property {Float} unitCell.1 - y length
 * @property {Float} unitCell.2 - z length
 * @property {Float} unitCell.3 - alpha angle
 * @property {Float} unitCell.4 - beta angle
 * @property {Float} unitCell.5 - gamma angle
 * @property {String} [spaceGroup] - Hermann-Mauguin symbol
 * @property {String} [structureId] - Some reference, e.g. a PDB ID
 * @property {String} [title] - Short description
 * @property {String} [depositionDate] - Deposition date in YYYY-MM-DD format
 * @property {String} [releaseDate] - Release date in YYYY-MM-DD format
 * @property {String[]} [experimentalMethods] - Structure determination methods
 * @property {Float} [resolution] - Resolution in Å
 * @property {Float} [rFree] - R-free value
 * @property {Float} [rWork] - R-work value
 * @property {Integer} numBonds - Number of bonds
 * @property {Integer} numAtoms - Number of atoms
 * @property {Integer} numGroups - Number of groups (residues)
 * @property {Integer} numChains - Number of chains
 * @property {Integer} numModels - Number of models
 * @property {Integer[]} chainsPerModel - List of number of chains in each model
 * @property {Integer[]} groupsPerChain - List of number of groups in each chain
 * @property {Entity[]} [entityList] - List of entity objects
 * @property {Integer[]} entityList.chainIndexList - Pointers into chain data fields
 * @property {String} entityList.description - Description of the entity
 * @property {String} entityList.type - Name of the entity type
 * @property {String} entityList.sequence - One letter code sequence
 * @property {Assembly[]} [bioAssemblyList] - List of assembly objects
 * @property {Transform[]} bioAssemblyList.transformList - List of transform objects
 * @property {Integer[]} bioAssemblyList.transformList.chainIndexList - Pointers into chain data fields
 * @property {Float[]} bioAssemblyList.transformList.matrix - 4x4 transformation matrix
 * @property {Array[]} [ncsOperatorList] - List of ncs operator matrices
 * @property {Float[]} ncsOperatorList. - 4x4 transformation matrix
 * @property {GroupType[]} groupList - List of groupType objects
 * @property {Integer[]} groupList.formalChargeList - List of atom formal charges
 * @property {String[]} groupList.elementList - List of elements
 * @property {String[]} groupList.atomNameList - List of atom names
 * @property {Integer[]} groupList.bondAtomList - List of bonded atom indices
 * @property {Integer[]} groupList.bondOrderList - List of bond orders
 * @property {String} groupList.groupName - The name of the group
 * @property {String} groupList.singleLetterCode - The single letter code
 * @property {String} groupList.chemCompType -  The chemical component type
 */

/**
 * Encoded mmtf data object. Also includes the fields from {@link module:MmtfDecode.SharedMmtfData}. See MMTF specification on how they are encoded.
 * @typedef {Object} module:MmtfDecode.EncodedMmtfData
 * @mixes module:MmtfDecode.SharedMmtfData
 * @property {Uint8Array} [bondAtomList] - Encoded bonded atom indices
 * @property {Uint8Array} [bondOrderList] - Encoded bond orders
 * @property {Uint8Array} xCoordBig - Encoded x coordinates in Å, part 1
 * @property {Uint8Array} xCoordSmall - Encoded x coordinates in Å, part 2
 * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
 * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
 * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
 * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
 * @property {Uint8Array} [bFactorBig] - Encoded B-factors in Å^2, part 1
 * @property {Uint8Array} [bFactorSmall] - Encoded B-factors in Å^2, part 2
 * @property {Uint8Array} [atomIdList] - Encoded  atom ids
 * @property {Uint8Array} [altLocList] - Encoded alternate location labels
 * @property {Uint8Array} [occupancyList] - Encoded occupancies
 * @property {Uint8Array} groupIdList - Encoded group ids
 * @property {Uint8Array} groupTypeList - Encoded group types
 * @property {Uint8Array} [secStructList] - Encoded secondary structure codes
 * @property {Uint8Array} [insCodeList] - Encoded insertion codes
 * @property {Uint8Array} [seuenceIdList] - Encoded sequence ids
 * @property {Uint8Array} chainIdList - Encoded chain ids
 * @property {Uint8Array} [chainNameList] - Encoded chain names
 */

/**
 * Decoded mmtf data object. Also includes fields the from {@link module:MmtfDecode.SharedMmtfData}.
 * @typedef {Object} module:MmtfDecode.MmtfData
 * @mixes module:MmtfDecode.SharedMmtfData
 * @property {Int32Array} [bondAtomList] - List of bonded atom indices
 * @property {Uint8Array} [bondOrderList] - List of bond orders
 * @property {Float32Array} xCoordList - List of x coordinates in Å
 * @property {Float32Array} yCoordList - List of y coordinates in Å
 * @property {Float32Array} zCoordList - List of z coordinates in Å
 * @property {Float32Array} [bFactorList] - List of B-factors in Å^2
 * @property {Int32Array} [atomIdList] - List of atom ids
 * @property {Uint8Array} [altLocList] - List of alternate location labels
 * @property {Float32Array} [occupancyList] - List of occupancies
 * @property {Int32Array} groupIdList - List of group ids
 * @property {Int32Array} groupTypeList - List of group types
 * @property {Int8Array} [secStructList] - List of secondary structure codes, encoding
 *    0: pi helix, 1: bend, 2: alpha helix, 3: extended,
 *    4: 3-10 helix, 5: bridge, 6: turn, 7: coil, -1: undefined
 * @property {Uint8Array} [insCodeList] - List of insertion codes
 * @property {Int32Array} [seuenceIdList] - List of sequence ids
 * @property {Uint8Array} chainIdList - List of chain ids
 * @property {Uint8Array} [chainNameList] - List of chain names
 */


/**
 * [performDecoding description]
 * @param  {Integer} bytes [description]
 * @param  {Integer} size  [description]
 * @param  {Uint8Array} param [description]
 * @return {TypedArray}       [description]
 */
function performDecoding( type, bytes, size, param ){

    switch( type ){
        case 1:
            return decodeFloat32( bytes );
        case 2:
            return getInt8View( bytes );
        case 3:
            return decodeInt16( bytes );
        case 4:
            return decodeInt32( bytes );
        case 5:
            // var length = decodeInt32( param )[ 0 ];
            return getUint8View( bytes );  // interpret as string array
        case 6:
            // interpret as char array
            return decodeRun( decodeInt32( bytes ), new Uint8Array( size ) );
        case 7:
            return decodeRun( decodeInt32( bytes ) )
        case 8:
            return decodeDeltaRun( decodeInt32( bytes ) );
        case 9:
            return decodeIntegerRun( decodeInt32( bytes ), decodeInt32( param )[ 0 ] );
        case 10:
            return decodeIntegerDeltaPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
        case 11:
            return decodeInteger( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
        case 12:
            return decodeIntegerPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
        case 13:
            return decodeIntegerPacking( getInt8View( bytes ), decodeInt32( param )[ 0 ] );
        case 14:
            return decodePacking( decodeInt16( bytes ) );
        case 15:
            return decodePacking( getInt8View( bytes ) );
    }

}


/**
 * Decode MMTF fields
 * @static
 * @param  {Object} inputDict - encoded MMTF data
 * @param  {Object} [params] - decoding parameters
 * @param  {String[]} params.ignoreFields - names of optional fields not to decode
 * @return {module:MmtfDecode.MmtfData} mmtfData
 */
function decodeMmtf( inputDict, params ){

    params = params || {};
    var ignoreFields = params.ignoreFields;
    var outputDict = {};

    AllFields.forEach( function( name ){
        var ignore = ignoreFields ? ignoreFields.indexOf( name ) !== -1 : false;
        var data = inputDict[ name ];
        if( !ignore && data !== undefined ){
            if( data instanceof Uint8Array ){
                outputDict[ name ] = performDecoding.apply( null, decodeBytes( data ) );
            }else{
                outputDict[ name ] = data;
            }
        }
    } );

    return outputDict;

}

/**
 * @file Mmtf Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var SstrucMap = {
  '0': 'i'.charCodeAt(0),  // pi helix
  '1': 's'.charCodeAt(0),  // bend
  '2': 'h'.charCodeAt(0),  // alpha helix
  '3': 'e'.charCodeAt(0),  // extended
  '4': 'g'.charCodeAt(0),  // 3-10 helix
  '5': 'b'.charCodeAt(0),  // bridge
  '6': 't'.charCodeAt(0),  // turn
  '7': 'l'.charCodeAt(0),  // coil
  '-1': ''.charCodeAt(0)   // NA
};

var MmtfParser = (function (StructureParser$$1) {
  function MmtfParser () {
    StructureParser$$1.apply(this, arguments);
  }

  if ( StructureParser$$1 ) MmtfParser.__proto__ = StructureParser$$1;
  MmtfParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
  MmtfParser.prototype.constructor = MmtfParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'mmtf' };

  MmtfParser.prototype._parse = function _parse () {
        // https://github.com/rcsb/mmtf

    if (Debug) { Log.time('MmtfParser._parse ' + this.name); }

    var i, il, j, jl, groupData;

    var s = this.structure;
    var sd = decodeMmtf(decodeMsgpack(this.streamer.data));

        // structure header
    var headerFields = [
      'depositionDate', 'releaseDate', 'resolution',
      'rFree', 'rWork', 'experimentalMethods'
    ];
    headerFields.forEach(function (name) {
      if (sd[ name ] !== undefined) {
        s.header[ name ] = sd[ name ];
      }
    });

    var numBonds, numAtoms, numGroups, numChains, numModels;
    var chainsPerModel;

    s.id = sd.structureId;
    s.title = sd.title;

    if (this.firstModelOnly || this.asTrajectory) {
      numModels = 1;
      numChains = sd.chainsPerModel[ 0 ];

      numGroups = 0;
      for (i = 0, il = numChains; i < il; ++i) {
        numGroups += sd.groupsPerChain[ i ];
      }

      numAtoms = 0;
      for (i = 0, il = numGroups; i < il; ++i) {
        groupData = sd.groupList[ sd.groupTypeList[ i ] ];
        numAtoms += groupData.atomNameList.length;
      }

      numBonds = sd.numBonds;

      chainsPerModel = [ numChains ];
    } else {
      numBonds = sd.numBonds;
      numAtoms = sd.numAtoms;
      numGroups = sd.numGroups;
      numChains = sd.numChains;
      numModels = sd.numModels;

      chainsPerModel = sd.chainsPerModel;
    }

    numBonds += numGroups;  // add numGroups to have space for polymer bonds

        //

    if (this.asTrajectory) {
      for (i = 0, il = sd.numModels; i < il; ++i) {
        var frame = new Float32Array(numAtoms * 3);
        var frameAtomOffset = numAtoms * i;

        for (j = 0; j < numAtoms; ++j) {
          var j3 = j * 3;
          var offset = j + frameAtomOffset;
          frame[ j3 ] = sd.xCoordList[ offset ];
          frame[ j3 + 1 ] = sd.yCoordList[ offset ];
          frame[ j3 + 2 ] = sd.zCoordList[ offset ];
        }

        s.frames.push(frame);
      }
    }

        // bondStore
    var bAtomIndex1 = new Uint32Array(numBonds);
    var bAtomIndex2 = new Uint32Array(numBonds);
    var bBondOrder = new Uint8Array(numBonds);

    var aGroupIndex = new Uint32Array(numAtoms);

    var gChainIndex = new Uint32Array(numGroups);
    var gAtomOffset = new Uint32Array(numGroups);
    var gAtomCount = new Uint16Array(numGroups);

    var cModelIndex = new Uint16Array(numChains);
    var cGroupOffset = new Uint32Array(numChains);
    var cGroupCount = new Uint32Array(numChains);

    var mChainOffset = new Uint32Array(numModels);
    var mChainCount = new Uint32Array(numModels);

        // set-up model-chain relations
    var chainOffset = 0;
    for (i = 0, il = numModels; i < il; ++i) {
      var modelChainCount = chainsPerModel[ i ];
      mChainOffset[ i ] = chainOffset;
      mChainCount[ i ] = modelChainCount;
      for (j = 0; j < modelChainCount; ++j) {
        cModelIndex[ j + chainOffset ] = i;
      }
      chainOffset += modelChainCount;
    }

        // set-up chain-residue relations
    var groupsPerChain = sd.groupsPerChain;
    var groupOffset = 0;
    for (i = 0, il = numChains; i < il; ++i) {
      var chainGroupCount = groupsPerChain[ i ];
      cGroupOffset[ i ] = groupOffset;
      cGroupCount[ i ] = chainGroupCount;
      for (j = 0; j < chainGroupCount; ++j) {
        gChainIndex[ j + groupOffset ] = i;
      }
      groupOffset += chainGroupCount;
    }

        /// ///
        // get data from group map

    var atomOffset = 0;
    var bondOffset = 0;

    for (i = 0, il = numGroups; i < il; ++i) {
      groupData = sd.groupList[ sd.groupTypeList[ i ] ];
      var groupAtomCount = groupData.atomNameList.length;

      var groupBondAtomList = groupData.bondAtomList;
      var groupBondOrderList = groupData.bondOrderList;

      for (j = 0, jl = groupBondOrderList.length; j < jl; ++j) {
        bAtomIndex1[ bondOffset ] = atomOffset + groupBondAtomList[ j * 2 ];
        bAtomIndex2[ bondOffset ] = atomOffset + groupBondAtomList[ j * 2 + 1 ];
        bBondOrder[ bondOffset ] = groupBondOrderList[ j ];
        bondOffset += 1;
      }

            //

      gAtomOffset[ i ] = atomOffset;
      gAtomCount[ i ] = groupAtomCount;

      for (j = 0; j < groupAtomCount; ++j) {
        aGroupIndex[ atomOffset ] = i;
        atomOffset += 1;
      }
    }

        // extra bonds

    var bondAtomList = sd.bondAtomList;
    if (bondAtomList) {
      if (sd.bondOrderList) {
        bBondOrder.set(sd.bondOrderList, bondOffset);
      }

      for (i = 0, il = bondAtomList.length; i < il; i += 2) {
        var atomIndex1 = bondAtomList[ i ];
        var atomIndex2 = bondAtomList[ i + 1 ];
        if (atomIndex1 < numAtoms && atomIndex2 < numAtoms) {
          bAtomIndex1[ bondOffset ] = atomIndex1;
          bAtomIndex2[ bondOffset ] = atomIndex2;
          bondOffset += 1;
        }
      }
    }

        //

    s.bondStore.length = bBondOrder.length;
    s.bondStore.count = bondOffset;
    s.bondStore.atomIndex1 = bAtomIndex1;
    s.bondStore.atomIndex2 = bAtomIndex2;
    s.bondStore.bondOrder = bBondOrder;

    s.atomStore.length = numAtoms;
    s.atomStore.count = numAtoms;
    s.atomStore.residueIndex = aGroupIndex;
    s.atomStore.atomTypeId = new Uint16Array(numAtoms);
    s.atomStore.x = sd.xCoordList.subarray(0, numAtoms);
    s.atomStore.y = sd.yCoordList.subarray(0, numAtoms);
    s.atomStore.z = sd.zCoordList.subarray(0, numAtoms);
    s.atomStore.serial = sd.atomIdList.subarray(0, numAtoms);
    s.atomStore.bfactor = sd.bFactorList.subarray(0, numAtoms);
    s.atomStore.altloc = sd.altLocList.subarray(0, numAtoms);
    s.atomStore.occupancy = sd.occupancyList.subarray(0, numAtoms);

    s.residueStore.length = numGroups;
    s.residueStore.count = numGroups;
    s.residueStore.chainIndex = gChainIndex;
    s.residueStore.residueTypeId = sd.groupTypeList;
    s.residueStore.atomOffset = gAtomOffset;
    s.residueStore.atomCount = gAtomCount;
    s.residueStore.resno = sd.groupIdList.subarray(0, numGroups);
    s.residueStore.sstruc = sd.secStructList.subarray(0, numGroups);
    s.residueStore.inscode = sd.insCodeList.subarray(0, numGroups);

    s.chainStore.length = numChains;
    s.chainStore.count = numChains;
    s.chainStore.entityIndex = new Uint16Array(numChains);
    s.chainStore.modelIndex = cModelIndex;
    s.chainStore.residueOffset = cGroupOffset;
    s.chainStore.residueCount = cGroupCount;
    s.chainStore.chainname = sd.chainNameList.subarray(0, numChains * 4);
    s.chainStore.chainid = sd.chainIdList.subarray(0, numChains * 4);

    s.modelStore.length = numModels;
    s.modelStore.count = numModels;
    s.modelStore.chainOffset = mChainOffset;
    s.modelStore.chainCount = mChainCount;

        //

    var groupTypeDict = {};
    for (i = 0, il = sd.groupList.length; i < il; ++i) {
      var groupType = sd.groupList[ i ];
      var atomTypeIdList = [];
      for (j = 0, jl = groupType.atomNameList.length; j < jl; ++j) {
        var element = groupType.elementList[ j ].toUpperCase();
        var atomname = groupType.atomNameList[ j ];
        atomTypeIdList.push(s.atomMap.add(atomname, element));
      }
      var chemCompType = groupType.chemCompType.toUpperCase();
      var hetFlag = ChemCompHetero.includes(chemCompType);

      var numGroupBonds = groupType.bondOrderList.length;
      var atomIndices1 = new Array(numGroupBonds);
      var atomIndices2 = new Array(numGroupBonds);
      for (j = 0; j < numGroupBonds; ++j) {
        atomIndices1[ j ] = groupType.bondAtomList[ j * 2 ];
        atomIndices2[ j ] = groupType.bondAtomList[ j * 2 + 1 ];
      }
      var bonds = {
        atomIndices1: atomIndices1,
        atomIndices2: atomIndices2,
        bondOrders: groupType.bondOrderList
      };

      groupTypeDict[ i ] = s.residueMap.add(
                groupType.groupName, atomTypeIdList, hetFlag, chemCompType, bonds
            );
    }

    for (i = 0, il = numGroups; i < il; ++i) {
      s.residueStore.residueTypeId[ i ] = groupTypeDict[ s.residueStore.residueTypeId[ i ] ];
    }

    for (i = 0, il = s.atomStore.count; i < il; ++i) {
      var residueIndex = s.atomStore.residueIndex[ i ];
      var residueType = s.residueMap.list[ s.residueStore.residueTypeId[ residueIndex ] ];
      var resAtomOffset = s.residueStore.atomOffset[ residueIndex ];
      s.atomStore.atomTypeId[ i ] = residueType.atomTypeIdList[ i - resAtomOffset ];
    }

    if (sd.secStructList) {
      var secStructLength = sd.secStructList.length;
      for (i = 0, il = s.residueStore.count; i < il; ++i) {
                // with ( i % secStructLength ) secStruct entries are reused
        var sstruc = SstrucMap[ s.residueStore.sstruc[ i % secStructLength ] ];
        if (sstruc !== undefined) { s.residueStore.sstruc[ i ] = sstruc; }
      }
    }

        //

    if (sd.entityList) {
      sd.entityList.forEach(function (e, i) {
        s.entityList[ i ] = new Entity(
                    s, i, e.description, e.type, e.chainIndexList
                );
      });
    }

    if (sd.bioAssemblyList) {
      sd.bioAssemblyList.forEach(function (_assembly, k) {
        var id = k + 1;
        var assembly = new Assembly(id);
        s.biomolDict[ 'BU' + id ] = assembly;
        var chainToPart = {};
        _assembly.transformList.forEach(function (_transform) {
          var matrix = new Matrix4().fromArray(_transform.matrix).transpose();
          var chainList = _transform.chainIndexList.map(function (chainIndex) {
            var chainname = '';
            for (var k = 0; k < 4; ++k) {
              var code = sd.chainNameList[ chainIndex * 4 + k ];
              if (code) {
                chainname += String.fromCharCode(code);
              } else {
                break
              }
            }
            return chainname
          });
          var part = chainToPart[ chainList ];
          if (part) {
            part.matrixList.push(matrix);
          } else {
            chainToPart[ chainList ] = assembly.addPart([ matrix ], chainList);
          }
        });
      });
    }

    if (sd.ncsOperatorList) {
      var ncsName = 'NCS';
      var ncsAssembly = new Assembly(ncsName);
      var ncsPart = ncsAssembly.addPart();
      sd.ncsOperatorList.forEach(function (_operator) {
        var matrix = new Matrix4().fromArray(_operator).transpose();
        ncsPart.matrixList.push(matrix);
      });
      if (ncsPart.matrixList.length > 0) {
        s.biomolDict[ ncsName ] = ncsAssembly;
      }
    }

    var uc = sd.unitCell;
    if (uc && Array.isArray(uc) && uc[ 0 ]) {
      s.unitcell = new Unitcell({
        a: uc[ 0 ],
        b: uc[ 1 ],
        c: uc[ 2 ],
        alpha: uc[ 3 ],
        beta: uc[ 4 ],
        gamma: uc[ 5 ],
        spacegroup: sd.spaceGroup
      });
    } else {
      s.unitcell = undefined;
    }

        // calculate backbone bonds
    calculateBondsBetween(s, true);

        // calculate rung bonds
    calculateBondsWithin(s, true);

    s.finalizeAtoms();
    s.finalizeBonds();

    buildUnitcellAssembly(s);

    if (Debug) { Log.timeEnd('MmtfParser._parse ' + this.name); }
  };

  Object.defineProperties( MmtfParser.prototype, prototypeAccessors );

  return MmtfParser;
}(StructureParser));

ParserRegistry.add('mmtf', MmtfParser);

/**
 * @file Mol2 Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var reWhitespace$1 = /\s+/;

var Mol2Parser = (function (StructureParser$$1) {
  function Mol2Parser () {
    StructureParser$$1.apply(this, arguments);
  }

  if ( StructureParser$$1 ) Mol2Parser.__proto__ = StructureParser$$1;
  Mol2Parser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
  Mol2Parser.prototype.constructor = Mol2Parser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'mol2' };

  Mol2Parser.prototype._parse = function _parse () {
        // http://www.tripos.com/data/support/mol2.pdf

    if (Debug) { Log.time('Mol2Parser._parse ' + this.name); }

    var s = this.structure;
    var sb = this.structureBuilder;

    var firstModelOnly = this.firstModelOnly;
    var asTrajectory = this.asTrajectory;

    var frames = s.frames;
    var doFrames = false;
    var currentFrame, currentCoord;

    var atomMap = s.atomMap;
    var atomStore = s.atomStore;
    atomStore.resize(Math.round(this.streamer.data.length / 60));

    var idx = 0;
    var moleculeLineNo = 0;
    var modelAtomIdxStart = 0;
    var modelIdx = -1;
    var numAtoms = 0;

    var currentRecordType = 0;
    var moleculeRecordType = 1;
    var atomRecordType = 2;
    var bondRecordType = 3;

    var ap1 = s.getAtomProxy();
    var ap2 = s.getAtomProxy();

    var bondTypes = {
      '1': 1,
      '2': 2,
      '3': 3,
      'am': 1,  // amide
      'ar': 1,  // aromatic
      'du': 1,  // dummy
      'un': 1,  // unknown
      'nc': 0   // not connected
    };

    function _parseChunkOfLines (_i, _n, lines) {
      var ls;

      for (var i = _i; i < _n; ++i) {
        var line = lines[ i ].trim();

        if (line === '' || line[ 0 ] === '#') { continue }

        if (line[ 0 ] === '@') {
          if (line === '@<TRIPOS>MOLECULE') {
            currentRecordType = moleculeRecordType;
            moleculeLineNo = 0;

            ++modelIdx;
          } else if (line === '@<TRIPOS>ATOM') {
            currentRecordType = atomRecordType;
            modelAtomIdxStart = atomStore.count;

            if (asTrajectory) {
              currentCoord = 0;
              currentFrame = new Float32Array(numAtoms * 3);
              frames.push(currentFrame);

              if (modelIdx > 0) { doFrames = true; }
            }
          } else if (line === '@<TRIPOS>BOND') {
            currentRecordType = bondRecordType;
          } else {
            currentRecordType = 0;
          }
        } else if (currentRecordType === moleculeRecordType) {
          if (moleculeLineNo === 0) {
            s.title = line;
            s.id = line;
          } else if (moleculeLineNo === 1) {
            ls = line.split(reWhitespace$1);
            numAtoms = parseInt(ls[ 0 ]);
            // num_atoms [num_bonds [num_subst [num_feat [num_sets]]]]
          } else if (moleculeLineNo === 2) {

            // var molType = line;
            // SMALL, BIOPOLYMER, PROTEIN, NUCLEIC_ACID, SACCHARIDE

          } else if (moleculeLineNo === 3) {

            // var chargeType = line;
            // NO_CHARGES, DEL_RE, GASTEIGER, GAST_HUCK, HUCKEL,
            // PULLMAN, GAUSS80_CHARGES, AMPAC_CHARGES,
            // MULLIKEN_CHARGES, DICT_ CHARGES, MMFF94_CHARGES,
            // USER_CHARGES

          } else if (moleculeLineNo === 4) {

            // var statusBits = line;

          } else if (moleculeLineNo === 5) {

            // var molComment = line;

          }

          ++moleculeLineNo;
        } else if (currentRecordType === atomRecordType) {
          ls = line.split(reWhitespace$1);

          if (firstModelOnly && modelIdx > 0) { continue }

          var x = parseFloat(ls[ 2 ]);
          var y = parseFloat(ls[ 3 ]);
          var z = parseFloat(ls[ 4 ]);

          if (asTrajectory) {
            var j = currentCoord * 3;

            currentFrame[ j + 0 ] = x;
            currentFrame[ j + 1 ] = y;
            currentFrame[ j + 2 ] = z;

            currentCoord += 1;

            if (doFrames) { continue }
          }

          var serial = ls[ 0 ];
          var atomname = ls[ 1 ];
          var element = ls[ 5 ].split('.')[ 0 ];
          var resno = ls[ 6 ] ? parseInt(ls[ 6 ]) : 1;
          var resname = ls[ 7 ] ? ls[ 7 ] : '';
          var bfactor = ls[ 8 ] ? parseFloat(ls[ 8 ]) : 0.0;

          atomStore.growIfFull();
          atomStore.atomTypeId[ idx ] = atomMap.add(atomname, element);

          atomStore.x[ idx ] = x;
          atomStore.y[ idx ] = y;
          atomStore.z[ idx ] = z;
          atomStore.serial[ idx ] = serial;
          atomStore.bfactor[ idx ] = bfactor;

          sb.addAtom(modelIdx, '', '', resname, resno, 1);

          idx += 1;
        } else if (currentRecordType === bondRecordType) {
          if (firstModelOnly && modelIdx > 0) { continue }
          if (asTrajectory && modelIdx > 0) { continue }

          ls = line.split(reWhitespace$1);

          // ls[ 0 ] is bond id
          ap1.index = parseInt(ls[ 1 ]) - 1 + modelAtomIdxStart;
          ap2.index = parseInt(ls[ 2 ]) - 1 + modelAtomIdxStart;
          var order = bondTypes[ ls[ 3 ] ];

          s.bondStore.addBond(ap1, ap2, order);
        }
      }
    }

    this.streamer.eachChunkOfLines(function (lines/*, chunkNo, chunkCount */) {
      _parseChunkOfLines(0, lines.length, lines);
    });

    sb.finalize();
    s.finalizeAtoms();
    calculateChainnames(s);
    calculateBondsWithin(s, true);
    calculateBondsBetween(s, true);
    s.finalizeBonds();
    assignResidueTypeBonds(s);
    calculateSecondaryStructure(s);

    if (Debug) { Log.timeEnd('Mol2Parser._parse ' + this.name); }
  };

  Object.defineProperties( Mol2Parser.prototype, prototypeAccessors );

  return Mol2Parser;
}(StructureParser));

ParserRegistry.add('mol2', Mol2Parser);

/**
 * @file Pqr Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// http://www.poissonboltzmann.org/docs/file-format-info/

var PqrParser = (function (PdbParser$$1) {
  function PqrParser () {
    PdbParser$$1.apply(this, arguments);
  }

  if ( PdbParser$$1 ) PqrParser.__proto__ = PdbParser$$1;
  PqrParser.prototype = Object.create( PdbParser$$1 && PdbParser$$1.prototype );
  PqrParser.prototype.constructor = PqrParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'pqr' };

  Object.defineProperties( PqrParser.prototype, prototypeAccessors );

  return PqrParser;
}(PdbParser));

ParserRegistry.add('pqr', PqrParser);

/**
 * @file Psf Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var TitleMode = 1;
var AtomMode = 2;
var BondMode = 3;
var AngleMode = 4;
var DihedralMode = 5;
var ImproperMode = 6;

var reWhitespace$2 = /\s+/;
var reTitle = /(^\*|REMARK)*/;

var PsfParser = (function (StructureParser$$1) {
  function PsfParser () {
    StructureParser$$1.apply(this, arguments);
  }

  if ( StructureParser$$1 ) PsfParser.__proto__ = StructureParser$$1;
  PsfParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
  PsfParser.prototype.constructor = PsfParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'psf' };

  PsfParser.prototype._parse = function _parse () {
    // http://www.ks.uiuc.edu/Training/Tutorials/namd/namd-tutorial-unix-html/node23.html

    if (Debug) { Log.time('PsfParser._parse ' + this.name); }

    var s = this.structure;
    var sb = this.structureBuilder;

    //

    var atomMap = s.atomMap;
    var atomStore = s.atomStore;

    var title = [];

    var mode;
    var idx = 0;
    var bondIdx = 0;
    var bAtomIndex1, bAtomIndex2, bBondOrder;

    function _parseChunkOfLines (_i, _n, lines) {
      for (var i = _i; i < _n; ++i) {
        var line = lines[ i ].trim();

        if (!line) {
          mode = undefined;
          continue
        }

        if (mode === AtomMode) {
          var ls = line.split(reWhitespace$2);

          var serial = parseInt(ls[ 0 ]);
                    // const segid = ls[ 1 ];
          var resno = parseInt(ls[ 2 ]);
          var resname = ls[ 3 ];
          var atomname = ls[ 4 ];

          atomStore.growIfFull();
          atomStore.atomTypeId[ idx ] = atomMap.add(atomname);

          atomStore.serial[ idx ] = serial;

          sb.addAtom(0, '', '', resname, resno, 1);

          idx += 1;
        } else if (mode === BondMode) {
          var ls$1 = line.split(reWhitespace$2);

          for (var j = 0, m = ls$1.length; j < m; j += 2) {
            bAtomIndex1[ bondIdx ] = parseInt(ls$1[ j ]) - 1;
            bAtomIndex2[ bondIdx ] = parseInt(ls$1[ j + 1 ]) - 1;
            bBondOrder[ bondIdx ] = 1;
            bondIdx += 1;
          }
        } else if (mode === TitleMode) {
          title.push(line.replace(reTitle, '').trim());
        } else if (mode === AngleMode) {

          // not currently used

        } else if (mode === DihedralMode) {

          // not currently used

        } else if (mode === ImproperMode) {

          // not currently used

        } else if (line.includes('!NATOM')) {
          mode = AtomMode;

          var numAtoms = parseInt(line.split(reWhitespace$2)[ 0 ]);
          atomStore.resize(numAtoms);
        } else if (line.includes('!NBOND')) {
          mode = BondMode;

          var numBonds = parseInt(line.split(reWhitespace$2)[ 0 ]);
          bAtomIndex1 = new Uint32Array(numBonds);
          bAtomIndex2 = new Uint32Array(numBonds);
          bBondOrder = new Uint8Array(numBonds);
        } else if (line.includes('!NTITLE')) {
          mode = TitleMode;
        } else if (line.includes('!NTHETA')) {
          mode = AngleMode;
        } else if (line.includes('!NPHI')) {
          mode = DihedralMode;
        } else if (line.includes('!NIMPHI')) {
          mode = ImproperMode;
        }
      }
    }

    this.streamer.eachChunkOfLines(function (lines/*, chunkNo, chunkCount */) {
      _parseChunkOfLines(0, lines.length, lines);
    });

    s.title = title.join(' ');

    s.bondStore.length = bBondOrder.length;
    s.bondStore.count = bondIdx;
    s.bondStore.atomIndex1 = bAtomIndex1;
    s.bondStore.atomIndex2 = bAtomIndex2;
    s.bondStore.bondOrder = bBondOrder;

    sb.finalize();
    s.finalizeAtoms();
    calculateChainnames(s);
    s.finalizeBonds();
    assignResidueTypeBonds(s);

    if (Debug) { Log.timeEnd('PsfParser._parse ' + this.name); }
  };

  Object.defineProperties( PsfParser.prototype, prototypeAccessors );

  return PsfParser;
}(StructureParser));

ParserRegistry.add('psf', PsfParser);

/**
 * @file Sdf Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var reItem = /> <(.+)>/;

var SdfParser = (function (StructureParser$$1) {
  function SdfParser () {
    StructureParser$$1.apply(this, arguments);
  }

  if ( StructureParser$$1 ) SdfParser.__proto__ = StructureParser$$1;
  SdfParser.prototype = Object.create( StructureParser$$1 && StructureParser$$1.prototype );
  SdfParser.prototype.constructor = SdfParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'sdf' };

  SdfParser.prototype._parse = function _parse () {
        // https://en.wikipedia.org/wiki/Chemical_table_file#SDF
        // http://download.accelrys.com/freeware/ctfile-formats/ctfile-formats.zip

    if (Debug) { Log.time('SdfParser._parse ' + this.name); }

    var s = this.structure;
    var sb = this.structureBuilder;

    var firstModelOnly = this.firstModelOnly;
    var asTrajectory = this.asTrajectory;

    var headerLines = this.streamer.peekLines(2);

    s.id = headerLines[ 0 ].trim();
    s.title = headerLines[ 1 ].trim();

    var frames = s.frames;
    var doFrames = false;
    var currentFrame, currentCoord;

    var atomMap = s.atomMap;
    var atomStore = s.atomStore;
    atomStore.resize(Math.round(this.streamer.data.length / 50));

    var ap1 = s.getAtomProxy();
    var ap2 = s.getAtomProxy();

    var idx = 0;
    var lineNo = 0;
    var modelIdx = 0;
    var modelAtomIdxStart = 0;

    var sdfData = [];
    var currentItem = false;
    var currentData = {};
    var mItem;
    s.extraData.sdf = sdfData;

    var atomCount, bondCount, atomStart, atomEnd, bondStart, bondEnd;

    function _parseChunkOfLines (_i, _n, lines) {
      for (var i = _i; i < _n; ++i) {
        var line = lines[ i ];

        if (line.substr(0, 4) === '$$$$') {
          lineNo = -1;
          ++modelIdx;
          modelAtomIdxStart = atomStore.count;
          sdfData.push(currentData);
          currentData = {};
          currentItem = false;
        } else if (lineNo === 3) {
          atomCount = parseInt(line.substr(0, 3));
          bondCount = parseInt(line.substr(3, 3));

          atomStart = 4;
          atomEnd = atomStart + atomCount;
          bondStart = atomEnd;
          bondEnd = bondStart + bondCount;

          if (asTrajectory) {
            currentCoord = 0;
            currentFrame = new Float32Array(atomCount * 3);
            frames.push(currentFrame);

            if (modelIdx > 0) { doFrames = true; }
          }
        } else if (lineNo >= atomStart && lineNo < atomEnd) {
          if (firstModelOnly && modelIdx > 0) { continue }

          var x = parseFloat(line.substr(0, 10));
          var y = parseFloat(line.substr(10, 10));
          var z = parseFloat(line.substr(20, 10));

          if (asTrajectory) {
            var j = currentCoord * 3;

            currentFrame[ j + 0 ] = x;
            currentFrame[ j + 1 ] = y;
            currentFrame[ j + 2 ] = z;

            currentCoord += 1;

            if (doFrames) { continue }
          }

          var element = line.substr(31, 3).trim();
          var atomname = element + (idx + 1);

          atomStore.growIfFull();
          atomStore.atomTypeId[ idx ] = atomMap.add(atomname, element);

          atomStore.x[ idx ] = x;
          atomStore.y[ idx ] = y;
          atomStore.z[ idx ] = z;
          atomStore.serial[ idx ] = idx;

          sb.addAtom(modelIdx, '', '', 'HET', 1, 1);

          idx += 1;
        } else if (lineNo >= bondStart && lineNo < bondEnd) {
          if (firstModelOnly && modelIdx > 0) { continue }
          if (asTrajectory && modelIdx > 0) { continue }

          ap1.index = parseInt(line.substr(0, 3)) - 1 + modelAtomIdxStart;
          ap2.index = parseInt(line.substr(3, 3)) - 1 + modelAtomIdxStart;
          var order = parseInt(line.substr(6, 3));

          s.bondStore.addBond(ap1, ap2, order);

                // eslint-disable-next-line no-cond-assign
        } else if (mItem = line.match(reItem)) {
          currentItem = mItem[ 1 ];
          currentData[ currentItem ] = [];
        } else if (currentItem !== false && line) {
          currentData[ currentItem ].push(line);
        }

        ++lineNo;
      }
    }

    this.streamer.eachChunkOfLines(function (lines/*, chunkNo, chunkCount */) {
      _parseChunkOfLines(0, lines.length, lines);
    });

    sb.finalize();
    s.finalizeAtoms();
    s.finalizeBonds();
    assignResidueTypeBonds(s);

    if (Debug) { Log.timeEnd('SdfParser._parse ' + this.name); }
  };

  SdfParser.prototype._postProcess = function _postProcess () {
    assignResidueTypeBonds(this.structure);
  };

  Object.defineProperties( SdfParser.prototype, prototypeAccessors );

  return SdfParser;
}(StructureParser));

ParserRegistry.add('sdf', SdfParser);
ParserRegistry.add('sd', SdfParser);

/**
 * @file Frames
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var Frames = function Frames (name, path) {
  this.name = name;
  this.path = path;

  this.coordinates = [];
  this.boxes = [];
};

var prototypeAccessors$29 = { type: {} };

prototypeAccessors$29.type.get = function () { return 'Frames' };

Object.defineProperties( Frames.prototype, prototypeAccessors$29 );

/**
 * @file Trajectory Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var TrajectoryParser = (function (Parser$$1) {
  function TrajectoryParser (streamer, params) {
    Parser$$1.call(this, streamer, params);

    this.frames = new Frames(this.name, this.path);
  }

  if ( Parser$$1 ) TrajectoryParser.__proto__ = Parser$$1;
  TrajectoryParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
  TrajectoryParser.prototype.constructor = TrajectoryParser;

  var prototypeAccessors = { type: {},__objName: {} };

  prototypeAccessors.type.get = function () { return 'trajectory' };
  prototypeAccessors.__objName.get = function () { return 'frames' };

  Object.defineProperties( TrajectoryParser.prototype, prototypeAccessors );

  return TrajectoryParser;
}(Parser));

/**
 * @file Dcd Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var DcdParser = (function (TrajectoryParser$$1) {
  function DcdParser () {
    TrajectoryParser$$1.apply(this, arguments);
  }

  if ( TrajectoryParser$$1 ) DcdParser.__proto__ = TrajectoryParser$$1;
  DcdParser.prototype = Object.create( TrajectoryParser$$1 && TrajectoryParser$$1.prototype );
  DcdParser.prototype.constructor = DcdParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'dcd' };

  DcdParser.prototype._parse = function _parse () {
        // http://www.ks.uiuc.edu/Research/vmd/plugins/molfile/dcdplugin.html

        // The DCD format is structured as follows
        //   (FORTRAN UNFORMATTED, with Fortran data type descriptions):
        // HDR     NSET    ISTRT   NSAVC   5-ZEROS NATOM-NFREAT    DELTA   9-ZEROS
        // `CORD'  #files  step 1  step    zeroes  (zero)          timestep  (zeroes)
        //                         interval
        // C*4     INT     INT     INT     5INT    INT             DOUBLE  9INT
        // ==========================================================================
        // NTITLE          TITLE
        // INT (=2)        C*MAXTITL
        //                 (=32)
        // ==========================================================================
        // NATOM
        // #atoms
        // INT
        // ==========================================================================
        // X(I), I=1,NATOM         (DOUBLE)
        // Y(I), I=1,NATOM
        // Z(I), I=1,NATOM
        // ==========================================================================

    if (Debug) { Log.time('DcdParser._parse ' + this.name); }

    var bin = this.streamer.data;
    if (bin instanceof Uint8Array) {
      bin = bin.buffer;
    }
    var dv = new DataView(bin);

    var i, n;
    var f = this.frames;
    var coordinates = f.coordinates;
    var boxes = f.boxes;
    var header = {};
    var nextPos = 0;

        // header block

    var intView = new Int32Array(bin, 0, 23);
    var ef = intView[ 0 ] !== dv.getInt32(0);  // endianess flag
        // swap byte order when big endian (84 indicates little endian)
    if (intView[ 0 ] !== 84) {
      n = bin.byteLength;
      for (i = 0; i < n; i += 4) {
        dv.setFloat32(i, dv.getFloat32(i), true);
      }
    }
    if (intView[ 0 ] !== 84) {
      Log.error('dcd bad format, header block start');
    }
        // format indicator, should read 'CORD'
    var formatString = String.fromCharCode(
            dv.getUint8(4), dv.getUint8(5),
            dv.getUint8(6), dv.getUint8(7)
        );
    if (formatString !== 'CORD') {
      Log.error('dcd bad format, format string');
    }
    var isCharmm = false;
    var extraBlock = false;
    var fourDims = false;
        // version field in charmm, unused in X-PLOR
    if (intView[ 22 ] !== 0) {
      isCharmm = true;
      if (intView[ 12 ] !== 0) { extraBlock = true; }
      if (intView[ 13 ] === 1) { fourDims = true; }
    }
    header.NSET = intView[ 2 ];
    header.ISTART = intView[ 3 ];
    header.NSAVC = intView[ 4 ];
    header.NAMNF = intView[ 10 ];
    if (isCharmm) {
      header.DELTA = dv.getFloat32(44, ef);
    } else {
      header.DELTA = dv.getFloat64(44, ef);
    }
    if (intView[ 22 ] !== 84) {
      Log.error('dcd bad format, header block end');
    }
    nextPos = nextPos + 21 * 4 + 8;

        // title block

    var titleLength = dv.getInt32(nextPos, ef);
    var titlePos = nextPos + 1;
    if ((titleLength - 4) % 80 !== 0) {
      Log.error('dcd bad format, title block start');
    }
    header.TITLE = uint8ToString(
            new Uint8Array(bin, titlePos, titleLength)
        );
    if (dv.getInt32(titlePos + titleLength + 4 - 1, ef) !== titleLength) {
      Log.error('dcd bad format, title block end');
    }
    nextPos = nextPos + titleLength + 8;

        // natom block

    if (dv.getInt32(nextPos, ef) !== 4) {
      Log.error('dcd bad format, natom block start');
    }
    header.NATOM = dv.getInt32(nextPos + 4, ef);
    if (dv.getInt32(nextPos + 8, ef) !== 4) {
      Log.error('dcd bad format, natom block end');
    }
    nextPos = nextPos + 4 + 8;

        // fixed atoms block

    if (header.NAMNF > 0) {
            // TODO read coordinates and indices of fixed atoms
      Log.error('dcd format with fixed atoms unsupported, aborting');
      return
    }

        // frames

    var natom = header.NATOM;
    var natom4 = natom * 4;

    for (i = 0, n = header.NSET; i < n; ++i) {
      if (extraBlock) {
        nextPos += 4;  // block start
                // unitcell: A, alpha, B, beta, gamma, C (doubles)
        var box = new Float32Array(9);
        box[ 0 ] = dv.getFloat64(nextPos, ef);
        box[ 4 ] = dv.getFloat64(nextPos + 2 * 8, ef);
        box[ 8 ] = dv.getFloat64(nextPos + 5 * 8, ef);
        boxes.push(box);
        nextPos += 48;
        nextPos += 4;  // block end
      }

            // xyz coordinates
      var coord = new Float32Array(natom * 3);
      for (var j = 0; j < 3; ++j) {
        if (dv.getInt32(nextPos, ef) !== natom4) {
          Log.error('dcd bad format, coord block start', i, j);
        }
        nextPos += 4;  // block start
        var c = new Float32Array(bin, nextPos, natom);
        for (var k = 0; k < natom; ++k) {
          coord[ 3 * k + j ] = c[ k ];
        }
        nextPos += natom4;
        if (dv.getInt32(nextPos, ef) !== natom4) {
          Log.error('dcd bad format, coord block end', i, j);
        }
        nextPos += 4;  // block end
      }
      coordinates.push(coord);

      if (fourDims) {
        var bytes = dv.getInt32(nextPos, ef);
        nextPos += 4 + bytes + 4;  // block start + skip + block end
      }
    }

        // console.log( header );
        // console.log( header.TITLE );
        // console.log( "isCharmm", isCharmm, "extraBlock", extraBlock, "fourDims", fourDims );

    if (Debug) { Log.timeEnd('DcdParser._parse ' + this.name); }
  };

  Object.defineProperties( DcdParser.prototype, prototypeAccessors );

  return DcdParser;
}(TrajectoryParser));

ParserRegistry.add('dcd', DcdParser);

/**
 * @file Volume Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var VolumeParser = (function (Parser$$1) {
  function VolumeParser (streamer, params) {
    var p = params || {};

    Parser$$1.call(this, streamer, p);

    this.volume = new Volume(this.name, this.path);
    this.voxelSize = defaults(p.voxelSize, 1);
  }

  if ( Parser$$1 ) VolumeParser.__proto__ = Parser$$1;
  VolumeParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
  VolumeParser.prototype.constructor = VolumeParser;

  var prototypeAccessors = { type: {},__objName: {} };

  prototypeAccessors.type.get = function () { return 'volume' };
  prototypeAccessors.__objName.get = function () { return 'volume' };

  VolumeParser.prototype._afterParse = function _afterParse () {
    this.volume.setMatrix(this.getMatrix());
  };

  VolumeParser.prototype.getMatrix = function getMatrix () {
    return new Matrix4()
  };

  Object.defineProperties( VolumeParser.prototype, prototypeAccessors );

  return VolumeParser;
}(Parser));

/**
 * @file Cube Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// @author Johanna Tiemann <johanna.tiemann@googlemail.com>
// @author Alexander Rose <alexander.rose@weirdbyte.de>

var CubeParser = (function (VolumeParser$$1) {
  function CubeParser () {
    VolumeParser$$1.apply(this, arguments);
  }

  if ( VolumeParser$$1 ) CubeParser.__proto__ = VolumeParser$$1;
  CubeParser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
  CubeParser.prototype.constructor = CubeParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'cube' };

  CubeParser.prototype._parse = function _parse () {
        // http://paulbourke.net/dataformats/cube/

    if (Debug) { Log.time('CubeParser._parse ' + this.name); }

    var v = this.volume;
    var headerLines = this.streamer.peekLines(6);
    var header = {};
    var reWhitespace = /\s+/;
    var bohrToAngstromFactor = 0.529177210859;
    var scaleFactor = bohrToAngstromFactor * this.voxelSize;

    function h (k, l) {
      var field = headerLines[ k ].trim().split(reWhitespace)[ l ];
      return parseFloat(field)
    }

    header.atomCount = Math.abs(h(2, 0));  // Number of atoms
    header.originX = h(2, 1) * bohrToAngstromFactor;  // Position of origin of volumetric data
    header.originY = h(2, 2) * bohrToAngstromFactor;
    header.originZ = h(2, 3) * bohrToAngstromFactor;
    header.NVX = h(3, 0);  // Number of voxels
    header.NVY = h(4, 0);
    header.NVZ = h(5, 0);

    header.basisX = new Vector3(
            h(3, 1), h(3, 2), h(3, 3)).multiplyScalar(scaleFactor);
    header.basisY = new Vector3(
            h(4, 1), h(4, 2), h(4, 3)).multiplyScalar(scaleFactor);
    header.basisZ = new Vector3(
            h(5, 1), h(5, 2), h(5, 3)).multiplyScalar(scaleFactor);

    var data = new Float32Array(header.NVX * header.NVY * header.NVZ);
    var count = 0;
    var lineNo = 0;
    var oribitalFlag = h(2, 0) > 0 ? 0 : 1;

    function _parseChunkOfLines (_i, _n, lines) {
      for (var i = _i; i < _n; ++i) {
        var line = lines[ i ].trim();

        if (line !== '' && lineNo >= header.atomCount + 6 + oribitalFlag) {
          line = line.split(reWhitespace);
          for (var j = 0, lj = line.length; j < lj; ++j) {
            if (line.length !== 1) {
              data[ count ] = parseFloat(line[ j ]);
              ++count;
            }
          }
        }

        ++lineNo;
      }
    }

    this.streamer.eachChunkOfLines(function (lines/*, chunkNo, chunkCount */) {
      _parseChunkOfLines(0, lines.length, lines);
    });

    v.header = header;
    v.setData(data, header.NVZ, header.NVY, header.NVX);

    if (Debug) { Log.timeEnd('CubeParser._parse ' + this.name); }
  };

  CubeParser.prototype.getMatrix = function getMatrix () {
    var h = this.volume.header;
    var matrix = new Matrix4();

    matrix.multiply(
            new Matrix4().makeTranslation(
                h.originX, h.originY, h.originZ
            )
        );

    matrix.multiply(
            new Matrix4().makeBasis(
                h.basisZ,
                h.basisY,
                h.basisX
            )
        );

    return matrix
  };

  Object.defineProperties( CubeParser.prototype, prototypeAccessors );

  return CubeParser;
}(VolumeParser));

ParserRegistry.add('cub', CubeParser);
ParserRegistry.add('cube', CubeParser);

/**
 * @file Dsn6 Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var Dsn6Parser = (function (VolumeParser$$1) {
  function Dsn6Parser () {
    VolumeParser$$1.apply(this, arguments);
  }

  if ( VolumeParser$$1 ) Dsn6Parser.__proto__ = VolumeParser$$1;
  Dsn6Parser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
  Dsn6Parser.prototype.constructor = Dsn6Parser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'dsn6' };

  Dsn6Parser.prototype._parse = function _parse () {
        // DSN6 http://www.uoxray.uoregon.edu/tnt/manual/node104.html
        // BRIX http://svn.cgl.ucsf.edu/svn/chimera/trunk/libs/VolumeData/dsn6/brix-1.html

    if (Debug) { Log.time('Dsn6Parser._parse ' + this.name); }

    var bin = this.streamer.data;

    if (bin instanceof Uint8Array) {
      bin = bin.buffer;
    }

    var v = this.volume;
    var header = {};
    var divisor, summand;

    var intView = new Int16Array(bin);
    var byteView = new Uint8Array(bin);
    var brixStr = String.fromCharCode.apply(null, byteView.subarray(0, 512));

    if (brixStr.startsWith(':-)')) {
      header.xStart = parseInt(brixStr.substr(10, 5));  // NXSTART
      header.yStart = parseInt(brixStr.substr(15, 5));
      header.zStart = parseInt(brixStr.substr(20, 5));

      header.xExtent = parseInt(brixStr.substr(32, 5));  // NX
      header.yExtent = parseInt(brixStr.substr(38, 5));
      header.zExtent = parseInt(brixStr.substr(42, 5));

      header.xRate = parseInt(brixStr.substr(52, 5));  // MX
      header.yRate = parseInt(brixStr.substr(58, 5));
      header.zRate = parseInt(brixStr.substr(62, 5));

      header.xlen = parseFloat(brixStr.substr(73, 10)) * this.voxelSize;
      header.ylen = parseFloat(brixStr.substr(83, 10)) * this.voxelSize;
      header.zlen = parseFloat(brixStr.substr(93, 10)) * this.voxelSize;

      header.alpha = parseFloat(brixStr.substr(103, 10));
      header.beta = parseFloat(brixStr.substr(113, 10));
      header.gamma = parseFloat(brixStr.substr(123, 10));

      divisor = parseFloat(brixStr.substr(138, 12)) / 100;
      summand = parseInt(brixStr.substr(155, 8));
    } else {
            // swap byte order when big endian
      if (intView[ 18 ] !== 100) {
        for (var i$1 = 0, n = intView.length; i$1 < n; ++i$1) {
          var val = intView[ i$1 ];
          intView[ i$1 ] = ((val & 0xff) << 8) | ((val >> 8) & 0xff);
        }
      }

      header.xStart = intView[ 0 ];  // NXSTART
      header.yStart = intView[ 1 ];
      header.zStart = intView[ 2 ];

      header.xExtent = intView[ 3 ];  // NX
      header.yExtent = intView[ 4 ];
      header.zExtent = intView[ 5 ];

      header.xRate = intView[ 6 ];  // MX
      header.yRate = intView[ 7 ];
      header.zRate = intView[ 8 ];

      var factor = 1 / intView[ 17 ];
      var scalingFactor = factor * this.voxelSize;

      header.xlen = intView[ 9 ] * scalingFactor;
      header.ylen = intView[ 10 ] * scalingFactor;
      header.zlen = intView[ 11 ] * scalingFactor;

      header.alpha = intView[ 12 ] * factor;
      header.beta = intView[ 13 ] * factor;
      header.gamma = intView[ 14 ] * factor;

      divisor = intView[ 15 ] / 100;
      summand = intView[ 16 ];
    }

    v.header = header;

    Log.log(header, divisor, summand);

    var data = new Float32Array(
            header.xExtent * header.yExtent * header.zExtent
        );

    var offset = 512;
    var xBlocks = Math.ceil(header.xExtent / 8);
    var yBlocks = Math.ceil(header.yExtent / 8);
    var zBlocks = Math.ceil(header.zExtent / 8);

        // loop over blocks
    for (var zz = 0; zz < zBlocks; ++zz) {
      for (var yy = 0; yy < yBlocks; ++yy) {
        for (var xx = 0; xx < xBlocks; ++xx) {
                    // loop inside block
          for (var k = 0; k < 8; ++k) {
            var z = 8 * zz + k;
            for (var j = 0; j < 8; ++j) {
              var y = 8 * yy + j;
              for (var i = 0; i < 8; ++i) {
                var x = 8 * xx + i;

                                // check if remaining slice-part contains data
                if (x < header.xExtent && y < header.yExtent && z < header.zExtent) {
                  var idx = ((((x * header.yExtent) + y) * header.zExtent) + z);
                  data[ idx ] = (byteView[ offset ] - summand) / divisor;
                  ++offset;
                } else {
                  offset += 8 - i;
                  break
                }
              }
            }
          }
        }
      }
    }

    v.setData(data, header.zExtent, header.yExtent, header.xExtent);

    if (Debug) { Log.timeEnd('Dsn6Parser._parse ' + this.name); }
  };

  Dsn6Parser.prototype.getMatrix = function getMatrix () {
    var h = this.volume.header;

    var basisX = [
      h.xlen,
      0,
      0
    ];

    var basisY = [
      h.ylen * Math.cos(Math.PI / 180.0 * h.gamma),
      h.ylen * Math.sin(Math.PI / 180.0 * h.gamma),
      0
    ];

    var basisZ = [
      h.zlen * Math.cos(Math.PI / 180.0 * h.beta),
      h.zlen * (
                    Math.cos(Math.PI / 180.0 * h.alpha) -
                    Math.cos(Math.PI / 180.0 * h.gamma) *
                    Math.cos(Math.PI / 180.0 * h.beta)
                ) / Math.sin(Math.PI / 180.0 * h.gamma),
      0
    ];
    basisZ[ 2 ] = Math.sqrt(
            h.zlen * h.zlen * Math.sin(Math.PI / 180.0 * h.beta) *
            Math.sin(Math.PI / 180.0 * h.beta) - basisZ[ 1 ] * basisZ[ 1 ]
        );

    var basis = [ 0, basisX, basisY, basisZ ];
    var nxyz = [ 0, h.xRate, h.yRate, h.zRate ];
    var mapcrs = [ 0, 1, 2, 3 ];

    var matrix = new Matrix4();

    matrix.set(

            basis[ mapcrs[1] ][0] / nxyz[ mapcrs[1] ],
            basis[ mapcrs[2] ][0] / nxyz[ mapcrs[2] ],
            basis[ mapcrs[3] ][0] / nxyz[ mapcrs[3] ],
            0,

            basis[ mapcrs[1] ][1] / nxyz[ mapcrs[1] ],
            basis[ mapcrs[2] ][1] / nxyz[ mapcrs[2] ],
            basis[ mapcrs[3] ][1] / nxyz[ mapcrs[3] ],
            0,

            basis[ mapcrs[1] ][2] / nxyz[ mapcrs[1] ],
            basis[ mapcrs[2] ][2] / nxyz[ mapcrs[2] ],
            basis[ mapcrs[3] ][2] / nxyz[ mapcrs[3] ],
            0,

            0, 0, 0, 1

        );

    matrix.multiply(
            new Matrix4().makeRotationY(degToRad(90))
        );

    matrix.multiply(new Matrix4().makeTranslation(
            -h.zStart, h.yStart, h.xStart
        ));

    matrix.multiply(new Matrix4().makeScale(
            -1, 1, 1
        ));

    return matrix
  };

  Object.defineProperties( Dsn6Parser.prototype, prototypeAccessors );

  return Dsn6Parser;
}(VolumeParser));

ParserRegistry.add('dsn6', Dsn6Parser);
ParserRegistry.add('brix', Dsn6Parser);

/**
 * @file Dx Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var DxParser = (function (VolumeParser$$1) {
  function DxParser () {
    VolumeParser$$1.apply(this, arguments);
  }

  if ( VolumeParser$$1 ) DxParser.__proto__ = VolumeParser$$1;
  DxParser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
  DxParser.prototype.constructor = DxParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'dx' };

  DxParser.prototype._parse = function _parse () {
        // http://www.poissonboltzmann.org/docs/file-format-info/

    if (Debug) { Log.time('DxParser._parse ' + this.name); }

    var v = this.volume;
    var headerLines = this.streamer.peekLines(30);
    var headerInfo = this.parseHeaderLines(headerLines);
    var header = this.volume.header;
    var dataLineStart = headerInfo.dataLineStart;

    var reWhitespace = /\s+/;
    var size = header.nx * header.ny * header.nz;
    var data = new Float32Array(size);
    var count = 0;
    var lineNo = 0;

    function _parseChunkOfLines (_i, _n, lines) {
      for (var i = _i; i < _n; ++i) {
        if (count < size && lineNo > dataLineStart) {
          var line = lines[ i ].trim();

          if (line !== '') {
            var ls = line.split(reWhitespace);

            for (var j = 0, lj = ls.length; j < lj; ++j) {
              data[ count ] = parseFloat(ls[ j ]);
              ++count;
            }
          }
        }

        ++lineNo;
      }
    }

    this.streamer.eachChunkOfLines(function (lines/*, chunkNo, chunkCount */) {
      _parseChunkOfLines(0, lines.length, lines);
    });

    v.setData(data, header.nz, header.ny, header.nx);

    if (Debug) { Log.timeEnd('DxParser._parse ' + this.name); }
  };

  DxParser.prototype.parseHeaderLines = function parseHeaderLines (headerLines) {
    var this$1 = this;

    var header = {};
    var reWhitespace = /\s+/;
    var n = headerLines.length;

    var dataLineStart = 0;
    var headerByteCount = 0;
    var deltaLineCount = 0;

    for (var i = 0; i < n; ++i) {
      var ls;
      var line = headerLines[ i ];

      if (line.startsWith('object 1')) {
        ls = line.split(reWhitespace);

        header.nx = parseInt(ls[ 5 ]);
        header.ny = parseInt(ls[ 6 ]);
        header.nz = parseInt(ls[ 7 ]);
      } else if (line.startsWith('origin')) {
        ls = line.split(reWhitespace);

        header.xmin = parseFloat(ls[ 1 ]);
        header.ymin = parseFloat(ls[ 2 ]);
        header.zmin = parseFloat(ls[ 3 ]);
      } else if (line.startsWith('delta')) {
        ls = line.split(reWhitespace);

        if (deltaLineCount === 0) {
          header.hx = parseFloat(ls[ 1 ]) * this$1.voxelSize;
        } else if (deltaLineCount === 1) {
          header.hy = parseFloat(ls[ 2 ]) * this$1.voxelSize;
        } else if (deltaLineCount === 2) {
          header.hz = parseFloat(ls[ 3 ]) * this$1.voxelSize;
        }

        deltaLineCount += 1;
      } else if (line.startsWith('object 3')) {
        dataLineStart = i;
        headerByteCount += line.length + 1;
        break
      }

      headerByteCount += line.length + 1;
    }

    this.volume.header = header;

    return {
      dataLineStart: dataLineStart,
      headerByteCount: headerByteCount
    }
  };

  DxParser.prototype.getMatrix = function getMatrix () {
    var h = this.volume.header;
    var matrix = new Matrix4();

    matrix.multiply(
            new Matrix4().makeRotationY(degToRad(90))
        );

    matrix.multiply(
            new Matrix4().makeTranslation(
                -h.zmin, h.ymin, h.xmin
            )
        );

    matrix.multiply(
            new Matrix4().makeScale(
                -h.hz, h.hy, h.hx
            )
        );

    return matrix
  };

  Object.defineProperties( DxParser.prototype, prototypeAccessors );

  return DxParser;
}(VolumeParser));

ParserRegistry.add('dx', DxParser);

/**
 * @file Dxbin Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var DxbinParser = (function (DxParser$$1) {
  function DxbinParser () {
    DxParser$$1.apply(this, arguments);
  }

  if ( DxParser$$1 ) DxbinParser.__proto__ = DxParser$$1;
  DxbinParser.prototype = Object.create( DxParser$$1 && DxParser$$1.prototype );
  DxbinParser.prototype.constructor = DxbinParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'dxbin' };

  DxbinParser.prototype._parse = function _parse () {
        // https://github.com/Electrostatics/apbs-pdb2pqr/issues/216

    if (Debug) { Log.time('DxbinParser._parse ' + this.name); }

    var bin = this.streamer.data;
    if (bin instanceof Uint8Array) {
      bin = bin.buffer;
    }

    var headerLines = uint8ToLines(new Uint8Array(bin, 0, 1000));
    var headerInfo = this.parseHeaderLines(headerLines);
    var header = this.volume.header;
    var headerByteCount = headerInfo.headerByteCount;

    var size = header.nx * header.ny * header.nz;
    var dv = new DataView(bin);
    var data = new Float32Array(size);

    for (var i = 0; i < size; ++i) {
      data[ i ] = dv.getFloat64(i * 8 + headerByteCount, true);
    }

    this.volume.setData(data, header.nz, header.ny, header.nx);

    if (Debug) { Log.timeEnd('DxbinParser._parse ' + this.name); }
  };

  Object.defineProperties( DxbinParser.prototype, prototypeAccessors );

  return DxbinParser;
}(DxParser));

ParserRegistry.add('dxbin', DxbinParser);

/**
 * @file Mrc Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var MrcParser = (function (VolumeParser$$1) {
  function MrcParser () {
    VolumeParser$$1.apply(this, arguments);
  }

  if ( VolumeParser$$1 ) MrcParser.__proto__ = VolumeParser$$1;
  MrcParser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
  MrcParser.prototype.constructor = MrcParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'mrc' };

  MrcParser.prototype._parse = function _parse () {
        // MRC
        // http://ami.scripps.edu/software/mrctools/mrc_specification.php
        // http://www2.mrc-lmb.cam.ac.uk/research/locally-developed-software/image-processing-software/#image
        // http://bio3d.colorado.edu/imod/doc/mrc_format.txt

        // CCP4 (MAP)
        // http://www.ccp4.ac.uk/html/maplib.html

        // MRC format does not use the skew transformation header records (words 25-37)
        // CCP4 format does not use the ORIGIN header records (words 50-52)

    if (Debug) { Log.time('MrcParser._parse ' + this.name); }

    var bin = this.streamer.data;

    if (bin instanceof Uint8Array) {
      bin = bin.buffer;
    }

    var v = this.volume;
    var header = {};

    var intView = new Int32Array(bin, 0, 56);
    var floatView = new Float32Array(bin, 0, 56);

    var dv = new DataView(bin);

        // 53  MAP         Character string 'MAP ' to identify file type
    header.MAP = String.fromCharCode(
            dv.getUint8(52 * 4), dv.getUint8(52 * 4 + 1),
            dv.getUint8(52 * 4 + 2), dv.getUint8(52 * 4 + 3)
        );

        // 54  MACHST      Machine stamp indicating machine type which wrote file
        //                 17 and 17 for big-endian or 68 and 65 for little-endian
    header.MACHST = [ dv.getUint8(53 * 4), dv.getUint8(53 * 4 + 1) ];

        // swap byte order when big endian
    if (header.MACHST[ 0 ] === 17 && header.MACHST[ 1 ] === 17) {
      var n = bin.byteLength;
      for (var i = 0; i < n; i += 4) {
        dv.setFloat32(i, dv.getFloat32(i), true);
      }
    }

    header.NX = intView[ 0 ];  // NC - columns (fastest changing)
    header.NY = intView[ 1 ];  // NR - rows
    header.NZ = intView[ 2 ];  // NS - sections (slowest changing)

        // mode
        //  0 image : signed 8-bit bytes range -128 to 127
        //  1 image : 16-bit halfwords
        //  2 image : 32-bit reals
        //  3 transform : complex 16-bit integers
        //  4 transform : complex 32-bit reals
        //  6 image : unsigned 16-bit range 0 to 65535
        // 16 image: unsigned char * 3 (for rgb data, non-standard)
        //
        // Note: Mode 2 is the normal mode used in the CCP4 programs.
        //       Other modes than 2 and 0 may NOT WORK
    header.MODE = intView[ 3 ];

        // start
    header.NXSTART = intView[ 4 ];  // NCSTART - first column
    header.NYSTART = intView[ 5 ];  // NRSTART - first row
    header.NZSTART = intView[ 6 ];  // NSSTART - first section

        // intervals
    header.MX = intView[ 7 ];  // intervals along x
    header.MY = intView[ 8 ];  // intervals along y
    header.MZ = intView[ 9 ];  // intervals along z

        // cell length (Angstroms in CCP4)
    header.xlen = floatView[ 10 ] * this.voxelSize;
    header.ylen = floatView[ 11 ] * this.voxelSize;
    header.zlen = floatView[ 12 ] * this.voxelSize;

        // cell angle (Degrees)
    header.alpha = floatView[ 13 ];
    header.beta = floatView[ 14 ];
    header.gamma = floatView[ 15 ];

        // axis correspondence (1,2,3 for X,Y,Z)
    header.MAPC = intView[ 16 ];  // column
    header.MAPR = intView[ 17 ];  // row
    header.MAPS = intView[ 18 ];  // section

        // density statistics
    header.DMIN = floatView[ 19 ];
    header.DMAX = floatView[ 20 ];
    header.DMEAN = floatView[ 21 ];

        // space group number 0 or 1 (default=0)
    header.ISPG = intView[ 22 ];

        // number of bytes used for symmetry data (0 or 80)
    header.NSYMBT = intView[ 23 ];

        // Flag for skew transformation, =0 none, =1 if foll
    header.LSKFLG = intView[ 24 ];

        // 26-34  SKWMAT  Skew matrix S (in order S11, S12, S13, S21 etc) if
        //                LSKFLG .ne. 0.
        // 35-37  SKWTRN  Skew translation t if LSKFLG != 0.
        //                Skew transformation is from standard orthogonal
        //                coordinate frame (as used for atoms) to orthogonal
        //                map frame, as Xo(map) = S * (Xo(atoms) - t)

        // 38      future use       (some of these are used by the MSUBSX routines
        //  .          "              in MAPBRICK, MAPCONT and FRODO)
        //  .          "   (all set to zero by default)
        //  .          "
        // 52          "

        // 50-52 origin in X,Y,Z used for transforms
    header.originX = floatView[ 49 ];
    header.originY = floatView[ 50 ];
    header.originZ = floatView[ 51 ];

        // 53  MAP         Character string 'MAP ' to identify file type
        // => see top of this parser

        // 54  MACHST      Machine stamp indicating machine type which wrote file
        // => see top of this parser

        // Rms deviation of map from mean density
    header.ARMS = floatView[ 54 ];

        // 56      NLABL           Number of labels being used
        // 57-256  LABEL(20,10)    10  80 character text labels (ie. A4 format)

    v.header = header;

        // Log.log( header );

    var data;
    if (header.MODE === 2) {
      data = new Float32Array(
                bin, 256 * 4 + header.NSYMBT,
                header.NX * header.NY * header.NZ
            );
    } else if (header.MODE === 0) {
      data = new Float32Array(new Int8Array(
                bin, 256 * 4 + header.NSYMBT,
                header.NX * header.NY * header.NZ
            ));

            // based on uglymol (https://github.com/uglymol/uglymol) by Marcin Wojdyr (wojdyr)
            // if the file was converted by mapmode2to0 - scale the data
      if (intView[ 39 ] === -128 && intView[ 40 ] === 127) {
                // scaling f(x)=b1*x+b0 such that f(-128)=min and f(127)=max
        var b1 = (header.DMAX - header.DMIN) / 255.0;
        var b0 = 0.5 * (header.DMIN + header.DMAX + b1);
        for (var j = 0, jl = data.length; j < jl; ++j) {
          data[ j ] = b1 * data[ j ] + b0;
        }
      }
    } else {
      Log.error('MrcParser unknown mode', header.MODE);
    }

    v.setData(data, header.NX, header.NY, header.NZ);

    if (Debug) { Log.timeEnd('MrcParser._parse ' + this.name); }
  };

  MrcParser.prototype.getMatrix = function getMatrix () {
    var h = this.volume.header;

    var basisX = [
      h.xlen,
      0,
      0
    ];

    var basisY = [
      h.ylen * Math.cos(Math.PI / 180.0 * h.gamma),
      h.ylen * Math.sin(Math.PI / 180.0 * h.gamma),
      0
    ];

    var basisZ = [
      h.zlen * Math.cos(Math.PI / 180.0 * h.beta),
      h.zlen * (
                    Math.cos(Math.PI / 180.0 * h.alpha) -
                    Math.cos(Math.PI / 180.0 * h.gamma) *
                    Math.cos(Math.PI / 180.0 * h.beta)
                ) / Math.sin(Math.PI / 180.0 * h.gamma),
      0
    ];
    basisZ[ 2 ] = Math.sqrt(
            h.zlen * h.zlen * Math.sin(Math.PI / 180.0 * h.beta) *
            Math.sin(Math.PI / 180.0 * h.beta) - basisZ[ 1 ] * basisZ[ 1 ]
        );

    var basis = [ 0, basisX, basisY, basisZ ];
    var nxyz = [ 0, h.MX, h.MY, h.MZ ];
    var mapcrs = [ 0, h.MAPC, h.MAPR, h.MAPS ];

    var matrix = new Matrix4();

    matrix.set(

            basis[ mapcrs[1] ][0] / nxyz[ mapcrs[1] ],
            basis[ mapcrs[2] ][0] / nxyz[ mapcrs[2] ],
            basis[ mapcrs[3] ][0] / nxyz[ mapcrs[3] ],
            0,

            basis[ mapcrs[1] ][1] / nxyz[ mapcrs[1] ],
            basis[ mapcrs[2] ][1] / nxyz[ mapcrs[2] ],
            basis[ mapcrs[3] ][1] / nxyz[ mapcrs[3] ],
            0,

            basis[ mapcrs[1] ][2] / nxyz[ mapcrs[1] ],
            basis[ mapcrs[2] ][2] / nxyz[ mapcrs[2] ],
            basis[ mapcrs[3] ][2] / nxyz[ mapcrs[3] ],
            0,

            0, 0, 0, 1

        );

    matrix.setPosition(new Vector3(
            h.originX, h.originY, h.originZ
        ));

    matrix.multiply(new Matrix4().makeTranslation(
            h.NXSTART, h.NYSTART, h.NZSTART
        ));

    return matrix
  };

  Object.defineProperties( MrcParser.prototype, prototypeAccessors );

  return MrcParser;
}(VolumeParser));

ParserRegistry.add('mrc', MrcParser);
ParserRegistry.add('ccp4', MrcParser);
ParserRegistry.add('map', MrcParser);

/**
 * @file Xplor Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var XplorParser = (function (VolumeParser$$1) {
  function XplorParser () {
    VolumeParser$$1.apply(this, arguments);
  }

  if ( VolumeParser$$1 ) XplorParser.__proto__ = VolumeParser$$1;
  XplorParser.prototype = Object.create( VolumeParser$$1 && VolumeParser$$1.prototype );
  XplorParser.prototype.constructor = XplorParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'xplor' };

  XplorParser.prototype._parse = function _parse () {
        // http://hincklab.uthscsa.edu/html/soft_packs/msi_docs/insight980/xplor/formats.html
        // http://www.mrc-lmb.cam.ac.uk/public/xtal/doc/cns/cns_1.3/tutorial/formats/maps/text.html

    if (Debug) { Log.time('XplorParser._parse ' + this.name); }

    var v = this.volume;
    var headerLines = this.streamer.peekLines(8);
    var header = {};
    var reWhitespace = /\s+/;

    function parseNumberLine (line) {
      return line.trim().split(reWhitespace).map(parseFloat)
    }

    var infoStart;
    if (headerLines[ 2 ].startsWith('REMARKS')) {
      infoStart = parseInt(headerLines[ 1 ].substring(0, 8)) + 2;
    } else {
      infoStart = 5;
    }
    var dataStart = infoStart + 3;

    var gridInfo = parseNumberLine(headerLines[ infoStart ]);
    header.NA = gridInfo[ 0 ];
    header.AMIN = gridInfo[ 1 ];
    header.AMAX = gridInfo[ 2 ];
    header.NB = gridInfo[ 3 ];
    header.BMIN = gridInfo[ 4 ];
    header.BMAX = gridInfo[ 5 ];
    header.NC = gridInfo[ 6 ];
    header.CMIN = gridInfo[ 7 ];
    header.CMAX = gridInfo[ 8 ];

    var cellInfo = parseNumberLine(headerLines[ infoStart + 1 ]);
    header.a = cellInfo[ 0 ] * this.voxelSize;
    header.b = cellInfo[ 1 ] * this.voxelSize;
    header.c = cellInfo[ 2 ] * this.voxelSize;
    header.alpha = cellInfo[ 3 ];
    header.beta = cellInfo[ 4 ];
    header.gamma = cellInfo[ 5 ];

    var na = header.AMAX - header.AMIN + 1;
    var nb = header.BMAX - header.BMIN + 1;
    var nc = header.CMAX - header.CMIN + 1;
    var n = na * nb * nc;

    var data = new Float32Array(n);
    var count = 0;
    var lineNo = 0;
    var lineSection = 1 + (na * nb) / 6;

    function _parseChunkOfLines (_i, _n, lines) {
      for (var i = _i; i < _n; ++i) {
        var line = lines[ i ];

        if (lineNo >= dataStart && (lineNo - dataStart) % lineSection !== 0 && count < n) {
          for (var j = 0, lj = 6; j < lj; ++j) {
            data[ count ] = parseFloat(line.substr(12 * j, 12));
            ++count;
          }
        }

        ++lineNo;
      }
    }

    this.streamer.eachChunkOfLines(function (lines/*, chunkNo, chunkCount */) {
      _parseChunkOfLines(0, lines.length, lines);
    });

    v.header = header;
    v.setData(data, na, nb, nc);

    if (Debug) { Log.timeEnd('XplorParser._parse ' + this.name); }
  };

  XplorParser.prototype.getMatrix = function getMatrix () {
    var h = this.volume.header;

    var basisX = [
      h.a,
      0,
      0
    ];

    var basisY = [
      h.b * Math.cos(Math.PI / 180.0 * h.gamma),
      h.b * Math.sin(Math.PI / 180.0 * h.gamma),
      0
    ];

    var basisZ = [
      h.c * Math.cos(Math.PI / 180.0 * h.beta),
      h.c * (
                    Math.cos(Math.PI / 180.0 * h.alpha) -
                    Math.cos(Math.PI / 180.0 * h.gamma) *
                    Math.cos(Math.PI / 180.0 * h.beta)
                ) / Math.sin(Math.PI / 180.0 * h.gamma),
      0
    ];
    basisZ[ 2 ] = Math.sqrt(
            h.c * h.c * Math.sin(Math.PI / 180.0 * h.beta) *
            Math.sin(Math.PI / 180.0 * h.beta) - basisZ[ 1 ] * basisZ[ 1 ]
        );

    var basis = [ 0, basisX, basisY, basisZ ];
    var nxyz = [ 0, h.NA, h.NB, h.NC ];
    var mapcrs = [ 0, 1, 2, 3 ];

    var matrix = new Matrix4();

    matrix.set(

            basis[ mapcrs[1] ][0] / nxyz[ mapcrs[1] ],
            basis[ mapcrs[2] ][0] / nxyz[ mapcrs[2] ],
            basis[ mapcrs[3] ][0] / nxyz[ mapcrs[3] ],
            0,

            basis[ mapcrs[1] ][1] / nxyz[ mapcrs[1] ],
            basis[ mapcrs[2] ][1] / nxyz[ mapcrs[2] ],
            basis[ mapcrs[3] ][1] / nxyz[ mapcrs[3] ],
            0,

            basis[ mapcrs[1] ][2] / nxyz[ mapcrs[1] ],
            basis[ mapcrs[2] ][2] / nxyz[ mapcrs[2] ],
            basis[ mapcrs[3] ][2] / nxyz[ mapcrs[3] ],
            0,

            0, 0, 0, 1

        );

    matrix.multiply(new Matrix4().makeTranslation(
            h.AMIN, h.BMIN, h.CMIN
        ));

    return matrix
  };

  Object.defineProperties( XplorParser.prototype, prototypeAccessors );

  return XplorParser;
}(VolumeParser));

ParserRegistry.add('xplor', XplorParser);
ParserRegistry.add('cns', XplorParser);

/**
 * @file Surface Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var SurfaceParser = (function (Parser$$1) {
  function SurfaceParser (streamer, params) {
    Parser$$1.call(this, streamer, params);

    this.loader = this.getLoader();
    this.surface = new Surface(this.name, this.path);
  }

  if ( Parser$$1 ) SurfaceParser.__proto__ = Parser$$1;
  SurfaceParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
  SurfaceParser.prototype.constructor = SurfaceParser;

  var prototypeAccessors = { type: {},__objName: {} };

  prototypeAccessors.type.get = function () { return 'surface' };
  prototypeAccessors.__objName.get = function () { return 'surface' };

  SurfaceParser.prototype._parse = function _parse () {
    var geometry = this.loader.parse(this.streamer.asText());

    this.surface.fromGeometry(geometry);
  };

  Object.defineProperties( SurfaceParser.prototype, prototypeAccessors );

  return SurfaceParser;
}(Parser));

/**
 * @file Obj Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * OBJLoader
 * @class
 * @private
 * @author mrdoob / http://mrdoob.com/
 */
function OBJLoader () {
  this.regexp = {
        // v float float float
    vertex_pattern: /^v\s+([\d|.|+|\-|e|E]+)\s+([\d|.|+|\-|e|E]+)\s+([\d|.|+|\-|e|E]+)/,
        // vn float float float
    normal_pattern: /^vn\s+([\d|.|+|\-|e|E]+)\s+([\d|.|+|\-|e|E]+)\s+([\d|.|+|\-|e|E]+)/,
        // vt float float
    uv_pattern: /^vt\s+([\d|.|+|\-|e|E]+)\s+([\d|.|+|\-|e|E]+)/,
        // f vertex vertex vertex
    face_vertex: /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,
        // f vertex/uv vertex/uv vertex/uv
    face_vertex_uv: /^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,
        // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
    face_vertex_uv_normal: /^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,
        // f vertex//normal vertex//normal vertex//normal
    face_vertex_normal: /^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,
        // o object_name | g group_name
    object_pattern: /^[og]\s*(.+)?/,
        // s boolean
    smoothing_pattern: /^s\s+(\d+|on|off)/,
        // mtllib file_reference
    material_library_pattern: /^mtllib /,
        // usemtl material_name
    material_use_pattern: /^usemtl /
  };
}

OBJLoader.prototype = {

  constructor: OBJLoader,

  setPath: function (value) {
    this.path = value;
  },

  _createParserState: function () {
    var state = {
      objects: [],
      object: {},

      vertices: [],
      normals: [],

      startObject: function (name, fromDeclaration) {
        // If the current object (initial from reset) is not from a g/o declaration in the parsed
        // file. We need to use it for the first parsed g/o to keep things in sync.
        if (this.object && this.object.fromDeclaration === false) {
          this.object.name = name;
          this.object.fromDeclaration = (fromDeclaration !== false);
          return
        }

        this.object = {
          name: name || '',
          geometry: {
            vertices: [],
            normals: []
          },
          fromDeclaration: (fromDeclaration !== false)
        };

        this.objects.push(this.object);
      },

      parseVertexIndex: function (value, len) {
        var index = parseInt(value, 10);
        return (index >= 0 ? index - 1 : index + len / 3) * 3
      },

      parseNormalIndex: function (value, len) {
        var index = parseInt(value, 10);
        return (index >= 0 ? index - 1 : index + len / 3) * 3
      },

      addVertex: function (a, b, c) {
        var src = this.vertices;
        var dst = this.object.geometry.vertices;

        dst.push(src[ a + 0 ]);
        dst.push(src[ a + 1 ]);
        dst.push(src[ a + 2 ]);
        dst.push(src[ b + 0 ]);
        dst.push(src[ b + 1 ]);
        dst.push(src[ b + 2 ]);
        dst.push(src[ c + 0 ]);
        dst.push(src[ c + 1 ]);
        dst.push(src[ c + 2 ]);
      },

      addVertexLine: function (a) {
        var src = this.vertices;
        var dst = this.object.geometry.vertices;

        dst.push(src[ a + 0 ]);
        dst.push(src[ a + 1 ]);
        dst.push(src[ a + 2 ]);
      },

      addNormal: function (a, b, c) {
        var src = this.normals;
        var dst = this.object.geometry.normals;

        dst.push(src[ a + 0 ]);
        dst.push(src[ a + 1 ]);
        dst.push(src[ a + 2 ]);
        dst.push(src[ b + 0 ]);
        dst.push(src[ b + 1 ]);
        dst.push(src[ b + 2 ]);
        dst.push(src[ c + 0 ]);
        dst.push(src[ c + 1 ]);
        dst.push(src[ c + 2 ]);
      },

      addFace: function (a, b, c, d, na, nb, nc, nd) {
        var vLen = this.vertices.length;

        var ia = this.parseVertexIndex(a, vLen);
        var ib = this.parseVertexIndex(b, vLen);
        var ic = this.parseVertexIndex(c, vLen);
        var id;

        if (d === undefined) {
          this.addVertex(ia, ib, ic);
        } else {
          id = this.parseVertexIndex(d, vLen);

          this.addVertex(ia, ib, id);
          this.addVertex(ib, ic, id);
        }

        if (na !== undefined) {
          // Normals are many times the same. If so, skip function call and parseInt.
          var nLen = this.normals.length;
          ia = this.parseNormalIndex(na, nLen);

          ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);
          ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);

          if (d === undefined) {
            this.addNormal(ia, ib, ic);
          } else {
            id = this.parseNormalIndex(nd, nLen);

            this.addNormal(ia, ib, id);
            this.addNormal(ib, ic, id);
          }
        }
      },

      addLineGeometry: function (vertices) {
        var this$1 = this;

        this.object.geometry.type = 'Line';

        var vLen = this.vertices.length;

        for (var vi = 0, l = vertices.length; vi < l; vi++) {
          this$1.addVertexLine(this$1.parseVertexIndex(vertices[ vi ], vLen));
        }
      }

    };

    state.startObject('', false);

    return state
  },

  parse: function (text) {
    var this$1 = this;

    var state = this._createParserState();

    if (text.indexOf('\r\n') !== -1) {
            // This is faster than String.split with regex that splits on both
      text = text.replace(/\r\n/g, '\n');
    }

    if (text.indexOf('\\\n') !== -1) {
            // join lines separated by a line continuation character (\)
      text = text.replace(/\\\n/g, '');
    }

    var i, l;
    var lines = text.split('\n');
    var line = '';
    var lineFirstChar = '';
    var lineSecondChar = '';
    var lineLength = 0;
    var result = [];

        // Faster to just trim left side of the line. Use if available.
    var trimLeft = (typeof ''.trimLeft === 'function');

    for (i = 0, l = lines.length; i < l; i++) {
      line = lines[ i ];

      line = trimLeft ? line.trimLeft() : line.trim();

      lineLength = line.length;

      if (lineLength === 0) { continue }

      lineFirstChar = line.charAt(0);

      // @todo invoke passed in handler if any
      if (lineFirstChar === '#') { continue }

      if (lineFirstChar === 'v') {
        lineSecondChar = line.charAt(1);

        if (lineSecondChar === ' ' && (result = this$1.regexp.vertex_pattern.exec(line)) !== null) {
          // 0                  1      2      3
          // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

          state.vertices.push(
            parseFloat(result[ 1 ]),
            parseFloat(result[ 2 ]),
            parseFloat(result[ 3 ])
          );
        } else if (lineSecondChar === 'n' && (result = this$1.regexp.normal_pattern.exec(line)) !== null) {
          // 0                   1      2      3
          // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

          state.normals.push(
            parseFloat(result[ 1 ]),
            parseFloat(result[ 2 ]),
            parseFloat(result[ 3 ])
          );
        } else if (lineSecondChar === 't' && (result = this$1.regexp.uv_pattern.exec(line)) !== null) {

          // ignore uv line

        } else {
          throw new Error("Unexpected vertex/normal/uv line: '" + line + "'")
        }
      } else if (lineFirstChar === 'f') {
        if ((result = this$1.regexp.face_vertex_uv_normal.exec(line)) !== null) {
          // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
          // 0                        1    2    3    4    5    6    7    8    9   10         11         12
          // ["f 1/1/1 2/2/2 3/3/3", "1", "1", "1", "2", "2", "2", "3", "3", "3", undefined, undefined, undefined]

          state.addFace(
            result[ 1 ], result[ 4 ], result[ 7 ], result[ 10 ],
            // result[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],  // ignore uv part
            result[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]
          );
        } else if ((result = this$1.regexp.face_vertex_uv.exec(line)) !== null) {

          // ignore uv line

        } else if ((result = this$1.regexp.face_vertex_normal.exec(line)) !== null) {
          // f vertex//normal vertex//normal vertex//normal
          // 0                     1    2    3    4    5    6   7          8
          // ["f 1//1 2//2 3//3", "1", "1", "2", "2", "3", "3", undefined, undefined]

          state.addFace(
            result[ 1 ], result[ 3 ], result[ 5 ], result[ 7 ],
            result[ 2 ], result[ 4 ], result[ 6 ], result[ 8 ]
          );
        } else if ((result = this$1.regexp.face_vertex.exec(line)) !== null) {
          // f vertex vertex vertex
          // 0            1    2    3   4
          // ["f 1 2 3", "1", "2", "3", undefined]

          state.addFace(
            result[ 1 ], result[ 2 ], result[ 3 ], result[ 4 ]
          );
        } else {
          throw new Error("Unexpected face line: '" + line + "'")
        }
      } else if (lineFirstChar === 'l') {
        var lineParts = line.substring(1).trim().split(' ');
        var lineVertices = [];
        var lineUVs = [];

        if (line.indexOf('/') === -1) {
          lineVertices = lineParts;
        } else {
          for (var li = 0, llen = lineParts.length; li < llen; li++) {
            var parts = lineParts[ li ].split('/');

            if (parts[ 0 ] !== '') { lineVertices.push(parts[ 0 ]); }
            if (parts[ 1 ] !== '') { lineUVs.push(parts[ 1 ]); }
          }
        }
        state.addLineGeometry(lineVertices, lineUVs);
      } else if ((result = this$1.regexp.object_pattern.exec(line)) !== null) {
        // o object_name
        // or
        // g group_name

        var name = result[ 0 ].substr(1).trim();
        state.startObject(name);

        // ignore material related lines
        // eslint-disable-next-line no-empty
      } else if (this$1.regexp.material_use_pattern.test(line)) {
        // eslint-disable-next-line no-empty
      } else if (this$1.regexp.material_library_pattern.test(line)) {
        // eslint-disable-next-line no-empty
      } else if ((result = this$1.regexp.smoothing_pattern.exec(line)) !== null) {
      } else {
        // Handle null terminated files without exception
        if (line === '\0') { continue }

        throw new Error("Unexpected line: '" + line + "'")
      }
    }

    var container = [];

    for (i = 0, l = state.objects.length; i < l; i++) {
      var object = state.objects[ i ];
      var geometry = object.geometry;

      // Skip o/g line declarations that did not follow with any faces
      if (geometry.vertices.length === 0) { continue }

      var buffergeometry = new BufferGeometry();

      buffergeometry.addAttribute('position', new BufferAttribute(new Float32Array(geometry.vertices), 3));

      if (geometry.normals.length > 0) {
        buffergeometry.addAttribute('normal', new BufferAttribute(new Float32Array(geometry.normals), 3));
      } else {
        buffergeometry.computeVertexNormals();
      }

      container.push(buffergeometry);
    }

    return container
  }

};

var ObjParser = (function (SurfaceParser$$1) {
  function ObjParser () {
    SurfaceParser$$1.apply(this, arguments);
  }

  if ( SurfaceParser$$1 ) ObjParser.__proto__ = SurfaceParser$$1;
  ObjParser.prototype = Object.create( SurfaceParser$$1 && SurfaceParser$$1.prototype );
  ObjParser.prototype.constructor = ObjParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'obj' };

  ObjParser.prototype.getLoader = function getLoader () {
    return new OBJLoader()
  };

  Object.defineProperties( ObjParser.prototype, prototypeAccessors );

  return ObjParser;
}(SurfaceParser));

ParserRegistry.add('obj', ObjParser);

/**
 * @file Ply Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * PLYLoader
 * @class
 * @private
 * @author Wei Meng / http://about.me/menway
 *
 * @description
 * A THREE loader for PLY ASCII files (known as the Polygon File Format or the Stanford Triangle Format).
 *
 * Limitations: ASCII decoding assumes file is UTF-8.
 *
 * @example
 * var loader = new THREE.PLYLoader();
 * loader.load('./models/ply/ascii/dolphins.ply', function (geometry) {
 *     scene.add( new THREE.Mesh( geometry ) );
 * } );
 *
 * // If the PLY file uses non standard property names, they can be mapped while
 * // loading. For example, the following maps the properties
 * // “diffuse_(red|green|blue)” in the file to standard color names.
 *
 * loader.setPropertyNameMapping( {
 *     diffuse_red: 'red',
 *     diffuse_green: 'green',
 *     diffuse_blue: 'blue'
 * } );
 *
 */
function PLYLoader () {
  this.propertyNameMapping = {};
}

PLYLoader.prototype = {

  constructor: PLYLoader,

  setPropertyNameMapping: function (mapping) {
    this.propertyNameMapping = mapping;
  },

  bin2str: function (buf) {
    var arrayBuffer = new Uint8Array(buf);
    var str = '';
    for (var i = 0; i < buf.byteLength; i++) {
      str += String.fromCharCode(arrayBuffer[ i ]); // implicitly assumes little-endian
    }

    return str
  },

  isASCII: function (data) {
    var header = this.parseHeader(this.bin2str(data));

    return header.format === 'ascii'
  },

  parse: function (data) {
    if (data instanceof ArrayBuffer) {
      return (
                this.isASCII(data)
                    ? this.parseASCII(this.bin2str(data))
                    : this.parseBinary(data)
      )
    } else {
      return this.parseASCII(data)
    }
  },

  parseHeader: function (data) {
    var this$1 = this;

    var patternHeader = /ply([\s\S]*)end_header\s/;
    var headerText = '';
    var headerLength = 0;
    var result = patternHeader.exec(data);
    if (result !== null) {
      headerText = result[ 1 ];
      headerLength = result[ 0 ].length;
    }

    var header = {
      comments: [],
      elements: [],
      headerLength: headerLength
    };

    var lines = headerText.split('\n');
    var currentElement, lineType, lineValues;

    function makePlyElementProperty (propertValues, propertyNameMapping) {
      var property = {
        type: propertValues[ 0 ]
      };

      if (property.type === 'list') {
        property.name = propertValues[ 3 ];
        property.countType = propertValues[ 1 ];
        property.itemType = propertValues[ 2 ];
      } else {
        property.name = propertValues[ 1 ];
      }

      if (property.name in propertyNameMapping) {
        property.name = propertyNameMapping[ property.name ];
      }

      return property
    }

    for (var i = 0; i < lines.length; i++) {
      var line = lines[ i ];
      line = line.trim();
      if (line === '') {
        continue
      }
      lineValues = line.split(/\s+/);
      lineType = lineValues.shift();
      line = lineValues.join(' ');

      switch (lineType) {
        case 'format':

          header.format = lineValues[ 0 ];
          header.version = lineValues[ 1 ];

          break

        case 'comment':

          header.comments.push(line);

          break

        case 'element':

          if (currentElement !== undefined) {
            header.elements.push(currentElement);
          }

          currentElement = {};
          currentElement.name = lineValues[ 0 ];
          currentElement.count = parseInt(lineValues[ 1 ]);
          currentElement.properties = [];

          break

        case 'property':

          currentElement.properties.push(makePlyElementProperty(lineValues, this$1.propertyNameMapping));

          break

        default:

          console.log('unhandled', lineType, lineValues);
      }
    }

    if (currentElement !== undefined) {
      header.elements.push(currentElement);
    }

    return header
  },

  parseASCIINumber: function (n, type) {
    switch (type) {
      case 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':
      case 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':

        return parseInt(n)

      case 'float': case 'double': case 'float32': case 'float64':

        return parseFloat(n)
    }
  },

  parseASCIIElement: function (properties, line) {
    var this$1 = this;

    var values = line.split(/\s+/);

    var element = {};

    for (var i = 0; i < properties.length; i++) {
      if (properties[ i ].type === 'list') {
        var list = [];
        var n = this$1.parseASCIINumber(values.shift(), properties[ i ].countType);

        for (var j = 0; j < n; j++) {
          list.push(this$1.parseASCIINumber(values.shift(), properties[ i ].itemType));
        }

        element[ properties[ i ].name ] = list;
      } else {
        element[ properties[ i ].name ] = this$1.parseASCIINumber(values.shift(), properties[ i ].type);
      }
    }

    return element
  },

  parseASCII: function (data) {
    var this$1 = this;

        // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)

    var geometry = new Geometry();

    var result;

    var header = this.parseHeader(data);

    var patternBody = /end_header\s([\s\S]*)$/;
    var body = '';
    if ((result = patternBody.exec(data)) !== null) {
      body = result[ 1 ];
    }

    var lines = body.split('\n');
    var currentElement = 0;
    var currentElementCount = 0;
    geometry.useColor = false;

    for (var i = 0; i < lines.length; i++) {
      var line = lines[ i ];
      line = line.trim();
      if (line === '') {
        continue
      }

      if (currentElementCount >= header.elements[ currentElement ].count) {
        currentElement++;
        currentElementCount = 0;
      }

      var element = this$1.parseASCIIElement(header.elements[ currentElement ].properties, line);

      this$1.handleElement(geometry, header.elements[ currentElement ].name, element);

      currentElementCount++;
    }

    return this.postProcess(geometry)
  },

  postProcess: function (geometry) {
    if (geometry.useColor) {
      for (var i = 0; i < geometry.faces.length; i++) {
        geometry.faces[ i ].vertexColors = [
          geometry.colors[ geometry.faces[ i ].a ],
          geometry.colors[ geometry.faces[ i ].b ],
          geometry.colors[ geometry.faces[ i ].c ]
        ];
      }

      geometry.elementsNeedUpdate = true;
    }

    geometry.computeBoundingSphere();

    return geometry
  },

  handleElement: function (geometry, elementName, element) {
    if (elementName === 'vertex') {
      geometry.vertices.push(
                new Vector3(element.x, element.y, element.z)
            );

      if ('red' in element && 'green' in element && 'blue' in element) {
        geometry.useColor = true;

        var color = new Color();
        color.setRGB(element.red / 255.0, element.green / 255.0, element.blue / 255.0);
        geometry.colors.push(color);
      }
    } else if (elementName === 'face') {
      var vertexIndices = element.vertex_indices;

      if (vertexIndices.length === 3) {
        geometry.faces.push(
                    new Face3(vertexIndices[ 0 ], vertexIndices[ 1 ], vertexIndices[ 2 ])
                );
      } else if (vertexIndices.length === 4) {
        geometry.faces.push(
                    new Face3(vertexIndices[ 0 ], vertexIndices[ 1 ], vertexIndices[ 3 ]),
                    new Face3(vertexIndices[ 1 ], vertexIndices[ 2 ], vertexIndices[ 3 ])
                );
      }
    }
  },

  binaryRead: function (dataview, at, type, littleEndian) {
    switch (type) {
            // corespondences for non-specific length types here match rply:
      case 'int8': case 'char': return [ dataview.getInt8(at), 1 ]

      case 'uint8': case 'uchar': return [ dataview.getUint8(at), 1 ]

      case 'int16': case 'short': return [ dataview.getInt16(at, littleEndian), 2 ]

      case 'uint16': case 'ushort': return [ dataview.getUint16(at, littleEndian), 2 ]

      case 'int32': case 'int': return [ dataview.getInt32(at, littleEndian), 4 ]

      case 'uint32': case 'uint': return [ dataview.getUint32(at, littleEndian), 4 ]

      case 'float32': case 'float': return [ dataview.getFloat32(at, littleEndian), 4 ]

      case 'float64': case 'double': return [ dataview.getFloat64(at, littleEndian), 8 ]
    }
  },

  binaryReadElement: function (dataview, at, properties, littleEndian) {
    var this$1 = this;

    var element = {};
    var result;
    var read = 0;

    for (var i = 0; i < properties.length; i++) {
      if (properties[ i ].type === 'list') {
        var list = [];

        result = this$1.binaryRead(dataview, at + read, properties[ i ].countType, littleEndian);
        var n = result[ 0 ];
        read += result[ 1 ];

        for (var j = 0; j < n; j++) {
          result = this$1.binaryRead(dataview, at + read, properties[ i ].itemType, littleEndian);
          list.push(result[ 0 ]);
          read += result[ 1 ];
        }

        element[ properties[ i ].name ] = list;
      } else {
        result = this$1.binaryRead(dataview, at + read, properties[ i ].type, littleEndian);
        element[ properties[ i ].name ] = result[ 0 ];
        read += result[ 1 ];
      }
    }

    return [ element, read ]
  },

  parseBinary: function (data) {
    var this$1 = this;

    var geometry = new Geometry();

    var header = this.parseHeader(this.bin2str(data));
    var littleEndian = (header.format === 'binary_little_endian');
    var body = new DataView(data, header.headerLength);
    var result;
    var loc = 0;

    for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {
      for (var currentElementCount = 0; currentElementCount < header.elements[ currentElement ].count; currentElementCount++) {
        result = this$1.binaryReadElement(body, loc, header.elements[ currentElement ].properties, littleEndian);
        loc += result[ 1 ];
        var element = result[ 0 ];

        this$1.handleElement(geometry, header.elements[ currentElement ].name, element);
      }
    }

    return this.postProcess(geometry)
  }

};

var PlyParser = (function (SurfaceParser$$1) {
  function PlyParser () {
    SurfaceParser$$1.apply(this, arguments);
  }

  if ( SurfaceParser$$1 ) PlyParser.__proto__ = SurfaceParser$$1;
  PlyParser.prototype = Object.create( SurfaceParser$$1 && SurfaceParser$$1.prototype );
  PlyParser.prototype.constructor = PlyParser;

  var prototypeAccessors = { type: {} };

  prototypeAccessors.type.get = function () { return 'ply' };

  PlyParser.prototype.getLoader = function getLoader () {
    return new PLYLoader()
  };

  Object.defineProperties( PlyParser.prototype, prototypeAccessors );

  return PlyParser;
}(SurfaceParser));

ParserRegistry.add('ply', PlyParser);

/**
 * @file Csv Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

/**
 * CSV parser
 */
var CsvParser = (function (Parser$$1) {
  function CsvParser (streamer, params) {
    var p = params || {};

    Parser$$1.call(this, streamer, p);

    this.delimiter = defaults(p.delimiter, ',');
    this.comment = defaults(p.comment, '#');
    this.columnNames = defaults(p.columnNames, false);

    this.table = {
      name: this.name,
      path: this.path,
      columnNames: [],
      data: []
    };
  }

  if ( Parser$$1 ) CsvParser.__proto__ = Parser$$1;
  CsvParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
  CsvParser.prototype.constructor = CsvParser;

  var prototypeAccessors = { type: {},__objName: {} };

  prototypeAccessors.type.get = function () { return 'csv' };
  prototypeAccessors.__objName.get = function () { return 'table' };

  CsvParser.prototype._parse = function _parse () {
    var this$1 = this;

    var data = this.table.data;
    var reDelimiter = new RegExp('\\s*' + this.delimiter + '\\s*');

    var j = 0;

    this.streamer.eachChunkOfLines(function (chunk) {
      var n = chunk.length;

      for (var i = 0; i < n; ++i) {
        var line = chunk[ i ].trim();
        if (line.startsWith(this$1.comment)) { continue }
        var values = line.split(reDelimiter);

        if (j === 0) {
          this$1.table.columnNames = values;
        } else if (line) {
          data.push(values);
        }
        ++j;
      }
    });
  };

  Object.defineProperties( CsvParser.prototype, prototypeAccessors );

  return CsvParser;
}(Parser));

ParserRegistry.add('csv', CsvParser);

/**
 * @file Json Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var JsonParser = (function (Parser$$1) {
  function JsonParser (streamer, params) {
    var p = params || {};

    Parser$$1.call(this, streamer, p);

    this.string = defaults(p.string, false);

    this.json = {
      name: this.name,
      path: this.path,
      data: {}
    };
  }

  if ( Parser$$1 ) JsonParser.__proto__ = Parser$$1;
  JsonParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
  JsonParser.prototype.constructor = JsonParser;

  var prototypeAccessors = { type: {},__objName: {} };

  prototypeAccessors.type.get = function () { return 'json' };
  prototypeAccessors.__objName.get = function () { return 'json' };

  JsonParser.prototype._parse = function _parse () {
    if (this.streamer.isBinary() || this.string) {
      this.json.data = JSON.parse(this.streamer.asText());
    } else {
      this.json.data = this.streamer.data;
    }
  };

  Object.defineProperties( JsonParser.prototype, prototypeAccessors );

  return JsonParser;
}(Parser));

ParserRegistry.add('json', JsonParser);

/**
 * @file Text Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var TextParser = (function (Parser$$1) {
  function TextParser (streamer, params) {
    Parser$$1.call(this, streamer, params);

    this.text = {

      name: this.name,
      path: this.path,
      data: ''

    };
  }

  if ( Parser$$1 ) TextParser.__proto__ = Parser$$1;
  TextParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
  TextParser.prototype.constructor = TextParser;

  var prototypeAccessors = { type: {},__objName: {} };

  prototypeAccessors.type.get = function () { return 'text' };
  prototypeAccessors.__objName.get = function () { return 'text' };

  TextParser.prototype._parse = function _parse () {
    this.text.data = this.streamer.asText();
  };

  Object.defineProperties( TextParser.prototype, prototypeAccessors );

  return TextParser;
}(Parser));

ParserRegistry.add('txt', TextParser);
ParserRegistry.add('text', TextParser);

/**
 * @file Parse Xml
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

// https://github.com/segmentio/xml-parser
// MIT license

var reStrip = /^['"]|['"]$/g;
var reTag = /^<([\w-:.]+)\s*/;
var reContent = /^([^<]*)/;
var reAttr = /([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/;

function strip (val) {
  return val.replace(reStrip, '')
}

function parseXml (xml) {
    // trim and strip comments
  xml = xml.trim().replace(/<!--[\s\S]*?-->/g, '');

  return document()

  function document () {
    return {
      declaration: declaration(),
      root: tag()
    }
  }

  function declaration () {
    var m = match(/^<\?xml\s*/);
    if (!m) { return }
        // tag
    var node = {
      attributes: {}
    };
        // attributes
    while (!(eos() || is('?>'))) {
      var attr = attribute();
      if (!attr) { return node }
      node.attributes[attr.name] = attr.value;
    }
    match(/\?>\s*/);
    return node
  }

  function tag () {
    var m = match(reTag);
    if (!m) { return }
        // name
    var node = {
      name: m[1],
      attributes: {},
      children: []
    };
        // attributes
    while (!(eos() || is('>') || is('?>') || is('/>'))) {
      var attr = attribute();
      if (!attr) { return node }
      node.attributes[attr.name] = attr.value;
    }
        // self closing tag
    if (match(/^\s*\/>\s*/)) {
      return node
    }
    match(/\??>\s*/);
        // content
    node.content = content();
        // children
    var child;
    while ((child = tag())) {
      node.children.push(child);
    }
        // closing
    match(/^<\/[\w-:.]+>\s*/);
    return node
  }

  function content () {
    var m = match(reContent);
    if (m) { return m[1] }
    return ''
  }

  function attribute () {
    var m = match(reAttr);
    if (!m) { return }
    return { name: m[1], value: strip(m[2]) }
  }

  function match (re) {
    var m = xml.match(re);
    if (!m) { return }
    xml = xml.slice(m[0].length);
    return m
  }

  function eos () {
    return xml.length === 0
  }

  function is (prefix) {
    return xml.indexOf(prefix) === 0
  }
}

/**
 * @file Xml Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var XmlParser = (function (Parser$$1) {
  function XmlParser (streamer, params) {
    var p = params || {};

    Parser$$1.call(this, streamer, p);

    this.useDomParser = defaults(p.useDomParser, false);

    this.xml = {
      name: this.name,
      path: this.path,
      data: {}
    };
  }

  if ( Parser$$1 ) XmlParser.__proto__ = Parser$$1;
  XmlParser.prototype = Object.create( Parser$$1 && Parser$$1.prototype );
  XmlParser.prototype.constructor = XmlParser;

  var prototypeAccessors = { type: {},__objName: {} };

  prototypeAccessors.type.get = function () { return 'xml' };
  prototypeAccessors.__objName.get = function () { return 'xml' };

  XmlParser.prototype.__xmlParser = function __xmlParser (xml) {
    return parseXml(xml)
  };

  XmlParser.prototype.__domParser = function __domParser (xml) {
    var domParser = new window.DOMParser();
    return domParser.parseFromString(xml, 'text/xml')
  };

  XmlParser.prototype._parse = function _parse () {
    if (Debug) { Log.time('XmlParser._parse ' + this.name); }

    if (this.useDomParser) {
      if (this.streamer.data instanceof window.Document) {
        this.xml.data = this.streamer.data;
      } else {
        this.xml.data = this.__domParser(this.streamer.asText());
      }
    } else {
      this.xml.data = this.__xmlParser(this.streamer.asText());
    }

    if (Debug) { Log.timeEnd('XmlParser._parse ' + this.name); }
  };

  Object.defineProperties( XmlParser.prototype, prototypeAccessors );

  return XmlParser;
}(Parser));

ParserRegistry.add('xml', XmlParser);

/**
 * @file Validation
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function getSele (a, atomname, useAltcode) {
  var icode = a.icode.value;
  var chain = a.chain.value;
  var altcode = a.altcode.value;
  var sele = a.resnum.value;
  if (icode.trim()) { sele += '^' + icode; }
  if (chain.trim()) { sele += ':' + chain; }
  if (atomname) { sele += '.' + atomname; }
  if (useAltcode && altcode.trim()) { sele += '%' + altcode; }
  sele += '/' + (parseInt(a.model.value) - 1);
  return sele
}

function setBitDict (dict, key, bit) {
  if (dict[ key ] === undefined) {
    dict[ key ] = bit;
  } else {
    dict[ key ] |= bit;
  }
}

function hasAttrValue (attr, value) {
  return attr !== undefined && attr.value === value
}

function getAtomSele (ap) {
  var icode = ap.inscode;
  var chain = ap.chainname;
  var atomname = ap.atomname;
  var altcode = ap.altloc;
  var sele = ap.resno;
  if (icode) { sele += '^' + icode; }
  if (chain) { sele += ':' + chain; }
  if (atomname) { sele += '.' + atomname; }
  if (altcode) { sele += '%' + altcode; }
  sele += '/' + ap.modelIndex;
  return sele
}

function getProblemCount (clashDict, g, ga) {
  var geoProblemCount = 0;

  var clashes = g.getElementsByTagName('clash');
  for (var j = 0, jl = clashes.length; j < jl; ++j) {
    if (clashDict[ clashes[ j ].attributes.cid.value ]) {
      geoProblemCount += 1;
      break
    }
  }

  var angleOutliers = g.getElementsByTagName('angle-outlier');
  if (angleOutliers.length > 0) {
    geoProblemCount += 1;
  }

  var bondOutliers = g.getElementsByTagName('bond-outlier');
  if (bondOutliers.length > 0) {
    geoProblemCount += 1;
  }

  var planeOutliers = g.getElementsByTagName('plane-outlier');
  if (planeOutliers.length > 0) {
    geoProblemCount += 1;
  }

  if (hasAttrValue(ga.rota, 'OUTLIER')) {
    geoProblemCount += 1;
  }

  if (hasAttrValue(ga.rama, 'OUTLIER')) {
    geoProblemCount += 1;
  }

  if (hasAttrValue(ga.RNApucker, 'outlier')) {
    geoProblemCount += 1;
  }

  return geoProblemCount
}

var Validation = function Validation (name, path) {
  this.name = name;
  this.path = path;

  this.rsrzDict = {};
  this.rsccDict = {};
  this.clashDict = {};
  this.clashArray = [];
  this.geoDict = {};
  this.geoAtomDict = {};
  this.atomDict = {};
  this.clashSele = 'NONE';
};

var prototypeAccessors$30 = { type: {} };

prototypeAccessors$30.type.get = function () { return 'validation' };

Validation.prototype.fromXml = function fromXml (xml) {
  if (Debug) { Log.time('Validation.fromXml'); }

  var rsrzDict = this.rsrzDict;
  var rsccDict = this.rsccDict;
  var clashDict = this.clashDict;
  var clashArray = this.clashArray;
  var geoDict = this.geoDict;
  var geoAtomDict = this.geoAtomDict;
  var atomDict = this.atomDict;

  var groups = xml.getElementsByTagName('ModelledSubgroup');

  var _clashDict = {};
  var clashList = [];

  if (Debug) { Log.time('Validation.fromXml#clashDict'); }

  for (var i = 0, il = groups.length; i < il; ++i) {
    var g = groups[ i ];
    var ga = g.attributes;

    var sele = getSele(ga);
    if (ga.rsrz !== undefined) {
      rsrzDict[ sele ] = parseFloat(ga.rsrz.value);
    }
    if (ga.rscc !== undefined) {
      rsccDict[ sele ] = parseFloat(ga.rscc.value);
    }
    ga.sele = sele;

    var clashes = g.getElementsByTagName('clash');

    for (var j = 0, jl = clashes.length; j < jl; ++j) {
      var ca = clashes[ j ].attributes;
      var atom = ca.atom.value;

      if (guessElement(atom) !== 'H') {
        var cid = ca.cid.value;
        var atomSele = getSele(ga, atom, true);
        atomDict[ atomSele ] = true;

        if (_clashDict[ cid ] === undefined) {
          _clashDict[ cid ] = {
            sele1: atomSele,
            res1: sele
          };
        } else {
          var c = _clashDict[ cid ];
          if (c.res1 !== sele) {
            c.sele2 = atomSele;
            c.res2 = sele;
            clashList.push(c.res1, sele);
            clashDict[ cid ] = c;
            clashArray.push(c);
          }
        }
      }
    }
  }

  if (Debug) { Log.timeEnd('Validation.fromXml#clashDict'); }

  for (var i$1 = 0, il$1 = groups.length; i$1 < il$1; ++i$1) {
    var g$1 = groups[ i$1 ];
    var ga$1 = g$1.attributes;

    var sele$1 = ga$1.sele;
    var isPolymer = ga$1.seq.value !== '.';

    if (isPolymer) {
      var geoProblemCount = getProblemCount(clashDict, g$1, ga$1);
      if (geoProblemCount > 0) {
        geoDict[ sele$1 ] = geoProblemCount;
      }
    } else {
      var clashes$1 = g$1.getElementsByTagName('clash');
      var mogBondOutliers = g$1.getElementsByTagName('mog-bond-outlier');
      var mogAngleOutliers = g$1.getElementsByTagName('mog-angle-outlier');

      if (mogBondOutliers.length > 0 || mogAngleOutliers.length > 0 || clashes$1.length > 0) {
        var atomDict$1 = {};
        geoAtomDict[ sele$1 ] = atomDict$1;

        for (var j$1 = 0, jl$1 = clashes$1.length; j$1 < jl$1; ++j$1) {
          var ca$1 = clashes$1[ j$1 ].attributes;
          if (clashDict[ ca$1.cid.value ]) {
            setBitDict(atomDict$1, ca$1.atom.value, 1);
          }
        }

        for (var j$2 = 0, jl$2 = mogBondOutliers.length; j$2 < jl$2; ++j$2) {
          var mbo = mogBondOutliers[ j$2 ].attributes;
          mbo.atoms.value.split(',').forEach(function (atomname) {
            setBitDict(atomDict$1, atomname, 2);
          });
        }

        for (var j$3 = 0, jl$3 = mogAngleOutliers.length; j$3 < jl$3; ++j$3) {
          var mao = mogAngleOutliers[ j$3 ].attributes;
          mao.atoms.value.split(',').forEach(function (atomname) {
            setBitDict(atomDict$1, atomname, 4);
          });
        }
      }
    }
  }

  this.clashSele = clashList.length ? clashList.join(' OR ') : 'NONE';

  if (Debug) { Log.timeEnd('Validation.fromXml'); }
};

Validation.prototype.getClashData = function getClashData (params) {
  if (Debug) { Log.time('Validation.getClashData'); }

  var p = params || {};

  var s = p.structure;
  var atomSet = s.atomSet;
  var c = new Color(defaults(p.color, '#f0027f'));

  var ap1 = s.getAtomProxy();
  var ap2 = s.getAtomProxy();
  var vDir = new Vector3();
  var vPos1 = new Vector3();
  var vPos2 = new Vector3();

  var clashArray = this.clashArray;
  var n = clashArray.length;

  var position1 = new Float32Array(n * 3);
  var position2 = new Float32Array(n * 3);
  var color = uniformArray3(n, c.r, c.g, c.b);
  var radius = new Float32Array(n);
  var picking = new Float32Array(n);

  if (Debug) { Log.time('Validation.getClashData#atomDict'); }

  var atomDict = this.atomDict;

  s.eachAtom(function (ap) {
    var sele = getAtomSele(ap);
    if (atomDict[ sele ] === true) {
      atomDict[ sele ] = ap.index;
    }
  });

  if (Debug) { Log.timeEnd('Validation.getClashData#atomDict'); }

  var i = 0;

  clashArray.forEach(function (c, idx) {
    ap1.index = atomDict[ c.sele1 ];
    ap2.index = atomDict[ c.sele2 ];

    if (ap1.index === undefined || ap2.index === undefined ||
              !atomSet.isSet(ap1.index, ap2.index)) { return }

    vDir.subVectors(ap2, ap1).setLength(ap1.vdw);
    vPos1.copy(ap1).add(vDir);

    vDir.subVectors(ap1, ap2).setLength(ap2.vdw);
    vPos2.copy(ap2).add(vDir);

    var dHalf = ap1.distanceTo(ap2) / 2;
    var r1 = Math.sqrt(ap1.vdw * ap1.vdw - dHalf * dHalf);
    var r2 = Math.sqrt(ap2.vdw * ap2.vdw - dHalf * dHalf);

    vPos1.toArray(position1, i * 3);
    vPos2.toArray(position2, i * 3);
    radius[ i ] = (r1 + r2) / 2;
    picking[ i ] = idx;

    ++i;
  });

  if (Debug) { Log.timeEnd('Validation.getClashData'); }

  return {
    position1: position1.subarray(0, i * 3),
    position2: position2.subarray(0, i * 3),
    color: color.subarray(0, i * 3),
    color2: color.subarray(0, i * 3),
    radius: radius.subarray(0, i),
    picking: new ClashPicker(picking.subarray(0, i), this, s)
  }
};

Object.defineProperties( Validation.prototype, prototypeAccessors$30 );

/**
 * @file Validation Parser
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var ValidationParser = (function (XmlParser$$1) {
  function ValidationParser (streamer, params) {
    var p = params || {};

    XmlParser$$1.call(this, streamer, p);

    this.useDomParser = true;
    this.validation = new Validation(this.name, this.path);
  }

  if ( XmlParser$$1 ) ValidationParser.__proto__ = XmlParser$$1;
  ValidationParser.prototype = Object.create( XmlParser$$1 && XmlParser$$1.prototype );
  ValidationParser.prototype.constructor = ValidationParser;

  var prototypeAccessors = { __objName: {} };

  prototypeAccessors.__objName.get = function () { return 'validation' };

  ValidationParser.prototype._parse = function _parse () {
    XmlParser$$1.prototype._parse.call(this);

    if (Debug) { Log.time('ValidationParser._parse ' + this.name); }

    this.validation.fromXml(this.xml.data);

    if (Debug) { Log.timeEnd('ValidationParser._parse ' + this.name); }
  };

  Object.defineProperties( ValidationParser.prototype, prototypeAccessors );

  return ValidationParser;
}(XmlParser));

ParserRegistry.add('validation', ValidationParser);

// https://github.com/nodeca/pako
// MIT License, Copyright (c) 2014 by Vitaly Puzrin


// 'use strict';


// var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
//                 (typeof Uint16Array !== 'undefined') &&
//                 (typeof Int32Array !== 'undefined');


function assign(obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
}


// reduce buffer size, avoiding mem copy
function shrinkBuf(buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
}


function arraySet(dest, src, src_offs, len, dest_offs) {
  if (src.subarray && dest.subarray) {
    dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
    return;
  }
  // Fallback to ordinary array
  for (var i = 0; i < len; i++) {
    dest[dest_offs + i] = src[src_offs + i];
  }
}

// Join array of chunks to single array.
function flattenChunks(chunks) {
  var i, l, len, pos, chunk, result;

  // calculate data length
  len = 0;
  for (i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  result = new Uint8Array(len);
  pos = 0;
  for (i = 0, l = chunks.length; i < l; i++) {
    chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
}

// 'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}

// 'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}

// 'use strict';

// See state defs from inflate.js
var BAD$1 = 30;       /* got a data error -- remain here until reset */
var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
// module.exports =
function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE$1;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD$1;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
}

// 'use strict';


// var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS$1 = 852;
var ENOUGH_DISTS$1 = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES$1 = 0;
var LENS$1 = 1;
var DISTS$1 = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

// module.exports =
function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES$1) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS$1) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
    return 1;
  }

  var i = 0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
}

// 'use strict';


// var utils         = require('../utils/common');
// var adler32       = require('./adler32');
// var crc32         = require('./crc32');
// var inflate_fast  = require('./inffast');
// var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var HEAD = 1;       /* i: waiting for magic header */
var FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var TIME = 3;       /* i: waiting for modification time (gzip) */
var OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var EXLEN = 5;      /* i: waiting for extra length (gzip) */
var EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var NAME = 7;       /* i: waiting for end of file name (gzip) */
var COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var HCRC = 9;       /* i: waiting for header crc (gzip) */
var DICTID = 10;    /* i: waiting for dictionary check value */
var DICT = 11;      /* waiting for inflateSetDictionary() call */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var STORED = 14;    /* i: waiting for stored size (length and complement) */
var COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var TABLE = 17;     /* i: waiting for dynamic block table lengths */
var LENLENS = 18;   /* i: waiting for code length code lengths */
var CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var LEN_ = 20;      /* i: same as LEN below, but only first time in */
var LEN = 21;       /* i: waiting for length/lit/eob code */
var LENEXT = 22;    /* i: waiting for length extra bits */
var DIST = 23;      /* i: waiting for distance code */
var DISTEXT = 24;   /* i: waiting for distance extra bits */
var MATCH = 25;     /* o: waiting for output space to copy string */
var LIT = 26;       /* o: waiting for output space to write literal */
var CHECK = 27;     /* i: waiting for 32-bit check value */
var LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var DONE = 29;      /* finished check, done -- remain here until reset */
var BAD = 30;       /* got a data error -- remain here until reset */
var MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
  this.work = new Uint16Array(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix;
var distfix;
// We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new Uint8Array(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

// String encode/decode helpers
// 'use strict';


// var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new Uint8Array(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
function string2buf(str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
}

// Helper (used in 2 places)
function _buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert binary string (typed, when possible)
function binstring2buf(str) {
  var buf = new Uint8Array(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
}


// convert array to string
function buf2string(buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return _buf2binstring(utf16buf, out);
}


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
function utf8border(buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
}

/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH        = 0;
var Z_SYNC_FLUSH      = 2;
var Z_FINISH$1          = 4;
/* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
var Z_OK$1              =  0;
var Z_STREAM_END$1      =  1;
var Z_NEED_DICT$1       =  2;
//export var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR$1       = -5;

// 'use strict';

var messages = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

// 'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

// 'use strict';


function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

// 'use strict';


// var zlib_inflate = require('./zlib/inflate');
// var utils        = require('./utils/common');
// var strings      = require('./utils/strings');
// var c            = require('./zlib/constants');
// var msg          = require('./zlib/messages');
// var ZStream      = require('./zlib/zstream');
// var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) { return new Inflate(options); }

  this.options = assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== Z_OK$1) {
    throw new Error(messages[status]);
  }

  this.header = new GZheader();

  inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var this$1 = this;

  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH$1 : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = inflate(strm, Z_NO_FLUSH);    /* no bad return value */

    if (status === Z_NEED_DICT$1 && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = inflateSetDictionary(this$1.strm, dict);

    }

    if (status === Z_BUF_ERROR$1 && allowBufError === true) {
      status = Z_OK$1;
      allowBufError = false;
    }

    if (status !== Z_STREAM_END$1 && status !== Z_OK$1) {
      this$1.onEnd(status);
      this$1.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END$1 || (strm.avail_in === 0 && (_mode === Z_FINISH$1 || _mode === Z_SYNC_FLUSH))) {

        if (this$1.options.to === 'string') {

          next_out_utf8 = utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this$1.onData(utf8str);

        } else {
          this$1.onData(shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$1);

  if (status === Z_STREAM_END$1) {
    _mode = Z_FINISH$1;
  }

  // Finalize on the last chunk.
  if (_mode === Z_FINISH$1) {
    status = inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK$1;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK$1);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$1) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function doInflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg; }

  return inflator.result;
}

/**
 * @file Gzip Decompressor
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function gzipDecompress (data) {
  var decompressedData;

  if (data instanceof ArrayBuffer) {
    data = new Uint8Array(data);
  }

  try {
    decompressedData = doInflate(data);
  } catch (e) {
    decompressedData = data;  // assume it is already uncompressed
  }

  return decompressedData
}

DecompressorRegistry.add('gz', gzipDecompress);

/**
 * @file RCSB Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var baseUrl$1 = '//files.rcsb.org/download/';
var mmtfBaseUrl = '//mmtf.rcsb.org/v1.0/';
var mmtfFullUrl = mmtfBaseUrl + 'full/';
var mmtfReducedUrl = mmtfBaseUrl + 'reduced/';

function RcsbDatasource () {
  this.getUrl = function (src) {
        // valid path are
        // XXXX.pdb, XXXX.pdb.gz, XXXX.cif, XXXX.cif.gz, XXXX.mmtf, XXXX.bb.mmtf
        // XXXX defaults to XXXX.cif
    var info = getFileInfo(src);
    var pdbid = info.name.substr(0, 4);
    var url;
    if ([ 'pdb', 'cif' ].includes(info.ext) &&
            (info.compressed === false || info.compressed === 'gz')
        ) {
      url = baseUrl$1 + info.path;
    } else if (info.ext === 'mmtf') {
      if (info.base.endsWith('.bb')) {
        url = mmtfReducedUrl + pdbid;
      } else {
        url = mmtfFullUrl + pdbid;
      }
    } else if (!info.ext) {
      url = mmtfFullUrl + pdbid;
    } else {
      Log.warn('unsupported ext', info.ext);
      url = mmtfFullUrl + pdbid;
    }
    return getProtocol() + url
  };

  this.getExt = function (src) {
    var info = getFileInfo(src);
    if (info.ext === 'mmtf' || !info.ext) {
      return 'mmtf'
    }
  };
}

DatasourceRegistry.add('rcsb', new RcsbDatasource());

/**
 * @file PubChem Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var baseUrl$2 = '//pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/';
var suffixUrl = '/SDF?record_type=3d';

function PubchemDatasource () {
  this.getUrl = function (src) {
    var info = getFileInfo(src);
    var cid = info.name;
    var url;
    if (!info.ext || info.ext === 'sdf') {
      url = baseUrl$2 + cid + suffixUrl;
    } else {
      Log.warn('unsupported ext', info.ext);
      url = baseUrl$2 + cid + suffixUrl;
    }
    return getProtocol() + url
  };

  this.getExt = function (src) {
    var info = getFileInfo(src);
    if (!info.ext || info.ext === 'sdf') {
      return 'sdf'
    }
  };
}

DatasourceRegistry.add('pubchem', new PubchemDatasource());

/**
 * @file Pass Through Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

function PassThroughDatasource () {
  this.getUrl = function (path) {
    return path
  };
}

DatasourceRegistry.add('ftp', new PassThroughDatasource());
DatasourceRegistry.add('http', new PassThroughDatasource());
DatasourceRegistry.add('https', new PassThroughDatasource());

/**
 * @file Static Datasource
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 * @private
 */

var reProtocol = /^((http|https|ftp):)*\/\//;

function StaticDatasource (baseUrl) {
  baseUrl = baseUrl || '';

  this.getUrl = function (src) {
    var info = getFileInfo(src);
    var url = baseUrl + info.path;
    if (!reProtocol.test(baseUrl)) {
      url = getAbsolutePath(url);
    }
    return url
  };
}

var version$1 = "0.10.4";

/**
 * @file Version
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */

/**
 * Version name
 * @type {String}
 */
var Version = version$1;

/**
 * @file ngl
 * @private
 * @author Alexander Rose <alexander.rose@weirdbyte.de>
 */

/**
 * The NGL module. These members are available in the `NGL` namespace when using the {@link https://github.com/umdjs/umd|UMD} build in the `ngl.js` file.
 * @module NGL
 */

//

//

//

//

//

//

//

//

//

//

if (typeof window !== 'undefined' && !window.Promise) {
  window.Promise = Promise$1;
}

export { Version, Debug, setDebug, DatasourceRegistry, StaticDatasource, ParserRegistry, autoLoad, RepresentationRegistry, ColormakerRegistry, Colormaker, Selection, PdbWriter, Stage, Collection, ComponentCollection, RepresentationCollection, Assembly, TrajectoryPlayer, superpose, guessElement, Queue, Counter, throttle, download, getQuery, getDataInfo, getFileInfo, uniqueArray, BufferRepresentation, SphereBuffer, EllipsoidBuffer, CylinderBuffer, ConeBuffer, ArrowBuffer, TextBuffer, Shape$1 as Shape, Kdtree, SpatialHash, MolecularSurface, LeftMouseButton, MiddleMouseButton, RightMouseButton, MouseActions, Signal, Matrix3, Matrix4, Vector2, Vector3, Box3, Quaternion, Euler, Plane, Color };
//# sourceMappingURL=ngl.esm.js.map
